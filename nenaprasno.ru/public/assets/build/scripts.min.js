!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t,n){t=t||ae;var i,o=t.createElement("script");if(o.text=e,n)for(i in we)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function i(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?pe[fe.call(e)]||"object":typeof e}function o(e){var t=!!e&&"length"in e&&e.length,n=i(e);return!ye(e)&&!be(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function a(e,t,n){return ye(t)?xe.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?xe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?xe.grep(e,function(e){return ue.call(t,e)>-1!==n}):xe.filter(t,e,n)}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function l(e){var t={};return xe.each(e.match(Oe)||[],function(e,n){t[n]=!0}),t}function c(e){return e}function d(e){throw e}function u(e,t,n,i){var o;try{e&&ye(o=e.promise)?o.call(e).done(t).fail(n):e&&ye(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function p(){ae.removeEventListener("DOMContentLoaded",p),e.removeEventListener("load",p),xe.ready()}function f(e,t){return t.toUpperCase()}function h(e){return e.replace(He,"ms-").replace(Ne,f)}function g(){this.expando=xe.expando+g.uid++}function m(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ze.test(e)?JSON.parse(e):e)}function v(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(We,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=m(n)}catch(e){}Re.set(e,t,n)}else n=void 0;return n}function y(e,t,n,i){var o,r,a=20,s=i?function(){return i.cur()}:function(){return xe.css(e,t,"")},l=s(),c=n&&n[3]||(xe.cssNumber[t]?"":"px"),d=(xe.cssNumber[t]||"px"!==c&&+l)&&Be.exec(xe.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;a--;)xe.style(e,t,d+c),(1-r)*(1-(r=s()/l||.5))<=0&&(a=0),d/=r;d*=2,xe.style(e,t,d+c),n=n||[]}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=o)),o}function b(e){var t,n=e.ownerDocument,i=e.nodeName,o=Ve[i];return o||(t=n.body.appendChild(n.createElement(i)),o=xe.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),Ve[i]=o,o)}function w(e,t){for(var n,i,o=[],r=0,a=e.length;r<a;r++)i=e[r],i.style&&(n=i.style.display,t?("none"===n&&(o[r]=qe.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&Ue(i)&&(o[r]=b(i))):"none"!==n&&(o[r]="none",qe.set(i,"display",n)));for(r=0;r<a;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}function x(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?xe.merge([e],n):n}function C(e,t){for(var n=0,i=e.length;n<i;n++)qe.set(e[n],"globalEval",!t||qe.get(t[n],"globalEval"))}function k(e,t,n,o,r){for(var a,s,l,c,d,u,p=t.createDocumentFragment(),f=[],h=0,g=e.length;h<g;h++)if((a=e[h])||0===a)if("object"===i(a))xe.merge(f,a.nodeType?[a]:a);else if(Je.test(a)){for(s=s||p.appendChild(t.createElement("div")),l=(Ge.exec(a)||["",""])[1].toLowerCase(),c=Ke[l]||Ke._default,s.innerHTML=c[1]+xe.htmlPrefilter(a)+c[2],u=c[0];u--;)s=s.lastChild;xe.merge(f,s.childNodes),s=p.firstChild,s.textContent=""}else f.push(t.createTextNode(a));for(p.textContent="",h=0;a=f[h++];)if(o&&xe.inArray(a,o)>-1)r&&r.push(a);else if(d=xe.contains(a.ownerDocument,a),s=x(p.appendChild(a),"script"),d&&C(s),n)for(u=0;a=s[u++];)Qe.test(a.type||"")&&n.push(a);return p}function T(){return!0}function S(){return!1}function E(){try{return ae.activeElement}catch(e){}}function D(e,t,n,i,o,r){var a,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)D(e,s,n,i,t[s],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=S;else if(!o)return e;return 1===r&&(a=o,o=function(e){return xe().off(e),a.apply(this,arguments)},o.guid=a.guid||(a.guid=xe.guid++)),e.each(function(){xe.event.add(this,t,o,i,n)})}function $(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?xe(e).children("tbody")[0]||e:e}function M(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function P(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function A(e,t){var n,i,o,r,a,s,l,c;if(1===t.nodeType){if(qe.hasData(e)&&(r=qe.access(e),a=qe.set(t,r),c=r.events)){delete a.handle,a.events={};for(o in c)for(n=0,i=c[o].length;n<i;n++)xe.event.add(t,o,c[o][n])}Re.hasData(e)&&(s=Re.access(e),l=xe.extend({},s),Re.set(t,l))}}function O(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ze.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function L(e,t,i,o){t=ce.apply([],t);var r,a,s,l,c,d,u=0,p=e.length,f=p-1,h=t[0],g=ye(h);if(g||p>1&&"string"==typeof h&&!ve.checkClone&&at.test(h))return e.each(function(n){var r=e.eq(n);g&&(t[0]=h.call(this,n,r.html())),L(r,t,i,o)});if(p&&(r=k(t,e[0].ownerDocument,!1,e,o),a=r.firstChild,1===r.childNodes.length&&(r=a),a||o)){for(s=xe.map(x(r,"script"),M),l=s.length;u<p;u++)c=r,u!==f&&(c=xe.clone(c,!0,!0),l&&xe.merge(s,x(c,"script"))),i.call(e[u],c,u);if(l)for(d=s[s.length-1].ownerDocument,xe.map(s,P),u=0;u<l;u++)c=s[u],Qe.test(c.type||"")&&!qe.access(c,"globalEval")&&xe.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?xe._evalUrl&&xe._evalUrl(c.src):n(c.textContent.replace(st,""),d,c))}return e}function I(e,t,n){for(var i,o=t?xe.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||xe.cleanData(x(i)),i.parentNode&&(n&&xe.contains(i.ownerDocument,i)&&C(x(i,"script")),i.parentNode.removeChild(i));return e}function j(e,t,n){var i,o,r,a,s=e.style;return n=n||ct(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||xe.contains(e.ownerDocument,e)||(a=xe.style(e,t)),!ve.pixelBoxStyles()&&lt.test(a)&&dt.test(t)&&(i=s.width,o=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=o,s.maxWidth=r)),void 0!==a?a+"":a}function H(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function N(e){if(e in mt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=gt.length;n--;)if((e=gt[n]+t)in mt)return e}function F(e){var t=xe.cssProps[e];return t||(t=xe.cssProps[e]=N(e)||e),t}function q(e,t,n){var i=Be.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function R(e,t,n,i,o,r){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=xe.css(e,n+Ye[a],!0,o)),i?("content"===n&&(l-=xe.css(e,"padding"+Ye[a],!0,o)),"margin"!==n&&(l-=xe.css(e,"border"+Ye[a]+"Width",!0,o))):(l+=xe.css(e,"padding"+Ye[a],!0,o),"padding"!==n?l+=xe.css(e,"border"+Ye[a]+"Width",!0,o):s+=xe.css(e,"border"+Ye[a]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-s-.5))),l}function z(e,t,n){var i=ct(e),o=j(e,t,i),r="border-box"===xe.css(e,"boxSizing",!1,i),a=r;if(lt.test(o)){if(!n)return o;o="auto"}return a=a&&(ve.boxSizingReliable()||o===e.style[t]),("auto"===o||!parseFloat(o)&&"inline"===xe.css(e,"display",!1,i))&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(o=parseFloat(o)||0)+R(e,t,n||(r?"border":"content"),a,i,o)+"px"}function W(e,t,n,i,o){return new W.prototype.init(e,t,n,i,o)}function _(){yt&&(!1===ae.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(_):e.setTimeout(_,xe.fx.interval),xe.fx.tick())}function B(){return e.setTimeout(function(){vt=void 0}),vt=Date.now()}function Y(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)n=Ye[i],o["margin"+n]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function U(e,t,n){for(var i,o=(Z.tweeners[t]||[]).concat(Z.tweeners["*"]),r=0,a=o.length;r<a;r++)if(i=o[r].call(n,t,e))return i}function X(e,t,n){var i,o,r,a,s,l,c,d,u="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&Ue(e),m=qe.get(e,"fxshow");n.queue||(a=xe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,xe.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(o=t[i],bt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||xe.style(e,i)}if((l=!xe.isEmptyObject(t))||!xe.isEmptyObject(f)){u&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=m&&m.display,null==c&&(c=qe.get(e,"display")),d=xe.css(e,"display"),"none"===d&&(c?d=c:(w([e],!0),c=e.style.display||c,d=xe.css(e,"display"),w([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===xe.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in f)l||(m?"hidden"in m&&(g=m.hidden):m=qe.access(e,"fxshow",{display:c}),r&&(m.hidden=!g),g&&w([e],!0),p.done(function(){g||w([e]),qe.remove(e,"fxshow");for(i in f)xe.style(e,i,f[i])})),l=U(g?m[i]:0,i,p),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function V(e,t){var n,i,o,r,a;for(n in e)if(i=h(n),o=t[i],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(a=xe.cssHooks[i])&&"expand"in a){r=a.expand(r),delete e[i];for(n in r)n in e||(e[n]=r[n],t[n]=o)}else t[i]=o}function Z(e,t,n){var i,o,r=0,a=Z.prefilters.length,s=xe.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=vt||B(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,r=1-i,a=0,l=c.tweens.length;a<l;a++)c.tweens[a].run(r);return s.notifyWith(e,[c,r,n]),r<1&&l?n:(l||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:xe.extend({},t),opts:xe.extend(!0,{specialEasing:{},easing:xe.easing._default},n),originalProperties:t,originalOptions:n,startTime:vt||B(),duration:n.duration,tweens:[],createTween:function(t,n){var i=xe.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),d=c.props;for(V(d,c.opts.specialEasing);r<a;r++)if(i=Z.prefilters[r].call(c,e,d,c.opts))return ye(i.stop)&&(xe._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return xe.map(d,U,c),ye(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),xe.fx.timer(xe.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function G(e){return(e.match(Oe)||[]).join(" ")}function Q(e){return e.getAttribute&&e.getAttribute("class")||""}function K(e){return Array.isArray(e)?e:"string"==typeof e?e.match(Oe)||[]:[]}function J(e,t,n,o){var r;if(Array.isArray(t))xe.each(t,function(t,i){n||At.test(e)?o(e,i):J(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,o)});else if(n||"object"!==i(t))o(e,t);else for(r in t)J(e+"["+r+"]",t[r],n,o)}function ee(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(Oe)||[];if(ye(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function te(e,t,n,i){function o(s){var l;return r[s]=!0,xe.each(e[s]||[],function(e,s){var c=s(t,n,i);return"string"!=typeof c||a||r[c]?a?!(l=c):void 0:(t.dataTypes.unshift(c),o(c),!1)}),l}var r={},a=e===_t;return o(t.dataTypes[0])||!r["*"]&&o("*")}function ne(e,t){var n,i,o=xe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&xe.extend(!0,e,i),e}function ie(e,t,n){for(var i,o,r,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}a||(a=o)}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}function oe(e,t,n,i){var o,r,a,s,l,c={},d=e.dataTypes.slice();if(d[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=c[l+" "+r]||c["* "+r]))for(o in c)if(s=o.split(" "),s[1]===r&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(r=s[0],d.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}var re=[],ae=e.document,se=Object.getPrototypeOf,le=re.slice,ce=re.concat,de=re.push,ue=re.indexOf,pe={},fe=pe.toString,he=pe.hasOwnProperty,ge=he.toString,me=ge.call(Object),ve={},ye=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},be=function(e){return null!=e&&e===e.window},we={type:!0,src:!0,noModule:!0},xe=function(e,t){return new xe.fn.init(e,t)},Ce=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;xe.fn=xe.prototype={jquery:"3.3.1",constructor:xe,length:0,toArray:function(){return le.call(this)},get:function(e){return null==e?le.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=xe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return xe.each(this,e)},map:function(e){return this.pushStack(xe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(le.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:de,sort:re.sort,splice:re.splice},xe.extend=xe.fn.extend=function(){var e,t,n,i,o,r,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||ye(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],i=e[t],a!==i&&(c&&i&&(xe.isPlainObject(i)||(o=Array.isArray(i)))?(o?(o=!1,r=n&&Array.isArray(n)?n:[]):r=n&&xe.isPlainObject(n)?n:{},a[t]=xe.extend(c,r,i)):void 0!==i&&(a[t]=i));return a},xe.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==fe.call(e))&&(!(t=se(e))||"function"==typeof(n=he.call(t,"constructor")&&t.constructor)&&ge.call(n)===me)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){n(e)},each:function(e,t){var n,i=0;if(o(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(Ce,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(o(Object(e))?xe.merge(n,"string"==typeof e?[e]:e):de.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ue.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,a=!n;o<r;o++)!t(e[o],o)!==a&&i.push(e[o]);return i},map:function(e,t,n){var i,r,a=0,s=[];if(o(e))for(i=e.length;a<i;a++)null!=(r=t(e[a],a,n))&&s.push(r);else for(a in e)null!=(r=t(e[a],a,n))&&s.push(r);return ce.apply([],s)},guid:1,support:ve}),"function"==typeof Symbol&&(xe.fn[Symbol.iterator]=re[Symbol.iterator]),xe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){pe["[object "+t+"]"]=t.toLowerCase()});var ke=function(e){function t(e,t,n,i){var o,r,a,s,l,d,p,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!i&&((t?t.ownerDocument||t:q)!==A&&P(t),t=t||A,L)){if(11!==h&&(l=ge.exec(e)))if(o=l[1]){if(9===h){if(!(a=t.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(f&&(a=f.getElementById(o))&&N(t,a)&&a.id===o)return n.push(a),n}else{if(l[2])return G.apply(n,t.getElementsByTagName(e)),n;if((o=l[3])&&w.getElementsByClassName&&t.getElementsByClassName)return G.apply(n,t.getElementsByClassName(o)),n}if(w.qsa&&!B[e+" "]&&(!I||!I.test(e))){if(1!==h)f=t,p=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,we):t.setAttribute("id",s=F),d=T(e),r=d.length;r--;)d[r]="#"+s+" "+u(d[r]);p=d.join(","),f=me.test(e)&&c(t.parentNode)||t}if(p)try{return G.apply(n,f.querySelectorAll(p)),n}catch(e){}finally{s===F&&t.removeAttribute("id")}}}return E(e.replace(re,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[F]=!0,e}function o(e){var t=A.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var o,r=e([],n.length,t),a=r.length;a--;)n[o=r[a]]&&(n[o]=!(i[o]=n[o]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function d(){}function u(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function p(e,t,n){var i=t.dir,o=t.next,r=o||i,a=n&&"parentNode"===r,s=z++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,l){var c,d,u,p=[R,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(u=t[F]||(t[F]={}),d=u[t.uniqueID]||(u[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=d[r])&&c[0]===R&&c[1]===s)return p[2]=c[2];if(d[r]=p,p[2]=e(t,n,l))return!0}return!1}}function f(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function h(e,n,i){for(var o=0,r=n.length;o<r;o++)t(e,n[o],i);return i}function g(e,t,n,i,o){for(var r,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(r=e[s])&&(n&&!n(r,i,o)||(a.push(r),c&&t.push(s)));return a}function m(e,t,n,o,r,a){return o&&!o[F]&&(o=m(o)),r&&!r[F]&&(r=m(r,a)),i(function(i,a,s,l){var c,d,u,p=[],f=[],m=a.length,v=i||h(t||"*",s.nodeType?[s]:s,[]),y=!e||!i&&t?v:g(v,p,e,s,l),b=n?r||(i?e:m||o)?[]:a:y;if(n&&n(y,b,s,l),o)for(c=g(b,f),o(c,[],s,l),d=c.length;d--;)(u=c[d])&&(b[f[d]]=!(y[f[d]]=u));if(i){if(r||e){if(r){for(c=[],d=b.length;d--;)(u=b[d])&&c.push(y[d]=u);r(null,b=[],c,l)}for(d=b.length;d--;)(u=b[d])&&(c=r?K(i,u):p[d])>-1&&(i[c]=!(a[c]=u))}}else b=g(b===a?b.splice(m,b.length):b),r?r(null,a,b,l):G.apply(a,b)})}function v(e){for(var t,n,i,o=e.length,r=x.relative[e[0].type],a=r||x.relative[" "],s=r?1:0,l=p(function(e){return e===t},a,!0),c=p(function(e){return K(t,e)>-1},a,!0),d=[function(e,n,i){var o=!r&&(i||n!==D)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,o}];s<o;s++)if(n=x.relative[e[s].type])d=[p(f(d),n)];else{if(n=x.filter[e[s].type].apply(null,e[s].matches),n[F]){for(i=++s;i<o&&!x.relative[e[i].type];i++);return m(s>1&&f(d),s>1&&u(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(re,"$1"),n,s<i&&v(e.slice(s,i)),i<o&&v(e=e.slice(i)),i<o&&u(e))}d.push(n)}return f(d)}function y(e,n){var o=n.length>0,r=e.length>0,a=function(i,a,s,l,c){var d,u,p,f=0,h="0",m=i&&[],v=[],y=D,b=i||r&&x.find.TAG("*",c),w=R+=null==y?1:Math.random()||.1,C=b.length;for(c&&(D=a===A||a||c);h!==C&&null!=(d=b[h]);h++){if(r&&d){for(u=0,a||d.ownerDocument===A||(P(d),s=!L);p=e[u++];)if(p(d,a||A,s)){l.push(d);break}c&&(R=w)}o&&((d=!p&&d)&&f--,i&&m.push(d))}if(f+=h,o&&h!==f){for(u=0;p=n[u++];)p(m,v,a,s);if(i){if(f>0)for(;h--;)m[h]||v[h]||(v[h]=V.call(l));v=g(v)}G.apply(l,v),c&&!i&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return c&&(R=w,D=y),m};return o?i(a):a}var b,w,x,C,k,T,S,E,D,$,M,P,A,O,L,I,j,H,N,F="sizzle"+1*new Date,q=e.document,R=0,z=0,W=n(),_=n(),B=n(),Y=function(e,t){return e===t&&(M=!0),0},U={}.hasOwnProperty,X=[],V=X.pop,Z=X.push,G=X.push,Q=X.slice,K=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",oe=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),de=new RegExp("^"+te+"$"),ue={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,we=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){P()},Ce=p(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{G.apply(X=Q.call(q.childNodes),q.childNodes),X[q.childNodes.length].nodeType}catch(e){G={apply:X.length?function(e,t){Z.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},P=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:q;return i!==A&&9===i.nodeType&&i.documentElement?(A=i,O=A.documentElement,L=!k(A),q!==A&&(n=A.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),w.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=o(function(e){return e.appendChild(A.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=he.test(A.getElementsByClassName),w.getById=o(function(e){return O.appendChild(e).id=F,!A.getElementsByName||!A.getElementsByName(F).length}),w.getById?(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),x.find.TAG=w.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},x.find.CLASS=w.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&L)return t.getElementsByClassName(e)},j=[],I=[],(w.qsa=he.test(A.querySelectorAll))&&(o(function(e){O.appendChild(e).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+F+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+F+"+*").length||I.push(".#.+[+~]")}),o(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=A.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),O.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(w.matchesSelector=he.test(H=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&o(function(e){w.disconnectedMatch=H.call(e,"*"),H.call(e,"[s!='']:x"),j.push("!=",ie)}),I=I.length&&new RegExp(I.join("|")),j=j.length&&new RegExp(j.join("|")),t=he.test(O.compareDocumentPosition),N=t||he.test(O.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return M=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===A||e.ownerDocument===q&&N(q,e)?-1:t===A||t.ownerDocument===q&&N(q,t)?1:$?K($,e)-K($,t):0:4&n?-1:1)}:function(e,t){if(e===t)return M=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],l=[t];if(!o||!r)return e===A?-1:t===A?1:o?-1:r?1:$?K($,e)-K($,t):0;if(o===r)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[i]===l[i];)i++;return i?a(s[i],l[i]):s[i]===q?-1:l[i]===q?1:0},A):A},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==A&&P(e),n=n.replace(le,"='$1']"),w.matchesSelector&&L&&!B[n+" "]&&(!j||!j.test(n))&&(!I||!I.test(n)))try{var i=H.call(e,n);if(i||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,A,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==A&&P(e),N(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==A&&P(e);var n=x.attrHandle[t.toLowerCase()],i=n&&U.call(x.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==i?i:w.attributes||!L?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,we)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,o=0;if(M=!w.detectDuplicates,$=!w.sortStable&&e.slice(0),e.sort(Y),M){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return $=null,e},C=t.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=C(t);return n},x=t.selectors={cacheLength:50,createPseudo:i,match:ue,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return ue.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(o){var r=t.attr(o,e);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(oe," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,d,u,p,f,h,g=r!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(r){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(p=m,u=p[F]||(p[F]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),c=d[e]||[],f=c[0]===R&&c[1],b=f&&c[2],p=f&&m.childNodes[f];p=++f&&p&&p[g]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){d[e]=[R,f,b];break}}else if(y&&(p=t,u=p[F]||(p[F]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),c=d[e]||[],f=c[0]===R&&c[1],b=f),!1===b)for(;(p=++f&&p&&p[g]||(b=f=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&(u=p[F]||(p[F]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),d[e]=[R,b]),p!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var o,r=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[F]?r(n):r.length>1?(o=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,o=r(e,n),a=o.length;a--;)i=K(e,o[a]),e[i]=!(t[i]=o[a])}):function(e){return r(e,0,o)}):r}},pseudos:{not:i(function(e){var t=[],n=[],o=S(e.replace(re,"$1"));return o[F]?i(function(e,t,n,i){for(var r,a=o(e,null,i,[]),s=e.length;s--;)(r=a[s])&&(e[s]=!(t[s]=r))}):function(e,i,r){return t[0]=e,o(t,null,r,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:i(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===O},focus:function(e){return e===A.activeElement&&(!A.hasFocus||A.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},
empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return d.prototype=x.filters=x.pseudos,x.setFilters=new d,T=t.tokenize=function(e,n){var i,o,r,a,s,l,c,d=_[e+" "];if(d)return n?0:d.slice(0);for(s=e,l=[],c=x.preFilter;s;){i&&!(o=ae.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(r=[])),i=!1,(o=se.exec(s))&&(i=o.shift(),r.push({value:i,type:o[0].replace(re," ")}),s=s.slice(i.length));for(a in x.filter)!(o=ue[a].exec(s))||c[a]&&!(o=c[a](o))||(i=o.shift(),r.push({value:i,type:a,matches:o}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):_(e,l).slice(0)},S=t.compile=function(e,t){var n,i=[],o=[],r=B[e+" "];if(!r){for(t||(t=T(e)),n=t.length;n--;)r=v(t[n]),r[F]?i.push(r):o.push(r);r=B(e,y(o,i)),r.selector=e}return r},E=t.select=function(e,t,n,i){var o,r,a,s,l,d="function"==typeof e&&e,p=!i&&T(e=d.selector||e);if(n=n||[],1===p.length){if(r=p[0]=p[0].slice(0),r.length>2&&"ID"===(a=r[0]).type&&9===t.nodeType&&L&&x.relative[r[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(ve,ye),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=ue.needsContext.test(e)?0:r.length;o--&&(a=r[o],!x.relative[s=a.type]);)if((l=x.find[s])&&(i=l(a.matches[0].replace(ve,ye),me.test(r[0].type)&&c(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&u(r)))return G.apply(n,i),n;break}}return(d||S(e,p))(i,t,!L,n,!t||me.test(e)&&c(t.parentNode)||t),n},w.sortStable=F.split("").sort(Y).join("")===F,w.detectDuplicates=!!M,P(),w.sortDetached=o(function(e){return 1&e.compareDocumentPosition(A.createElement("fieldset"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);xe.find=ke,xe.expr=ke.selectors,xe.expr[":"]=xe.expr.pseudos,xe.uniqueSort=xe.unique=ke.uniqueSort,xe.text=ke.getText,xe.isXMLDoc=ke.isXML,xe.contains=ke.contains,xe.escapeSelector=ke.escape;var Te=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&xe(e).is(n))break;i.push(e)}return i},Se=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ee=xe.expr.match.needsContext,De=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;xe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?xe.find.matchesSelector(i,e)?[i]:[]:xe.find.matches(e,xe.grep(t,function(e){return 1===e.nodeType}))},xe.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(xe(e).filter(function(){for(t=0;t<i;t++)if(xe.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)xe.find(e,o[t],n);return i>1?xe.uniqueSort(n):n},filter:function(e){return this.pushStack(a(this,e||[],!1))},not:function(e){return this.pushStack(a(this,e||[],!0))},is:function(e){return!!a(this,"string"==typeof e&&Ee.test(e)?xe(e):e||[],!1).length}});var $e,Me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(xe.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||$e,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Me.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof xe?t[0]:t,xe.merge(this,xe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ae,!0)),De.test(i[1])&&xe.isPlainObject(t))for(i in t)ye(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return o=ae.getElementById(i[2]),o&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ye(e)?void 0!==n.ready?n.ready(e):e(xe):xe.makeArray(e,this)}).prototype=xe.fn,$e=xe(ae);var Pe=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};xe.fn.extend({has:function(e){var t=xe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(xe.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],a="string"!=typeof e&&xe(e);if(!Ee.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&xe.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?xe.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?ue.call(xe(e),this[0]):ue.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(xe.uniqueSort(xe.merge(this.get(),xe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),xe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Te(e,"parentNode")},parentsUntil:function(e,t,n){return Te(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return Te(e,"nextSibling")},prevAll:function(e){return Te(e,"previousSibling")},nextUntil:function(e,t,n){return Te(e,"nextSibling",n)},prevUntil:function(e,t,n){return Te(e,"previousSibling",n)},siblings:function(e){return Se((e.parentNode||{}).firstChild,e)},children:function(e){return Se(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),xe.merge([],e.childNodes))}},function(e,t){xe.fn[e]=function(n,i){var o=xe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=xe.filter(i,o)),this.length>1&&(Ae[e]||xe.uniqueSort(o),Pe.test(e)&&o.reverse()),this.pushStack(o)}});var Oe=/[^\x20\t\r\n\f]+/g;xe.Callbacks=function(e){e="string"==typeof e?l(e):xe.extend({},e);var t,n,o,r,a=[],s=[],c=-1,d=function(){for(r=r||e.once,o=t=!0;s.length;c=-1)for(n=s.shift();++c<a.length;)!1===a[c].apply(n[0],n[1])&&e.stopOnFalse&&(c=a.length,n=!1);e.memory||(n=!1),t=!1,r&&(a=n?[]:"")},u={add:function(){return a&&(n&&!t&&(c=a.length-1,s.push(n)),function t(n){xe.each(n,function(n,o){ye(o)?e.unique&&u.has(o)||a.push(o):o&&o.length&&"string"!==i(o)&&t(o)})}(arguments),n&&!t&&d()),this},remove:function(){return xe.each(arguments,function(e,t){for(var n;(n=xe.inArray(t,a,n))>-1;)a.splice(n,1),n<=c&&c--}),this},has:function(e){return e?xe.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return r=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return r=s=[],n||t||(a=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||d()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!o}};return u},xe.extend({Deferred:function(t){var n=[["notify","progress",xe.Callbacks("memory"),xe.Callbacks("memory"),2],["resolve","done",xe.Callbacks("once memory"),xe.Callbacks("once memory"),0,"resolved"],["reject","fail",xe.Callbacks("once memory"),xe.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return xe.Deferred(function(t){xe.each(n,function(n,i){var o=ye(e[i[4]])&&e[i[4]];r[i[1]](function(){var e=o&&o.apply(this,arguments);e&&ye(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(t,i,o){function r(t,n,i,o){return function(){var s=this,l=arguments,u=function(){var e,u;if(!(t<a)){if((e=i.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");u=e&&("object"==typeof e||"function"==typeof e)&&e.then,ye(u)?o?u.call(e,r(a,n,c,o),r(a,n,d,o)):(a++,u.call(e,r(a,n,c,o),r(a,n,d,o),r(a,n,c,n.notifyWith))):(i!==c&&(s=void 0,l=[e]),(o||n.resolveWith)(s,l))}},p=o?u:function(){try{u()}catch(e){xe.Deferred.exceptionHook&&xe.Deferred.exceptionHook(e,p.stackTrace),t+1>=a&&(i!==d&&(s=void 0,l=[e]),n.rejectWith(s,l))}};t?p():(xe.Deferred.getStackHook&&(p.stackTrace=xe.Deferred.getStackHook()),e.setTimeout(p))}}var a=0;return xe.Deferred(function(e){n[0][3].add(r(0,e,ye(o)?o:c,e.notifyWith)),n[1][3].add(r(0,e,ye(t)?t:c)),n[2][3].add(r(0,e,ye(i)?i:d))}).promise()},promise:function(e){return null!=e?xe.extend(e,o):o}},r={};return xe.each(n,function(e,t){var a=t[2],s=t[5];o[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=a.fireWith}),o.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=le.call(arguments),r=xe.Deferred(),a=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?le.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(u(e,r.done(a(n)).resolve,r.reject,!t),"pending"===r.state()||ye(o[n]&&o[n].then)))return r.then();for(;n--;)u(o[n],a(n),r.reject);return r.promise()}});var Le=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;xe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Le.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},xe.readyException=function(t){e.setTimeout(function(){throw t})};var Ie=xe.Deferred();xe.fn.ready=function(e){return Ie.then(e).catch(function(e){xe.readyException(e)}),this},xe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--xe.readyWait:xe.isReady)||(xe.isReady=!0,!0!==e&&--xe.readyWait>0||Ie.resolveWith(ae,[xe]))}}),xe.ready.then=Ie.then,"complete"===ae.readyState||"loading"!==ae.readyState&&!ae.documentElement.doScroll?e.setTimeout(xe.ready):(ae.addEventListener("DOMContentLoaded",p),e.addEventListener("load",p));var je=function(e,t,n,o,r,a,s){var l=0,c=e.length,d=null==n;if("object"===i(n)){r=!0;for(l in n)je(e,t,l,n[l],!0,a,s)}else if(void 0!==o&&(r=!0,ye(o)||(s=!0),d&&(s?(t.call(e,o),t=null):(d=t,t=function(e,t,n){return d.call(xe(e),n)})),t))for(;l<c;l++)t(e[l],n,s?o:o.call(e[l],l,t(e[l],n)));return r?e:d?t.call(e):c?t(e[0],n):a},He=/^-ms-/,Ne=/-([a-z])/g,Fe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};g.uid=1,g.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Fe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[h(t)]=n;else for(i in t)o[h(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][h(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(h):(t=h(t),t=t in i?[t]:t.match(Oe)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||xe.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!xe.isEmptyObject(t)}};var qe=new g,Re=new g,ze=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,We=/[A-Z]/g;xe.extend({hasData:function(e){return Re.hasData(e)||qe.hasData(e)},data:function(e,t,n){return Re.access(e,t,n)},removeData:function(e,t){Re.remove(e,t)},_data:function(e,t,n){return qe.access(e,t,n)},_removeData:function(e,t){qe.remove(e,t)}}),xe.fn.extend({data:function(e,t){var n,i,o,r=this[0],a=r&&r.attributes;if(void 0===e){if(this.length&&(o=Re.get(r),1===r.nodeType&&!qe.get(r,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=h(i.slice(5)),v(r,i,o[i])));qe.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Re.set(this,e)}):je(this,function(t){var n;if(r&&void 0===t){if(void 0!==(n=Re.get(r,e)))return n;if(void 0!==(n=v(r,e)))return n}else this.each(function(){Re.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Re.remove(this,e)})}}),xe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=qe.get(e,t),n&&(!i||Array.isArray(n)?i=qe.access(e,t,xe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=xe.queue(e,t),i=n.length,o=n.shift(),r=xe._queueHooks(e,t),a=function(){xe.dequeue(e,t)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,a,r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return qe.get(e,n)||qe.access(e,n,{empty:xe.Callbacks("once memory").add(function(){qe.remove(e,[t+"queue",n])})})}}),xe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?xe.queue(this[0],e):void 0===t?this:this.each(function(){var n=xe.queue(this,e,t);xe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&xe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){xe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=xe.Deferred(),r=this,a=this.length,s=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=qe.get(r[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),o.promise(t)}});var _e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Be=new RegExp("^(?:([+-])=|)("+_e+")([a-z%]*)$","i"),Ye=["Top","Right","Bottom","Left"],Ue=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&xe.contains(e.ownerDocument,e)&&"none"===xe.css(e,"display")},Xe=function(e,t,n,i){var o,r,a={};for(r in t)a[r]=e.style[r],e.style[r]=t[r];o=n.apply(e,i||[]);for(r in t)e.style[r]=a[r];return o},Ve={};xe.fn.extend({show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ue(this)?xe(this).show():xe(this).hide()})}});var Ze=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Qe=/^$|^module$|\/(?:java|ecma)script/i,Ke={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ke.optgroup=Ke.option,Ke.tbody=Ke.tfoot=Ke.colgroup=Ke.caption=Ke.thead,Ke.th=Ke.td;var Je=/<|&#?\w+;/;!function(){var e=ae.createDocumentFragment(),t=e.appendChild(ae.createElement("div")),n=ae.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),ve.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ve.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var et=ae.documentElement,tt=/^key/,nt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,it=/^([^.]*)(?:\.(.+)|)/;xe.event={global:{},add:function(e,t,n,i,o){var r,a,s,l,c,d,u,p,f,h,g,m=qe.get(e);if(m)for(n.handler&&(r=n,n=r.handler,o=r.selector),o&&xe.find.matchesSelector(et,o),n.guid||(n.guid=xe.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==xe&&xe.event.triggered!==t.type?xe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Oe)||[""],c=t.length;c--;)s=it.exec(t[c])||[],f=g=s[1],h=(s[2]||"").split(".").sort(),f&&(u=xe.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=xe.event.special[f]||{},d=xe.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&xe.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||(p=l[f]=[],p.delegateCount=0,u.setup&&!1!==u.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(f,a)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,d):p.push(d),xe.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,a,s,l,c,d,u,p,f,h,g,m=qe.hasData(e)&&qe.get(e);if(m&&(l=m.events)){for(t=(t||"").match(Oe)||[""],c=t.length;c--;)if(s=it.exec(t[c])||[],f=g=s[1],h=(s[2]||"").split(".").sort(),f){for(u=xe.event.special[f]||{},f=(i?u.delegateType:u.bindType)||f,p=l[f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=p.length;r--;)d=p[r],!o&&g!==d.origType||n&&n.guid!==d.guid||s&&!s.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(r,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));a&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,m.handle)||xe.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)xe.event.remove(e,f+t[c],n,i,!0);xe.isEmptyObject(l)&&qe.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,a,s=xe.event.fix(e),l=new Array(arguments.length),c=(qe.get(this,"events")||{})[s.type]||[],d=xe.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,s)){for(a=xe.event.handlers.call(this,s,c),t=0;(o=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(r.namespace)||(s.handleObj=r,s.data=r.data,void 0!==(i=((xe.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,o,r,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],a={},n=0;n<l;n++)i=t[n],o=i.selector+" ",void 0===a[o]&&(a[o]=i.needsContext?xe(o,this).index(c)>-1:xe.find(o,this,null,[c]).length),a[o]&&r.push(i);r.length&&s.push({elem:c,handlers:r})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(xe.Event.prototype,e,{enumerable:!0,configurable:!0,get:ye(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[xe.expando]?e:new xe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==E()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===E()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},xe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},xe.Event=function(e,t){if(!(this instanceof xe.Event))return new xe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?T:S,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&xe.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[xe.expando]=!0},xe.Event.prototype={constructor:xe.Event,isDefaultPrevented:S,isPropagationStopped:S,isImmediatePropagationStopped:S,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=T,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=T,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=T,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},xe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&tt.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&nt.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},xe.event.addProp),xe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){xe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||xe.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),xe.fn.extend({on:function(e,t,n,i){return D(this,e,t,n,i)},one:function(e,t,n,i){return D(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,xe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=S),this.each(function(){xe.event.remove(this,e,n,t)})}});var ot=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,rt=/<script|<style|<link/i,at=/checked\s*(?:[^=]|=\s*.checked.)/i,st=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;xe.extend({htmlPrefilter:function(e){return e.replace(ot,"<$1></$2>")},clone:function(e,t,n){var i,o,r,a,s=e.cloneNode(!0),l=xe.contains(e.ownerDocument,e);if(!(ve.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||xe.isXMLDoc(e)))for(a=x(s),r=x(e),i=0,o=r.length;i<o;i++)O(r[i],a[i]);if(t)if(n)for(r=r||x(e),a=a||x(s),i=0,o=r.length;i<o;i++)A(r[i],a[i]);else A(e,s);return a=x(s,"script"),a.length>0&&C(a,!l&&x(e,"script")),s},cleanData:function(e){for(var t,n,i,o=xe.event.special,r=0;void 0!==(n=e[r]);r++)if(Fe(n)){if(t=n[qe.expando]){if(t.events)for(i in t.events)o[i]?xe.event.remove(n,i):xe.removeEvent(n,i,t.handle);n[qe.expando]=void 0}n[Re.expando]&&(n[Re.expando]=void 0)}}}),xe.fn.extend({detach:function(e){return I(this,e,!0)},remove:function(e){return I(this,e)},text:function(e){return je(this,function(e){return void 0===e?xe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return L(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){$(this,e).appendChild(e)}})},prepend:function(){return L(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=$(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return L(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return L(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(xe.cleanData(x(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return xe.clone(this,e,t)})},html:function(e){return je(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!rt.test(e)&&!Ke[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=xe.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(xe.cleanData(x(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return L(this,arguments,function(t){var n=this.parentNode;xe.inArray(this,e)<0&&(xe.cleanData(x(this)),n&&n.replaceChild(t,this))},e)}}),xe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){xe.fn[e]=function(e){for(var n,i=[],o=xe(e),r=o.length-1,a=0;a<=r;a++)n=a===r?this:this.clone(!0),xe(o[a])[t](n),de.apply(i,n.get());return this.pushStack(i)}});var lt=new RegExp("^("+_e+")(?!px)[a-z%]+$","i"),ct=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},dt=new RegExp(Ye.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",et.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,s=12===n(t.marginLeft),c.style.right="60%",a=36===n(t.right),o=36===n(t.width),c.style.position="absolute",r=36===c.offsetWidth||"absolute",et.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,r,a,s,l=ae.createElement("div"),c=ae.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",ve.clearCloneStyle="content-box"===c.style.backgroundClip,xe.extend(ve,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),s},scrollboxSize:function(){return t(),r}}))}();var ut=/^(none|table(?!-c[ea]).+)/,pt=/^--/,ft={position:"absolute",visibility:"hidden",display:"block"},ht={letterSpacing:"0",fontWeight:"400"},gt=["Webkit","Moz","ms"],mt=ae.createElement("div").style;xe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=j(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,a,s=h(t),l=pt.test(t),c=e.style;if(l||(t=F(s)),a=xe.cssHooks[t]||xe.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,i))?o:c[t];r=typeof n,"string"===r&&(o=Be.exec(n))&&o[1]&&(n=y(e,t,o),r="number"),null!=n&&n===n&&("number"===r&&(n+=o&&o[3]||(xe.cssNumber[s]?"":"px")),ve.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,a,s=h(t);return pt.test(t)||(t=F(s)),a=xe.cssHooks[t]||xe.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=j(e,t,i)),"normal"===o&&t in ht&&(o=ht[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),xe.each(["height","width"],function(e,t){xe.cssHooks[t]={get:function(e,n,i){if(n)return!ut.test(xe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?z(e,t,i):Xe(e,ft,function(){return z(e,t,i)})},set:function(e,n,i){var o,r=ct(e),a="border-box"===xe.css(e,"boxSizing",!1,r),s=i&&R(e,t,i,a,r);return a&&ve.scrollboxSize()===r.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-R(e,t,"border",!1,r)-.5)),s&&(o=Be.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=xe.css(e,t)),q(e,n,s)}}}),xe.cssHooks.marginLeft=H(ve.reliableMarginLeft,function(e,t){if(t)return(parseFloat(j(e,"marginLeft"))||e.getBoundingClientRect().left-Xe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),xe.each({margin:"",padding:"",border:"Width"},function(e,t){xe.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+Ye[i]+t]=r[i]||r[i-2]||r[0];return o}},"margin"!==e&&(xe.cssHooks[e+t].set=q)}),xe.fn.extend({css:function(e,t){return je(this,function(e,t,n){var i,o,r={},a=0;if(Array.isArray(t)){for(i=ct(e),o=t.length;a<o;a++)r[t[a]]=xe.css(e,t[a],!1,i);return r}return void 0!==n?xe.style(e,t,n):xe.css(e,t)},e,t,arguments.length>1)}}),xe.Tween=W,W.prototype={constructor:W,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||xe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(xe.cssNumber[n]?"":"px")},cur:function(){var e=W.propHooks[this.prop];return e&&e.get?e.get(this):W.propHooks._default.get(this)},run:function(e){var t,n=W.propHooks[this.prop];return this.options.duration?this.pos=t=xe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=xe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){xe.fx.step[e.prop]?xe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[xe.cssProps[e.prop]]&&!xe.cssHooks[e.prop]?e.elem[e.prop]=e.now:xe.style(e.elem,e.prop,e.now+e.unit)}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},xe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},xe.fx=W.prototype.init,xe.fx.step={};var vt,yt,bt=/^(?:toggle|show|hide)$/,wt=/queueHooks$/;xe.Animation=xe.extend(Z,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return y(n.elem,e,Be.exec(t),n),n}]},tweener:function(e,t){ye(e)?(t=e,e=["*"]):e=e.match(Oe);for(var n,i=0,o=e.length;i<o;i++)n=e[i],Z.tweeners[n]=Z.tweeners[n]||[],Z.tweeners[n].unshift(t)},prefilters:[X],prefilter:function(e,t){t?Z.prefilters.unshift(e):Z.prefilters.push(e)}}),xe.speed=function(e,t,n){var i=e&&"object"==typeof e?xe.extend({},e):{complete:n||!n&&t||ye(e)&&e,duration:e,easing:n&&t||t&&!ye(t)&&t};return xe.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in xe.fx.speeds?i.duration=xe.fx.speeds[i.duration]:i.duration=xe.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){ye(i.old)&&i.old.call(this),i.queue&&xe.dequeue(this,i.queue)},i},xe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Ue).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=xe.isEmptyObject(e),r=xe.speed(t,n,i),a=function(){var t=Z(this,xe.extend({},e),r);(o||qe.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===r.queue?this.each(a):this.queue(r.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",r=xe.timers,a=qe.get(this);if(o)a[o]&&a[o].stop&&i(a[o]);else for(o in a)a[o]&&a[o].stop&&wt.test(o)&&i(a[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||xe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){
var t,n=qe.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=xe.timers,a=i?i.length:0;for(n.finish=!0,xe.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),xe.each(["toggle","show","hide"],function(e,t){var n=xe.fn[t];xe.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(Y(t,!0),e,i,o)}}),xe.each({slideDown:Y("show"),slideUp:Y("hide"),slideToggle:Y("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){xe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),xe.timers=[],xe.fx.tick=function(){var e,t=0,n=xe.timers;for(vt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||xe.fx.stop(),vt=void 0},xe.fx.timer=function(e){xe.timers.push(e),xe.fx.start()},xe.fx.interval=13,xe.fx.start=function(){yt||(yt=!0,_())},xe.fx.stop=function(){yt=null},xe.fx.speeds={slow:600,fast:200,_default:400},xe.fn.delay=function(t,n){return t=xe.fx?xe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}})},function(){var e=ae.createElement("input"),t=ae.createElement("select"),n=t.appendChild(ae.createElement("option"));e.type="checkbox",ve.checkOn=""!==e.value,ve.optSelected=n.selected,e=ae.createElement("input"),e.value="t",e.type="radio",ve.radioValue="t"===e.value}();var xt,Ct=xe.expr.attrHandle;xe.fn.extend({attr:function(e,t){return je(this,xe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){xe.removeAttr(this,e)})}}),xe.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?xe.prop(e,t,n):(1===r&&xe.isXMLDoc(e)||(o=xe.attrHooks[t.toLowerCase()]||(xe.expr.match.bool.test(t)?xt:void 0)),void 0!==n?null===n?void xe.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:(i=xe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!ve.radioValue&&"radio"===t&&r(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(Oe);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),xt={set:function(e,t,n){return!1===t?xe.removeAttr(e,n):e.setAttribute(n,n),n}},xe.each(xe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Ct[t]||xe.find.attr;Ct[t]=function(e,t,i){var o,r,a=t.toLowerCase();return i||(r=Ct[a],Ct[a]=o,o=null!=n(e,t,i)?a:null,Ct[a]=r),o}});var kt=/^(?:input|select|textarea|button)$/i,Tt=/^(?:a|area)$/i;xe.fn.extend({prop:function(e,t){return je(this,xe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[xe.propFix[e]||e]})}}),xe.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&xe.isXMLDoc(e)||(t=xe.propFix[t]||t,o=xe.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=xe.find.attr(e,"tabindex");return t?parseInt(t,10):kt.test(e.nodeName)||Tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ve.optSelected||(xe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),xe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){xe.propFix[this.toLowerCase()]=this}),xe.fn.extend({addClass:function(e){var t,n,i,o,r,a,s,l=0;if(ye(e))return this.each(function(t){xe(this).addClass(e.call(this,t,Q(this)))});if(t=K(e),t.length)for(;n=this[l++];)if(o=Q(n),i=1===n.nodeType&&" "+G(o)+" "){for(a=0;r=t[a++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=G(i),o!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,o,r,a,s,l=0;if(ye(e))return this.each(function(t){xe(this).removeClass(e.call(this,t,Q(this)))});if(!arguments.length)return this.attr("class","");if(t=K(e),t.length)for(;n=this[l++];)if(o=Q(n),i=1===n.nodeType&&" "+G(o)+" "){for(a=0;r=t[a++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");s=G(i),o!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):ye(e)?this.each(function(n){xe(this).toggleClass(e.call(this,n,Q(this),t),t)}):this.each(function(){var t,o,r,a;if(i)for(o=0,r=xe(this),a=K(e);t=a[o++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||(t=Q(this),t&&qe.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":qe.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+G(Q(n))+" ").indexOf(t)>-1)return!0;return!1}});var St=/\r/g;xe.fn.extend({val:function(e){var t,n,i,o=this[0];{if(arguments.length)return i=ye(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,xe(this).val()):e,null==o?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=xe.map(o,function(e){return null==e?"":e+""})),(t=xe.valHooks[this.type]||xe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))});if(o)return(t=xe.valHooks[o.type]||xe.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(St,""):null==n?"":n)}}}),xe.extend({valHooks:{option:{get:function(e){var t=xe.find.attr(e,"value");return null!=t?t:G(xe.text(e))}},select:{get:function(e){var t,n,i,o=e.options,a=e.selectedIndex,s="select-one"===e.type,l=s?null:[],c=s?a+1:o.length;for(i=a<0?c:s?a:0;i<c;i++)if(n=o[i],(n.selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(t=xe(n).val(),s)return t;l.push(t)}return l},set:function(e,t){for(var n,i,o=e.options,r=xe.makeArray(t),a=o.length;a--;)i=o[a],(i.selected=xe.inArray(xe.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),xe.each(["radio","checkbox"],function(){xe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=xe.inArray(xe(e).val(),t)>-1}},ve.checkOn||(xe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),ve.focusin="onfocusin"in e;var Et=/^(?:focusinfocus|focusoutblur)$/,Dt=function(e){e.stopPropagation()};xe.extend(xe.event,{trigger:function(t,n,i,o){var r,a,s,l,c,d,u,p,f=[i||ae],h=he.call(t,"type")?t.type:t,g=he.call(t,"namespace")?t.namespace.split("."):[];if(a=p=s=i=i||ae,3!==i.nodeType&&8!==i.nodeType&&!Et.test(h+xe.event.triggered)&&(h.indexOf(".")>-1&&(g=h.split("."),h=g.shift(),g.sort()),c=h.indexOf(":")<0&&"on"+h,t=t[xe.expando]?t:new xe.Event(h,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:xe.makeArray(n,[t]),u=xe.event.special[h]||{},o||!u.trigger||!1!==u.trigger.apply(i,n))){if(!o&&!u.noBubble&&!be(i)){for(l=u.delegateType||h,Et.test(l+h)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(i.ownerDocument||ae)&&f.push(s.defaultView||s.parentWindow||e)}for(r=0;(a=f[r++])&&!t.isPropagationStopped();)p=a,t.type=r>1?l:u.bindType||h,d=(qe.get(a,"events")||{})[t.type]&&qe.get(a,"handle"),d&&d.apply(a,n),(d=c&&a[c])&&d.apply&&Fe(a)&&(t.result=d.apply(a,n),!1===t.result&&t.preventDefault());return t.type=h,o||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(f.pop(),n)||!Fe(i)||c&&ye(i[h])&&!be(i)&&(s=i[c],s&&(i[c]=null),xe.event.triggered=h,t.isPropagationStopped()&&p.addEventListener(h,Dt),i[h](),t.isPropagationStopped()&&p.removeEventListener(h,Dt),xe.event.triggered=void 0,s&&(i[c]=s)),t.result}},simulate:function(e,t,n){var i=xe.extend(new xe.Event,n,{type:e,isSimulated:!0});xe.event.trigger(i,null,t)}}),xe.fn.extend({trigger:function(e,t){return this.each(function(){xe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return xe.event.trigger(e,t,n,!0)}}),ve.focusin||xe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){xe.event.simulate(t,e.target,xe.event.fix(e))};xe.event.special[t]={setup:function(){var i=this.ownerDocument||this,o=qe.access(i,t);o||i.addEventListener(e,n,!0),qe.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=qe.access(i,t)-1;o?qe.access(i,t,o):(i.removeEventListener(e,n,!0),qe.remove(i,t))}}});var $t=e.location,Mt=Date.now(),Pt=/\?/;xe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||xe.error("Invalid XML: "+t),n};var At=/\[\]$/,Ot=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,It=/^(?:input|select|textarea|keygen)/i;xe.param=function(e,t){var n,i=[],o=function(e,t){var n=ye(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!xe.isPlainObject(e))xe.each(e,function(){o(this.name,this.value)});else for(n in e)J(n,e[n],t,o);return i.join("&")},xe.fn.extend({serialize:function(){return xe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=xe.prop(this,"elements");return e?xe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!xe(this).is(":disabled")&&It.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!Ze.test(e))}).map(function(e,t){var n=xe(this).val();return null==n?null:Array.isArray(n)?xe.map(n,function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}}):{name:t.name,value:n.replace(Ot,"\r\n")}}).get()}});var jt=/%20/g,Ht=/#.*$/,Nt=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Rt=/^(?:GET|HEAD)$/,zt=/^\/\//,Wt={},_t={},Bt="*/".concat("*"),Yt=ae.createElement("a");Yt.href=$t.href,xe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:$t.href,type:"GET",isLocal:qt.test($t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":xe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?ne(ne(e,xe.ajaxSettings),t):ne(xe.ajaxSettings,e)},ajaxPrefilter:ee(Wt),ajaxTransport:ee(_t),ajax:function(t,n){function i(t,n,i,s){var c,p,f,w,x,C=n;d||(d=!0,l&&e.clearTimeout(l),o=void 0,a=s||"",k.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(w=ie(h,k,i)),w=oe(h,w,k,c),c?(h.ifModified&&(x=k.getResponseHeader("Last-Modified"),x&&(xe.lastModified[r]=x),(x=k.getResponseHeader("etag"))&&(xe.etag[r]=x)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=w.state,p=w.data,f=w.error,c=!f)):(f=C,!t&&C||(C="error",t<0&&(t=0))),k.status=t,k.statusText=(n||C)+"",c?v.resolveWith(g,[p,C,k]):v.rejectWith(g,[k,C,f]),k.statusCode(b),b=void 0,u&&m.trigger(c?"ajaxSuccess":"ajaxError",[k,h,c?p:f]),y.fireWith(g,[k,C]),u&&(m.trigger("ajaxComplete",[k,h]),--xe.active||xe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var o,r,a,s,l,c,d,u,p,f,h=xe.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?xe(g):xe.event,v=xe.Deferred(),y=xe.Callbacks("once memory"),b=h.statusCode||{},w={},x={},C="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(d){if(!s)for(s={};t=Ft.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return d?a:null},setRequestHeader:function(e,t){return null==d&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==d&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)k.always(e[k.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return o&&o.abort(t),i(0,t),this}};if(v.promise(k),h.url=((t||h.url||$t.href)+"").replace(zt,$t.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Oe)||[""],null==h.crossDomain){c=ae.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Yt.protocol+"//"+Yt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=xe.param(h.data,h.traditional)),te(Wt,h,n,k),d)return k;u=xe.event&&h.global,u&&0==xe.active++&&xe.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Rt.test(h.type),r=h.url.replace(Ht,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(jt,"+")):(f=h.url.slice(r.length),h.data&&(h.processData||"string"==typeof h.data)&&(r+=(Pt.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(Nt,"$1"),f=(Pt.test(r)?"&":"?")+"_="+Mt+++f),h.url=r+f),h.ifModified&&(xe.lastModified[r]&&k.setRequestHeader("If-Modified-Since",xe.lastModified[r]),xe.etag[r]&&k.setRequestHeader("If-None-Match",xe.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&k.setRequestHeader("Content-Type",h.contentType),k.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Bt+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)k.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,k,h)||d))return k.abort();if(C="abort",y.add(h.complete),k.done(h.success),k.fail(h.error),o=te(_t,h,n,k)){if(k.readyState=1,u&&m.trigger("ajaxSend",[k,h]),d)return k;h.async&&h.timeout>0&&(l=e.setTimeout(function(){k.abort("timeout")},h.timeout));try{d=!1,o.send(w,i)}catch(e){if(d)throw e;i(-1,e)}}else i(-1,"No Transport");return k},getJSON:function(e,t,n){return xe.get(e,t,n,"json")},getScript:function(e,t){return xe.get(e,void 0,t,"script")}}),xe.each(["get","post"],function(e,t){xe[t]=function(e,n,i,o){return ye(n)&&(o=o||i,i=n,n=void 0),xe.ajax(xe.extend({url:e,type:t,dataType:o,data:n,success:i},xe.isPlainObject(e)&&e))}}),xe._evalUrl=function(e){return xe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},xe.fn.extend({wrapAll:function(e){var t;return this[0]&&(ye(e)&&(e=e.call(this[0])),t=xe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ye(e)?this.each(function(t){xe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=xe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ye(e);return this.each(function(n){xe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){xe(this).replaceWith(this.childNodes)}),this}}),xe.expr.pseudos.hidden=function(e){return!xe.expr.pseudos.visible(e)},xe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},xe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=xe.ajaxSettings.xhr();ve.cors=!!Xt&&"withCredentials"in Xt,ve.ajax=Xt=!!Xt,xe.ajaxTransport(function(t){var n,i;if(ve.cors||Xt&&!t.crossDomain)return{send:function(o,r){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(a in o)s.setRequestHeader(a,o[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?r(0,"error"):r(s.status,s.statusText):r(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),xe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),xe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return xe.globalEval(e),e}}}),xe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),xe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=xe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),ae.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Vt=[],Zt=/(=)\?(?=&|$)|\?\?/;xe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||xe.expando+"_"+Mt++;return this[e]=!0,e}}),xe.ajaxPrefilter("json jsonp",function(t,n,i){var o,r,a,s=!1!==t.jsonp&&(Zt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Zt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=ye(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Zt,"$1"+o):!1!==t.jsonp&&(t.url+=(Pt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||xe.error(o+" was not called"),a[0]},t.dataTypes[0]="json",r=e[o],e[o]=function(){a=arguments},i.always(function(){void 0===r?xe(e).removeProp(o):e[o]=r,t[o]&&(t.jsonpCallback=n.jsonpCallback,Vt.push(o)),a&&ye(r)&&r(a[0]),a=r=void 0}),"script"}),ve.createHTMLDocument=function(){var e=ae.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),xe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,r;return t||(ve.createHTMLDocument?(t=ae.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=ae.location.href,t.head.appendChild(i)):t=ae),o=De.exec(e),r=!n&&[],o?[t.createElement(o[1])]:(o=k([e],t,r),r&&r.length&&xe(r).remove(),xe.merge([],o.childNodes))},xe.fn.load=function(e,t,n){var i,o,r,a=this,s=e.indexOf(" ");return s>-1&&(i=G(e.slice(s)),e=e.slice(0,s)),ye(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&xe.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,a.html(i?xe("<div>").append(xe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},xe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){xe.fn[t]=function(e){return this.on(t,e)}}),xe.expr.pseudos.animated=function(e){return xe.grep(xe.timers,function(t){return e===t.elem}).length},xe.offset={setOffset:function(e,t,n){var i,o,r,a,s,l,c,d=xe.css(e,"position"),u=xe(e),p={};"static"===d&&(e.style.position="relative"),s=u.offset(),r=xe.css(e,"top"),l=xe.css(e,"left"),c=("absolute"===d||"fixed"===d)&&(r+l).indexOf("auto")>-1,c?(i=u.position(),a=i.top,o=i.left):(a=parseFloat(r)||0,o=parseFloat(l)||0),ye(t)&&(t=t.call(e,n,xe.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+o),"using"in t?t.using.call(e,p):u.css(p)}},xe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){xe.offset.setOffset(this,e,t)});var t,n,i=this[0];if(i)return i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===xe.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===xe.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&(o=xe(e).offset(),o.top+=xe.css(e,"borderTopWidth",!0),o.left+=xe.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-xe.css(i,"marginTop",!0),left:t.left-o.left-xe.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===xe.css(e,"position");)e=e.offsetParent;return e||et})}}),xe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;xe.fn[e]=function(i){return je(this,function(e,i,o){var r;if(be(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o},e,i,arguments.length)}}),xe.each(["top","left"],function(e,t){xe.cssHooks[t]=H(ve.pixelPosition,function(e,n){if(n)return n=j(e,t),lt.test(n)?xe(e).position()[t]+"px":n})}),xe.each({Height:"height",Width:"width"},function(e,t){xe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){xe.fn[i]=function(o,r){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===r?"margin":"border");return je(this,function(t,n,o){var r;return be(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?xe.css(t,n,s):xe.style(t,n,o,s)},t,a?o:void 0,a)}})}),xe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){xe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),xe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),xe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),xe.proxy=function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),ye(e))return i=le.call(arguments,2),o=function(){return e.apply(t||this,i.concat(le.call(arguments)))},o.guid=e.guid=e.guid||xe.guid++,o},xe.holdReady=function(e){e?xe.readyWait++:xe.ready(!0)},xe.isArray=Array.isArray,xe.parseJSON=JSON.parse,xe.nodeName=r,xe.isFunction=ye,xe.isWindow=be,xe.camelCase=h,xe.type=i,xe.now=Date.now,xe.isNumeric=function(e){var t=xe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return xe});var Gt=e.jQuery,Qt=e.$;return xe.noConflict=function(t){return e.$===xe&&(e.$=Qt),t&&e.jQuery===xe&&(e.jQuery=Gt),xe},t||(e.jQuery=e.$=xe),xe}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var o={},r=this,a=e(window).width(),s=e(window).height();if(!e(r).data("bxSlider")){var l=function(){e(r).data("bxSlider")||(o.settings=e.extend({},t,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"===o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!==o.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return o.cssPrefix=t[n].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"===o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=o.children.eq(o.settings.startSlide);r.wrap('<div class="'+o.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.settings.ariaLive&&!o.settings.ticker&&o.viewport.attr("aria-live","polite"),o.loader=e('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"===o.settings.mode?1e3*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:f()}),o.children.css({float:"horizontal"===o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",h()),"horizontal"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"===o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=e('<div class="bx-controls" />'),o.settings.captions&&T(),o.active.last=o.settings.startSlide===m()-1,o.settings.video&&r.fitVids(),("all"===o.settings.preloadImages||o.settings.ticker)&&(t=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.controls&&C(),o.settings.auto&&o.settings.autoControls&&k(),o.settings.pager&&x(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),d(t,u)},d=function(t,n){var i=t.find('img:not([src=""]), iframe').length,o=0;if(0===i)return void n();t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++o===i&&n()}).each(function(){(this.complete||""==this.src)&&e(this).trigger("load")})})},u=function(){if(o.settings.infiniteLoop&&"fade"!==o.settings.mode&&!o.settings.ticker){var t="vertical"===o.settings.mode?o.settings.minSlides:o.settings.maxSlides,n=o.children.slice(0,t).clone(!0).addClass("bx-clone"),i=o.children.slice(-t).clone(!0).addClass("bx-clone");o.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),r.append(n).prepend(i)}o.loader.remove(),y(),"vertical"===o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(p()),r.redrawSlider(),o.settings.onSliderLoad.call(r,o.active.index),o.initialized=!0,o.settings.responsive&&e(window).bind("resize",U),o.settings.auto&&o.settings.autoStart&&(m()>1||o.settings.autoSlideForOnePage)&&H(),o.settings.ticker&&N(),o.settings.pager&&P(o.settings.startSlide),o.settings.controls&&L(),o.settings.touchEnabled&&!o.settings.ticker&&z(),o.settings.keyboardEnabled&&!o.settings.ticker&&e(document).keydown(R)},p=function(){var t=0,n=e();if("vertical"===o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var r=1===o.settings.moveSlides?o.active.index:o.active.index*v();for(n=o.children.eq(r),i=1;i<=o.settings.maxSlides-1;i++)n=r+i>=o.children.length?n.add(o.children.eq(i-1)):n.add(o.children.eq(r+i))}else n=o.children.eq(o.active.index);else n=o.children;return"vertical"===o.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),o.settings.slideMargin>0&&(t+=o.settings.slideMargin*(o.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===o.viewport.css("box-sizing")?t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))+parseFloat(o.viewport.css("border-top-width"))+parseFloat(o.viewport.css("border-bottom-width")):"padding-box"===o.viewport.css("box-sizing")&&(t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))),t},f=function(){var e="100%";return o.settings.slideWidth>0&&(e="horizontal"===o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),e},h=function(){var e=o.settings.slideWidth,t=o.viewport.width();if(0===o.settings.slideWidth||o.settings.slideWidth>t&&!o.carousel||"vertical"===o.settings.mode)e=t;else if(o.settings.maxSlides>1&&"horizontal"===o.settings.mode){if(t>o.maxThreshold)return e;t<o.minThreshold?e=(t-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides:o.settings.shrinkItems&&(e=Math.floor((t+o.settings.slideMargin)/Math.ceil((t+o.settings.slideMargin)/(e+o.settings.slideMargin))-o.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===o.settings.mode&&o.settings.slideWidth>0?o.viewport.width()<o.minThreshold?e=o.settings.minSlides:o.viewport.width()>o.maxThreshold?e=o.settings.maxSlides:(t=o.children.first().width()+o.settings.slideMargin,e=Math.floor((o.viewport.width()+o.settings.slideMargin)/t)||1):"vertical"===o.settings.mode&&(e=o.settings.minSlides),e},m=function(){var e=0,t=0,n=0;if(o.settings.moveSlides>0){if(!o.settings.infiniteLoop){for(;t<o.children.length;)++e,t=n+g(),n+=o.settings.moveSlides<=g()?o.settings.moveSlides:g();return n}e=Math.ceil(o.children.length/v())}else e=Math.ceil(o.children.length/g());return e},v=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=g()?o.settings.moveSlides:g()},y=function(){var e,t,n;o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop?"horizontal"===o.settings.mode?(t=o.children.last(),e=t.position(),b(-(e.left-(o.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===o.settings.mode&&(n=o.children.length-o.settings.minSlides,e=o.children.eq(n).position(),b(-e.top,"reset",0)):(e=o.children.eq(o.active.index*v()).position(),o.active.index===m()-1&&(o.active.last=!0),void 0!==e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,a){var s,l
;o.usingCSS?(l="vertical"===o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),A())}):A()):"reset"===n?r.css(o.animProp,l):"ticker"===n&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(a.resetValue,"reset",0),F())}):(b(a.resetValue,"reset",0),F()))):(s={},s[o.animProp]=t,"slide"===n?r.animate(s,i,o.settings.easing,function(){A()}):"reset"===n?r.css(o.animProp,t):"ticker"===n&&r.animate(s,i,"linear",function(){b(a.resetValue,"reset",0),F()}))},w=function(){for(var t="",n="",i=m(),r=0;r<i;r++)n="",o.settings.buildPager&&e.isFunction(o.settings.buildPager)||o.settings.pagerCustom?(n=o.settings.buildPager(r),o.pagerEl.addClass("bx-custom-pager")):(n=r+1,o.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+r+'" class="bx-pager-link">'+n+"</a></div>";o.pagerEl.html(t)},x=function(){o.settings.pagerCustom?o.pagerEl=e(o.settings.pagerCustom):(o.pagerEl=e('<div class="bx-pager" />'),o.settings.pagerSelector?e(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),w()),o.pagerEl.on("click touchend","a",M)},C=function(){o.controls.next=e('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=e('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.bind("click touchend",S),o.controls.prev.bind("click touchend",E),o.settings.nextSelector&&e(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&e(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=e('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},k=function(){o.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=e('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",D),o.controls.autoEl.on("click",".bx-stop",$),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?e(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),O(o.settings.autoStart?"stop":"start")},T=function(){o.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},S=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToNextSlide())},E=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToPrevSlide())},D=function(e){r.startAuto(),e.preventDefault()},$=function(e){r.stopAuto(),e.preventDefault()},M=function(t){var n,i;t.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),n=e(t.currentTarget),void 0!==n.attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==o.active.index&&r.goToSlide(i))},P=function(t){var n=o.children.length;if("short"===o.settings.pagerType)return o.settings.maxSlides>1&&(n=Math.ceil(o.children.length/o.settings.maxSlides)),void o.pagerEl.html(t+1+o.settings.pagerShortSeparator+n);o.pagerEl.find("a").removeClass("active"),o.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")})},A=function(){if(o.settings.infiniteLoop){var e="";0===o.active.index?e=o.children.eq(0).position():o.active.index===m()-1&&o.carousel?e=o.children.eq((m()-1)*v()).position():o.active.index===o.children.length-1&&(e=o.children.eq(o.children.length-1).position()),e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0))}o.working=!1,o.settings.onSlideAfter.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)},O=function(e){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[e]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},L=function(){1===m()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0===o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index===m()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},I=function(){r.startAuto()},j=function(){r.stopAuto()},H=function(){if(o.settings.autoDelay>0){setTimeout(r.startAuto,o.settings.autoDelay)}else r.startAuto(),e(window).focus(I).blur(j);o.settings.autoHover&&r.hover(function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)},function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)})},N=function(){var t,n,i,a,s,l,c,d,u=0;"next"===o.settings.autoDirection?r.append(o.children.clone().addClass("bx-clone")):(r.prepend(o.children.clone().addClass("bx-clone")),t=o.children.first().position(),u="horizontal"===o.settings.mode?-t.left:-t.top),b(u,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&(o.usingCSS?(a="horizontal"===o.settings.mode?4:5,o.viewport.hover(function(){n=r.css("-"+o.cssPrefix+"-transform"),i=parseFloat(n.split(",")[a]),b(i,"reset",0)},function(){d=0,o.children.each(function(t){d+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=o.settings.speed/d,l="horizontal"===o.settings.mode?"left":"top",c=s*(d-Math.abs(parseInt(i))),F(c)})):o.viewport.hover(function(){r.stop()},function(){d=0,o.children.each(function(t){d+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=o.settings.speed/d,l="horizontal"===o.settings.mode?"left":"top",c=s*(d-Math.abs(parseInt(r.css(l)))),F(c)})),F()},F=function(e){var t,n,i,a=e||o.settings.speed,s={left:0,top:0},l={left:0,top:0};"next"===o.settings.autoDirection?s=r.find(".bx-clone").first().position():l=o.children.first().position(),t="horizontal"===o.settings.mode?-s.left:-s.top,n="horizontal"===o.settings.mode?-l.left:-l.top,i={resetValue:n},b(t,"ticker",a,i)},q=function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},o=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),o.right=o.left+t.outerWidth(),o.bottom=o.top+t.outerHeight(),!(i.right<o.left||i.left>o.right||i.bottom<o.top||i.top>o.bottom)},R=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&q(r)){if(39===e.keyCode)return S(e),!1;if(37===e.keyCode)return E(e),!1}},z=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.bind("touchstart MSPointerDown pointerdown",W),o.viewport.on("click",".bxslider a",function(e){o.viewport.hasClass("click-disabled")&&(e.preventDefault(),o.viewport.removeClass("click-disabled"))})},W=function(e){if(o.controls.el.addClass("disabled"),o.working)e.preventDefault(),o.controls.el.removeClass("disabled");else{o.touch.originalPos=r.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];o.touch.start.x=n[0].pageX,o.touch.start.y=n[0].pageY,o.viewport.get(0).setPointerCapture&&(o.pointerId=t.pointerId,o.viewport.get(0).setPointerCapture(o.pointerId)),o.viewport.bind("touchmove MSPointerMove pointermove",B),o.viewport.bind("touchend MSPointerUp pointerup",Y),o.viewport.bind("MSPointerCancel pointercancel",_)}},_=function(e){b(o.touch.originalPos.left,"reset",0),o.controls.el.removeClass("disabled"),o.viewport.unbind("MSPointerCancel pointercancel",_),o.viewport.unbind("touchmove MSPointerMove pointermove",B),o.viewport.unbind("touchend MSPointerUp pointerup",Y),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},B=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-o.touch.start.x),r=Math.abs(n[0].pageY-o.touch.start.y),a=0,s=0;3*i>r&&o.settings.preventDefaultSwipeX?e.preventDefault():3*r>i&&o.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==o.settings.mode&&o.settings.oneToOneTouch&&("horizontal"===o.settings.mode?(s=n[0].pageX-o.touch.start.x,a=o.touch.originalPos.left+s):(s=n[0].pageY-o.touch.start.y,a=o.touch.originalPos.top+s),b(a,"reset",0))},Y=function(e){o.viewport.unbind("touchmove MSPointerMove pointermove",B),o.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,a=0;o.touch.end.x=n[0].pageX,o.touch.end.y=n[0].pageY,"fade"===o.settings.mode?(a=Math.abs(o.touch.start.x-o.touch.end.x))>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):("horizontal"===o.settings.mode?(a=o.touch.end.x-o.touch.start.x,i=o.touch.originalPos.left):(a=o.touch.end.y-o.touch.start.y,i=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0===o.active.index&&a>0||o.active.last&&a<0)?b(i,"reset",200):Math.abs(a)>=o.settings.swipeThreshold?(a<0?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):b(i,"reset",200)),o.viewport.unbind("touchend MSPointerUp pointerup",Y),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},U=function(t){if(o.initialized)if(o.working)window.setTimeout(U,10);else{var n=e(window).width(),i=e(window).height();a===n&&s===i||(a=n,s=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))}},X=function(e){var t=g();o.settings.ariaHidden&&!o.settings.ticker&&(o.children.attr("aria-hidden","true"),o.children.slice(e,e+t).attr("aria-hidden","false"))},V=function(e){return e<0?o.settings.infiniteLoop?m()-1:o.active.index:e>=m()?o.settings.infiniteLoop?0:o.active.index:e};return r.goToSlide=function(t,n){var i,a,s,l,c=!0,d=0,u={left:0,top:0},f=null;if(o.oldIndex=o.active.index,o.active.index=V(t),!o.working&&o.active.index!==o.oldIndex){if(o.working=!0,void 0!==(c=o.settings.onSlideBefore.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index))&&!c)return o.active.index=o.oldIndex,void(o.working=!1);"next"===n?o.settings.onSlideNext.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1):"prev"===n&&(o.settings.onSlidePrev.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1)),o.active.last=o.active.index>=m()-1,(o.settings.pager||o.settings.pagerCustom)&&P(o.active.index),o.settings.controls&&L(),"fade"===o.settings.mode?(o.settings.adaptiveHeight&&o.viewport.height()!==p()&&o.viewport.animate({height:p()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,function(){e(this).css("zIndex",o.settings.slideZIndex),A()})):(o.settings.adaptiveHeight&&o.viewport.height()!==p()&&o.viewport.animate({height:p()},o.settings.adaptiveHeightSpeed),!o.settings.infiniteLoop&&o.carousel&&o.active.last?"horizontal"===o.settings.mode?(f=o.children.eq(o.children.length-1),u=f.position(),d=o.viewport.width()-f.outerWidth()):(i=o.children.length-o.settings.minSlides,u=o.children.eq(i).position()):o.carousel&&o.active.last&&"prev"===n?(a=1===o.settings.moveSlides?o.settings.maxSlides-v():(m()-1)*v()-(o.children.length-o.settings.maxSlides),f=r.children(".bx-clone").eq(a),u=f.position()):"next"===n&&0===o.active.index?(u=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1):t>=0&&(l=t*parseInt(v()),u=o.children.eq(l).position()),void 0!==u&&(s="horizontal"===o.settings.mode?-(u.left-d):-u.top,b(s,"slide",o.settings.speed)),o.working=!1),o.settings.ariaHidden&&X(o.active.index*v())}},r.goToNextSlide=function(){if((o.settings.infiniteLoop||!o.active.last)&&1!=o.working){var e=parseInt(o.active.index)+1;r.goToSlide(e,"next")}},r.goToPrevSlide=function(){if((o.settings.infiniteLoop||0!==o.active.index)&&1!=o.working){var e=parseInt(o.active.index)-1;r.goToSlide(e,"prev")}},r.startAuto=function(e){o.interval||(o.interval=setInterval(function(){"next"===o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()},o.settings.pause),o.settings.onAutoChange.call(r,!0),o.settings.autoControls&&!0!==e&&O("stop"))},r.stopAuto=function(e){o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.onAutoChange.call(r,!1),o.settings.autoControls&&!0!==e&&O("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideElement=function(e){return o.children.eq(e)},r.getSlideCount=function(){return o.children.length},r.isWorking=function(){return o.working},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(h()),o.viewport.css("height",p()),o.settings.ticker||y(),o.active.last&&(o.active.index=m()-1),o.active.index>=m()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(w(),P(o.active.index)),o.settings.ariaHidden&&X(o.active.index*v())},r.destroySlider=function(){o.initialized&&(o.initialized=!1,e(".bx-clone",this).remove(),o.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&!o.settings.pagerCustom&&o.pagerEl.remove(),e(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&e(window).unbind("resize",U),o.settings.keyboardEnabled&&e(document).unbind("keydown",R),e(this).removeData("bxSlider"),e(window).off("blur",j).off("focus",I))},r.reloadSlider=function(t){void 0!==t&&(n=t),r.destroySlider(),l(),e(r).data("bxSlider",this)},l(),e(r).data("bxSlider",this),this}}}(jQuery),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){"use strict";var t=window.Slick||{};t=function(){function t(t,i){var o,r=this;r.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,n){return e('<button type="button" />').text(n+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},r.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(r,r.initials),r.activeBreakpoint=null,r.animType=null,r.animProp=null,r.breakpoints=[],r.breakpointSettings=[],r.cssTransitions=!1,r.focussed=!1,r.interrupted=!1,r.hidden="hidden",r.paused=!0,r.positionProp=null,r.respondTo=null,r.rowCount=1,r.shouldClick=!0,r.$slider=e(t),r.$slidesCache=null,r.transformType=null,r.transitionType=null,r.visibilityChange="visibilitychange",r.windowWidth=0,r.windowTimer=null,o=e(t).data("slick")||{},r.options=e.extend({},r.defaults,i,o),r.currentSlide=r.options.initialSlide,r.originalSettings=r.options,void 0!==document.mozHidden?(r.hidden="mozHidden",r.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(r.hidden="webkitHidden",r.visibilityChange="webkitvisibilitychange"),r.autoPlay=e.proxy(r.autoPlay,r),r.autoPlayClear=e.proxy(r.autoPlayClear,r),r.autoPlayIterator=e.proxy(r.autoPlayIterator,r),r.changeSlide=e.proxy(r.changeSlide,r),r.clickHandler=e.proxy(r.clickHandler,r),r.selectHandler=e.proxy(r.selectHandler,r),r.setPosition=e.proxy(r.setPosition,r),r.swipeHandler=e.proxy(r.swipeHandler,r),r.dragHandler=e.proxy(r.dragHandler,r),r.keyHandler=e.proxy(r.keyHandler,r),r.instanceUid=n++,r.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,r.registerBreakpoints(),r.init(!0)}var n=0;return t}(),t.prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,n,i){var o=this;if("boolean"==typeof n)i=n,n=null;else if(n<0||n>=o.slideCount)return!1;o.unload(),"number"==typeof n?0===n&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):i?e(t).insertBefore(o.$slides.eq(n)):e(t).insertAfter(o.$slides.eq(n)):!0===i?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(t,n){e(n).attr("data-slick-index",t)}),o.$slidesCache=o.$slides,o.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,n){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,n):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,n):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(i[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(i)):(i[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(i))},complete:function(){n&&n.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),n&&setTimeout(function(){o.disableTransition(),n.call()},o.options.speed))},t.prototype.getNavTarget=function(){var t=this,n=t.options.asNavFor;return n&&null!==n&&(n=e(n).not(t.$slider)),n},t.prototype.asNavFor=function(t){var n=this,i=n.getNavTarget();null!==i&&"object"==typeof i&&i.each(function(){var n=e(this).slick("getSlick");n.unslicked||n.slideHandler(t,!0)})},t.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,n,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),n=e("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)n.append(e("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=n.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,n){e(n).attr("data-slick-index",t).data("originalStyling",e(n).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,n,i,o,r,a,s=this;if(i=document.createDocumentFragment(),r=s.$slider.children(),s.options.rows>0){for(a=s.options.slidesPerRow*s.options.rows,o=Math.ceil(r.length/a),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<s.options.rows;t++){var c=document.createElement("div");for(n=0;n<s.options.slidesPerRow;n++){var d=e*a+(t*s.options.slidesPerRow+n);r.get(d)&&c.appendChild(r.get(d))}l.appendChild(c)}i.appendChild(l)}s.$slider.empty().append(i),s.$slider.children().children().children().css({width:100/s.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,n){var i,o,r,a=this,s=!1,l=a.$slider.width(),c=window.innerWidth||e(window).width();if("window"===a.respondTo?r=c:"slider"===a.respondTo?r=l:"min"===a.respondTo&&(r=Math.min(c,l)),a.options.responsive&&a.options.responsive.length&&null!==a.options.responsive){o=null;for(i in a.breakpoints)a.breakpoints.hasOwnProperty(i)&&(!1===a.originalSettings.mobileFirst?r<a.breakpoints[i]&&(o=a.breakpoints[i]):r>a.breakpoints[i]&&(o=a.breakpoints[i]));null!==o?null!==a.activeBreakpoint?(o!==a.activeBreakpoint||n)&&(a.activeBreakpoint=o,"unslick"===a.breakpointSettings[o]?a.unslick(o):(a.options=e.extend({},a.originalSettings,a.breakpointSettings[o]),!0===t&&(a.currentSlide=a.options.initialSlide),a.refresh(t)),s=o):(a.activeBreakpoint=o,"unslick"===a.breakpointSettings[o]?a.unslick(o):(a.options=e.extend({},a.originalSettings,a.breakpointSettings[o]),!0===t&&(a.currentSlide=a.options.initialSlide),a.refresh(t)),s=o):null!==a.activeBreakpoint&&(a.activeBreakpoint=null,a.options=a.originalSettings,!0===t&&(a.currentSlide=a.options.initialSlide),a.refresh(t),s=o),t||!1===s||a.$slider.trigger("breakpoint",[a,s])}},t.prototype.changeSlide=function(t,n){var i,o,r,a=this,s=e(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),r=a.slideCount%a.options.slidesToScroll!=0,i=r?0:(a.slideCount-a.currentSlide)%a.options.slidesToScroll,t.data.message){case"previous":o=0===i?a.options.slidesToScroll:a.options.slidesToShow-i,a.slideCount>a.options.slidesToShow&&a.slideHandler(a.currentSlide-o,!1,n);break;case"next":o=0===i?a.options.slidesToScroll:i,a.slideCount>a.options.slidesToShow&&a.slideHandler(a.currentSlide+o,!1,n);break;case"index":var l=0===t.data.index?0:t.data.index||s.index()*a.options.slidesToScroll;a.slideHandler(a.checkNavigable(l),!1,n),s.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,n,i=this;if(t=i.getNavigableIndexes(),n=0,e>t[t.length-1])e=t[t.length-1];else for(var o in t){if(e<t[o]){e=n;break}n=t[o]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&(e=t.$slides.children().children(),e.removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var n=this;n.autoPlayClear(),n.touchObject={},n.cleanUpEvents(),e(".slick-cloned",n.$slider).detach(),n.$dots&&n.$dots.remove(),n.$prevArrow&&n.$prevArrow.length&&(n.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.prevArrow)&&n.$prevArrow.remove()),n.$nextArrow&&n.$nextArrow.length&&(n.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.nextArrow)&&n.$nextArrow.remove()),n.$slides&&(n.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){e(this).attr("style",e(this).data("originalStyling"))}),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.detach(),n.$list.detach(),n.$slider.append(n.$slides)),n.cleanUpRows(),n.$slider.removeClass("slick-slider"),n.$slider.removeClass("slick-initialized"),n.$slider.removeClass("slick-dotted"),n.unslicked=!0,t||n.$slider.trigger("destroy",[n])},t.prototype.disableTransition=function(e){var t=this,n={};n[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(n){n.stopImmediatePropagation();var i=e(this);setTimeout(function(){t.options.pauseOnFocus&&(t.focussed=i.is(":focus"),t.autoPlay())},0)})},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){return this.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},t.prototype.getLeft=function(e){var t,n,i,o,r=this,a=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),a=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,a=(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,a=r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,a=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(r.slideOffset=0,a=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+a,
!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){return this.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,e=2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,n,i=this;return n=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(o,r){if(r.offsetLeft-n+e(r).outerWidth()/2>-1*i.swipeLeft)return t=r,!1}),Math.abs(e(t).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var n=this;e(n.$slider).hasClass("slick-initialized")||(e(n.$slider).addClass("slick-initialized"),n.buildRows(),n.buildOut(),n.setProps(),n.startLoad(),n.loadSlider(),n.initializeEvents(),n.updateArrows(),n.updateDots(),n.checkResponsive(!0),n.focusHandler()),t&&n.$slider.trigger("init",[n]),!0===n.options.accessibility&&n.initADA(),n.options.autoplay&&(n.paused=!1,n.autoPlay())},t.prototype.initADA=function(){var t=this,n=Math.ceil(t.slideCount/t.options.slidesToShow),i=t.getNavigableIndexes().filter(function(e){return e>=0&&e<t.slideCount});t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function(n){var o=i.indexOf(n);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+n,tabindex:-1}),-1!==o){var r="slick-slide-control"+t.instanceUid+o;e("#"+r).length&&e(this).attr({"aria-describedby":r})}}),t.$dots.attr("role","tablist").find("li").each(function(o){var r=i[o];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+o,"aria-controls":"slick-slide"+t.instanceUid+r,"aria-label":o+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=t.currentSlide,r=o+t.options.slidesToShow;o<r;o++)t.options.focusOnChange?t.$slides.eq(o).attr({tabindex:"0"}):t.$slides.eq(o).removeAttr("tabindex");t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},t.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each(function(){var t=e(this),n=e(this).attr("data-lazy"),i=e(this).attr("data-srcset"),o=e(this).attr("data-sizes")||a.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){t.animate({opacity:0},100,function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",n).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),a.$slider.trigger("lazyLoaded",[a,t,n])})},r.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,t,n])},r.src=n})}var n,i,o,r,a=this;if(!0===a.options.centerMode?!0===a.options.infinite?(o=a.currentSlide+(a.options.slidesToShow/2+1),r=o+a.options.slidesToShow+2):(o=Math.max(0,a.currentSlide-(a.options.slidesToShow/2+1)),r=a.options.slidesToShow/2+1+2+a.currentSlide):(o=a.options.infinite?a.options.slidesToShow+a.currentSlide:a.currentSlide,r=Math.ceil(o+a.options.slidesToShow),!0===a.options.fade&&(o>0&&o--,r<=a.slideCount&&r++)),n=a.$slider.find(".slick-slide").slice(o,r),"anticipated"===a.options.lazyLoad)for(var s=o-1,l=r,c=a.$slider.find(".slick-slide"),d=0;d<a.options.slidesToScroll;d++)s<0&&(s=a.slideCount-1),n=n.add(c.eq(s)),n=n.add(c.eq(l)),s--,l++;t(n),a.slideCount<=a.options.slidesToShow?(i=a.$slider.find(".slick-slide"),t(i)):a.currentSlide>=a.slideCount-a.options.slidesToShow?(i=a.$slider.find(".slick-cloned").slice(0,a.options.slidesToShow),t(i)):0===a.currentSlide&&(i=a.$slider.find(".slick-cloned").slice(-1*a.options.slidesToShow),t(i))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){var e=this;e.checkResponsive(),e.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){var e=this;e.autoPlayClear(),e.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var n=this;if(!n.unslicked&&(n.$slider.trigger("afterChange",[n,t]),n.animating=!1,n.slideCount>n.options.slidesToShow&&n.setPosition(),n.swipeLeft=null,n.options.autoplay&&n.autoPlay(),!0===n.options.accessibility&&(n.initADA(),n.options.focusOnChange))){e(n.$slides.get(n.currentSlide)).attr("tabindex",0).focus()}},t.prototype.prev=t.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var n,i,o,r,a,s=this,l=e("img[data-lazy]",s.$slider);l.length?(n=l.first(),i=n.attr("data-lazy"),o=n.attr("data-srcset"),r=n.attr("data-sizes")||s.$slider.attr("data-sizes"),a=document.createElement("img"),a.onload=function(){o&&(n.attr("srcset",o),r&&n.attr("sizes",r)),n.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,n,i]),s.progressiveLazyLoad()},a.onerror=function(){t<3?setTimeout(function(){s.progressiveLazyLoad(t+1)},500):(n.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,n,i]),s.progressiveLazyLoad())},a.src=i):s.$slider.trigger("allImagesLoaded",[s])},t.prototype.refresh=function(t){var n,i,o=this;i=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>i&&(o.currentSlide=i),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),n=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:n}),o.init(),t||o.changeSlide({data:{message:"index",index:n}},!1)},t.prototype.registerBreakpoints=function(){var t,n,i,o=this,r=o.options.responsive||null;if("array"===e.type(r)&&r.length){o.respondTo=o.options.respondTo||"window";for(t in r)if(i=o.breakpoints.length-1,r.hasOwnProperty(t)){for(n=r[t].breakpoint;i>=0;)o.breakpoints[i]&&o.breakpoints[i]===n&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(n),o.breakpointSettings[n]=r[t].settings}o.breakpoints.sort(function(e,t){return o.options.mobileFirst?e-t:t-e})}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,n){var i=this;if("boolean"==typeof e?(t=e,e=!0===t?0:i.slideCount-1):e=!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},t.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled?i.$slideTrack.css(o):(o={},!1===i.cssTransitions?(o[i.animType]="translate("+t+", "+n+")",i.$slideTrack.css(o)):(o[i.animType]="translate3d("+t+", "+n+", 0px)",i.$slideTrack.css(o)))},t.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,n=this;n.$slides.each(function(i,o){t=n.slideWidth*i*-1,!0===n.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:n.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,n,i,o,r,a=this,s=!1;if("object"===e.type(arguments[0])?(i=arguments[0],s=arguments[1],r="multiple"):"string"===e.type(arguments[0])&&(i=arguments[0],o=arguments[1],s=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?r="responsive":void 0!==arguments[1]&&(r="single")),"single"===r)a.options[i]=o;else if("multiple"===r)e.each(i,function(e,t){a.options[e]=t});else if("responsive"===r)for(n in o)if("array"!==e.type(a.options.responsive))a.options.responsive=[o[n]];else{for(t=a.options.responsive.length-1;t>=0;)a.options.responsive[t].breakpoint===o[n].breakpoint&&a.options.responsive.splice(t,1),t--;a.options.responsive.push(o[n])}s&&(a.unload(),a.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},t.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var a=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(e>=t&&e<=r.slideCount-1-t?r.$slides.slice(e-t+a,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+a,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},t.prototype.setupInfinite=function(){var t,n,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(n=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;t-=1)n=t-1,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)n=t,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){e(this).attr("id","")})}},t.prototype.interrupt=function(e){var t=this;e||t.autoPlay(),t.interrupted=e},t.prototype.selectHandler=function(t){var n=this,i=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(i.attr("data-slick-index"));if(o||(o=0),n.slideCount<=n.options.slidesToShow)return void n.slideHandler(o,!1,!0);n.slideHandler(o)},t.prototype.slideHandler=function(e,t,n){var i,o,r,a,s,l=null,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e)){if(!1===t&&c.asNavFor(e),i=e,l=c.getLeft(i),a=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?a:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))return void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(i)}):c.postSlide(i)));if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))return void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(i)}):c.postSlide(i)));if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(s=c.getNavTarget(),s=s.slick("getSlick"),s.slideCount<=s.options.slidesToShow&&s.setSlideClasses(c.currentSlide)),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight();!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(o)}):c.postSlide(o)}},t.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),i=Math.round(180*n/Math.PI),i<0&&(i=360-Math.abs(i)),i<=45&&i>=0?!1===o.options.rtl?"left":"right":i<=360&&i>=315?!1===o.options.rtl?"left":"right":i>=135&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?i>=35&&i<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1,!1;if(i.interrupted=!1,i.shouldClick=!(i.touchObject.swipeLength>10),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,n,i,o,r,a,s=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!s.dragging||s.scrolling||r&&1!==r.length)&&(t=s.getLeft(s.currentSlide),s.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,s.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,s.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(s.touchObject.curX-s.touchObject.startX,2))),a=Math.round(Math.sqrt(Math.pow(s.touchObject.curY-s.touchObject.startY,2))),!s.options.verticalSwiping&&!s.swiping&&a>4?(s.scrolling=!0,!1):(!0===s.options.verticalSwiping&&(s.touchObject.swipeLength=a),n=s.swipeDirection(),void 0!==e.originalEvent&&s.touchObject.swipeLength>4&&(s.swiping=!0,e.preventDefault()),o=(!1===s.options.rtl?1:-1)*(s.touchObject.curX>s.touchObject.startX?1:-1),!0===s.options.verticalSwiping&&(o=s.touchObject.curY>s.touchObject.startY?1:-1),i=s.touchObject.swipeLength,s.touchObject.edgeHit=!1,!1===s.options.infinite&&(0===s.currentSlide&&"right"===n||s.currentSlide>=s.getDotCount()&&"left"===n)&&(i=s.touchObject.swipeLength*s.options.edgeFriction,s.touchObject.edgeHit=!0),!1===s.options.vertical?s.swipeLeft=t+i*o:s.swipeLeft=t+i*(s.$list.height()/s.listWidth)*o,!0===s.options.verticalSwiping&&(s.swipeLeft=t+i*o),!0!==s.options.fade&&!1!==s.options.touchMove&&(!0===s.animating?(s.swipeLeft=null,!1):void s.setCSS(s.swipeLeft))))},t.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return n.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,n,i=this,o=arguments[0],r=Array.prototype.slice.call(arguments,1),a=i.length;for(e=0;e<a;e++)if("object"==typeof o||void 0===o?i[e].slick=new t(i[e],o):n=i[e].slick[o].apply(i[e].slick,r),void 0!==n)return n;return i}}),function(e,t,n,i){"use strict";function o(e,t){var i,o,r=[],a=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=e&&e.data?e.data.options:t||{},i=t.$target||n(e.currentTarget),o=i.attr("data-fancybox")||"",o?(r=t.selector?n(t.selector):e.data?e.data.items:[],r=r.length?r.filter('[data-fancybox="'+o+'"]'):n('[data-fancybox="'+o+'"]'),(a=r.index(i))<0&&(a=0)):r=[i],n.fancybox.open(r,t,a))}if(e.console=e.console||{info:function(e){}},n){if(n.fn.fancybox)return void console.info("fancyBox already initialized");var r={loop:!1,gutter:50,keyboard:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg viewBox="0 0 40 40"><path d="M13,16 L20,23 L27,16 M20,7 L20,23 M10,24 L10,28 L30,28 L30,24" /></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg viewBox="0 0 40 40"><path d="M18,17 m-8,0 a8,8 0 1,0 16,0 a8,8 0 1,0 -16,0 M24,22 L31,29" /></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg viewBox="0 0 40 40"><path d="M10,10 L30,30 M30,10 L10,30" /></svg></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"><svg viewBox="0 0 32 32"><path d="M10,10 L22,22 M22,10 L10,22"></path></svg></button>',arrowLeft:'<a data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}" href="javascript:;"><svg viewBox="0 0 40 40"><path d="M18,12 L10,20 L18,28 M10,20 L30,20"></path></svg></a>',arrowRight:'<a data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}" href="javascript:;"><svg viewBox="0 0 40 40"><path d="M10,20 L30,20 M22,12 L30,20 L22,28"></path></svg></a>'},parentEl:"body",autoFocus:!1,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Maßstab"}}},a=n(e),s=n(t),l=0,c=function(e){return e&&e.hasOwnProperty&&e instanceof n},d=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),u=function(){var e,n=t.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(void 0!==n.style[e])return i[e];return"transitionend"}(),p=function(e){return e&&e.length&&e[0].offsetHeight},f=function(e,t){var i=n.extend(!0,{},e,t);return n.each(t,function(e,t){n.isArray(t)&&(i[e]=t)}),i},h=function(e,i,o){var r=this;r.opts=f({index:o},n.fancybox.defaults),n.isPlainObject(i)&&(r.opts=f(r.opts,i)),n.fancybox.isMobile&&(r.opts=f(r.opts,r.opts.mobile)),r.id=r.opts.id||++l,r.currIndex=parseInt(r.opts.index,10)||0,r.prevIndex=null,r.prevPos=null,r.currPos=0,r.firstRun=!0,r.group=[],r.slides={},r.addContent(e),r.group.length&&(r.$lastFocus=n(t.activeElement).trigger("blur"),r.init())};n.extend(h.prototype,{init:function(){var i,o,r,a=this,s=a.group[a.currIndex],l=s.opts,c=n.fancybox.scrollbarWidth;n.fancybox.getInstance()||!1===l.hideScrollbar||(n("body").addClass("fancybox-active"),!n.fancybox.isMobile&&t.body.scrollHeight>e.innerHeight&&(void 0===c&&(i=n('<div style="width:100px;height:100px;overflow:scroll;" />').appendTo("body"),c=n.fancybox.scrollbarWidth=i[0].offsetWidth-i[0].clientWidth,i.remove()),
n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar { margin-right: '+c+"px; }</style>"),n("body").addClass("compensate-for-scrollbar"))),r="",n.each(l.buttons,function(e,t){r+=l.btnTpl[t]||""}),o=n(a.translate(a,l.baseTpl.replace("{{buttons}}",r).replace("{{arrows}}",l.btnTpl.arrowLeft+l.btnTpl.arrowRight))).attr("id","fancybox-container-"+a.id).addClass("fancybox-is-hidden").addClass(l.baseClass).data("FancyBox",a).appendTo(l.parentEl),a.$refs={container:o},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){a.$refs[e]=o.find(".fancybox-"+e)}),a.trigger("onInit"),a.activate(),a.jumpTo(a.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var i=n[t];return void 0===i?e:i})},addContent:function(e){var t,i=this,o=n.makeArray(e);n.each(o,function(e,t){var o,r,a,s,l,c={},d={};n.isPlainObject(t)?(c=t,d=t.opts||t):"object"===n.type(t)&&n(t).length?(o=n(t),d=o.data()||{},d=n.extend(!0,{},d,d.options),d.$orig=o,c.src=i.opts.src||d.src||o.attr("href"),c.type||c.src||(c.type="inline",c.src=t)):c={type:"html",src:t+""},c.opts=n.extend(!0,{},i.opts,d),n.isArray(d.buttons)&&(c.opts.buttons=d.buttons),r=c.type||c.opts.type,s=c.src||"",!r&&s&&((a=s.match(/\.(mp4|mov|ogv)((\?|#).*)?$/i))?(r="video",c.opts.videoFormat||(c.opts.videoFormat="video/"+("ogv"===a[1]?"ogg":a[1]))):s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?r="image":s.match(/\.(pdf)((\?|#).*)?$/i)?r="iframe":"#"===s.charAt(0)&&(r="inline")),r?c.type=r:i.trigger("objectNeedsType",c),c.contentType||(c.contentType=n.inArray(c.type,["html","inline","ajax"])>-1?"html":c.type),c.index=i.group.length,"auto"==c.opts.smallBtn&&(c.opts.smallBtn=n.inArray(c.type,["html","inline","ajax"])>-1),"auto"===c.opts.toolbar&&(c.opts.toolbar=!c.opts.smallBtn),c.opts.$trigger&&c.index===i.opts.index&&(c.opts.$thumb=c.opts.$trigger.find("img:first")),c.opts.$thumb&&c.opts.$thumb.length||!c.opts.$orig||(c.opts.$thumb=c.opts.$orig.find("img:first")),"function"===n.type(c.opts.caption)&&(c.opts.caption=c.opts.caption.apply(t,[i,c])),"function"===n.type(i.opts.caption)&&(c.opts.caption=i.opts.caption.apply(t,[i,c])),c.opts.caption instanceof n||(c.opts.caption=void 0===c.opts.caption?"":c.opts.caption+""),"ajax"===c.type&&(l=s.split(/\s+/,2),l.length>1&&(c.src=l.shift(),c.opts.filter=l.shift())),c.opts.modal&&(c.opts=n.extend(!0,c.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),i.group.push(c)}),Object.keys(i.slides).length&&(i.updateControls(),(t=i.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),a.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?d(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},n.fancybox.isMobile?600:250))}),s.on("focusin.fb",function(e){var i=n.fancybox?n.fancybox.getInstance():null;i.isClosing||!i.current||!i.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||i&&"fixed"!==n(e.target).css("position")&&!i.$refs.container.has(e.target).length&&(e.stopPropagation(),i.focus())}),s.on("keydown.fb",function(e){var t=i.current,o=e.keyCode||e.which;if(t&&t.opts.keyboard&&!(e.ctrlKey||e.altKey||e.shiftKey||n(e.target).is("input")||n(e.target).is("textarea")))return 8===o||27===o?(e.preventDefault(),void i.close(e)):37===o||38===o?(e.preventDefault(),void i.previous()):39===o||40===o?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,o)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){++i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){var t=this;a.off("orientationchange.fb resize.fb"),s.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),t.idleInterval&&(e.clearInterval(t.idleInterval),t.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t){var i,o,r,a,s,l,c,d=this,u=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(o=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||e>=u))return!1;if(i=d.firstRun=!Object.keys(d.slides).length,!(u<2&&!i&&d.isDragging)){if(a=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,r=d.createSlide(e),u>1&&((o||r.index>0)&&d.createSlide(e-1),(o||r.index<u-1)&&d.createSlide(e+1)),d.current=r,d.currIndex=r.index,d.currPos=r.pos,d.trigger("beforeShow",i),d.updateControls(),l=n.fancybox.getTranslate(r.$slide),r.isMoved=(0!==l.left||0!==l.top)&&!r.$slide.hasClass("fancybox-animated"),r.forcedDuration=void 0,n.isNumeric(t)?r.forcedDuration=t:t=r.opts[i?"animationDuration":"transitionDuration"],t=parseInt(t,10),i)return r.opts.animationEffect&&t&&d.$refs.container.css("transition-duration",t+"ms"),d.$refs.container.removeClass("fancybox-is-hidden"),p(d.$refs.container),d.$refs.container.addClass("fancybox-is-open"),p(d.$refs.container),r.$slide.addClass("fancybox-slide--previous"),d.loadSlide(r),r.$slide.removeClass("fancybox-slide--previous").addClass("fancybox-slide--current"),void d.preload("image");n.each(d.slides,function(e,t){n.fancybox.stop(t.$slide)}),r.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),r.isMoved?(s=Math.round(r.$slide.width()),n.each(d.slides,function(e,i){var o=i.pos-r.pos;n.fancybox.animate(i.$slide,{top:0,left:o*s+o*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===d.currPos&&(r.isMoved=!1,d.complete())})})):d.$refs.stage.children().removeAttr("style"),r.isLoaded?d.revealContent(r):d.loadSlide(r),d.preload("image"),a.pos!==r.pos&&(c="fancybox-slide--"+(a.pos>r.pos?"next":"previous"),a.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),a.isComplete=!1,t&&(r.isMoved||r.opts.transitionEffect)&&(r.isMoved?a.$slide.addClass(c):(c="fancybox-animated "+c+" fancybox-fx-"+r.opts.transitionEffect,n.fancybox.animate(a.$slide,c,t,function(){a.$slide.removeClass(c).removeAttr("style")}))))}}},createSlide:function(e){var t,i,o=this;return i=e%o.group.length,i=i<0?o.group.length+i:i,!o.slides[e]&&o.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[e]=n.extend(!0,{},o.group[i],{pos:e,$slide:t,isLoaded:!1}),o.updateSlide(o.slides[e])),o.slides[e]},scaleToActual:function(e,t,i){var o,r,a,s,l,c=this,d=c.current,u=d.$content,p=n.fancybox.getTranslate(d.$slide).width,f=n.fancybox.getTranslate(d.$slide).height,h=d.width,g=d.height;!c.isAnimating&&u&&"image"==d.type&&d.isLoaded&&!d.hasError&&(n.fancybox.stop(u),c.isAnimating=!0,e=void 0===e?.5*p:e,t=void 0===t?.5*f:t,o=n.fancybox.getTranslate(u),o.top-=n.fancybox.getTranslate(d.$slide).top,o.left-=n.fancybox.getTranslate(d.$slide).left,s=h/o.width,l=g/o.height,r=.5*p-.5*h,a=.5*f-.5*g,h>p&&(r=o.left*s-(e*s-e),r>0&&(r=0),r<p-h&&(r=p-h)),g>f&&(a=o.top*l-(t*l-t),a>0&&(a=0),a<f-g&&(a=f-g)),c.updateCursor(h,g),n.fancybox.animate(u,{top:a,left:r,scaleX:s,scaleY:l},i||330,function(){c.isAnimating=!1}),c.SlideShow&&c.SlideShow.isActive&&c.SlideShow.stop())},scaleToFit:function(e){var t,i=this,o=i.current,r=o.$content;!i.isAnimating&&r&&"image"==o.type&&o.isLoaded&&!o.hasError&&(n.fancybox.stop(r),i.isAnimating=!0,t=i.getFitPos(o),i.updateCursor(t.width,t.height),n.fancybox.animate(r,{top:t.top,left:t.left,scaleX:t.width/r.width(),scaleY:t.height/r.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,n,i,o,r,a=this,s=e.$content,l=e.width||e.opts.width,c=e.height||e.opts.height,d={};return!!(e.isLoaded&&s&&s.length)&&(o={top:parseInt(e.$slide.css("paddingTop"),10),right:parseInt(e.$slide.css("paddingRight"),10),bottom:parseInt(e.$slide.css("paddingBottom"),10),left:parseInt(e.$slide.css("paddingLeft"),10)},t=parseInt(a.$refs.stage.width(),10)-(o.left+o.right),n=parseInt(a.$refs.stage.height(),10)-(o.top+o.bottom),l&&c||(l=t,c=n),i=Math.min(1,t/l,n/c),l=Math.floor(i*l),c=Math.floor(i*c),"image"===e.type?(d.top=Math.floor(.5*(n-c))+o.top,d.left=Math.floor(.5*(t-l))+o.left):"video"===e.contentType&&(r=e.opts.width&&e.opts.height?l/c:e.opts.ratio||16/9,c>l/r?c=l/r:l>c*r&&(l=c*r)),d.width=l,d.height=c,d)},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e,t){var i=this,o=e&&e.$content,r=e.width||e.opts.width,a=e.height||e.opts.height;o&&(r||a||"video"===e.contentType)&&!e.hasError&&(n.fancybox.stop(o),n.fancybox.setTranslate(o,i.getFitPos(e)),e.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),e.$slide.trigger("refresh"),i.$refs.toolbar.toggleClass("compensate-for-scrollbar",e.$slide.get(0).scrollHeight>e.$slide.get(0).clientHeight),i.trigger("onUpdate",e)},centerSlide:function(e,t){var i,o,r=this;r.current&&(i=Math.round(e.$slide.width()),o=e.pos-r.current.pos,n.fancybox.animate(e.$slide,{top:0,left:o*i+o*e.opts.gutter,opacity:1},void 0===t?0:t,null,!1))},updateCursor:function(e,t){var i,o=this,r=o.current,a=o.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");r&&!o.isClosing&&(i=o.isZoomable(),a.toggleClass("fancybox-is-zoomable",i),n("[data-fancybox-zoom]").prop("disabled",!i),i&&("zoom"===r.opts.clickContent||n.isFunction(r.opts.clickContent)&&"zoom"===r.opts.clickContent(r))?o.isScaledDown(e,t)?a.addClass("fancybox-can-zoomIn"):r.opts.touch?a.addClass("fancybox-can-drag"):a.addClass("fancybox-can-zoomOut"):r.opts.touch&&"video"!==r.contentType&&a.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this,n=t.current;if(n&&!t.isClosing&&"image"===n.type&&!n.hasError){if(!n.isLoaded)return!0;if(e=t.getFitPos(n),n.width>e.width||n.height>e.height)return!0}return!1},isScaledDown:function(e,t){var i=this,o=!1,r=i.current,a=r.$content;return void 0!==e&&void 0!==t?o=e<r.width&&t<r.height:a&&(o=n.fancybox.getTranslate(a),o=o.width<r.width&&o.height<r.height),o},canPan:function(){var e,t=this,n=!1,i=t.current;return"image"===i.type&&(e=i.$content)&&!i.hasError&&(n=t.getFitPos(i),n=Math.abs(e.width()-n.width)>1||Math.abs(e.height()-n.height)>1),n},loadSlide:function(e){var t,i,o,r=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,r.trigger("beforeLoad",e),t=e.type,i=e.$slide,i.off("refresh").trigger("onReset").addClass(e.opts.slideClass),t){case"image":r.setImage(e);break;case"iframe":r.setIframe(e);break;case"html":r.setContent(e,e.src||e.content);break;case"video":r.setContent(e,'<video class="fancybox-video" controls controlsList="nodownload"><source src="'+e.src+'" type="'+e.opts.videoFormat+"\">Your browser doesn't support HTML5 video</video");break;case"inline":n(e.src).length?r.setContent(e,n(e.src)):r.setError(e);break;case"ajax":r.showLoading(e),o=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&r.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&r.setError(e)}})),i.one("onReset",function(){o.abort()});break;default:r.setError(e)}return!0}},setImage:function(t){var i,o,r,a,s,l=this,c=t.opts.srcset||t.opts.image.srcset;if(t.timouts=setTimeout(function(){var e=t.$image;!t.isLoading||e&&e[0].complete||t.hasError||l.showLoading(t)},350),c){a=e.devicePixelRatio||1,s=e.innerWidth*a,r=c.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);if(0===n)return t.url=e;i&&(t.value=i,t.postfix=e[e.length-1])}),t}),r.sort(function(e,t){return e.value-t.value});for(var d=0;d<r.length;d++){var u=r[d];if("w"===u.postfix&&u.value>=s||"x"===u.postfix&&u.value>=a){o=u;break}}!o&&r.length&&(o=r[r.length-1]),o&&(t.src=o.url,t.width&&t.height&&"w"==o.postfix&&(t.height=t.width/t.height*o.value,t.width=o.value),t.opts.srcset=c)}t.$content=n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),i=t.opts.thumb||!(!t.opts.$thumb||!t.opts.$thumb.length)&&t.opts.$thumb.attr("src"),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&i&&(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null}).one("load",function(){l.afterLoad(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",i)),l.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){var n;e.$ghost||(t.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),t.afterLoad(e)),e.timouts&&(clearTimeout(e.timouts),e.timouts=null),t.isClosing||(e.opts.srcset&&(n=e.opts.sizes,n&&"auto"!==n||(n=(e.width/e.height>1&&a.width()/a.height()>1?"100":Math.round(e.width/e.height*100))+"vw"),i.attr("sizes",n).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!t.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),t.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(i[0].complete||"complete"==i[0].readyState)&&i[0].naturalWidth&&i[0].naturalHeight?i.trigger("load"):i[0].error&&i.trigger("error")},resolveImageSlideSize:function(e,t,n){var i=parseInt(e.opts.width,10),o=parseInt(e.opts.height,10);e.width=t,e.height=n,i>0&&(e.width=i,e.height=Math.floor(i*n/t)),o>0&&(e.width=Math.floor(o*t/n),e.height=o)},setIframe:function(e){var t,i=this,o=e.opts.iframe,r=e.$slide;e.$content=n('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(r),r.addClass("fancybox-slide--"+e.contentType),e.$iframe=t=n(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(e.$content),o.preload?(i.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),i.afterLoad(e)}),r.on("refresh.fb",function(){var n,i,r=e.$content,a=o.css.width,s=o.css.height;if(1===t[0].isReady){try{n=t.contents(),i=n.find("body")}catch(e){}i&&i.length&&i.children().length&&(r.css({width:"",height:""}),void 0===a&&(a=Math.ceil(Math.max(i[0].clientWidth,i.outerWidth(!0)))),a&&r.width(a),void 0===s&&(s=Math.ceil(Math.max(i[0].clientHeight,i.outerHeight(!0)))),s&&r.height(s)),r.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),r.one("onReset",function(){try{n(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}n(this).off("refresh.fb").empty(),e.isLoaded=!1})},setContent:function(e,t){var i=this;i.isClosing||(i.hideLoading(e),e.$content&&n.fancybox.stop(e.$content),e.$slide.empty(),c(t)&&t.parent().length?(t.parent().parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&(t=n("<div>").append(n.trim(t)).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){n(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),n(t).appendTo(e.$slide),n(t).is("video,audio")&&(n(t).addClass("fancybox-video"),n(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||n(t).attr("width"),e.opts.height=e.opts.height||n(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio").first().addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){var t=this;(e=e||t.current)&&!e.$spinner&&(e.$spinner=n(t.translate(t,t.opts.spinnerTpl)).appendTo(e.$slide))},hideLoading:function(e){var t=this;(e=e||t.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.pos===t.currPos&&t.updateCursor(),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=n(t.translate(e,e.opts.btnTpl.smallBtn)).prependTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.revealContent(e))},revealContent:function(e){var t,i,o,r,a=this,s=e.$slide,l=!1,c=!1;return t=e.opts[a.firstRun?"animationEffect":"transitionEffect"],o=e.opts[a.firstRun?"animationDuration":"transitionDuration"],o=parseInt(void 0===e.forcedDuration?o:e.forcedDuration,10),e.pos===a.currPos&&(e.isComplete?t=!1:a.isAnimating=!0),!e.isMoved&&e.pos===a.currPos&&o||(t=!1),"zoom"===t&&(e.pos===a.currPos&&o&&"image"===e.type&&!e.hasError&&(c=a.getThumbPos(e))?l=a.getFitPos(e):t="fade"),"zoom"===t?(l.scaleX=l.width/c.width,l.scaleY=l.height/c.height,r=e.opts.zoomOpacity,"auto"==r&&(r=Math.abs(e.width/e.height-c.width/c.height)>.1),r&&(c.opacity=.1,l.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),c),p(e.$content),void n.fancybox.animate(e.$content,l,o,function(){a.isAnimating=!1,a.complete()})):(a.updateSlide(e),t?(n.fancybox.stop(s),i="fancybox-animated fancybox-slide--"+(e.pos>=a.prevPos?"next":"previous")+" fancybox-fx-"+t,s.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),e.$content.removeClass("fancybox-is-hidden"),p(s),void n.fancybox.animate(s,"fancybox-slide--current",o,function(t){s.removeClass(i).removeAttr("style"),e.pos===a.currPos&&a.complete()},!0)):(p(s),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===a.currPos&&a.complete())))},getThumbPos:function(i){var o,r=this,a=!1,s=i.opts.$thumb,l=s&&s.length&&s[0].ownerDocument===t?s.offset():0;return l&&function(t){for(var i=t[0],o=i.getBoundingClientRect(),r=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||r.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return r.every(function(e){var t=Math.min(o.right,e.right)-Math.max(o.left,e.left),n=Math.min(o.bottom,e.bottom)-Math.max(o.top,e.top);return t>0&&n>0})&&o.bottom>0&&o.right>0&&o.left<n(e).width()&&o.top<n(e).height()}(s)&&(o=r.$refs.stage.offset(),a={top:l.top-o.top+parseFloat(s.css("border-top-width")||0),left:l.left-o.left+parseFloat(s.css("border-left-width")||0),width:s.width(),height:s.height(),scaleX:1,scaleY:1}),a},complete:function(){var e=this,i=e.current,o={};!i.isMoved&&i.isLoaded&&(i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),e.preload("inline"),p(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?o[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())}),e.slides=o),e.isAnimating=!1,e.updateCursor(),e.trigger("afterShow"),i.$slide.find("video,audio").filter(":visible:first").trigger("play"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(e){var t=this,n=t.slides[t.currPos+1],i=t.slides[t.currPos-1];n&&n.type===e&&t.loadSlide(n),i&&i.type===e&&t.loadSlide(i)},focus:function(){var e,t=this.current;this.isClosing||t&&t.isComplete&&t.$content&&(e=t.$content.find("input[autofocus]:enabled:visible:first"),e.length||(e=t.$content.find("button,:input,[tabindex],a").filter(":enabled:visible:first")),e=e&&e.length?e:t.$content,e.trigger("focus"))},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,o,r,a,s,l,c,f=this,h=f.current,g=function(){f.cleanUp(e)};return!f.isClosing&&(f.isClosing=!0,!1===f.trigger("beforeClose",e)?(f.isClosing=!1,d(function(){f.update()}),!1):(f.removeEvents(),h.timouts&&clearTimeout(h.timouts),r=h.$content,i=h.opts.animationEffect,o=n.isNumeric(t)?t:i?h.opts.animationDuration:0,h.$slide.off(u).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),h.$slide.siblings().trigger("onReset").remove(),o&&f.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),f.hideLoading(h),f.hideControls(),f.updateCursor(),"zoom"!==i||!0!==e&&r&&o&&"image"===h.type&&!h.hasError&&(c=f.getThumbPos(h))||(i="fade"),"zoom"===i?(n.fancybox.stop(r),a=n.fancybox.getTranslate(r),l={top:a.top,left:a.left,scaleX:a.width/c.width,scaleY:a.height/c.height,width:c.width,height:c.height},s=h.opts.zoomOpacity,"auto"==s&&(s=Math.abs(h.width/h.height-c.width/c.height)>.1),s&&(c.opacity=0),n.fancybox.setTranslate(r,l),p(r),n.fancybox.animate(r,c,o,g),!0):(i&&o?!0===e?setTimeout(g,o):n.fancybox.animate(h.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,o,g):g(),!0)))},cleanUp:function(e){var t,i=this,o=n("body");i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",e),i.$lastFocus&&i.current.opts.backFocus&&i.$lastFocus.trigger("focus"),i.current=null,t=n.fancybox.getInstance(),t?t.activate():(o.removeClass("fancybox-active compensate-for-scrollbar"),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,o=Array.prototype.slice.call(arguments,1),r=this,a=t&&t.opts?t:r.current;if(a?o.unshift(a):a=r,o.unshift(r),n.isFunction(a.opts[e])&&(i=a.opts[e].apply(a,o)),!1===i)return i;"afterClose"!==e&&r.$refs?r.$refs.container.trigger(e+".fb",o):s.trigger(e+".fb",o)},updateControls:function(e){var t=this,n=t.current,i=n.index,o=n.opts.caption,r=t.$refs.container,a=t.$refs.caption;n.$slide.trigger("refresh"),t.$caption=o&&o.length?a.html(o):null,t.isHiddenControls||t.isIdle||t.showControls(),r.find("[data-fancybox-count]").html(t.group.length),r.find("[data-fancybox-index]").html(i+1),r.find("[data-fancybox-prev]").toggleClass("disabled",!n.opts.loop&&i<=0),r.find("[data-fancybox-next]").toggleClass("disabled",!n.opts.loop&&i>=t.group.length-1),"image"===n.type?r.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",n.opts.image.src||n.src).show():n.opts.toolbar&&r.find("[data-fancybox-download],[data-fancybox-zoom]").hide()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.isHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&e.group.length>1)).toggleClass("fancybox-show-nav",!!(t.arrows&&e.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal),e.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.3.5",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof h&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new h(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),s.add("body").off("click.fb-start","**")},isMobile:void 0!==t.createTouch&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n)&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;return!(!e||!e.length)&&(t=e[0].getBoundingClientRect(),{top:t.top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))})},setTranslate:function(e,t){var n="",i={};if(e&&t)return void 0===t.left&&void 0===t.top||(n=(void 0===t.left?e.position().left:t.left)+"px, "+(void 0===t.top?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==t.scaleX&&void 0!==t.scaleY&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(i.transform=n),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.width&&(i.width=t.width),void 0!==t.height&&(i.height=t.height),e.css(i)},animate:function(e,t,i,o,r){var a=!1;n.isFunction(i)&&(o=i,i=null),n.isPlainObject(t)||e.removeAttr("style"),n.fancybox.stop(e),e.on(u,function(i){(!i||!i.originalEvent||e.is(i.originalEvent.target)&&"z-index"!=i.originalEvent.propertyName)&&(n.fancybox.stop(e),a&&n.fancybox.setTranslate(e,a),n.isPlainObject(t)?!1===r&&e.removeAttr("style"):!0!==r&&e.removeClass(t),n.isFunction(o)&&o(i))}),n.isNumeric(i)&&e.css("transition-duration",i+"ms"),n.isPlainObject(t)?(void 0!==t.scaleX&&void 0!==t.scaleY&&(a=n.extend({},t,{width:e.width()*t.scaleX,height:e.height()*t.scaleY,scaleX:1,scaleY:1}),delete t.width,delete t.height,e.parent().hasClass("fancybox-slide--image")&&e.parent().addClass("fancybox-is-scaling")),n.fancybox.setTranslate(e,t)):e.addClass(t),e.data("timer",setTimeout(function(){e.trigger("transitionend")},i+16))},stop:function(e){e&&e.length&&(clearTimeout(e.data("timer")),e.off("transitionend").css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},n.fn.fancybox=function(e){var t;return e=e||{},t=e.selector||!1,t?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},o):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},o),this},s.on("click.fb-start","[data-fancybox]",o),s.on("click.fb-start","[data-trigger]",function(e){o(e,{$target:n('[data-fancybox="'+n(e.currentTarget).attr("data-trigger")+'"]').eq(n(e.currentTarget).attr("data-index")||0),$trigger:n(this)})})}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("objectNeedsType.fb",function(i,o,r){var a,s,l,c,d,u,p,f=r.src||"",h=!1;a=e.extend(!0,{},n,r.opts.media),e.each(a,function(n,i){if(l=f.match(i.matcher)){if(h=i.type,p=n,u={},i.paramPlace&&l[i.paramPlace]){d=l[i.paramPlace],"?"==d[0]&&(d=d.substring(1)),d=d.split("&");for(var o=0;o<d.length;++o){var a=d[o].split("=",2);2==a.length&&(u[a[0]]=decodeURIComponent(a[1].replace(/\+/g," ")))}}return c=e.extend(!0,{},i.params,r.opts[n],u),f="function"===e.type(i.url)?i.url.call(this,l,c,r):t(i.url,l,c),s="function"===e.type(i.thumb)?i.thumb.call(this,l,c,r):t(i.thumb,l),"youtube"===n?f=f.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===n&&(f=f.replace("&%23","#")),!1}}),h?(r.opts.thumb||r.opts.$thumb&&r.opts.$thumb.length||(r.opts.thumb=s),"iframe"===h&&(r.opts=e.extend(!0,r.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),e.extend(r,{type:h,src:f,origSrc:r.src,contentSource:p,contentType:"image"===h?"image":"gmap_place"==p||"gmap_search"==p?"map":"video"})):f&&(r.type=r.opts.defaultType)})}(window.jQuery||jQuery),function(e,t,n){"use strict";var i=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),o=function(){return e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)}}(),r=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},a=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},s=function(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio')||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,o=i.length;t<o;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],o=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return o||r},c=function(e){for(var t=!1;;){if(t=l(e.get(0)))break;if(e=e.parent(),!e.length||e.hasClass("fancybox-stage")||e.is("body"))break}return t},d=function(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(t,"ontouchstart"))};d.prototype.destroy=function(){this.$container.off(".fb.touch")},d.prototype.ontouchstart=function(i){var o=this,l=n(i.target),d=o.instance,u=d.current,p=u.$content,f="touchstart"==i.type;if(f&&o.$container.off("mousedown.fb.touch"),(!i.originalEvent||2!=i.originalEvent.button)&&l.length&&!s(l)&&!s(l.parent())&&(l.is("img")||!(i.originalEvent.clientX>l[0].clientWidth+l.offset().left))){
if(!u||d.isAnimating||d.isClosing)return i.stopPropagation(),void i.preventDefault();if(o.realPoints=o.startPoints=r(i),o.startPoints.length){if(i.stopPropagation(),o.startEvent=i,o.canTap=!0,o.$target=l,o.$content=p,o.opts=u.opts.touch,o.isPanning=!1,o.isSwiping=!1,o.isZooming=!1,o.isScrolling=!1,o.startTime=(new Date).getTime(),o.distanceX=o.distanceY=o.distance=0,o.canvasWidth=Math.round(u.$slide[0].clientWidth),o.canvasHeight=Math.round(u.$slide[0].clientHeight),o.contentLastPos=null,o.contentStartPos=n.fancybox.getTranslate(o.$content)||{top:0,left:0},o.sliderStartPos=o.sliderLastPos||n.fancybox.getTranslate(u.$slide),o.stagePos=n.fancybox.getTranslate(d.$refs.stage),o.sliderStartPos.top-=o.stagePos.top,o.sliderStartPos.left-=o.stagePos.left,o.contentStartPos.top-=o.stagePos.top,o.contentStartPos.left-=o.stagePos.left,n(t).off(".fb.touch").on(f?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(o,"ontouchend")).on(f?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(o,"ontouchmove")),n.fancybox.isMobile&&t.addEventListener("scroll",o.onscroll,!0),!o.opts&&!d.canPan()||!l.is(o.$stage)&&!o.$stage.find(l).length)return void(l.is(".fancybox-image")&&i.preventDefault());n.fancybox.isMobile&&(c(l)||c(l.parent()))||i.preventDefault(),(1===o.startPoints.length||u.hasError)&&(o.instance.canPan()?(n.fancybox.stop(o.$content),o.$content.css("transition-duration",""),o.isPanning=!0):o.isSwiping=!0,o.$container.addClass("fancybox-controls--isGrabbing")),2===o.startPoints.length&&"image"===u.type&&(u.isLoaded||u.$ghost)&&(o.canTap=!1,o.isSwiping=!1,o.isPanning=!1,o.isZooming=!0,n.fancybox.stop(o.$content),o.$content.css("transition-duration",""),o.centerPointStartX=.5*(o.startPoints[0].x+o.startPoints[1].x)-n(e).scrollLeft(),o.centerPointStartY=.5*(o.startPoints[0].y+o.startPoints[1].y)-n(e).scrollTop(),o.percentageOfImageAtPinchPointX=(o.centerPointStartX-o.contentStartPos.left)/o.contentStartPos.width,o.percentageOfImageAtPinchPointY=(o.centerPointStartY-o.contentStartPos.top)/o.contentStartPos.height,o.startDistanceBetweenFingers=a(o.startPoints[0],o.startPoints[1]))}}},d.prototype.onscroll=function(e){var n=this;n.isScrolling=!0,t.removeEventListener("scroll",n.onscroll,!0)},d.prototype.ontouchmove=function(e){var t=this,i=n(e.target);return void 0!==e.originalEvent.buttons&&0===e.originalEvent.buttons?void t.ontouchend(e):t.isScrolling||!i.is(t.$stage)&&!t.$stage.find(i).length?void(t.canTap=!1):(t.newPoints=r(e),void((t.opts||t.instance.canPan())&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=a(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=a(t.newPoints[0],t.startPoints[0],"y"),t.distance=a(t.newPoints[0],t.startPoints[0]),t.distance>0&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))))},d.prototype.onSwipe=function(t){var r,a=this,s=a.isSwiping,l=a.sliderStartPos.left||0;if(!0!==s)"x"==s&&(a.distanceX>0&&(a.instance.group.length<2||0===a.instance.current.index&&!a.instance.current.opts.loop)?l+=Math.pow(a.distanceX,.8):a.distanceX<0&&(a.instance.group.length<2||a.instance.current.index===a.instance.group.length-1&&!a.instance.current.opts.loop)?l-=Math.pow(-a.distanceX,.8):l+=a.distanceX),a.sliderLastPos={top:"x"==s?0:a.sliderStartPos.top+a.distanceY,left:l},a.requestId&&(o(a.requestId),a.requestId=null),a.requestId=i(function(){a.sliderLastPos&&(n.each(a.instance.slides,function(e,t){var i=t.pos-a.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:a.sliderLastPos.top,left:a.sliderLastPos.left+i*a.canvasWidth+i*t.opts.gutter})}),a.$container.addClass("fancybox-is-sliding"))});else if(Math.abs(a.distance)>10){if(a.canTap=!1,a.instance.group.length<2&&a.opts.vertical?a.isSwiping="y":a.instance.isDragging||!1===a.opts.vertical||"auto"===a.opts.vertical&&n(e).width()>800?a.isSwiping="x":(r=Math.abs(180*Math.atan2(a.distanceY,a.distanceX)/Math.PI),a.isSwiping=r>45&&r<135?"y":"x"),a.canTap=!1,"y"===a.isSwiping&&n.fancybox.isMobile&&(c(a.$target)||c(a.$target.parent())))return void(a.isScrolling=!0);a.instance.isDragging=a.isSwiping,a.startPoints=a.newPoints,n.each(a.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration",""),t.inTransition=!1,t.pos===a.instance.current.pos&&(a.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left-n.fancybox.getTranslate(a.instance.$refs.stage).left)}),a.instance.SlideShow&&a.instance.SlideShow.isActive&&a.instance.SlideShow.stop()}},d.prototype.onPan=function(){var e=this;if(a(e.newPoints[0],e.realPoints[0])<(n.fancybox.isMobile?10:5))return void(e.startPoints=e.newPoints);e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&(o(e.requestId),e.requestId=null),e.requestId=i(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)})},d.prototype.limitMovement=function(){var e,t,n,i,o,r,a=this,s=a.canvasWidth,l=a.canvasHeight,c=a.distanceX,d=a.distanceY,u=a.contentStartPos,p=u.left,f=u.top,h=u.width,g=u.height;return o=h>s?p+c:p,r=f+d,e=Math.max(0,.5*s-.5*h),t=Math.max(0,.5*l-.5*g),n=Math.min(s-h,.5*s-.5*h),i=Math.min(l-g,.5*l-.5*g),c>0&&o>e&&(o=e-1+Math.pow(-e+p+c,.8)||0),c<0&&o<n&&(o=n+1-Math.pow(n-p-c,.8)||0),d>0&&r>t&&(r=t-1+Math.pow(-t+f+d,.8)||0),d<0&&r<i&&(r=i+1-Math.pow(i-f-d,.8)||0),{top:r,left:o}},d.prototype.limitPosition=function(e,t,n,i){var o=this,r=o.canvasWidth,a=o.canvasHeight;return n>r?(e=e>0?0:e,e=e<r-n?r-n:e):e=Math.max(0,r/2-n/2),i>a?(t=t>0?0:t,t=t<a-i?a-i:t):t=Math.max(0,a/2-i/2),{top:t,left:e}},d.prototype.onZoom=function(){var t=this,r=t.contentStartPos,s=r.width,l=r.height,c=r.left,d=r.top,u=a(t.newPoints[0],t.newPoints[1]),p=u/t.startDistanceBetweenFingers,f=Math.floor(s*p),h=Math.floor(l*p),g=(s-f)*t.percentageOfImageAtPinchPointX,m=(l-h)*t.percentageOfImageAtPinchPointY,v=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),y=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),b=v-t.centerPointStartX,w=y-t.centerPointStartY,x=c+(g+b),C=d+(m+w),k={top:C,left:x,scaleX:p,scaleY:p};t.canTap=!1,t.newWidth=f,t.newHeight=h,t.contentLastPos=k,t.requestId&&(o(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},d.prototype.ontouchend=function(e){var i=this,a=Math.max((new Date).getTime()-i.startTime,1),s=i.isSwiping,l=i.isPanning,c=i.isZooming,d=i.isScrolling;if(i.endPoints=r(e),i.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),t.removeEventListener("scroll",i.onscroll,!0),i.requestId&&(o(i.requestId),i.requestId=null),i.isSwiping=!1,i.isPanning=!1,i.isZooming=!1,i.isScrolling=!1,i.instance.isDragging=!1,i.canTap)return i.onTap(e);i.speed=366,i.velocityX=i.distanceX/a*.5,i.velocityY=i.distanceY/a*.5,i.speedX=Math.max(.5*i.speed,Math.min(1.5*i.speed,1/Math.abs(i.velocityX)*i.speed)),l?i.endPanning():c?i.endZooming():i.endSwiping(s,d)},d.prototype.endSwiping=function(e,t){var i=this,o=!1,r=i.instance.group.length;i.sliderLastPos=null,"y"==e&&!t&&Math.abs(i.distanceY)>50?(n.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),o=i.instance.close(!0,200)):"x"==e&&i.distanceX>50&&r>1?o=i.instance.previous(i.speedX):"x"==e&&i.distanceX<-50&&r>1&&(o=i.instance.next(i.speedX)),!1!==o||"x"!=e&&"y"!=e||(t||r<2?i.instance.centerSlide(i.instance.current,150):i.instance.jumpTo(i.instance.current.index)),i.$container.removeClass("fancybox-is-sliding")},d.prototype.endPanning=function(){var e,t,i,o=this;o.contentLastPos&&(!1===o.opts.momentum?(e=o.contentLastPos.left,t=o.contentLastPos.top):(e=o.contentLastPos.left+o.velocityX*o.speed,t=o.contentLastPos.top+o.velocityY*o.speed),i=o.limitPosition(e,t,o.contentStartPos.width,o.contentStartPos.height),i.width=o.contentStartPos.width,i.height=o.contentStartPos.height,n.fancybox.animate(o.$content,i,330))},d.prototype.endZooming=function(){var e,t,i,o,r=this,a=r.instance.current,s=r.newWidth,l=r.newHeight;r.contentLastPos&&(e=r.contentLastPos.left,t=r.contentLastPos.top,o={top:t,left:e,width:s,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(r.$content,o),s<r.canvasWidth&&l<r.canvasHeight?r.instance.scaleToFit(150):s>a.width||l>a.height?r.instance.scaleToActual(r.centerPointStartX,r.centerPointStartY,150):(i=r.limitPosition(e,t,s,l),n.fancybox.setTranslate(r.$content,n.fancybox.getTranslate(r.$content)),n.fancybox.animate(r.$content,i,150)))},d.prototype.onTap=function(t){var i,o=this,a=n(t.target),s=o.instance,l=s.current,c=t&&r(t)||o.startPoints,d=c[0]?c[0].x-n(e).scrollLeft()-o.stagePos.left:0,u=c[0]?c[0].y-n(e).scrollTop()-o.stagePos.top:0,p=function(e){var i=l.opts[e];if(n.isFunction(i)&&(i=i.apply(s,[l,t])),i)switch(i){case"close":s.close(o.startEvent);break;case"toggleControls":s.toggleControls(!0);break;case"next":s.next();break;case"nextOrClose":s.group.length>1?s.next():s.close(o.startEvent);break;case"zoom":"image"==l.type&&(l.isLoaded||l.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(d,u):s.group.length<2&&s.close(o.startEvent))}};if((!t.originalEvent||2!=t.originalEvent.button)&&(a.is("img")||!(d>a[0].clientWidth+a.offset().left))){if(a.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))i="Outside";else if(a.is(".fancybox-slide"))i="Slide";else{if(!s.current.$content||!s.current.$content.find(a).addBack().filter(a).length)return;i="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,Math.abs(d-o.tapX)>50||Math.abs(u-o.tapY)>50)return this;p("dblclick"+i)}else o.tapX=d,o.tapY=u,l.opts["dblclick"+i]&&l.opts["dblclick"+i]!==l.opts["click"+i]?o.tapped=setTimeout(function(){o.tapped=null,p("click"+i)},500):p("click"+i);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new d(t))})}(window,document,window.jQuery||jQuery),function(e,t){"use strict";t.extend(!0,t.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg viewBox="0 0 40 40"><path d="M13,12 L27,20 L13,27 Z" /><path d="M15,10 v19 M23,10 v19" /></svg></button>'},slideShow:{autoStart:!1,speed:3e3}});var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(e){var t=this;t.instance&&t.instance.current&&(!0===e||t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.isActive&&t.instance.jumpTo((t.instance.currIndex+1)%t.instance.group.length)},t.instance.current.opts.slideShow.speed):(t.stop(),t.instance.idleSecondsCounter=0,t.instance.showControls())},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this,t=e.instance.current;t&&(e.isActive=!0,e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.set(!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var o=t&&t.SlideShow;i?o&&n.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,o,r,a){var s=i&&i.SlideShow;!s||!o.opts.slideShow||80!==a&&32!==a||t(e.activeElement).is("button,a,input")||(r.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery||jQuery),function(e,t){"use strict";var n=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={},i=0;i<t.length;i++){var o=t[i];if(o&&o[1]in e){for(var r=0;r<o.length;r++)n[t[0][r]]=o[r];return n}}return!1}();if(!n)return void(t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1));var i={request:function(t){t=t||e.documentElement,t[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t.extend(!0,t.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"><svg viewBox="0 0 40 40"><path d="M9,12 v16 h22 v-16 h-22 v8" /></svg></button>'},fullScreen:{autoStart:!1}}),t(e).on({"onInit.fb":function(e,t){var n;t&&t.group[t.currIndex].opts.fullScreen?(n=t.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()},"afterKeydown.fb":function(e,t,n,i,o){t&&t.FullScreen&&70===o&&(i.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}}),t(e).on(n.fullscreenchange,function(){var e=i.isFullscreen(),n=t.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.current.$content.css("transition","none"),n.isAnimating=!1,n.update(!0,!0,0)),n.trigger("onFullscreenChange",e),n.$refs.container.toggleClass("fancybox-is-fullscreen",e))})}(document,window.jQuery||jQuery),function(e,t){"use strict";var n="fancybox-thumbs";t.fancybox.defaults=t.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg viewBox="0 0 120 120"><path d="M30,30 h14 v14 h-14 Z M50,30 h14 v14 h-14 Z M70,30 h14 v14 h-14 Z M30,50 h14 v14 h-14 Z M50,50 h14 v14 h-14 Z M70,50 h14 v14 h-14 Z M30,70 h14 v14 h-14 Z M50,70 h14 v14 h-14 Z M70,70 h14 v14 h-14 Z" /></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},t.fancybox.defaults);var i=function(e){this.init(e)};t.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t,n,i=this;i.instance=e,e.Thumbs=i,i.opts=e.group[e.currIndex].opts.thumbs,t=e.group[0],t=t.opts.thumb||!(!t.opts.$thumb||!t.opts.$thumb.length)&&t.opts.$thumb.attr("src"),e.group.length>1&&(n=e.group[1],n=n.opts.thumb||!(!n.opts.$thumb||!n.opts.$thumb.length)&&n.opts.$thumb.attr("src")),i.$button=e.$refs.toolbar.find("[data-fancybox-thumbs]"),i.opts&&t&&n&&t&&n?(i.$button.show().on("click",function(){i.toggle()}),i.isActive=!0):i.$button.hide()},create:function(){var e,i=this,o=i.instance,r=i.opts.parentEl,a=[];i.$grid||(i.$grid=t('<div class="'+n+" "+n+"-"+i.opts.axis+'"></div>').appendTo(o.$refs.container.find(r).addBack().filter(r)),i.$grid.on("click","li",function(){o.jumpTo(t(this).attr("data-index"))})),i.$list||(i.$list=t("<ul>").appendTo(i.$grid)),t.each(o.group,function(t,n){e=n.opts.thumb||(n.opts.$thumb?n.opts.$thumb.attr("src"):null),e||"image"!==n.type||(e=n.src),a.push('<li data-index="'+t+'" tabindex="0" class="fancybox-thumbs-loading"'+(e&&e.length?' style="background-image:url('+e+')" />':"")+"></li>")}),i.$list[0].innerHTML=a.join(""),"x"===i.opts.axis&&i.$list.width(parseInt(i.$grid.css("padding-right"),10)+o.group.length*i.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,n,i=this,o=i.$list,r=i.$grid;i.instance.current&&(t=o.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+i.instance.current.index+'"]').addClass("fancybox-thumbs-active"),n=t.position(),"y"===i.opts.axis&&(n.top<0||n.top>o.height()-t.outerHeight())?o.stop().animate({scrollTop:o.scrollTop()+n.top},e):"x"===i.opts.axis&&(n.left<r.scrollLeft()||n.left>r.scrollLeft()+(r.width()-t.outerWidth()))&&o.parent().stop().animate({scrollLeft:n.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){var n;t&&!t.Thumbs&&(n=new i(t),n.isActive&&!0===n.opts.autoStart&&n.show())},"beforeShow.fb":function(e,t,n,i){var o=t&&t.Thumbs;o&&o.isVisible&&o.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,o){var r=t&&t.Thumbs;r&&r.isActive&&71===o&&(i.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,window.jQuery||jQuery),function(e,t){"use strict";function n(e){var t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]})}t.extend(!0,t.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg viewBox="0 0 40 40"><path d="M6,30 C8,18 19,16 23,16 L23,16 L23,10 L33,20 L23,29 L23,24 C19,24 8,27 6,30 Z"></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" /></p></div>'}}),t(e).on("click","[data-fancybox-share]",function(){var e,i,o=t.fancybox.getInstance(),r=o.current||null;r&&("function"===t.type(r.opts.share.url)&&(e=r.opts.share.url.apply(r,[o,r])),i=r.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===r.type?encodeURIComponent(r.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,n(e)).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),t.fancybox.open({src:o.translate(o,i),type:"html",opts:{animationEffect:!1,afterLoad:function(e,t){o.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__links a").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})}}}))})}(document,window.jQuery||jQuery),function(e,t,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,o=n.join("-");return{hash:e,index:i<1?1:i,gallery:o}}function o(e){""!==e.gallery&&n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1).trigger("click.fb-start")}function r(e){var t,n;return!!e&&(t=e.current?e.current.opts:e.opts,""!==(n=t.hash||(t.$orig?t.$orig.data("fancybox"):""))&&n)}n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,o;!1!==t.group[t.currIndex].opts.hash&&(n=i(),(o=r(t))&&n.gallery&&o==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,i,o,a){var s;o&&!1!==o.opts.hash&&(s=r(i))&&(i.currentHash=s+(i.group.length>1?"-"+(o.index+1):""),t.location.hash!=="#"+i.currentHash&&(i.origHash||(i.origHash=t.location.hash),i.hashTimer&&clearTimeout(i.hashTimer),i.hashTimer=setTimeout(function(){"replaceState"in t.history?(t.history[a?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+i.currentHash),a&&(i.hasCreatedHistory=!0)):t.location.hash=i.currentHash,i.hashTimer=null},300)))},"beforeClose.fb":function(n,i,o){!1!==o.opts.hash&&(r(i),i.currentHash&&i.hasCreatedHistory?t.history.back():i.currentHash&&("replaceState"in t.history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+(i.origHash||"")):t.location.hash=i.origHash),i.currentHash=null,clearTimeout(i.hashTimer))}}),n(t).on("hashchange.fb",function(){var e,t=i();n.each(n(".fancybox-container").get().reverse(),function(t,i){var o=n(i).data("FancyBox");if(o.currentHash)return e=o,!1}),e?!e.currentHash||e.currentHash===t.gallery+"-"+t.index||1===t.index&&e.currentHash==t.gallery||(e.currentHash=null,e.close()):""!==t.gallery&&o(t)}),setTimeout(function(){n.fancybox.getInstance()||o(i())},50))})}(document,window,window.jQuery||jQuery),function(e,t){"use strict";var n=(new Date).getTime();t(e).on({"onInit.fb":function(e,t,i){t.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var i=t.current,o=(new Date).getTime();t.group.length<2||!1===i.opts.wheel||"auto"===i.opts.wheel&&"image"!==i.type||(e.preventDefault(),e.stopPropagation(),i.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,o-n<250||(n=o,t[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,window.jQuery||jQuery),function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(t||n)}(function(e){"use strict";var t=function(t,n,i){var o={invalid:[],getCaret:function(){try{var e,n=0,i=t.get(0),r=document.selection,a=i.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?(e=r.createRange(),e.moveStart("character",-o.val().length),n=e.text.length):(a||"0"===a)&&(n=a),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,i=t.get(0);i.setSelectionRange?i.setSelectionRange(e,e):(n=i.createTextRange(),n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",o.getCaret()),o.maskDigitPosMapOld=o.maskDigitPosMap}).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",o.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){s===o.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("blur.mask",function(){s=o.val()}).on("focus.mask",function(t){!0===i.selectOnFocus&&e(t.target).select()}).on("focusout.mask",function(){i.clearIfNotMatch&&!r.test(o.val())&&o.val("")})},getRegexMask:function(){for(var e,t,i,o,r,s,l=[],c=0;c<n.length;c++)e=a.translation[n.charAt(c)],e?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=e.optional,o=e.recursive,o?(l.push(n.charAt(c)),r={digit:n.charAt(c),pattern:t}):l.push(i||o?t+"?":t)):l.push(n.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return s=l.join(""),r&&(s=s.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(s)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,i=t.is("input"),o=i?"val":"text";return arguments.length>0?(t[o]()!==e&&t[o](e),n=t):n=t[o](),n},calculateCaretPosition:function(){var e=t.data("mask-previus-value")||"",n=o.getMasked(),i=o.getCaret();if(e!==n){var r=t.data("mask-previus-caret-pos")||0,a=n.length,s=e.length,l=0,c=0,d=0,u=0,p=0;for(p=i;p<a&&o.maskDigitPosMap[p];p++)c++;for(p=i-1;p>=0&&o.maskDigitPosMap[p];p--)l++;for(p=i-1;p>=0;p--)o.maskDigitPosMap[p]&&d++;for(p=r-1;p>=0;p--)o.maskDigitPosMapOld[p]&&u++;if(i>s)i=10*a;else if(r>=i&&r!==s){if(!o.maskDigitPosMapOld[i]){var f=i;i-=u-d,i-=l,o.maskDigitPosMap[i]&&(i=f)}}else i>r&&(i+=d-u,i+=c)}return i},behaviour:function(n){n=n||window.event,o.invalid=[];var i=t.data("mask-keycode");if(-1===e.inArray(i,a.byPassKeys)){var r=o.getMasked(),s=o.getCaret();return setTimeout(function(){o.setCaret(o.calculateCaretPosition())},e.jMaskGlobals.keyStrokeCompensation),o.val(r),o.setCaret(s),o.callbacks(n)}},getMasked:function(e,t){var r,s,l=[],c=void 0===t?o.val():t+"",d=0,u=n.length,p=0,f=c.length,h=1,g="push",m=-1,v=0,y=[];i.reverse?(g="unshift",h=-1,r=0,d=u-1,p=f-1,s=function(){return d>-1&&p>-1}):(r=u-1,s=function(){return d<u&&p<f});for(var b;s();){var w=n.charAt(d),x=c.charAt(p),C=a.translation[w];C?(x.match(C.pattern)?(l[g](x),C.recursive&&(-1===m?m=d:d===r&&d!==m&&(d=m-h),r===m&&(d-=h)),d+=h):x===b?(v--,b=void 0):C.optional?(d+=h,p-=h):C.fallback?(l[g](C.fallback),d+=h,p-=h):o.invalid.push({p:p,v:x,e:C.pattern}),p+=h):(e||l[g](w),x===w?(y.push(p),p+=h):(b=w,y.push(p+v),v++),d+=h)}var k=n.charAt(r);u!==f+1||a.translation[k]||l.push(k);var T=l.join("");return o.mapMaskdigitPositions(T,y,f),T},mapMaskdigitPositions:function(e,t,n){var r=i.reverse?e.length-n:0;o.maskDigitPosMap={};for(var a=0;a<t.length;a++)o.maskDigitPosMap[t[a]+r]=1},callbacks:function(e){var r=o.val(),a=r!==s,l=[r,e,t,i],c=function(e,t,n){"function"==typeof i[e]&&t&&i[e].apply(this,n)};c("onChange",!0===a,l),c("onKeyPress",!0===a,l),c("onComplete",r.length===n.length,l),c("onInvalid",o.invalid.length>0,[r,e,t,o.invalid,i])}};t=e(t);var r,a=this,s=o.val();n="function"==typeof n?n(o.val(),void 0,t,i):n,a.mask=n,a.options=i,a.remove=function(){var e=o.getCaret();return a.options.placeholder&&t.removeAttr("placeholder"),t.data("mask-maxlength")&&t.removeAttr("maxlength"),o.destroyEvents(),o.val(a.getCleanVal()),o.setCaret(e),t},a.getCleanVal=function(){return o.getMasked(!0)},a.getMaskedVal=function(e){return o.getMasked(!1,e)},a.init=function(s){if(s=s||!1,i=i||{},a.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,a.byPassKeys=e.jMaskGlobals.byPassKeys,a.translation=e.extend({},e.jMaskGlobals.translation,i.translation),a=e.extend(!0,{},a,i),r=o.getRegexMask(),s)o.events(),o.val(o.getMasked());else{i.placeholder&&t.attr("placeholder",i.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var l=0,c=!0;l<n.length;l++){var d=a.translation[n.charAt(l)];if(d&&d.recursive){c=!1;break}}c&&t.attr("maxlength",n.length).data("mask-maxlength",!0),o.destroyEvents(),o.events();var u=o.getCaret();o.val(o.getMasked()),o.setCaret(u)}},a.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),o={},r=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(o.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(o.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(o.selectOnFocus=!0),i(n,r,o))return n.data("mask",new t(this,r,o))},i=function(t,n,i){i=i||{};var o=e(t).data("mask"),r=JSON.stringify,a=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(a)),"object"!=typeof o||r(o.options)!==r(i)||o.mask!==n}catch(e){}};e.fn.mask=function(n,o){o=o||{};var r=this.selector,a=e.jMaskGlobals,s=a.watchInterval,l=o.watchInputs||a.watchInputs,c=function(){if(i(this,n,o))return e(this).data("mask",new t(this,n,o))};return e(this).each(c),r&&""!==r&&l&&(clearInterval(e.maskWatchers[r]),e.maskWatchers[r]=setInterval(function(){e(document).find(r).each(c)},s)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each(function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")})},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){t=t||e.jMaskGlobals.maskElements,(t instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var o={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,keyStrokeCompensation:10,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(e){var t,n=document.createElement("div");return e="on"+e,t=e in n,t||(n.setAttribute(e,"return;"),t="function"==typeof n[e]),n=null,t}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},o=e.jMaskGlobals=e.extend(!0,{},o,e.jMaskGlobals),o.dataMask&&e.applyDataMask(),setInterval(function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()},o.watchInterval)},window.jQuery,window.Zepto),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.flatpickr=t()}(this,function(){"use strict";function e(e,t,n){void 0===n&&(n=!1);var i;return function(){var o=this,r=arguments;null!==i&&clearTimeout(i),i=window.setTimeout(function(){i=null,n||e.apply(o,r)},t),n&&!i&&e.apply(o,r)}}function t(e,t,n){return void 0===n&&(n=!0),!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}function n(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function i(e,t,n){var i=window.document.createElement(e);return t=t||"",n=n||"",i.className=t,void 0!==n&&(i.textContent=n),i}function o(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function r(e,t){return t(e)?e:e.parentNode?r(e.parentNode,t):void 0}function a(e,t){var n=i("div","numInputWrapper"),o=i("input","numInput "+e),r=i("span","arrowUp"),a=i("span","arrowDown");if(o.type="text",o.pattern="\\d*",void 0!==t)for(var s in t)o.setAttribute(s,t[s]);return n.appendChild(o),n.appendChild(r),n.appendChild(a),n}function s(s,l){function p(){je.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=je.currentMonth),void 0===t&&(t=je.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:je.l10n.daysInMonth[e]}}}function h(e){return e.bind(je)}function m(){if(void 0!==je.daysContainer){
je.calendarContainer.style.visibility="hidden",je.calendarContainer.style.display="block";var e=(je.days.offsetWidth+1)*je.config.showMonths;je.daysContainer.style.width=e+"px",je.calendarContainer.style.width=e+"px",void 0!==je.weekWrapper&&(je.calendarContainer.style.width=e+je.weekWrapper.offsetWidth+"px"),je.calendarContainer.style.removeProperty("visibility"),je.calendarContainer.style.removeProperty("display")}}function w(e){0!==je.selectedDates.length&&(Ie(e),"input"!==e.type?(D(),Oe()):setTimeout(function(){D(),Oe()},T))}function k(e,t){return e%12+12*d(t===je.l10n.amPM[1])}function E(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}function D(){if(void 0!==je.hourElement&&void 0!==je.minuteElement){var e=(parseInt(je.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(je.minuteElement.value,10)||0)%60,i=void 0!==je.secondElement?(parseInt(je.secondElement.value,10)||0)%60:0;void 0!==je.amPM&&(e=k(e,je.amPM.textContent));var o=void 0!==je.config.minTime||je.config.minDate&&je.minDateHasTime&&je.latestSelectedDateObj&&0===t(je.latestSelectedDateObj,je.config.minDate,!0);if(void 0!==je.config.maxTime||je.config.maxDate&&je.maxDateHasTime&&je.latestSelectedDateObj&&0===t(je.latestSelectedDateObj,je.config.maxDate,!0)){var r=void 0!==je.config.maxTime?je.config.maxTime:je.config.maxDate;e=Math.min(e,r.getHours()),e===r.getHours()&&(n=Math.min(n,r.getMinutes())),n===r.getMinutes()&&(i=Math.min(i,r.getSeconds()))}if(o){var a=void 0!==je.config.minTime?je.config.minTime:je.config.minDate;e=Math.max(e,a.getHours()),e===a.getHours()&&(n=Math.max(n,a.getMinutes())),n===a.getMinutes()&&(i=Math.max(i,a.getSeconds()))}M(e,n,i)}}function $(e){var t=e||je.latestSelectedDateObj;t&&M(t.getHours(),t.getMinutes(),t.getSeconds())}function M(e,t,n){void 0!==je.latestSelectedDateObj&&je.latestSelectedDateObj.setHours(e%24,t,n||0,0),je.hourElement&&je.minuteElement&&!je.isMobile&&(je.hourElement.value=c(je.config.time_24hr?e:(12+e)%12+12*d(e%12==0)),je.minuteElement.value=c(t),void 0!==je.amPM&&(je.amPM.textContent=je.l10n.amPM[d(e>=12)]),void 0!==je.secondElement&&(je.secondElement.value=c(n)))}function P(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(e.target.blur(),/[^\d]/.test(t.toString())||re(t))}function A(e,t,n,i){return t instanceof Array?t.forEach(function(t){return A(e,t,n,i)}):e instanceof Array?e.forEach(function(e){return A(e,t,n,i)}):(e.addEventListener(t,n,i),void je._handlers.push({element:e,event:t,handler:n}))}function O(e){return function(t){1===t.which&&e(t)}}function L(){De("onChange")}function I(){if(je.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(je.element.querySelectorAll("[data-"+e+"]"),function(t){return A(t,"click",je[e])})}),je.isMobile)return void Se();var t=e(de,50);if(je._debouncedChange=e(L,T),je.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&A(je.daysContainer,"mouseover",function(e){"range"===je.config.mode&&ce(e.target)}),A(window.document.body,"keydown",le),je.config.static||A(je._input,"keydown",le),je.config.inline||je.config.static||A(window,"resize",t),void 0!==window.ontouchstart&&A(window.document,"touchstart",oe),A(window.document,"mousedown",O(oe)),A(window.document,"focus",oe,{capture:!0}),!0===je.config.clickOpens&&(A(je._input,"focus",je.open),A(je._input,"mousedown",O(je.open))),void 0!==je.daysContainer&&(A(je.monthNav,"mousedown",O(Le)),A(je.monthNav,["keyup","increment"],P),A(je.daysContainer,"mousedown",O(ye))),void 0!==je.timeContainer&&void 0!==je.minuteElement&&void 0!==je.hourElement){var n=function(e){return e.target.select()};A(je.timeContainer,["input","increment"],w),A(je.timeContainer,"mousedown",O(H)),A(je.timeContainer,["input","increment"],je._debouncedChange,{passive:!0}),A([je.hourElement,je.minuteElement],["focus","click"],n),void 0!==je.secondElement&&A(je.secondElement,"focus",function(){return je.secondElement&&je.secondElement.select()}),void 0!==je.amPM&&A(je.amPM,"mousedown",O(function(e){w(e),L()}))}}function j(e){var t=void 0!==e?je.parseDate(e):je.latestSelectedDateObj||(je.config.minDate&&je.config.minDate>je.now?je.config.minDate:je.config.maxDate&&je.config.maxDate<je.now?je.config.maxDate:je.now);try{void 0!==t&&(je.currentYear=t.getFullYear(),je.currentMonth=t.getMonth())}catch(e){e.message="Invalid date supplied: "+t,je.config.errorHandler(e)}je.redraw()}function H(e){~e.target.className.indexOf("arrow")&&N(e,e.target.classList.contains("arrowUp")?1:-1)}function N(e,t,n){var i=e&&e.target,o=n||i&&i.parentNode&&i.parentNode.firstChild,r=$e("increment");r.delta=t,o&&o.dispatchEvent(r)}function F(){var e=window.document.createDocumentFragment();if(je.calendarContainer=i("div","flatpickr-calendar"),je.calendarContainer.tabIndex=-1,!je.config.noCalendar){if(e.appendChild(V()),je.innerContainer=i("div","flatpickr-innerContainer"),je.config.weekNumbers){var t=K(),o=t.weekWrapper,r=t.weekNumbers;je.innerContainer.appendChild(o),je.weekNumbers=r,je.weekWrapper=o}je.rContainer=i("div","flatpickr-rContainer"),je.rContainer.appendChild(G()),je.daysContainer||(je.daysContainer=i("div","flatpickr-days"),je.daysContainer.tabIndex=-1),Y(),je.rContainer.appendChild(je.daysContainer),je.innerContainer.appendChild(je.rContainer),e.appendChild(je.innerContainer)}je.config.enableTime&&e.appendChild(Z()),n(je.calendarContainer,"rangeMode","range"===je.config.mode),n(je.calendarContainer,"animate",!0===je.config.animate),n(je.calendarContainer,"multiMonth",je.config.showMonths>1),je.calendarContainer.appendChild(e);var a=void 0!==je.config.appendTo&&void 0!==je.config.appendTo.nodeType;if((je.config.inline||je.config.static)&&(je.calendarContainer.classList.add(je.config.inline?"inline":"static"),je.config.inline&&(!a&&je.element.parentNode?je.element.parentNode.insertBefore(je.calendarContainer,je._input.nextSibling):void 0!==je.config.appendTo&&je.config.appendTo.appendChild(je.calendarContainer)),je.config.static)){var s=i("div","flatpickr-wrapper");je.element.parentNode&&je.element.parentNode.insertBefore(s,je.element),s.appendChild(je.element),je.altInput&&s.appendChild(je.altInput),s.appendChild(je.calendarContainer)}je.config.static||je.config.inline||(void 0!==je.config.appendTo?je.config.appendTo:window.document.body).appendChild(je.calendarContainer)}function q(e,o,r,a){var s=ae(o,!0),l=i("span","flatpickr-day "+e,o.getDate().toString());return l.dateObj=o,l.$i=a,l.setAttribute("aria-label",je.formatDate(o,je.config.ariaDateFormat)),-1===e.indexOf("hidden")&&0===t(o,je.now)&&(je.todayDateElem=l,l.classList.add("today"),l.setAttribute("aria-current","date")),s?(l.tabIndex=-1,Me(o)&&(l.classList.add("selected"),je.selectedDateElem=l,"range"===je.config.mode&&(n(l,"startRange",je.selectedDates[0]&&0===t(o,je.selectedDates[0],!0)),n(l,"endRange",je.selectedDates[1]&&0===t(o,je.selectedDates[1],!0)),"nextMonthDay"===e&&l.classList.add("inRange")))):l.classList.add("disabled"),"range"===je.config.mode&&Pe(o)&&!Me(o)&&l.classList.add("inRange"),je.weekNumbers&&1===je.config.showMonths&&"prevMonthDay"!==e&&r%7==1&&je.weekNumbers.insertAdjacentHTML("beforeend","<span class='flatpickr-day'>"+je.config.getWeek(o)+"</span>"),De("onDayCreate",l),l}function R(e){e.focus(),"range"===je.config.mode&&ce(e)}function z(e){for(var t=e>0?0:je.config.showMonths-1,n=e>0?je.config.showMonths:-1,i=t;i!=n;i+=e)for(var o=je.daysContainer.children[i],r=e>0?0:o.children.length-1,a=e>0?o.children.length:-1,s=r;s!=a;s+=e){var l=o.children[s];if(-1===l.className.indexOf("hidden")&&ae(l.dateObj))return l}}function W(e,t){for(var n=-1===e.className.indexOf("Month")?e.dateObj.getMonth():je.currentMonth,i=t>0?je.config.showMonths:-1,o=t>0?1:-1,r=n-je.currentMonth;r!=i;r+=o)for(var a=je.daysContainer.children[r],s=n-je.currentMonth===r?e.$i+t:t<0?a.children.length-1:0,l=a.children.length,c=s;c>=0&&c<l&&c!=(t>0?l:-1);c+=o){var d=a.children[c];if(-1===d.className.indexOf("hidden")&&ae(d.dateObj)&&Math.abs(e.$i-c)>=Math.abs(t))return R(d)}je.changeMonth(o),_(z(o),0)}function _(e,t){var n=se(document.activeElement),i=void 0!==e?e:n?document.activeElement:void 0!==je.selectedDateElem&&se(je.selectedDateElem)?je.selectedDateElem:void 0!==je.todayDateElem&&se(je.todayDateElem)?je.todayDateElem:z(t>0?1:-1);return void 0===i?je._input.focus():n?void W(i,t):R(i)}function B(e,t){for(var n=(new Date(e,t,1).getDay()-je.l10n.firstDayOfWeek+7)%7,o=je.utils.getDaysInMonth((t-1+12)%12),r=je.utils.getDaysInMonth(t),a=window.document.createDocumentFragment(),s=je.config.showMonths>1,l=s?"prevMonthDay hidden":"prevMonthDay",c=s?"nextMonthDay hidden":"nextMonthDay",d=o+1-n,u=0;d<=o;d++,u++)a.appendChild(q(l,new Date(e,t-1,d),d,u));for(d=1;d<=r;d++,u++)a.appendChild(q("",new Date(e,t,d),d,u));for(var p=r+1;p<=42-n&&(1===je.config.showMonths||u%7!=0);p++,u++)a.appendChild(q(c,new Date(e,t+1,p%r),p,u));var f=i("div","dayContainer");return f.appendChild(a),f}function Y(){if(void 0!==je.daysContainer){o(je.daysContainer),je.weekNumbers&&o(je.weekNumbers);for(var e=document.createDocumentFragment(),t=0;t<je.config.showMonths;t++){var n=new Date(je.currentYear,je.currentMonth,1);n.setMonth(je.currentMonth+t),e.appendChild(B(n.getFullYear(),n.getMonth()))}je.daysContainer.appendChild(e),je.days=je.daysContainer.firstChild}}function U(){var e=i("div","flatpickr-month"),t=window.document.createDocumentFragment(),n=i("span","cur-month");n.title=je.l10n.scrollTitle;var o=a("cur-year",{tabindex:"-1"}),r=o.childNodes[0];r.title=je.l10n.scrollTitle,r.setAttribute("aria-label",je.l10n.yearAriaLabel),je.config.minDate&&r.setAttribute("data-min",je.config.minDate.getFullYear().toString()),je.config.maxDate&&(r.setAttribute("data-max",je.config.maxDate.getFullYear().toString()),r.disabled=!!je.config.minDate&&je.config.minDate.getFullYear()===je.config.maxDate.getFullYear());var s=i("div","flatpickr-current-month");return s.appendChild(n),s.appendChild(o),t.appendChild(s),e.appendChild(t),{container:e,yearElement:r,monthElement:n}}function X(){o(je.monthNav),je.monthNav.appendChild(je.prevMonthNav);for(var e=je.config.showMonths;e--;){var t=U();je.yearElements.push(t.yearElement),je.monthElements.push(t.monthElement),je.monthNav.appendChild(t.container)}je.monthNav.appendChild(je.nextMonthNav)}function V(){return je.monthNav=i("div","flatpickr-months"),je.yearElements=[],je.monthElements=[],je.prevMonthNav=i("span","flatpickr-prev-month"),je.prevMonthNav.innerHTML=je.config.prevArrow,je.nextMonthNav=i("span","flatpickr-next-month"),je.nextMonthNav.innerHTML=je.config.nextArrow,X(),Object.defineProperty(je,"_hidePrevMonthArrow",{get:function(){return je.__hidePrevMonthArrow},set:function(e){je.__hidePrevMonthArrow!==e&&(n(je.prevMonthNav,"disabled",e),je.__hidePrevMonthArrow=e)}}),Object.defineProperty(je,"_hideNextMonthArrow",{get:function(){return je.__hideNextMonthArrow},set:function(e){je.__hideNextMonthArrow!==e&&(n(je.nextMonthNav,"disabled",e),je.__hideNextMonthArrow=e)}}),je.currentYearElement=je.yearElements[0],Ae(),je.monthNav}function Z(){je.calendarContainer.classList.add("hasTime"),je.config.noCalendar&&je.calendarContainer.classList.add("noCalendar"),je.timeContainer=i("div","flatpickr-time"),je.timeContainer.tabIndex=-1;var e=i("span","flatpickr-time-separator",":"),t=a("flatpickr-hour");je.hourElement=t.childNodes[0];var n=a("flatpickr-minute");if(je.minuteElement=n.childNodes[0],je.hourElement.tabIndex=je.minuteElement.tabIndex=-1,je.hourElement.value=c(je.latestSelectedDateObj?je.latestSelectedDateObj.getHours():je.config.time_24hr?je.config.defaultHour:E(je.config.defaultHour)),je.minuteElement.value=c(je.latestSelectedDateObj?je.latestSelectedDateObj.getMinutes():je.config.defaultMinute),je.hourElement.setAttribute("data-step",je.config.hourIncrement.toString()),je.minuteElement.setAttribute("data-step",je.config.minuteIncrement.toString()),je.hourElement.setAttribute("data-min",je.config.time_24hr?"0":"1"),je.hourElement.setAttribute("data-max",je.config.time_24hr?"23":"12"),je.minuteElement.setAttribute("data-min","0"),je.minuteElement.setAttribute("data-max","59"),je.timeContainer.appendChild(t),je.timeContainer.appendChild(e),je.timeContainer.appendChild(n),je.config.time_24hr&&je.timeContainer.classList.add("time24hr"),je.config.enableSeconds){je.timeContainer.classList.add("hasSeconds");var o=a("flatpickr-second");je.secondElement=o.childNodes[0],je.secondElement.value=c(je.latestSelectedDateObj?je.latestSelectedDateObj.getSeconds():je.config.defaultSeconds),je.secondElement.setAttribute("data-step",je.minuteElement.getAttribute("data-step")),je.secondElement.setAttribute("data-min",je.minuteElement.getAttribute("data-min")),je.secondElement.setAttribute("data-max",je.minuteElement.getAttribute("data-max")),je.timeContainer.appendChild(i("span","flatpickr-time-separator",":")),je.timeContainer.appendChild(o)}return je.config.time_24hr||(je.amPM=i("span","flatpickr-am-pm",je.l10n.amPM[d((je.latestSelectedDateObj?je.hourElement.value:je.config.defaultHour)>11)]),je.amPM.title=je.l10n.toggleTitle,je.amPM.tabIndex=-1,je.timeContainer.appendChild(je.amPM)),je.timeContainer}function G(){je.weekdayContainer?o(je.weekdayContainer):je.weekdayContainer=i("div","flatpickr-weekdays");for(var e=je.config.showMonths;e--;){var t=i("div","flatpickr-weekdaycontainer");je.weekdayContainer.appendChild(t)}return Q(),je.weekdayContainer}function Q(){var e=je.l10n.firstDayOfWeek,t=je.l10n.weekdays.shorthand.concat();e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e)));for(var n=je.config.showMonths;n--;)je.weekdayContainer.children[n].innerHTML="\n      <span class=flatpickr-weekday>\n        "+t.join("</span><span class=flatpickr-weekday>")+"\n      </span>\n      "}function K(){je.calendarContainer.classList.add("hasWeeks");var e=i("div","flatpickr-weekwrapper");e.appendChild(i("span","flatpickr-weekday",je.l10n.weekAbbreviation));var t=i("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}function J(e,t){void 0===t&&(t=!0);var n=t?e:e-je.currentMonth;n<0&&!0===je._hidePrevMonthArrow||n>0&&!0===je._hideNextMonthArrow||(je.currentMonth+=n,(je.currentMonth<0||je.currentMonth>11)&&(je.currentYear+=je.currentMonth>11?1:-1,je.currentMonth=(je.currentMonth+12)%12,De("onYearChange")),Y(),De("onMonthChange"),Ae())}function ee(e){void 0===e&&(e=!0),je.input.value="",void 0!==je.altInput&&(je.altInput.value=""),void 0!==je.mobileInput&&(je.mobileInput.value=""),je.selectedDates=[],je.latestSelectedDateObj=void 0,je.showTimeInput=!1,!0===je.config.enableTime&&(void 0!==je.config.minDate?$(je.config.minDate):M(je.config.defaultHour,je.config.defaultMinute,je.config.defaultSeconds)),je.redraw(),e&&De("onChange")}function te(){je.isOpen=!1,je.isMobile||(je.calendarContainer.classList.remove("open"),je._input.classList.remove("active")),De("onClose")}function ne(){void 0!==je.config&&De("onDestroy");for(var e=je._handlers.length;e--;){var t=je._handlers[e];t.element.removeEventListener(t.event,t.handler)}je._handlers=[],je.mobileInput?(je.mobileInput.parentNode&&je.mobileInput.parentNode.removeChild(je.mobileInput),je.mobileInput=void 0):je.calendarContainer&&je.calendarContainer.parentNode&&je.calendarContainer.parentNode.removeChild(je.calendarContainer),je.altInput&&(je.input.type="text",je.altInput.parentNode&&je.altInput.parentNode.removeChild(je.altInput),delete je.altInput),je.input&&(je.input.type=je.input._type,je.input.classList.remove("flatpickr-input"),je.input.removeAttribute("readonly"),je.input.value=""),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete je[e]}catch(e){}})}function ie(e){return!(!je.config.appendTo||!je.config.appendTo.contains(e))||je.calendarContainer.contains(e)}function oe(e){if(je.isOpen&&!je.config.inline){var t=ie(e.target),n=e.target===je.input||e.target===je.altInput||je.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(je.input)||~e.path.indexOf(je.altInput)),i="blur"===e.type?n&&e.relatedTarget&&!ie(e.relatedTarget):!n&&!t,o=!je.config.ignoredFocusElements.some(function(t){return t.contains(e.target)});i&&o&&(je.close(),"range"===je.config.mode&&1===je.selectedDates.length&&(je.clear(!1),je.redraw()))}}function re(e){if(!(!e||je.config.minDate&&e<je.config.minDate.getFullYear()||je.config.maxDate&&e>je.config.maxDate.getFullYear())){var t=e,n=je.currentYear!==t;je.currentYear=t||je.currentYear,je.config.maxDate&&je.currentYear===je.config.maxDate.getFullYear()?je.currentMonth=Math.min(je.config.maxDate.getMonth(),je.currentMonth):je.config.minDate&&je.currentYear===je.config.minDate.getFullYear()&&(je.currentMonth=Math.max(je.config.minDate.getMonth(),je.currentMonth)),n&&(je.redraw(),De("onYearChange"))}}function ae(e,n){void 0===n&&(n=!0);var i=je.parseDate(e,void 0,n);if(je.config.minDate&&i&&t(i,je.config.minDate,void 0!==n?n:!je.minDateHasTime)<0||je.config.maxDate&&i&&t(i,je.config.maxDate,void 0!==n?n:!je.maxDateHasTime)>0)return!1;if(0===je.config.enable.length&&0===je.config.disable.length)return!0;if(void 0===i)return!1;for(var o,r=je.config.enable.length>0,a=r?je.config.enable:je.config.disable,s=0;s<a.length;s++){if("function"==typeof(o=a[s])&&o(i))return r;if(o instanceof Date&&void 0!==i&&o.getTime()===i.getTime())return r;if("string"==typeof o&&void 0!==i){var l=je.parseDate(o,void 0,!0);return l&&l.getTime()===i.getTime()?r:!r}if("object"==typeof o&&void 0!==i&&o.from&&o.to&&i.getTime()>=o.from.getTime()&&i.getTime()<=o.to.getTime())return r}return!r}function se(e){return void 0!==je.daysContainer&&(-1===e.className.indexOf("hidden")&&je.daysContainer.contains(e))}function le(e){e.stopPropagation();var t=e.target===je._input,n=ie(e.target),i=je.config.allowInput,o=je.isOpen&&(!i||!t),r=je.config.inline&&t&&!i;if(13===e.keyCode&&t){if(i)return je.setDate(je._input.value,!0,e.target===je.altInput?je.config.altFormat:je.config.dateFormat),e.target.blur();je.open()}else if(n||o||r){var a=!!je.timeContainer&&je.timeContainer.contains(e.target);switch(e.keyCode){case 13:a?Oe():ye(e);break;case 27:e.preventDefault(),ve();break;case 8:case 46:t&&!je.config.allowInput&&(e.preventDefault(),je.clear());break;case 37:case 39:if(a)je.hourElement&&je.hourElement.focus();else if(e.preventDefault(),void 0!==je.daysContainer&&!1===je.config.allowInput){var s=39===e.keyCode?1:-1;e.ctrlKey?(J(s),_(z(1),0)):_(void 0,s)}break;case 38:case 40:e.preventDefault();var l=40===e.keyCode?1:-1;je.daysContainer?e.ctrlKey?(re(je.currentYear-l),_(z(1),0)):a||_(void 0,7*l):je.config.enableTime&&(!a&&je.hourElement&&je.hourElement.focus(),w(e),je._debouncedChange());break;case 9:e.target===je.hourElement?(e.preventDefault(),je.minuteElement.select()):e.target===je.minuteElement&&(je.secondElement||je.amPM)?(e.preventDefault(),void 0!==je.secondElement?je.secondElement.focus():void 0!==je.amPM&&je.amPM.focus()):e.target===je.secondElement&&je.amPM&&(e.preventDefault(),je.amPM.focus())}switch(e.key){case je.l10n.amPM[0].charAt(0):case je.l10n.amPM[0].charAt(0).toLowerCase():void 0!==je.amPM&&e.target===je.amPM&&(je.amPM.textContent=je.l10n.amPM[0],D(),Oe());break;case je.l10n.amPM[1].charAt(0):case je.l10n.amPM[1].charAt(0).toLowerCase():void 0!==je.amPM&&e.target===je.amPM&&(je.amPM.textContent=je.l10n.amPM[1],D(),Oe())}De("onKeyDown",e)}}function ce(e){if(1===je.selectedDates.length&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")){for(var t=e.dateObj.getTime(),n=je.parseDate(je.selectedDates[0],void 0,!0).getTime(),i=Math.min(t,je.selectedDates[0].getTime()),o=Math.max(t,je.selectedDates[0].getTime()),r=je.daysContainer.children,a=r[0].children[0].dateObj.getTime(),s=r[r.length-1].lastChild.dateObj.getTime(),l=!1,c=0,d=0,u=a;u<s;u+=C.DAY)ae(new Date(u),!0)||(l=l||u>i&&u<o,u<n&&(!c||u>c)?c=u:u>n&&(!d||u<d)&&(d=u));for(var p=0;p<je.config.showMonths;p++)for(var f=je.daysContainer.children[p],h=je.daysContainer.children[p-1],g=0,m=f.children.length;g<m;g++){(function(i,o){var r=f.children[i],a=r.dateObj,s=a.getTime(),u=c>0&&s<c||d>0&&s>d;u?(r.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){r.classList.remove(e)})):l&&!u||(["startRange","inRange","endRange","notAllowed"].forEach(function(e){r.classList.remove(e)}),e.classList.add(t<je.selectedDates[0].getTime()?"startRange":"endRange"),!f.contains(e)&&p>0&&h&&h.lastChild.dateObj.getTime()>=s||(n<t&&s===n?r.classList.add("startRange"):n>t&&s===n&&r.classList.add("endRange"),s>=c&&(0===d||s<=d)&&x(s,n,t)&&r.classList.add("inRange")))})(g)}}}function de(){!je.isOpen||je.config.static||je.config.inline||ge()}function ue(e,t){if(void 0===t&&(t=je._input),!0===je.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==je.mobileInput&&je.mobileInput.click()},0),void De("onOpen");if(!je._input.disabled&&!je.config.inline){var n=je.isOpen;je.isOpen=!0,n||(je.calendarContainer.classList.add("open"),je._input.classList.add("active"),De("onOpen"),ge(t)),!0===je.config.enableTime&&!0===je.config.noCalendar&&(0===je.selectedDates.length&&(je.setDate(void 0!==je.config.minDate?new Date(je.config.minDate.getTime()):(new Date).setHours(je.config.defaultHour,je.config.defaultMinute,je.config.defaultSeconds,0),!1),D(),Oe()),setTimeout(function(){return je.hourElement.select()},50))}}function pe(e){return function(t){var n=je.config["_"+e+"Date"]=je.parseDate(t,je.config.dateFormat),i=je.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(je["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),je.selectedDates&&(je.selectedDates=je.selectedDates.filter(function(e){return ae(e)}),je.selectedDates.length||"min"!==e||$(n),Oe()),je.daysContainer&&(me(),void 0!==n?je.currentYearElement[e]=n.getFullYear().toString():je.currentYearElement.removeAttribute(e),je.currentYearElement.disabled=!!i&&void 0!==n&&i.getFullYear()===n.getFullYear())}}function fe(){var e=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange","onPreCalendarPosition"],n=Object.assign({},l,JSON.parse(JSON.stringify(s.dataset||{}))),i={};je.config.parseDate=n.parseDate,je.config.formatDate=n.formatDate,Object.defineProperty(je.config,"enable",{get:function(){return je.config._enable},set:function(e){je.config._enable=Ce(e)}}),Object.defineProperty(je.config,"disable",{get:function(){return je.config._disable},set:function(e){je.config._disable=Ce(e)}}),!n.dateFormat&&n.enableTime&&(i.dateFormat=n.noCalendar?"H:i"+(n.enableSeconds?":S":""):S.defaultConfig.dateFormat+" H:i"+(n.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(i.altFormat=n.noCalendar?"h:i"+(n.enableSeconds?":S K":" K"):S.defaultConfig.altFormat+" h:i"+(n.enableSeconds?":S":"")+" K"),Object.defineProperty(je.config,"minDate",{get:function(){return je.config._minDate},set:pe("min")}),Object.defineProperty(je.config,"maxDate",{get:function(){return je.config._maxDate},set:pe("max")});var o=function(e){return function(t){je.config["min"===e?"_minTime":"_maxTime"]=je.parseDate(t,"H:i")}};Object.defineProperty(je.config,"minTime",{get:function(){return je.config._minTime},set:o("min")}),Object.defineProperty(je.config,"maxTime",{get:function(){return je.config._maxTime},set:o("max")}),Object.assign(je.config,i,n);for(var r=0;r<e.length;r++)je.config[e[r]]=!0===je.config[e[r]]||"true"===je.config[e[r]];for(var a=t.length;a--;)void 0!==je.config[t[a]]&&(je.config[t[a]]=u(je.config[t[a]]||[]).map(h));"time"===je.config.mode&&(je.config.noCalendar=!0,je.config.enableTime=!0);for(var c=0;c<je.config.plugins.length;c++){var d=je.config.plugins[c](je)||{};for(var p in d)~t.indexOf(p)?je.config[p]=u(d[p]).map(h).concat(je.config[p]):void 0===n[p]&&(je.config[p]=d[p])}je.isMobile=!je.config.disableMobile&&!je.config.inline&&"single"===je.config.mode&&!je.config.disable.length&&!je.config.enable.length&&!je.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),De("onParseConfig")}function he(){"object"!=typeof je.config.locale&&void 0===S.l10ns[je.config.locale]&&je.config.errorHandler(new Error("flatpickr: invalid locale "+je.config.locale)),je.l10n=Object.assign({},S.l10ns.default,"object"==typeof je.config.locale?je.config.locale:"default"!==je.config.locale?S.l10ns[je.config.locale]:void 0),g.K="("+je.l10n.amPM[0]+"|"+je.l10n.amPM[1]+"|"+je.l10n.amPM[0].toLowerCase()+"|"+je.l10n.amPM[1].toLowerCase()+")",je.formatDate=y(je)}function ge(e){if(void 0!==je.calendarContainer){De("onPreCalendarPosition");var t=e||je._positionElement,i=Array.prototype.reduce.call(je.calendarContainer.children,function(e,t){return e+t.offsetHeight},0),o=je.calendarContainer.offsetWidth,r=je.config.position,a=t.getBoundingClientRect(),s=window.innerHeight-a.bottom,l="above"===r||"below"!==r&&s<i&&a.top>i,c=window.pageYOffset+a.top+(l?-i-2:t.offsetHeight+2);if(n(je.calendarContainer,"arrowTop",!l),n(je.calendarContainer,"arrowBottom",l),!je.config.inline){var d=window.pageXOffset+a.left,u=window.document.body.offsetWidth-a.right,p=d+o>window.document.body.offsetWidth;n(je.calendarContainer,"rightMost",p),je.config.static||(je.calendarContainer.style.top=c+"px",p?(je.calendarContainer.style.left="auto",je.calendarContainer.style.right=u+"px"):(je.calendarContainer.style.left=d+"px",je.calendarContainer.style.right="auto"))}}}function me(){je.config.noCalendar||je.isMobile||(Ae(),Y())}function ve(){je._input.focus(),-1!==window.navigator.userAgent.indexOf("MSIE")||void 0!==navigator.msMaxTouchPoints?setTimeout(je.close,0):je.close()}function ye(e){e.preventDefault(),e.stopPropagation();var n=function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")},i=r(e.target,n);if(void 0!==i){var o=i,a=je.latestSelectedDateObj=new Date(o.dateObj.getTime()),s=(a.getMonth()<je.currentMonth||a.getMonth()>je.currentMonth+je.config.showMonths-1)&&"range"!==je.config.mode;if(je.selectedDateElem=o,"single"===je.config.mode)je.selectedDates=[a];else if("multiple"===je.config.mode){var l=Me(a);l?je.selectedDates.splice(parseInt(l),1):je.selectedDates.push(a)}else"range"===je.config.mode&&(2===je.selectedDates.length&&je.clear(!1),je.selectedDates.push(a),0!==t(a,je.selectedDates[0],!0)&&je.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(D(),s){var c=je.currentYear!==a.getFullYear();je.currentYear=a.getFullYear(),je.currentMonth=a.getMonth(),c&&De("onYearChange"),De("onMonthChange")}if(Ae(),Y(),je.config.minDate&&je.minDateHasTime&&je.config.enableTime&&0===t(a,je.config.minDate)&&$(je.config.minDate),Oe(),je.config.enableTime&&setTimeout(function(){return je.showTimeInput=!0},50),"range"===je.config.mode&&(1===je.selectedDates.length?ce(o):Ae()),s||"range"===je.config.mode||1!==je.config.showMonths?je.selectedDateElem&&je.selectedDateElem.focus():R(o),void 0!==je.hourElement&&setTimeout(function(){return void 0!==je.hourElement&&je.hourElement.select()},451),je.config.closeOnSelect){var d="single"===je.config.mode&&!je.config.enableTime,u="range"===je.config.mode&&2===je.selectedDates.length&&!je.config.enableTime;(d||u)&&ve()}L()}}function be(e,t){null!==e&&"object"==typeof e?Object.assign(je.config,e):(je.config[e]=t,void 0!==He[e]&&He[e].forEach(function(e){return e()})),je.redraw(),j()}function we(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return je.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[je.parseDate(e,t)];else if("string"==typeof e)switch(je.config.mode){case"single":n=[je.parseDate(e,t)];break;case"multiple":n=e.split(je.config.conjunction).map(function(e){return je.parseDate(e,t)});break;case"range":n=e.split(je.l10n.rangeSeparator).map(function(e){return je.parseDate(e,t)})}else je.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(e)));je.selectedDates=n.filter(function(e){return e instanceof Date&&ae(e,!1)}),"range"===je.config.mode&&je.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function xe(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=je.config.dateFormat),0!==e&&!e)return je.clear(t);we(e,n),je.showTimeInput=je.selectedDates.length>0,je.latestSelectedDateObj=je.selectedDates[0],je.redraw(),j(),$(),Oe(t),t&&De("onChange")}function Ce(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?je.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:je.parseDate(e.from,void 0),to:je.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function ke(){je.selectedDates=[],je.now=je.parseDate(je.config.now)||new Date;var e=je.config.defaultDate||je.input.value;e&&we(e,je.config.dateFormat);var t=je.selectedDates.length>0?je.selectedDates[0]:je.config.minDate&&je.config.minDate.getTime()>je.now.getTime()?je.config.minDate:je.config.maxDate&&je.config.maxDate.getTime()<je.now.getTime()?je.config.maxDate:je.now;je.currentYear=t.getFullYear(),je.currentMonth=t.getMonth(),je.selectedDates.length>0&&(je.latestSelectedDateObj=je.selectedDates[0]),void 0!==je.config.minTime&&(je.config.minTime=je.parseDate(je.config.minTime,"H:i")),void 0!==je.config.maxTime&&(je.config.maxTime=je.parseDate(je.config.maxTime,"H:i")),je.minDateHasTime=!!je.config.minDate&&(je.config.minDate.getHours()>0||je.config.minDate.getMinutes()>0||je.config.minDate.getSeconds()>0),je.maxDateHasTime=!!je.config.maxDate&&(je.config.maxDate.getHours()>0||je.config.maxDate.getMinutes()>0||je.config.maxDate.getSeconds()>0),Object.defineProperty(je,"showTimeInput",{get:function(){return je._showTimeInput},set:function(e){je._showTimeInput=e,je.calendarContainer&&n(je.calendarContainer,"showTimeInput",e),je.isOpen&&ge()}})}function Te(){if(je.input=je.config.wrap?s.querySelector("[data-input]"):s,!je.input)return void je.config.errorHandler(new Error("Invalid input element specified"));je.input._type=je.input.type,je.input.type="text",je.input.classList.add("flatpickr-input"),je._input=je.input,je.config.altInput&&(je.altInput=i(je.input.nodeName,je.input.className+" "+je.config.altInputClass),je._input=je.altInput,je.altInput.placeholder=je.input.placeholder,je.altInput.disabled=je.input.disabled,je.altInput.required=je.input.required,je.altInput.tabIndex=je.input.tabIndex,je.altInput.type="text",je.input.type="hidden",!je.config.static&&je.input.parentNode&&je.input.parentNode.insertBefore(je.altInput,je.input.nextSibling)),je.config.allowInput||je._input.setAttribute("readonly","readonly"),je._positionElement=je.config.positionElement||je._input}function Se(){var e=je.config.enableTime?je.config.noCalendar?"time":"datetime-local":"date";je.mobileInput=i("input",je.input.className+" flatpickr-mobile"),je.mobileInput.step=je.input.getAttribute("step")||"any",je.mobileInput.tabIndex=1,je.mobileInput.type=e,je.mobileInput.disabled=je.input.disabled,je.mobileInput.required=je.input.required,je.mobileInput.placeholder=je.input.placeholder,je.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",je.selectedDates.length>0&&(je.mobileInput.defaultValue=je.mobileInput.value=je.formatDate(je.selectedDates[0],je.mobileFormatStr)),je.config.minDate&&(je.mobileInput.min=je.formatDate(je.config.minDate,"Y-m-d")),
je.config.maxDate&&(je.mobileInput.max=je.formatDate(je.config.maxDate,"Y-m-d")),je.input.type="hidden",void 0!==je.altInput&&(je.altInput.type="hidden");try{je.input.parentNode&&je.input.parentNode.insertBefore(je.mobileInput,je.input.nextSibling)}catch(e){}A(je.mobileInput,"change",function(e){je.setDate(e.target.value,!1,je.mobileFormatStr),De("onChange"),De("onClose")})}function Ee(){if(je.isOpen)return je.close();je.open()}function De(e,t){var n=je.config[e];if(void 0!==n&&n.length>0)for(var i=0;n[i]&&i<n.length;i++)n[i](je.selectedDates,je.input.value,je,t);"onChange"===e&&(je.input.dispatchEvent($e("change")),je.input.dispatchEvent($e("input")))}function $e(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function Me(e){for(var n=0;n<je.selectedDates.length;n++)if(0===t(je.selectedDates[n],e))return""+n;return!1}function Pe(e){return!("range"!==je.config.mode||je.selectedDates.length<2)&&(t(e,je.selectedDates[0])>=0&&t(e,je.selectedDates[1])<=0)}function Ae(){je.config.noCalendar||je.isMobile||!je.monthNav||(je.yearElements.forEach(function(e,t){var n=new Date(je.currentYear,je.currentMonth,1);n.setMonth(je.currentMonth+t),je.monthElements[t].textContent=f(n.getMonth(),je.config.shorthandCurrentMonth,je.l10n)+" ",e.value=n.getFullYear().toString()}),je._hidePrevMonthArrow=void 0!==je.config.minDate&&(je.currentYear===je.config.minDate.getFullYear()?je.currentMonth<=je.config.minDate.getMonth():je.currentYear<je.config.minDate.getFullYear()),je._hideNextMonthArrow=void 0!==je.config.maxDate&&(je.currentYear===je.config.maxDate.getFullYear()?je.currentMonth+1>je.config.maxDate.getMonth():je.currentYear>je.config.maxDate.getFullYear()))}function Oe(e){if(void 0===e&&(e=!0),0===je.selectedDates.length)return je.clear(e);void 0!==je.mobileInput&&je.mobileFormatStr&&(je.mobileInput.value=void 0!==je.latestSelectedDateObj?je.formatDate(je.latestSelectedDateObj,je.mobileFormatStr):"");var t="range"!==je.config.mode?je.config.conjunction:je.l10n.rangeSeparator;je.input.value=je.selectedDates.map(function(e){return je.formatDate(e,je.config.dateFormat)}).join(t),void 0!==je.altInput&&(je.altInput.value=je.selectedDates.map(function(e){return je.formatDate(e,je.config.altFormat)}).join(t)),!1!==e&&De("onValueUpdate")}function Le(e){var t=je.prevMonthNav.contains(e.target),n=je.nextMonthNav.contains(e.target);t||n?J(t?-1:1):je.yearElements.indexOf(e.target)>=0?(e.preventDefault(),e.target.select()):e.target.classList.contains("arrowUp")?je.changeYear(je.currentYear+1):e.target.classList.contains("arrowDown")&&je.changeYear(je.currentYear-1)}function Ie(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==je.amPM&&e.target===je.amPM&&(je.amPM.textContent=je.l10n.amPM[d(je.amPM.textContent===je.l10n.amPM[0])]);var i=parseFloat(n.getAttribute("data-min")),o=parseFloat(n.getAttribute("data-max")),r=parseFloat(n.getAttribute("data-step")),a=parseInt(n.value,10),s=e.delta||(t?38===e.which?1:-1:0),l=a+r*s;if(void 0!==n.value&&2===n.value.length){var u=n===je.hourElement,p=n===je.minuteElement;l<i?(l=o+l+d(!u)+(d(u)&&d(!je.amPM)),p&&N(void 0,-1,je.hourElement)):l>o&&(l=n===je.hourElement?l-o-d(!je.amPM):i,p&&N(void 0,1,je.hourElement)),je.amPM&&u&&(1===r?l+a===23:Math.abs(l-a)>r)&&(je.amPM.textContent=je.l10n.amPM[d(je.amPM.textContent===je.l10n.amPM[0])]),n.value=c(l)}}var je={config:Object.assign({},S.defaultConfig),l10n:v};je.parseDate=b({config:je.config,l10n:je.l10n}),je._handlers=[],je._bind=A,je._setHoursFromDate=$,je.changeMonth=J,je.changeYear=re,je.clear=ee,je.close=te,je._createElement=i,je.destroy=ne,je.isEnabled=ae,je.jumpToDate=j,je.open=ue,je.redraw=me,je.set=be,je.setDate=xe,je.toggle=Ee;var He={locale:[he,Q],showMonths:[X,m,G]};return function(){je.element=je.input=s,je.isOpen=!1,fe(),he(),Te(),ke(),p(),je.isMobile||F(),I(),(je.selectedDates.length||je.config.noCalendar)&&(je.config.enableTime&&$(je.config.noCalendar?je.latestSelectedDateObj||je.config.minDate:void 0),Oe(!1)),m(),je.showTimeInput=je.selectedDates.length>0||je.config.noCalendar;var e=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);!je.isMobile&&e&&ge(),De("onReady")}(),je}function l(e,t){for(var n=Array.prototype.slice.call(e),i=[],o=0;o<n.length;o++){var r=n[o];try{if(null!==r.getAttribute("data-fp-omit"))continue;void 0!==r._flatpickr&&(r._flatpickr.destroy(),r._flatpickr=void 0),r._flatpickr=s(r,t||{}),i.push(r._flatpickr)}catch(e){console.error(e)}}return 1===i.length?i[0]:i}var c=function(e){return("0"+e).slice(-2)},d=function(e){return!0===e?1:0},u=function(e){return e instanceof Array?e:[e]},p=function(){},f=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},h={D:p,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t,n){e.setHours(e.getHours()%12+12*d(new RegExp(n.amPM[1],"i").test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:p,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:p,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},g={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},m={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[m.w(e,t,n)]},F:function(e,t,n){return f(m.n(e,t,n)-1,!1,t)},G:function(e,t,n){return c(m.h(e,t,n))},H:function(e){return c(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e,t){return t.amPM[d(e.getHours()>11)]},M:function(e,t){return f(e.getMonth(),!0,t)},S:function(e){return c(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return c(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return c(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return c(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}},v={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"],yearAriaLabel:"Year"},y=function(e){var t=e.config,n=void 0===t?k:t,i=e.l10n,o=void 0===i?v:i;return function(e,t,i){if(void 0!==n.formatDate)return n.formatDate(e,t);var r=i||o;return t.split("").map(function(t,i,o){return m[t]&&"\\"!==o[i-1]?m[t](e,r,n):"\\"!==t?t:""}).join("")}},b=function(e){var t=e.config,n=void 0===t?k:t,i=e.l10n,o=void 0===i?v:i;return function(e,t,i){if(0===e||e){var r,a=e;if(e instanceof Date)r=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)r=new Date(e);else if("string"==typeof e){var s=t||(n||k).dateFormat,l=String(e).trim();if("today"===l)r=new Date,i=!0;else if(/Z$/.test(l)||/GMT$/.test(l))r=new Date(e);else if(n&&n.parseDate)r=n.parseDate(e,s);else{r=n&&n.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var c,d=[],u=0,p=0,f="";u<s.length;u++){var m=s[u],v="\\"===m,y="\\"===s[u-1]||v;if(g[m]&&!y){f+=g[m];var b=new RegExp(f).exec(e);b&&(c=!0)&&d["Y"!==m?"push":"unshift"]({fn:h[m],val:b[++p]})}else v||(f+=".");d.forEach(function(e){var t=e.fn,n=e.val;return r=t(r,n,o)||r})}r=c?r:void 0}}return r instanceof Date?(!0===i&&r.setHours(0,0,0,0),r):void n.errorHandler(new Error("Invalid date provided: "+a))}}},w=function(e){var t=new Date(e.getTime());t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)},x=function(e,t,n){return e>Math.min(t,n)&&e<Math.max(t,n)},C={DAY:864e5},k={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,errorHandler:function(e){return"undefined"!=typeof console&&console.warn(e)},getWeek:w,hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,now:new Date,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],onPreCalendarPosition:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,showMonths:1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1};"function"!=typeof Object.assign&&(Object.assign=function(e){if(!e)throw TypeError("Cannot convert undefined or null to object");for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];for(var o=0;o<n.length;o++){var r=n[o];!function(t){t&&Object.keys(t).forEach(function(n){return e[n]=t[n]})}(r)}return e});var T=300;"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return l(this,e)},HTMLElement.prototype.flatpickr=function(e){return l([this],e)});var S=function(e,t){return e instanceof NodeList?l(e,t):"string"==typeof e?l(window.document.querySelectorAll(e),t):l([e],t)};return S.defaultConfig=k,S.l10ns={en:Object.assign({},v),default:Object.assign({},v)},S.localize=function(e){S.l10ns.default=Object.assign({},S.l10ns.default,e)},S.setDefaults=function(e){S.defaultConfig=Object.assign({},S.defaultConfig,e)},S.parseDate=b({}),S.formatDate=y({}),S.compareDates=t,"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return l(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},S}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ru={})}(this,function(e){"use strict";var t="undefined"!=typeof window&&void 0!==window.flatpickr?window.flatpickr:{l10ns:{}},n={weekdays:{shorthand:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],longhand:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]},months:{shorthand:["Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сен","Окт","Ноя","Дек"],longhand:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"]},firstDayOfWeek:1,ordinal:function(){return""},rangeSeparator:" — ",weekAbbreviation:"Нед.",scrollTitle:"Прокрутите для увеличения",toggleTitle:"Нажмите для переключения",amPM:["ДП","ПП"],yearAriaLabel:"Год"};t.l10ns.ru=n;var i=t.l10ns;e.Russian=n,e.default=i,Object.defineProperty(e,"__esModule",{value:!0})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.tippy=t()}(this,function(){"use strict";function e(e){qe.forEach(function(t){var n=t.popper,i=t.tippyInstance,o=t.settings,r=o.appendTo,a=o.hideOnClick,s=o.trigger;if(r.contains(n)){var l=!0===a||-1!==s.indexOf("focus"),c=!e||n!==e.popper;l&&c&&i.hide(n)}})}function t(e,t){return(Element.prototype.closest||function(e){for(var t=this;t;){if(Ye.call(t,e))return t;t=t.parentElement}}).call(e,t)}function n(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function i(){var i=function(){Fe.touch=!0,Fe.iOS()&&document.body.classList.add("tippy-touch"),Fe.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",o)},o=function(){var e=void 0;return function(){var t=performance.now();t-e<20&&(Fe.touch=!1,document.removeEventListener("mousemove",o),Fe.iOS()||document.body.classList.remove("tippy-touch")),e=t}}(),r=function(i){if(!(i.target instanceof Element))return e();var o=t(i.target,Re.TOOLTIPPED_EL),r=t(i.target,Re.POPPER);if(r){if(n(qe,function(e){return e.popper===r}).settings.interactive)return}if(o){var a=n(qe,function(e){return e.el===o}),s=a.settings,l=s.hideOnClick,c=s.multiple,d=s.trigger;if(!c&&Fe.touch||!c&&-1!==d.indexOf("click"))return e(a);if(!0!==l||-1!==d.indexOf("click"))return}!t(i.target,Re.CONTROLLER)&&document.querySelector(Re.POPPER)&&e()},a=function(e){var t=document,n=t.activeElement;n&&n.blur&&Ye.call(n,Re.TOOLTIPPED_EL)&&n.blur()};document.addEventListener("click",r),document.addEventListener("touchstart",i),window.addEventListener("blur",a),!Fe.SUPPORTS_TOUCH&&(navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)&&document.addEventListener("pointerdown",i)}function o(){return!o.done&&(o.done=!0,i(),!0)}function r(e){window.requestAnimationFrame(function(){setTimeout(e,0)})}function a(e){for(var t=[!1,"webkit"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var o=t[i],r=o?""+o+n:e;if(void 0!==window.document.body.style[r])return r}return null}function s(e,t){return Array.prototype.findIndex?e.findIndex(t):e.indexOf(n(e,t))}function l(e){var t=e.getAttribute("title");t&&e.setAttribute("data-original-title",t),e.removeAttribute("title")}function c(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function d(e,t){t?window.getComputedStyle(t)[a("transform")]:window.getComputedStyle(e).opacity}function u(e,t){e.forEach(function(e){e&&t(e.classList)})}function p(e){return{tooltip:e.querySelector(Re.TOOLTIP),circle:e.querySelector(Re.CIRCLE),content:e.querySelector(Re.CONTENT)}}function f(e,t){e.forEach(function(e){if(e){var n=Ye.call(e,Re.CONTENT),i=n?Math.round(t/1.3):t;e.style[a("transitionDuration")]=i+"ms"}})}function h(e){return"visible"===e.style.visibility}function g(){}function m(e){return!!e&&"[object Object]"===e.toString()}function v(e){return e.replace(/-.+/,"")}function y(e){var t=this,i=n(qe,function(e){return e.el===t}),o=i.popper,r=i.settings.offset,s=v(o.getAttribute("x-placement")),l=Math.round(o.offsetWidth/2),c=Math.round(o.offsetHeight/2),d=document.documentElement.offsetWidth||document.body.offsetWidth,u=e.pageX,p=e.pageY,f=void 0,h=void 0;switch(s){case"top":f=u-l+r,h=p-2*c;break;case"bottom":f=u-l+r,h=p+10;break;case"left":f=u-2*l,h=p-c+r;break;case"right":f=u+5,h=p-c+r}var g=u+5+l+r>d,m=u-5-l+r<0;"top"!==s&&"bottom"!==s||(g&&(f=d-5-2*l),m&&(f=5)),o.style[a("transform")]="translate3d("+f+"px, "+h+"px, 0)"}function b(e){if(e instanceof Element||m(e))return[e];if(e instanceof NodeList)return[].slice.call(e);if(Array.isArray(e))return e;try{return[].slice.call(document.querySelectorAll(e))}catch(e){return[]}}function w(e,t,n){if(!t)return n();var i=p(e.popper),o=i.tooltip,r=!1,a=function(e){o[e+"EventListener"]("webkitTransitionEnd",s),o[e+"EventListener"]("transitionend",s)},s=function(e){e.target!==o||r||(r=!0,a("remove"),n())};a("add"),clearTimeout(e._transitionendTimeout),e._transitionendTimeout=setTimeout(function(){r||(a("remove"),n())},t)}function x(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}function C(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},Ve))}}function k(e){var t={};return e&&"[object Function]"===t.toString.call(e)}function T(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function S(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function E(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=T(e),n=t.overflow,i=t.overflowX;return/(auto|scroll)/.test(n+t.overflowY+i)?e:E(S(e))}function D(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===T(t,"position")?D(t):t:e?e.ownerDocument.documentElement:document.documentElement}function $(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||D(e.firstElementChild)===e)}function M(e){return null!==e.parentNode?M(e.parentNode):e}function P(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,o=n?t:e,r=document.createRange();r.setStart(i,0),r.setEnd(o,0);var a=r.commonAncestorContainer;if(e!==a&&t!==a||i.contains(o))return $(a)?a:D(a);var s=M(e);return s.host?P(s.host,t):P(e,M(t).host)}function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var o=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||o)[n]}return e[n]}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=A(t,"top"),o=A(t,"left"),r=n?-1:1;return e.top+=i*r,e.bottom+=i*r,e.left+=o*r,e.right+=o*r,e}function L(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+i+"Width"],10)}function I(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],Je()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function j(){var e=document.body,t=document.documentElement,n=Je()&&getComputedStyle(t);return{height:I("Height",e,t,n),width:I("Width",e,t,n)}}function H(e){return it({},e,{right:e.left+e.width,bottom:e.top+e.height})}function N(e){var t={};if(Je())try{t=e.getBoundingClientRect();var n=A(e,"top"),i=A(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}catch(e){}else t=e.getBoundingClientRect();var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},r="HTML"===e.nodeName?j():{},a=r.width||e.clientWidth||o.right-o.left,s=r.height||e.clientHeight||o.bottom-o.top,l=e.offsetWidth-a,c=e.offsetHeight-s;if(l||c){var d=T(e);l-=L(d,"x"),c-=L(d,"y"),o.width-=l,o.height-=c}return H(o)}function F(e,t){var n=Je(),i="HTML"===t.nodeName,o=N(e),r=N(t),a=E(e),s=T(t),l=parseFloat(s.borderTopWidth,10),c=parseFloat(s.borderLeftWidth,10),d=H({top:o.top-r.top-l,left:o.left-r.left-c,width:o.width,height:o.height});if(d.marginTop=0,d.marginLeft=0,!n&&i){var u=parseFloat(s.marginTop,10),p=parseFloat(s.marginLeft,10);d.top-=l-u,d.bottom-=l-u,d.left-=c-p,d.right-=c-p,d.marginTop=u,d.marginLeft=p}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(d=O(d,t)),d}function q(e){var t=e.ownerDocument.documentElement,n=F(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),o=Math.max(t.clientHeight,window.innerHeight||0),r=A(t),a=A(t,"left");return H({top:r-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:o})}function R(e){var t=e.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===T(e,"position")||R(S(e)))}function z(e,t,n,i){var o={top:0,left:0},r=P(e,t);if("viewport"===i)o=q(r);else{var a=void 0;"scrollParent"===i?(a=E(S(t)),"BODY"===a.nodeName&&(a=e.ownerDocument.documentElement)):a="window"===i?e.ownerDocument.documentElement:i;var s=F(a,r);if("HTML"!==a.nodeName||R(r))o=s;else{var l=j(),c=l.height,d=l.width;o.top+=s.top-s.marginTop,o.bottom=c+s.top,o.left+=s.left-s.marginLeft,o.right=d+s.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function W(e){return e.width*e.height}function _(e,t,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=z(n,i,r,o),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return it({key:e},s[e],{area:W(s[e])})}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),d=c.length>0?c[0].key:l[0].key,u=e.split("-")[1];return d+(u?"-"+u:"")}function B(e,t,n){return F(n,P(t,n))}function Y(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function U(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function X(e,t,n){n=n.split("-")[0];var i=Y(e),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),a=r?"top":"left",s=r?"left":"top",l=r?"height":"width",c=r?"width":"height";return o[a]=t[a]+t[l]/2-i[l]/2,o[s]=n===s?t[s]-i[c]:t[U(s)],o}function V(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function Z(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=V(e,function(e){return e[t]===n});return e.indexOf(i)}function G(e,t,n){return(void 0===n?e:e.slice(0,Z(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&k(n)&&(t.offsets.popper=H(t.offsets.popper),t.offsets.reference=H(t.offsets.reference),t=n(t,e))}),t}function Q(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=B(this.state,this.popper,this.reference),e.placement=_(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=X(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=G(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function K(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function J(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var o=t[i],r=o?""+o+n:e;if(void 0!==document.body.style[r])return r}return null}function ee(){return this.state.isDestroyed=!0,K(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[J("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function te(e){var t=e.ownerDocument;return t?t.defaultView:window}function ne(e,t,n,i){var o="BODY"===e.nodeName,r=o?e.ownerDocument.defaultView:e;r.addEventListener(t,n,{passive:!0}),o||ne(E(r.parentNode),t,n,i),i.push(r)}function ie(e,t,n,i){n.updateBound=i,te(e).addEventListener("resize",n.updateBound,{passive:!0});var o=E(e);return ne(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function oe(){this.state.eventsEnabled||(this.state=ie(this.reference,this.options,this.state,this.scheduleUpdate))}function re(e,t){return te(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function ae(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=re(this.reference,this.state))}function se(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function le(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&se(t[n])&&(i="px"),e.style[n]=t[n]+i})}function ce(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}function de(e){return le(e.instance.popper,e.styles),ce(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&le(e.arrowElement,e.arrowStyles),e}function ue(e,t,n,i,o){var r=B(o,t,e),a=_(n.placement,r,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),le(t,{position:"absolute"}),n}function pe(e,t){var n=t.x,i=t.y,o=e.offsets.popper,r=V(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==r?r:t.gpuAcceleration,s=D(e.instance.popper),l=N(s),c={position:o.position},d={left:Math.floor(o.left),top:Math.floor(o.top),bottom:Math.floor(o.bottom),right:Math.floor(o.right)},u="bottom"===n?"top":"bottom",p="right"===i?"left":"right",f=J("transform"),h=void 0,g=void 0;if(g="bottom"===u?-l.height+d.bottom:d.top,h="right"===p?-l.width+d.right:d.left,a&&f)c[f]="translate3d("+h+"px, "+g+"px, 0)",c[u]=0,c[p]=0,c.willChange="transform";else{var m="bottom"===u?-1:1,v="right"===p?-1:1;c[u]=g*m,c[p]=h*v,c.willChange=u+", "+p}var y={"x-placement":e.placement};return e.attributes=it({},y,e.attributes),e.styles=it({},c,e.styles),e.arrowStyles=it({},e.offsets.arrow,e.arrowStyles),e}function fe(e,t,n){var i=V(e,function(e){return e.name===t}),o=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!o){var r="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}function he(e,t){var n;if(!fe(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],r=e.offsets,a=r.popper,s=r.reference,l=-1!==["left","right"].indexOf(o),c=l?"height":"width",d=l?"Top":"Left",u=d.toLowerCase(),p=l?"left":"top",f=l?"bottom":"right",h=Y(i)[c];s[f]-h<a[u]&&(e.offsets.popper[u]-=a[u]-(s[f]-h)),s[u]+h>a[f]&&(e.offsets.popper[u]+=s[u]+h-a[f]),e.offsets.popper=H(e.offsets.popper);var g=s[u]+s[c]/2-h/2,m=T(e.instance.popper),v=parseFloat(m["margin"+d],10),y=parseFloat(m["border"+d+"Width"],10),b=g-e.offsets.popper[u]-v-y;return b=Math.max(Math.min(a[c]-h,b),0),e.arrowElement=i,e.offsets.arrow=(n={},nt(n,u,Math.round(b)),nt(n,p,""),n),e}function ge(e){return"end"===e?"start":"start"===e?"end":e}function me(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=rt.indexOf(e),i=rt.slice(n+1).concat(rt.slice(0,n));return t?i.reverse():i}function ve(e,t){if(K(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=z(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],o=U(i),r=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case at.FLIP:a=[i,o];break;case at.CLOCKWISE:a=me(i);break;case at.COUNTERCLOCKWISE:a=me(i,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(i!==s||a.length===l+1)return e;i=e.placement.split("-")[0],o=U(i);var c=e.offsets.popper,d=e.offsets.reference,u=Math.floor,p="left"===i&&u(c.right)>u(d.left)||"right"===i&&u(c.left)<u(d.right)||"top"===i&&u(c.bottom)>u(d.top)||"bottom"===i&&u(c.top)<u(d.bottom),f=u(c.left)<u(n.left),h=u(c.right)>u(n.right),g=u(c.top)<u(n.top),m=u(c.bottom)>u(n.bottom),v="left"===i&&f||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===r&&f||y&&"end"===r&&h||!y&&"start"===r&&g||!y&&"end"===r&&m);(p||v||b)&&(e.flipped=!0,(p||v)&&(i=a[l+1]),b&&(r=ge(r)),e.placement=i+(r?"-"+r:""),e.offsets.popper=it({},e.offsets.popper,X(e.instance.popper,e.offsets.reference,e.placement)),e=G(e.instance.modifiers,e,"flip"))}),e}function ye(e){var t=e.offsets,n=t.popper,i=t.reference,o=e.placement.split("-")[0],r=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[s]<r(i[l])&&(e.offsets.popper[l]=r(i[l])-n[c]),n[l]>r(i[s])&&(e.offsets.popper[l]=r(i[s])),e}function be(e,t,n,i){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],a=o[2];if(!r)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return H(s)[t]/100*r}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r}return r}function we(e,t,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(V(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return c=c.map(function(e,i){var o=(1===i?!r:r)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return be(e,o,t,n)})}),c.forEach(function(e,t){e.forEach(function(n,i){se(n)&&(o[t]+=n*("-"===e[i-1]?-1:1))})}),o}function xe(e,t){var n=t.offset,i=e.placement,o=e.offsets,r=o.popper,a=o.reference,s=i.split("-")[0],l=void 0;return l=se(+n)?[+n,0]:we(n,r,a,s),"left"===s?(r.top+=l[0],r.left-=l[1]):"right"===s?(r.top+=l[0],r.left+=l[1]):"top"===s?(r.left+=l[0],r.top-=l[1]):"bottom"===s&&(r.left+=l[0],r.top+=l[1]),e.popper=r,e}function Ce(e,t){var n=t.boundariesElement||D(e.instance.popper);e.instance.reference===n&&(n=D(n));var i=z(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var o=t.priority,r=e.offsets.popper,a={primary:function(e){var n=r[e];return r[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(r[e],i[e])),nt({},e,n)},secondary:function(e){var n="right"===e?"left":"top",o=r[n];return r[e]>i[e]&&!t.escapeWithReference&&(o=Math.min(r[n],i[e]-("right"===e?r.width:r.height))),nt({},n,o)}};return o.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";r=it({},r,a[t](e))}),e.offsets.popper=r,e}function ke(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var o=e.offsets,r=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",c=s?"width":"height",d={start:nt({},l,r[l]),end:nt({},l,r[l]+r[c]-a[c])};e.offsets.popper=it({},a,d[i])}return e}function Te(e){
if(!fe(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=V(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}function Se(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,o=i.popper,r=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=r[n]-(s?o[a?"width":"height"]:0),e.placement=U(t),e.offsets.popper=H(o),e}function Ee(e){return-(e-ze.distance)+"px"}function De(e){var t=e.el,n=e.popper,i=e.settings,o=i.position,s=i.popperOptions,l=i.offset,c=i.distance,d=i.flipDuration,u=p(n),f=u.tooltip,h=pt({placement:o},s||{},{modifiers:pt({},s?s.modifiers:{},{flip:pt({padding:c+5},s&&s.modifiers?s.modifiers.flip:{}),offset:pt({offset:l},s&&s.modifiers?s.modifiers.offset:{})}),onUpdate:function(){var e=f.style;e.top="",e.bottom="",e.left="",e.right="",e[v(n.getAttribute("x-placement"))]=Ee(c)}});if(window.MutationObserver){var g=n.style,m=new MutationObserver(function(){g[a("transitionDuration")]="0ms",e.popperInstance.update(),r(function(){g[a("transitionDuration")]=d+"ms"})});m.observe(n,{childList:!0,subtree:!0,characterData:!0}),e._mutationObservers.push(m)}return new ct(t,n,h)}function $e(e){var t=e.el,n=e.popper,i=e.settings,o=i.appendTo,r=i.followCursor;o.contains(n)||(o.appendChild(n),e.popperInstance?(e.popperInstance.update(),r&&!Fe.touch||e.popperInstance.enableEventListeners()):e.popperInstance=De(e),r&&!Fe.touch&&(t.addEventListener("mousemove",y),e.popperInstance.disableEventListeners()))}function Me(e){var t=e.popper,n=e.popperInstance,i=e.settings.stickyDuration,o=function(){return t.style[a("transitionDuration")]=i+"ms"},s=function(){return t.style[a("transitionDuration")]=""};r(function e(){n&&n.scheduleUpdate(),o(),h(t)?window.requestAnimationFrame(e):s()})}function Pe(e,t){var n=We.reduce(function(n,i){var o=e.getAttribute("data-"+i.toLowerCase())||t[i];return"false"===o&&(o=!1),"true"===o&&(o=!0),isFinite(o)&&!isNaN(parseFloat(o))&&(o=parseFloat(o)),"string"==typeof o&&"["===o.trim().charAt(0)&&(o=JSON.parse(o)),n[i]=o,n},{});return pt({},t,n)}function Ae(e,t,n){var i=n.position,o=n.distance,r=n.arrow,a=n.animateFill,s=n.inertia,l=n.animation,c=n.arrowSize,d=n.size,u=n.theme,p=n.html,f=n.zIndex,h=n.interactive,g=document.createElement("div");g.setAttribute("class","tippy-popper"),g.setAttribute("role","tooltip"),g.setAttribute("aria-hidden","true"),g.setAttribute("id","tippy-tooltip-"+e),g.style.zIndex=f;var m=document.createElement("div");if(m.setAttribute("class","tippy-tooltip tippy-tooltip--"+d+" leave"),m.setAttribute("data-animation",l),u.split(" ").forEach(function(e){m.classList.add(e+"-theme")}),r){var y=document.createElement("div");y.setAttribute("class","arrow-"+c),y.setAttribute("x-arrow",""),m.appendChild(y)}if(a){m.setAttribute("data-animatefill","");var b=document.createElement("div");b.setAttribute("class","leave"),b.setAttribute("x-circle",""),m.appendChild(b)}s&&m.setAttribute("data-inertia",""),h&&m.setAttribute("data-interactive","");var w=document.createElement("div");if(w.setAttribute("class","tippy-tooltip-content"),p){var x=void 0;p instanceof Element?(w.appendChild(p),x="#"+p.id||"tippy-html-template"):(w.innerHTML=document.getElementById(p.replace("#","")).innerHTML,x=p),g.classList.add("html-template"),h&&g.setAttribute("tabindex","-1"),m.setAttribute("data-template-id",x)}else w.innerHTML=t;return m.style[v(i)]=Ee(o),m.appendChild(w),g.appendChild(m),g}function Oe(e,t,n,i){var o=[];return"manual"===e?o:(t.addEventListener(e,n.handleTrigger),o.push({event:e,handler:n.handleTrigger}),"mouseenter"===e&&(Fe.SUPPORTS_TOUCH&&i&&(t.addEventListener("touchstart",n.handleTrigger),o.push({event:"touchstart",handler:n.handleTrigger}),t.addEventListener("touchend",n.handleMouseleave),o.push({event:"touchend",handler:n.handleMouseleave})),t.addEventListener("mouseleave",n.handleMouseleave),o.push({event:"mouseleave",handler:n.handleMouseleave})),"focus"===e&&(t.addEventListener("blur",n.handleBlur),o.push({event:"blur",handler:n.handleBlur})),o)}function Le(e,t,n){if(!t.getAttribute("x-placement"))return!0;var i=e.clientX,o=e.clientY,r=n.interactiveBorder,a=n.distance,s=t.getBoundingClientRect(),l=v(t.getAttribute("x-placement")),c=r+a,d={top:s.top-o>r,bottom:o-s.bottom>r,left:s.left-i>r,right:i-s.right>r};switch(l){case"top":d.top=s.top-o>c;break;case"bottom":d.bottom=o-s.bottom>c;break;case"left":d.left=s.left-i>c;break;case"right":d.right=i-s.right>c}return d.top||d.bottom||d.left||d.right}function Ie(e,n,i){var o=this,r=(i.position,i.delay),a=(i.duration,i.interactive),s=(i.interactiveBorder,i.distance,i.hideOnClick),l=i.trigger,c=i.touchHold,d=(i.touchWait,void 0),u=void 0,p=function(){clearTimeout(d),clearTimeout(u)},f=function(){if(p(),!h(n)){var e=Array.isArray(r)?r[0]:r;r?d=setTimeout(function(){return o.show(n)},e):o.show(n)}},g=function(e){return o.callbacks.wait?o.callbacks.wait.call(n,f,e):f()},m=function(){p();var e=Array.isArray(r)?r[1]:r;r?u=setTimeout(function(){return o.hide(n)},e):o.hide(n)};return{handleTrigger:function(t){var i="mouseenter"===t.type&&Fe.SUPPORTS_TOUCH&&Fe.touch;if(!i||!c){var o="click"===t.type,r="persistent"!==s;o&&h(n)&&r?m():g(t),i&&Fe.iOS()&&e.click&&e.click()}},handleMouseleave:function(o){if(!("mouseleave"===o.type&&Fe.SUPPORTS_TOUCH&&Fe.touch&&c)){if(a){var r=function o(r){var a=function(){document.body.removeEventListener("mouseleave",m),document.removeEventListener("mousemove",o),m()},s=t(r.target,Re.TOOLTIPPED_EL),c=t(r.target,Re.POPPER)===n,d=s===e,u=-1!==l.indexOf("click");if(s&&s!==e)return a();c||d||u||Le(r,n,i)&&a()};return document.body.addEventListener("mouseleave",m),void document.addEventListener("mousemove",r)}m()}},handleBlur:function(e){e.relatedTarget&&!Fe.touch&&(t(e.relatedTarget,Re.POPPER)||m())}}}function je(e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),e}function He(e){var t=this;return e.reduce(function(e,n){var i=ft,o=pt({},je(t.settings.performance?t.settings:Pe(n,t.settings)));"function"==typeof o.html&&(o.html=o.html(n));var r=o.html,a=o.trigger,s=o.touchHold,c=o.dynamicTitle,d=n.getAttribute("title");if(!d&&!r)return e;n.setAttribute("data-tooltipped",""),n.setAttribute("aria-describedby","tippy-tooltip-"+i),l(n);var u=Ae(i,d,o),f=Ie.call(t,n,u,o),h=[];a.trim().split(" ").forEach(function(e){return h=h.concat(Oe(e,n,f,s))});var g=void 0;if(c&&window.MutationObserver){var m=p(u),v=m.content;g=new MutationObserver(function(){var e=n.getAttribute("title");e&&(v.innerHTML=e,l(n))}),g.observe(n,{attributes:!0})}return e.push({id:i,el:n,popper:u,settings:o,listeners:h,tippyInstance:t,_mutationObservers:[g]}),ft++,e},[])}function Ne(e,t){return m(e)&&(e={refObj:!0,attributes:e.attributes||{},getBoundingClientRect:e.getBoundingClientRect,clientWidth:e.clientWidth,clientHeight:e.clientHeight,setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){return e.classList.classNames[t]=!1,!0},contains:function(t){return!!e.classList.classNames[t]}}}),new ht(e,t)}var Fe={};"undefined"!=typeof window&&(Fe.SUPPORTED="requestAnimationFrame"in window,Fe.SUPPORTS_TOUCH="ontouchstart"in window,Fe.touch=!1,Fe.dynamicInputDetection=!0,Fe.iOS=function(){return/iPhone|iPad|iPod/.test(navigator.userAgent)&&!window.MSStream});var qe=[],Re={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-tooltip-content",CIRCLE:"[x-circle]",ARROW:"[x-arrow]",TOOLTIPPED_EL:"[data-tooltipped]",CONTROLLER:"[data-tippy-controller]"},ze={html:!1,position:"top",animation:"shift",animateFill:!0,arrow:!1,arrowSize:"regular",delay:0,trigger:"mouseenter focus",duration:350,interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,flipDuration:350,sticky:!1,stickyDuration:200,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,popperOptions:{}},We=Fe.SUPPORTED&&Object.keys(ze),_e={};if("undefined"!=typeof Element){var Be=Element.prototype;_e=Be.matches||Be.matchesSelector||Be.webkitMatchesSelector||Be.mozMatchesSelector||Be.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}}for(var Ye=_e,Ue="undefined"!=typeof window&&"undefined"!=typeof document,Xe=["Edge","Trident","Firefox"],Ve=0,Ze=0;Ze<Xe.length;Ze+=1)if(Ue&&navigator.userAgent.indexOf(Xe[Ze])>=0){Ve=1;break}var Ge=Ue&&window.Promise,Qe=Ge?x:C,Ke=void 0,Je=function(){return void 0===Ke&&(Ke=-1!==navigator.appVersion.indexOf("MSIE 10")),Ke},et=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},tt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),nt=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},it=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},ot=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],rt=ot.slice(3),at={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},st={shift:{order:100,enabled:!0,fn:ke},offset:{order:200,enabled:!0,fn:xe,offset:0},preventOverflow:{order:300,enabled:!0,fn:Ce,priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:ye},arrow:{order:500,enabled:!0,fn:he,element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:ve,behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:Se},hide:{order:800,enabled:!0,fn:Te},computeStyle:{order:850,enabled:!0,fn:pe,gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:de,onLoad:ue,gpuAcceleration:void 0}},lt={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:st},ct=function(){function e(t,n){var i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};et(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=Qe(this.update.bind(this)),this.options=it({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(it({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){i.options.modifiers[t]=it({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return it({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&k(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return tt(e,[{key:"update",value:function(){return Q.call(this)}},{key:"destroy",value:function(){return ee.call(this)}},{key:"enableEventListeners",value:function(){return oe.call(this)}},{key:"disableEventListeners",value:function(){return ae.call(this)}}]),e}();ct.Utils=("undefined"!=typeof window?window:global).PopperUtils,ct.placements=ot,ct.Defaults=lt;var dt=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},ut=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),pt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},ft=1,ht=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};dt(this,e),Fe.SUPPORTED&&(o(),this.state={destroyed:!1},this.selector=t,this.settings=pt({},ze,n),(n.show||n.shown||n.hide||n.hidden)&&console.warn("Callbacks without the `on` prefix are deprecated (with the exception of `wait`). Use onShow, onShown, onHide, and onHidden instead."),this.callbacks={wait:n.wait,show:n.onShow||n.show||g,shown:n.onShown||n.shown||g,hide:n.onHide||n.hide||g,hidden:n.onHidden||n.hidden||g},this.store=He.call(this,b(t)),qe.push.apply(qe,this.store))}return ut(e,[{key:"getPopperElement",value:function(e){try{return n(this.store,function(t){return t.el===e}).popper}catch(e){console.error("[getPopperElement]: Element passed as the argument does not exist in the instance")}}},{key:"getReferenceElement",value:function(e){try{return n(this.store,function(t){return t.popper===e}).el}catch(e){console.error("[getReferenceElement]: Popper passed as the argument does not exist in the instance")}}},{key:"getReferenceData",value:function(e){return n(this.store,function(t){return t.el===e||t.popper===e})}},{key:"show",value:function(e,t){var i=this;if(!this.state.destroyed){var o=n(this.store,function(t){return t.popper===e}),a=p(e),s=a.tooltip,l=a.circle,c=a.content;if(!this.selector.refObj&&!document.body.contains(o.el))return void this.destroy(e);this.callbacks.show.call(e);var g=o.el,m=o.settings,v=(m.appendTo,m.sticky),y=m.interactive,b=m.followCursor,x=m.flipDuration,C=m.duration,k=void 0!==t?t:Array.isArray(C)?C[0]:C;f([e,s,l],0),$e(o),e.style.visibility="visible",e.setAttribute("aria-hidden","false"),r(function(){h(e)&&(b&&!Fe.touch||(o.popperInstance.update(),f([e],x)),f([s,l],k),l&&(c.style.opacity=1),y&&g.classList.add("active"),v&&Me(o),d(s,l),u([s,l],function(e){e.contains("tippy-notransition")&&e.remove("tippy-notransition"),e.remove("leave"),e.add("enter")}),w(o,k,function(){h(e)&&!o._onShownFired&&(y&&e.focus(),s.classList.add("tippy-notransition"),o._onShownFired=!0,i.callbacks.shown.call(e))}))})}}},{key:"hide",value:function(e,t){var i=this;if(!this.state.destroyed){this.callbacks.hide.call(e);var o=n(this.store,function(t){return t.popper===e}),r=p(e),a=r.tooltip,s=r.circle,l=r.content,d=o.el,g=o.settings,m=g.appendTo,v=(g.sticky,g.interactive),b=(g.followCursor,g.html),x=g.trigger,C=g.duration,k=void 0!==t?t:Array.isArray(C)?C[1]:C;o._onShownFired=!1,v&&d.classList.remove("active"),e.style.visibility="hidden",e.setAttribute("aria-hidden","true"),f([a,s,s?l:null],k),s&&(l.style.opacity=0),u([a,s],function(e){e.contains("tippy-tooltip")&&e.remove("tippy-notransition"),e.remove("enter"),e.add("leave")}),b&&-1!==x.indexOf("click")&&c(d)&&d.focus(),w(o,k,function(){!h(e)&&m.contains(e)&&"1"!==getComputedStyle(a).opacity&&(d.removeEventListener("mousemove",y),o.popperInstance.disableEventListeners(),m.removeChild(e),i.callbacks.hidden.call(e))})}}},{key:"update",value:function(e){if(!this.state.destroyed){var t=n(this.store,function(t){return t.popper===e}),i=p(e),o=i.content,r=t.el,a=t.settings.html;if(a instanceof Element)return void console.warn("Aborted: update() should not be used if `html` is a DOM element");o.innerHTML=a?document.getElementById(a.replace("#","")).innerHTML:r.getAttribute("title")||r.getAttribute("data-original-title"),a||l(r)}}},{key:"destroy",value:function(e,t){var i=this;if(!this.state.destroyed){var o=n(this.store,function(t){return t.popper===e}),r=o.el,a=o.popperInstance,l=o.listeners,c=o._mutationObservers;h(e)&&this.hide(e,0),l.forEach(function(e){return r.removeEventListener(e.event,e.handler)}),r.setAttribute("title",r.getAttribute("data-original-title")),r.removeAttribute("data-original-title"),r.removeAttribute("data-tooltipped"),r.removeAttribute("aria-describedby"),a&&a.destroy(),c.forEach(function(e){e&&e.disconnect()}),qe.splice(s(qe,function(t){return t.popper===e}),1),(void 0===t||t)&&(this.store=qe.filter(function(e){return e.tippyInstance===i}))}}},{key:"destroyAll",value:function(){var e=this;if(!this.state.destroyed){var t=this.store.length;this.store.forEach(function(n,i){var o=n.popper;e.destroy(o,i===t-1)}),this.store=null,this.state.destroyed=!0}}}]),e}();return Ne.Browser=Fe,Ne.Defaults=ze,Ne.disableDynamicInputDetection=function(){return Fe.dynamicInputDetection=!1},Ne.enableDynamicInputDetection=function(){return Fe.dynamicInputDetection=!0},Ne}),function(e,t){"object"==typeof module&&module.exports?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Spinner=t()}(this,function(){"use strict";function e(e,t){var n,i=document.createElement(e||"div");for(n in t)i[n]=t[n];return i}function t(e){for(var t=1,n=arguments.length;t<n;t++)e.appendChild(arguments[t]);return e}function n(e,t,n,i){var o=["opacity",t,~~(100*e),n,i].join("-"),r=.01+n/i*100,a=Math.max(1-(1-e)/t*(100-r),e),s=l.substring(0,l.indexOf("Animation")).toLowerCase(),d=s&&"-"+s+"-"||"";return u[o]||(c.insertRule("@"+d+"keyframes "+o+"{0%{opacity:"+a+"}"+r+"%{opacity:"+e+"}"+(r+.01)+"%{opacity:1}"+(r+t)%100+"%{opacity:"+e+"}100%{opacity:"+a+"}}",c.cssRules.length),u[o]=1),o}function i(e,t){var n,i,o=e.style;if(t=t.charAt(0).toUpperCase()+t.slice(1),void 0!==o[t])return t;for(i=0;i<d.length;i++)if(n=d[i]+t,void 0!==o[n])return n}function o(e,t){for(var n in t)e.style[i(e,n)||n]=t[n];return e}function r(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)void 0===e[i]&&(e[i]=n[i])}return e}function a(e,t){return"string"==typeof e?e:e[t%e.length]}function s(e){this.opts=r(e||{},s.defaults,p)}var l,c,d=["webkit","Moz","ms","O"],u={},p={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(s.defaults={},r(s.prototype,{spin:function(t){this.stop();var n=this,i=n.opts,r=n.el=e(null,{className:i.className});if(o(r,{position:i.position,width:0,zIndex:i.zIndex,left:i.left,top:i.top}),t&&t.insertBefore(r,t.firstChild||null),r.setAttribute("role","progressbar"),n.lines(r,n.opts),!l){var a,s=0,c=(i.lines-1)*(1-i.direction)/2,d=i.fps,u=d/i.speed,p=(1-i.opacity)/(u*i.trail/100),f=u/i.lines;!function e(){s++;for(var t=0;t<i.lines;t++)a=Math.max(1-(s+(i.lines-t)*f)%u*p,i.opacity),n.opacity(r,t*i.direction+c,a,i);n.timeout=n.el&&setTimeout(e,~~(1e3/d))}()}return n},stop:function(){var e=this.el;return e&&(clearTimeout(this.timeout),e.parentNode&&e.parentNode.removeChild(e),this.el=void 0),this},lines:function(i,r){function s(t,n){return o(e(),{position:"absolute",width:r.scale*(r.length+r.width)+"px",height:r.scale*r.width+"px",background:t,boxShadow:n,transformOrigin:"left",transform:"rotate("+~~(360/r.lines*d+r.rotate)+"deg) translate("+r.scale*r.radius+"px,0)",borderRadius:(r.corners*r.scale*r.width>>1)+"px"})}for(var c,d=0,u=(r.lines-1)*(1-r.direction)/2;d<r.lines;d++)c=o(e(),{position:"absolute",top:1+~(r.scale*r.width/2)+"px",transform:r.hwaccel?"translate3d(0,0,0)":"",opacity:r.opacity,animation:l&&n(r.opacity,r.trail,u+d*r.direction,r.lines)+" "+1/r.speed+"s linear infinite"}),r.shadow&&t(c,o(s("#000","0 0 4px #000"),{top:"2px"})),t(i,t(c,s(a(r.color,d),"0 0 1px rgba(0,0,0,.1)")));return i},opacity:function(e,t,n){t<e.childNodes.length&&(e.childNodes[t].style.opacity=n)}}),"undefined"!=typeof document){c=function(){var n=e("style",{type:"text/css"});return t(document.getElementsByTagName("head")[0],n),n.sheet||n.styleSheet}();var f=o(e("group"),{behavior:"url(#default#VML)"});!i(f,"transform")&&f.adj?function(){function n(t,n){return e("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',n)}c.addRule(".spin-vml","behavior:url(#default#VML)"),s.prototype.lines=function(e,i){function r(){return o(n("group",{coordsize:d+" "+d,coordorigin:-c+" "+-c}),{width:d,height:d})}function s(e,s,l){t(p,t(o(r(),{rotation:360/i.lines*e+"deg",left:~~s}),t(o(n("roundrect",{arcsize:i.corners}),{width:c,height:i.scale*i.width,left:i.scale*i.radius,top:-i.scale*i.width>>1,filter:l}),n("fill",{color:a(i.color,e),opacity:i.opacity}),n("stroke",{opacity:0}))))}var l,c=i.scale*(i.length+i.width),d=2*i.scale*c,u=-(i.width+i.length)*i.scale*2+"px",p=o(r(),{position:"absolute",top:u,left:u});if(i.shadow)for(l=1;l<=i.lines;l++)s(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=i.lines;l++)s(l);return t(e,p)},s.prototype.opacity=function(e,t,n,i){var o=e.firstChild;i=i.shadow&&i.lines||0,o&&t+i<o.childNodes.length&&(o=o.childNodes[t+i],o=o&&o.firstChild,(o=o&&o.firstChild)&&(o.opacity=n))}}():l=i(f,"animation")}return s}),function(e){if("object"==typeof exports)e(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],e);else{if(!window.Spinner)throw new Error("Spin.js not present");e(window.jQuery,window.Spinner)}}(function(e,t){e.fn.spin=function(n,i){return this.each(function(){var o=e(this),r=o.data();r.spinner&&(r.spinner.stop(),delete r.spinner),!1!==n&&(n=e.extend({color:i||o.css("color")},e.fn.spin.presets[n]||n),r.spinner=new t(n).spin(this))})},e.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(){$("[data-flatpickr]").each(function(){var e={locale:"ru",dateFormat:"d.m.Y"},t=$(this).data("flatpickr");for(var n in t)e[n]=t[n];$(this).flatpickr(e)})}(),function(){$(".js-header-slider").slick({infinite:!0,slidesToShow:1,slidesToScroll:1,nextArrow:".js-header-slider-next",prevArrow:".js-header-slider-prev"})}(),function(e){e.fn.maskedinput=function(){this.each(function(){var t=e(this).data("masked-input"),n=e(this).data("masked-input-placeholder"),i=e(this).is("[data-masked-input-clearifnotmatch]");e(this).mask(t,{placeholder:n,clearIfNotMatch:i})})}}(jQuery),function(){$(".js-logotypes-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-next").click(function(){return e.goToNextSlide(),!1}),$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){function t(){$(".js-offcanvas, "+n).removeClass("active")}var n="#offcanvas",i="#offcanvas > .main-offcanvas";return $(this).hasClass("active")?t():function(){$(".js-offcanvas").addClass("active"),$(n).addClass("active"),$(document).on("click","body",function(n){e(n,i,t)})}(),!1})}(),$(function(){var e=function(e,t,n,i,o,r,a,s){if("undefined"==typeof cp)alert("Оплата через cloudpayments временно недоступна, попробуйте повторить операцию позже, либо воспользуйтесь оплатой через электронные кошельки");else{var l=new cp.CloudPayments,c={firstname:o,lastname:r,email:n};a&&(c.cloudPayments={recurrent:{interval:"Month",period:1}}),l.charge({publicId:e,description:i,amount:t,currency:"RUB",accountId:n,data:c,invoiceId:s},function(e){$.ajax({type:"POST",url:"/ajax/cp/",data:e})},function(e,t){})}},t=function(t,n){$("[name=other-sum]").val()?t.sum=$("[name=other-sum]").val():t.sum=$("[name=payment-value]:checked").val(),t.project=n.find("[name=donate-project]").val(),t.email=n.find("[name=email]").val(),t.name=n.find("[name=name]").val(),t.lastname=n.find("[name=lastname]").val(),$.ajax({type:"POST",url:"/ajax/payment/",data:t,dataType:"JSON",success:function(t){t.success?"robokassa"==t.gate?document.location.href=t.href:e(t.pubkey,t.sum,t.email,t.description,t.firstname,t.lastname,t.regular,t.order):alert("Извините, в данный момент платежи не принимаются по техническим причинам")}})};$("a[href^='#donate-block-internet']").on("click",function(){return $("#donate-block-internet-once-payment").hide(),$("#donate-block-internet-monthly-payment").hide(),$("#donate-block-sberbank").hide(),$("#donate-block-internet").show(),!1}),$("a[href^='#donate-block-sberbank']").on("click",function(){return $("#donate-block-internet-once-payment").hide(),$("#donate-block-internet-monthly-payment").hide(),$("#donate-block-internet").hide(),$("#donate-block-sberbank").show(),!1}),$("#once-card").on("click",function(){var e=$(".donate-block-form"),n={};return n.type="once",n.gate="cp",t(n,e),!1}),$("#once-emoney").on("click",function(){var e=$(".donate-block-form"),n={};return n.type="once",n.gate="robokassa",t(n,e),!1}),$("[name=agreement]").on("click",function(){$(".form-control-checkbox label").removeClass("red"),$(".oferta-error").hide()}),$(".donate-block-form").on("submit",function(){if("ch"!=$("[name=agreement]:checked").val())return $(".form-control-checkbox label").addClass("red"),$(".oferta-error").show(),!1;$(".oferta-error").hide();var e=$(this),t={};t.type=e.find("[name=payment-type]:checked").val();var n=100;n=$("[name=other-sum]").val()?$("[name=other-sum]").val():$("[name=payment-value]:checked").val();var i=e.find("[name=donate-project] option:selected").text();return"once"==t.type?($("#donate-block-internet").hide(),$("#donate-block-internet-monthly-payment").hide(),$("#donate-block-internet-once-payment").show(),$(".internet-payment-text").html("Перевести "+n+" руб. на "+i.toLowerCase()),!1):($("#donate-block-internet").hide(),$("#donate-block-internet-once-payment").hide(),$("#donate-block-internet-monthly-payment").show(),$(".internet-payment-text").html("Ежемесячно переводить "+n+" руб. на "+i.toLowerCase()+"<br><br><span>Ежемесячное пожертвование возможно только с банковской карты. По карты Maestro нельзя оформить регулярный платеж.</span>"),!1)}),$(".button-pay-monthly").on("click",function(){var e=$(".donate-block-form"),n={};return n.type=e.find("[name=payment-type]:checked").val(),t(n,e),!1});var n=function(){var e=document.location.hash;if(e&&-1!=e.indexOf("donate-")){var t=1*e.replace("#donate-","");$("[name=donate-project]").val(t),$("html, body").animate({scrollTop:$("#donate").offset().top+20},500)}};n(),$(window).on("hashchange",function(){n()})}),$(function(){$(document).on("submit","[data-captcha]",function(){$("body").append('<div class="spinner-overlay"></div>'),$(".spinner-overlay").spin("large","#000");var e=$(this)[0],t=$(this).data("captcha"),n=$(this).find("[name=captcha-token]"),i=function(t){n.val(t),e.submit()};return grecaptcha.render("recaptcha-placeholder",{sitekey:t,callback:i,size:"invisible"}),grecaptcha.execute(window.captchaID),!1})}),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",o=e(this).data("toggle-group"),r=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,o),e('[data-toggle-group="'+o+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&r?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("[data-toggle]").toggler(),$("[data-masked-input]").maskedinput(),tippy("[data-tooltip]",{theme:"light"})});var gCapthaInit=function(){};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
