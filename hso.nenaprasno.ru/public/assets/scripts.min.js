function Flatpickr(e,t){function n(e){ae.config.noCalendar&&!ae.selectedDates.length&&(ae.selectedDates=[ae.now]),ie(e),ae.selectedDates.length&&(!ae.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(r(),Q()):setTimeout(function(){r(),Q()},1e3))}function r(){if(ae.config.enableTime){var e=parseInt(ae.hourElement.value,10)||0,t=parseInt(ae.minuteElement.value,10)||0,n=ae.config.enableSeconds?parseInt(ae.secondElement.value,10)||0:0;ae.amPM&&(e=e%12+12*("PM"===ae.amPM.textContent)),ae.minDateHasTime&&0===re(ae.latestSelectedDateObj,ae.config.minDate)&&(e=Math.max(e,ae.config.minDate.getHours()))===ae.config.minDate.getHours()&&(t=Math.max(t,ae.config.minDate.getMinutes())),ae.maxDateHasTime&&0===re(ae.latestSelectedDateObj,ae.config.maxDate)&&(e=Math.min(e,ae.config.maxDate.getHours()))===ae.config.maxDate.getHours()&&(t=Math.min(t,ae.config.maxDate.getMinutes())),a(e,t,n)}}function i(e){var t=e||ae.latestSelectedDateObj;t&&a(t.getHours(),t.getMinutes(),t.getSeconds())}function a(e,t,n){ae.selectedDates.length&&ae.latestSelectedDateObj.setHours(e%24,t,n||0,0),ae.config.enableTime&&!ae.isMobile&&(ae.hourElement.value=ae.pad(ae.config.time_24hr?e:(12+e)%12+12*(e%12==0)),ae.minuteElement.value=ae.pad(t),!ae.config.time_24hr&&ae.selectedDates.length&&(ae.amPM.textContent=ae.latestSelectedDateObj.getHours()>=12?"PM":"AM"),ae.config.enableSeconds&&(ae.secondElement.value=ae.pad(n)))}function o(e){var t=e.target.value;4===t.length&&(ae.currentYearElement.blur(),/[^\d]/.test(t)||E(t))}function s(e){e.preventDefault(),ae.changeMonth(Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY)))}function l(){if(ae.config.wrap&&["open","close","toggle","clear"].forEach(function(e){for(var t=ae.element.querySelectorAll("[data-"+e+"]"),n=0;n<t.length;n++)t[n].addEventListener("click",ae[e])}),void 0!==window.document.createEvent&&(ae.changeEvent=window.document.createEvent("HTMLEvents"),ae.changeEvent.initEvent("change",!1,!0)),ae.isMobile)return W();ae.debouncedResize=ne(M,50),ae.triggerChange=function(){z("Change")},ae.debouncedChange=ne(ae.triggerChange,300),"range"===ae.config.mode&&ae.days&&ae.days.addEventListener("mouseover",T),window.document.addEventListener("keydown",A),ae.config.inline||ae.config.static||window.addEventListener("resize",ae.debouncedResize),window.ontouchstart&&window.document.addEventListener("touchstart",C),window.document.addEventListener("click",C),window.document.addEventListener("blur",C),ae.config.clickOpens&&(ae.altInput||ae.input).addEventListener("focus",O),ae.config.noCalendar||(ae.prevMonthNav.addEventListener("click",function(){return b(-1)}),ae.nextMonthNav.addEventListener("click",function(){return b(1)}),ae.currentMonthElement.addEventListener("wheel",function(e){return ne(s(e),50)}),ae.currentYearElement.addEventListener("wheel",function(e){return ne(Z(e),50)}),ae.currentYearElement.addEventListener("focus",function(){ae.currentYearElement.select()}),ae.currentYearElement.addEventListener("input",o),ae.currentYearElement.addEventListener("increment",o),ae.days.addEventListener("click",I)),ae.config.enableTime&&(ae.timeContainer.addEventListener("transitionend",F),ae.timeContainer.addEventListener("wheel",function(e){return ne(n(e),5)}),ae.timeContainer.addEventListener("input",n),ae.timeContainer.addEventListener("increment",n),ae.timeContainer.addEventListener("increment",ae.debouncedChange),ae.timeContainer.addEventListener("wheel",ae.debouncedChange),ae.timeContainer.addEventListener("input",ae.triggerChange),ae.hourElement.addEventListener("focus",function(){ae.hourElement.select()}),ae.minuteElement.addEventListener("focus",function(){ae.minuteElement.select()}),ae.secondElement&&ae.secondElement.addEventListener("focus",function(){ae.secondElement.select()}),ae.amPM&&ae.amPM.addEventListener("click",function(e){n(e),ae.triggerChange(e)}))}function u(e){e=e?ae.parseDate(e):ae.latestSelectedDateObj||(ae.config.minDate>ae.now?ae.config.minDate:ae.config.maxDate&&ae.config.maxDate<ae.now?ae.config.maxDate:ae.now);try{ae.currentYear=e.getFullYear(),ae.currentMonth=e.getMonth()}catch(t){console.error(t.stack),console.warn("Invalid date supplied: "+e)}ae.redraw()}function c(e,t){var n=e.target.parentNode.childNodes[0];n.value=parseInt(n.value,10)+t*(n.step||1);try{n.dispatchEvent(new Event("increment",{bubbles:!0}))}catch(e){var r=window.document.createEvent("CustomEvent");r.initCustomEvent("increment",!0,!0,{}),n.dispatchEvent(r)}}function f(e){var t=X("div","numInputWrapper"),n=X("input","numInput "+e),r=X("span","arrowUp"),i=X("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(r),t.appendChild(i),r.addEventListener("click",function(e){return c(e,1)}),i.addEventListener("click",function(e){return c(e,-1)}),t}function d(){var e=window.document.createDocumentFragment();ae.calendarContainer=X("div","flatpickr-calendar"),ae.numInputType=navigator.userAgent.indexOf("MSIE 9.0")>0?"text":"number",ae.config.noCalendar||(e.appendChild(m()),ae.innerContainer=X("div","flatpickr-innerContainer"),ae.config.weekNumbers&&ae.innerContainer.appendChild(y()),ae.rContainer=X("div","flatpickr-rContainer"),ae.rContainer.appendChild(g()),ae.days||(ae.days=X("div","flatpickr-days"),ae.days.tabIndex=-1),h(),ae.rContainer.appendChild(ae.days),ae.innerContainer.appendChild(ae.rContainer),e.appendChild(ae.innerContainer)),ae.config.enableTime&&e.appendChild(v()),"range"===ae.config.mode&&ae.calendarContainer.classList.add("rangeMode"),ae.calendarContainer.appendChild(e);var t=ae.config.appendTo&&ae.config.appendTo.nodeType;if(ae.config.inline||ae.config.static){if(ae.calendarContainer.classList.add(ae.config.inline?"inline":"static"),F(),ae.config.inline&&!t)return ae.element.parentNode.insertBefore(ae.calendarContainer,(ae.altInput||ae.input).nextSibling);if(ae.config.static){var n=X("div","flatpickr-wrapper");return ae.element.parentNode.insertBefore(n,ae.element),n.appendChild(ae.element),void n.appendChild(ae.calendarContainer)}}(t?ae.config.appendTo:window.document.body).appendChild(ae.calendarContainer)}function p(e,t,n){var r=S(t,!0),i=X("span","flatpickr-day "+e,t.getDate());return i.dateObj=t,te(i,"today",0===re(t,ae.now)),r?(i.tabIndex=0,G(t)&&(i.classList.add("selected"),ae.selectedDateElem=i,"range"===ae.config.mode&&(te(i,"startRange",0===re(t,ae.selectedDates[0])),te(i,"endRange",0===re(t,ae.selectedDates[1]))))):(i.classList.add("disabled"),ae.selectedDates[0]&&t>ae.minRangeDate&&t<ae.selectedDates[0]?ae.minRangeDate=t:ae.selectedDates[0]&&t<ae.maxRangeDate&&t>ae.selectedDates[0]&&(ae.maxRangeDate=t)),"range"===ae.config.mode&&(K(t)&&!G(t)&&i.classList.add("inRange"),1===ae.selectedDates.length&&(t<ae.minRangeDate||t>ae.maxRangeDate)&&i.classList.add("notAllowed")),ae.config.weekNumbers&&"prevMonthDay"!==e&&n%7==1&&ae.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+ae.config.getWeek(t)+"</span>"),z("DayCreate",i),i}function h(e,t){var n=(new Date(ae.currentYear,ae.currentMonth,1).getDay()-ae.l10n.firstDayOfWeek+7)%7,r="range"===ae.config.mode;ae.prevMonthDays=ae.utils.getDaysinMonth((ae.currentMonth-1+12)%12);var i=ae.utils.getDaysinMonth(),a=window.document.createDocumentFragment(),o=ae.prevMonthDays+1-n;ae.config.weekNumbers&&ae.weekNumbers.firstChild&&(ae.weekNumbers.textContent=""),r&&(ae.minRangeDate=new Date(ae.currentYear,ae.currentMonth-1,o),ae.maxRangeDate=new Date(ae.currentYear,ae.currentMonth+1,(42-n)%i)),ae.days.firstChild&&(ae.days.textContent="");for(var s=0;o<=ae.prevMonthDays;s++,o++)a.appendChild(p("prevMonthDay",new Date(ae.currentYear,ae.currentMonth-1,o),o));for(o=1;o<=i;o++)a.appendChild(p("",new Date(ae.currentYear,ae.currentMonth,o),o));for(var l=i+1;l<=42-n;l++)a.appendChild(p("nextMonthDay",new Date(ae.currentYear,ae.currentMonth+1,l%i),l));return r&&1===ae.selectedDates.length&&a.childNodes[0]?(ae._hidePrevMonthArrow=ae._hidePrevMonthArrow||ae.minRangeDate>a.childNodes[0].dateObj,ae._hideNextMonthArrow=ae._hideNextMonthArrow||ae.maxRangeDate<a.childNodes[41].dateObj):J(),ae.days.appendChild(a),ae.days}function m(){var e=window.document.createDocumentFragment();ae.monthNav=X("div","flatpickr-month"),ae.prevMonthNav=X("span","flatpickr-prev-month"),ae.prevMonthNav.innerHTML=ae.config.prevArrow,ae.currentMonthElement=X("span","cur-month"),ae.currentMonthElement.title=ae.l10n.scrollTitle;var t=f("cur-year");return ae.currentYearElement=t.childNodes[0],ae.currentYearElement.title=ae.l10n.scrollTitle,ae.config.minDate&&(ae.currentYearElement.min=ae.config.minDate.getFullYear()),ae.config.maxDate&&(ae.currentYearElement.max=ae.config.maxDate.getFullYear(),ae.currentYearElement.disabled=ae.config.minDate&&ae.config.minDate.getFullYear()===ae.config.maxDate.getFullYear()),ae.nextMonthNav=X("span","flatpickr-next-month"),ae.nextMonthNav.innerHTML=ae.config.nextArrow,ae.navigationCurrentMonth=X("span","flatpickr-current-month"),ae.navigationCurrentMonth.appendChild(ae.currentMonthElement),ae.navigationCurrentMonth.appendChild(t),e.appendChild(ae.prevMonthNav),e.appendChild(ae.navigationCurrentMonth),e.appendChild(ae.nextMonthNav),ae.monthNav.appendChild(e),Object.defineProperty(ae,"_hidePrevMonthArrow",{get:function(){return this.__hidePrevMonthArrow},set:function(e){this.__hidePrevMonthArrow!==e&&(ae.prevMonthNav.style.display=e?"none":"block"),this.__hidePrevMonthArrow=e}}),Object.defineProperty(ae,"_hideNextMonthArrow",{get:function(){return this.__hideNextMonthArrow},set:function(e){this.__hideNextMonthArrow!==e&&(ae.nextMonthNav.style.display=e?"none":"block"),this.__hideNextMonthArrow=e}}),J(),ae.monthNav}function v(){ae.calendarContainer.classList.add("hasTime"),ae.config.noCalendar&&ae.calendarContainer.classList.add("noCalendar"),ae.timeContainer=X("div","flatpickr-time"),ae.timeContainer.tabIndex=-1;var e=X("span","flatpickr-time-separator",":"),t=f("flatpickr-hour");ae.hourElement=t.childNodes[0];var n=f("flatpickr-minute");if(ae.minuteElement=n.childNodes[0],ae.hourElement.tabIndex=ae.minuteElement.tabIndex=0,ae.hourElement.value=ae.pad(ae.latestSelectedDateObj?ae.latestSelectedDateObj.getHours():ae.config.defaultHour),ae.minuteElement.value=ae.pad(ae.latestSelectedDateObj?ae.latestSelectedDateObj.getMinutes():ae.config.defaultMinute),ae.hourElement.step=ae.config.hourIncrement,ae.minuteElement.step=ae.config.minuteIncrement,ae.hourElement.min=ae.config.time_24hr?0:1,ae.hourElement.max=ae.config.time_24hr?23:12,ae.minuteElement.min=0,ae.minuteElement.max=59,ae.hourElement.title=ae.minuteElement.title=ae.l10n.scrollTitle,ae.timeContainer.appendChild(t),ae.timeContainer.appendChild(e),ae.timeContainer.appendChild(n),ae.config.time_24hr&&ae.timeContainer.classList.add("time24hr"),ae.config.enableSeconds){ae.timeContainer.classList.add("hasSeconds");var r=f("flatpickr-second");ae.secondElement=r.childNodes[0],ae.secondElement.value=ae.latestSelectedDateObj?ae.pad(ae.latestSelectedDateObj.getSeconds()):"00",ae.secondElement.step=ae.minuteElement.step,ae.secondElement.min=ae.minuteElement.min,ae.secondElement.max=ae.minuteElement.max,ae.timeContainer.appendChild(X("span","flatpickr-time-separator",":")),ae.timeContainer.appendChild(r)}return ae.config.time_24hr||(ae.amPM=X("span","flatpickr-am-pm",["AM","PM"][ae.hourElement.value>11|0]),ae.amPM.title=ae.l10n.toggleTitle,ae.amPM.tabIndex=0,ae.timeContainer.appendChild(ae.amPM)),ae.timeContainer}function g(){ae.weekdayContainer||(ae.weekdayContainer=X("div","flatpickr-weekdays"));var e=ae.l10n.firstDayOfWeek,t=ae.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=[].concat(t.splice(e,t.length),t.splice(0,e))),ae.weekdayContainer.innerHTML="\n\t\t<span class=flatpickr-weekday>\n\t\t\t"+t.join("</span><span class=flatpickr-weekday>")+"\n\t\t</span>\n\t\t",ae.weekdayContainer}function y(){return ae.calendarContainer.classList.add("hasWeeks"),ae.weekWrapper=X("div","flatpickr-weekwrapper"),ae.weekWrapper.appendChild(X("span","flatpickr-weekday",ae.l10n.weekAbbreviation)),ae.weekNumbers=X("div","flatpickr-weeks"),ae.weekWrapper.appendChild(ae.weekNumbers),ae.weekWrapper}function b(e,t){t=void 0===t||t;var n=t?e:e-ae.currentMonth;n<0&&ae._hidePrevMonthArrow||n>0&&ae._hideNextMonthArrow||(ae.currentMonth+=n,(ae.currentMonth<0||ae.currentMonth>11)&&(ae.currentYear+=ae.currentMonth>11?1:-1,ae.currentMonth=(ae.currentMonth+12)%12,z("YearChange")),J(),h(),ae.config.noCalendar||ae.days.focus(),z("MonthChange"))}function x(e){ae.input.value="",ae.altInput&&(ae.altInput.value=""),ae.mobileInput&&(ae.mobileInput.value=""),ae.selectedDates=[],ae.latestSelectedDateObj=null,ae.dateIsPicked=!1,ae.redraw(),!1!==e&&z("Change")}function k(){ae.isOpen=!1,ae.isMobile||(ae.calendarContainer.classList.remove("open"),(ae.altInput||ae.input).classList.remove("active")),z("Close")}function w(e){e=e||ae,e.clear(!1),window.document.removeEventListener("keydown",A),window.removeEventListener("resize",e.debouncedResize),window.document.removeEventListener("click",C),window.document.removeEventListener("touchstart",C),window.document.removeEventListener("blur",C),e.timeContainer&&e.timeContainer.removeEventListener("transitionend",F),e.mobileInput?(e.mobileInput.parentNode&&e.mobileInput.parentNode.removeChild(e.mobileInput),delete e.mobileInput):e.calendarContainer&&e.calendarContainer.parentNode&&e.calendarContainer.parentNode.removeChild(e.calendarContainer),e.altInput&&(e.input.type="text",e.altInput.parentNode&&e.altInput.parentNode.removeChild(e.altInput),delete e.altInput),e.input.type=e.input._type,e.input.classList.remove("flatpickr-input"),e.input.removeEventListener("focus",O),e.input.removeAttribute("readonly"),delete e.input._flatpickr}function _(e){return!(!ae.config.appendTo||!ae.config.appendTo.contains(e))||ae.calendarContainer.contains(e)}function C(e){var t=ae.element.contains(e.target)||e.target===ae.input||e.target===ae.altInput||e.path&&e.path.indexOf&&(~e.path.indexOf(ae.input)||~e.path.indexOf(ae.altInput));!ae.isOpen||ae.config.inline||_(e.target)||t||(e.preventDefault(),ae.close(),"range"===ae.config.mode&&1===ae.selectedDates.length&&(ae.clear(),ae.redraw()))}function D(e,t){if(ae.config.formatDate)return ae.config.formatDate(e,t);var n=e.split("");return n.map(function(e,r){return ae.formats[e]&&"\\"!==n[r-1]?ae.formats[e](t):"\\"!==e?e:""}).join("")}function E(e){if(!(!e||ae.currentYearElement.min&&e<ae.currentYearElement.min||ae.currentYearElement.max&&e>ae.currentYearElement.max)){var t=parseInt(e,10),n=ae.currentYear!==t;ae.currentYear=t||ae.currentYear,ae.config.maxDate&&ae.currentYear===ae.config.maxDate.getFullYear()?ae.currentMonth=Math.min(ae.config.maxDate.getMonth(),ae.currentMonth):ae.config.minDate&&ae.currentYear===ae.config.minDate.getFullYear()&&(ae.currentMonth=Math.max(ae.config.minDate.getMonth(),ae.currentMonth)),n&&(ae.redraw(),z("YearChange"))}}function S(e,t){var n=re(e,ae.config.minDate,void 0!==t?t:!ae.minDateHasTime)<0,r=re(e,ae.config.maxDate,void 0!==t?t:!ae.maxDateHasTime)>0;if(n||r)return!1;if(!ae.config.enable.length&&!ae.config.disable.length)return!0;for(var i,a=ae.parseDate(e,!0),o=ae.config.enable.length>0,s=o?ae.config.enable:ae.config.disable,l=0;l<s.length;l++){if((i=s[l])instanceof Function&&i(a))return o;if(i instanceof Date&&i.getTime()===a.getTime())return o;if("string"==typeof i&&ae.parseDate(i,!0).getTime()===a.getTime())return o;if("object"===(void 0===i?"undefined":_typeof(i))&&i.from&&i.to&&a>=i.from&&a<=i.to)return o}return!o}function A(e){if(e.target===(ae.altInput||ae.input)&&13===e.which)I(e);else if(ae.isOpen&&_(e.target))switch(e.which){case 13:ae.timeContainer&&ae.timeContainer.contains(e.target)?Q():I(e);break;case 27:ae.close();break;case 37:e.target!==ae.input&e.target!==ae.altInput&&(b(-1),ae.currentMonthElement.focus());break;case 38:ae.timeContainer&&ae.timeContainer.contains(e.target)?n(e):(e.preventDefault(),ae.currentYear++,ae.redraw());break;case 39:e.target!==ae.input&e.target!==ae.altInput&&(b(1),ae.currentMonthElement.focus());break;case 40:ae.timeContainer&&ae.timeContainer.contains(e.target)?n(e):(e.preventDefault(),ae.currentYear--,ae.redraw())}}function T(e){if(1===ae.selectedDates.length&&e.target.classList.contains("flatpickr-day")){for(var t=e.target.dateObj,n=ae.parseDate(ae.selectedDates[0],!0),r=Math.min(t.getTime(),ae.selectedDates[0].getTime()),i=Math.max(t.getTime(),ae.selectedDates[0].getTime()),a=!1,o=r;o<i;o+=ae.utils.duration.DAY)if(!S(new Date(o))){a=!0;break}for(var s=ae.days.childNodes[0].dateObj.getTime(),l=0;l<42;l++,s+=ae.utils.duration.DAY){(function(o,s){var l=o<ae.minRangeDate.getTime()||o>ae.maxRangeDate.getTime();if(l)return ae.days.childNodes[s].classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){ae.days.childNodes[s].classList.remove(e)}),"continue";if(a&&!l)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){ae.days.childNodes[s].classList.remove(e)});var u=Math.max(ae.minRangeDate.getTime(),r),c=Math.min(ae.maxRangeDate.getTime(),i);e.target.classList.add(t<ae.selectedDates[0]?"startRange":"endRange"),n>t&&o===n.getTime()?ae.days.childNodes[s].classList.add("endRange"):n<t&&o===n.getTime()?ae.days.childNodes[s].classList.add("startRange"):o>u&&o<c&&ae.days.childNodes[s].classList.add("inRange")})(s,l)}}}function M(){!ae.isOpen||ae.config.static||ae.config.inline||F()}function O(e){if(ae.isMobile)return e&&(e.preventDefault(),e.target.blur()),setTimeout(function(){ae.mobileInput.click()},0),void z("Open");ae.isOpen||(ae.altInput||ae.input).disabled||ae.config.inline||(ae.calendarContainer.classList.add("open"),ae.config.static||ae.config.inline||F(),ae.isOpen=!0,ae.config.allowInput||((ae.altInput||ae.input).blur(),(ae.config.noCalendar?ae.timeContainer:ae.selectedDateElem?ae.selectedDateElem:ae.days).focus()),(ae.altInput||ae.input).classList.add("active"),z("Open"))}function j(e){return function(t){var n=ae.config["_"+e+"Date"]=ae.parseDate(t),r=ae.config["_"+("min"===e?"max":"min")+"Date"],i=t&&n instanceof Date;ae.selectedDates&&(ae.selectedDates=ae.selectedDates.filter(S),Q()),ae.days&&$(),i&&(ae[e+"DateHasTime"]=n.getHours()||n.getMinutes()||n.getSeconds()),ae.currentYearElement&&(i?ae.currentYearElement[e]=n.getFullYear():ae.currentYearElement.removeAttribute(e),ae.currentYearElement.disabled=r&&n&&r.getFullYear()===n.getFullYear())}}function P(){var e=["utc","wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onMonthChange","onOpen","onReady","onValueUpdate","onYearChange"];ae.config=Object.create(Flatpickr.defaultConfig),Object.defineProperty(ae.config,"minDate",{get:function(){return this._minDate},set:j("min")}),Object.defineProperty(ae.config,"maxDate",{get:function(){return this._maxDate},set:j("max")});var n=_extends({},ae.instanceConfig,JSON.parse(JSON.stringify(ae.element.dataset||{})));ae.config.parseDate=n.parseDate,ae.config.formatDate=n.formatDate,_extends(ae.config,n);for(var r=0;r<e.length;r++)ae.config[e[r]]=!0===ae.config[e[r]]||"true"===ae.config[e[r]];for(var i=0;i<t.length;i++)ae.config[t[i]]=ee(ae.config[t[i]]||[]);!n.dateFormat&&n.enableTime&&(ae.config.dateFormat=ae.config.noCalendar?"H:i"+(ae.config.enableSeconds?":S":""):Flatpickr.defaultConfig.dateFormat+" H:i"+(ae.config.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(ae.config.altFormat=ae.config.noCalendar?"h:i"+(ae.config.enableSeconds?":S K":" K"):Flatpickr.defaultConfig.altFormat+" h:i"+(ae.config.enableSeconds?":S":"")+" K");for(var a=0;a<ae.config.plugins.length;a++){var o=ae.config.plugins[a](ae)||{};for(var s in o)Array.isArray(ae.config[s])?ae.config[s]=ee(o[s]).concat(ae.config[s]):void 0!==n[s]&&(ae.config[s]=o[s])}}function N(){"object"!==_typeof(ae.config.locale)&&void 0===Flatpickr.l10ns[ae.config.locale]&&console.warn("flatpickr: invalid locale "+ae.config.locale),ae.l10n=_extends(Object.create(Flatpickr.l10ns.default),"object"===_typeof(ae.config.locale)?ae.config.locale:"default"!==ae.config.locale?Flatpickr.l10ns[ae.config.locale]||{}:{})}function F(e){if(!e||e.target===ae.timeContainer){var t=ae.calendarContainer.offsetHeight,n=ae.calendarContainer.offsetWidth,r=ae.altInput||ae.input,i=r.getBoundingClientRect(),a=window.innerHeight-i.bottom+r.offsetHeight,o=a<t+60,s=window.pageYOffset+i.top+(o?-t-2:r.offsetHeight+2);if(te(ae.calendarContainer,"arrowTop",!o),te(ae.calendarContainer,"arrowBottom",o),!ae.config.inline){var l=window.pageXOffset+i.left,u=window.document.body.offsetWidth-i.right,c=l+n>window.document.body.offsetWidth;te(ae.calendarContainer,"rightMost",c),ae.config.static||(ae.calendarContainer.style.top=s+"px",c?(ae.calendarContainer.style.left="auto",ae.calendarContainer.style.right=u+"px"):(ae.calendarContainer.style.left=l+"px",ae.calendarContainer.style.right="auto"))}}}function $(){ae.config.noCalendar||ae.isMobile||(g(),J(),h())}function I(e){if(e.preventDefault(),e.stopPropagation(),ae.config.allowInput&&13===e.which&&e.target===(ae.altInput||ae.input))return ae.setDate((ae.altInput||ae.input).value),e.target.blur();if(e.target.classList.contains("flatpickr-day")&&!e.target.classList.contains("disabled")&&!e.target.classList.contains("notAllowed")){var t=ae.latestSelectedDateObj=new Date(e.target.dateObj.getTime());if(ae.selectedDateElem=e.target,"single"===ae.config.mode)ae.selectedDates=[t];else if("multiple"===ae.config.mode){var n=G(t);n?ae.selectedDates.splice(n,1):ae.selectedDates.push(t)}else"range"===ae.config.mode&&(2===ae.selectedDates.length&&ae.clear(),ae.selectedDates.push(t),0!==re(t,ae.selectedDates[0],!0)&&ae.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(r(),t.getMonth()!==ae.currentMonth&&"range"!==ae.config.mode){var a=ae.currentYear!==t.getFullYear();ae.currentYear=t.getFullYear(),ae.currentMonth=t.getMonth(),a&&z("YearChange"),z("MonthChange")}h(),ae.minDateHasTime&&ae.config.enableTime&&0===re(t,ae.config.minDate)&&i(ae.config.minDate),Q(),setTimeout(function(){return ae.dateIsPicked=!0},50),"range"===ae.config.mode&&(1===ae.selectedDates.length?(T(e),ae._hidePrevMonthArrow=ae._hidePrevMonthArrow||ae.minRangeDate>ae.days.childNodes[0].dateObj,ae._hideNextMonthArrow=ae._hideNextMonthArrow||ae.maxRangeDate<ae.days.childNodes[41].dateObj):J()),13===e.which&&ae.config.enableTime&&setTimeout(function(){return ae.hourElement.focus()},451),"single"!==ae.config.mode||ae.config.enableTime||ae.close(),z("Change")}}function L(e,t){ae.config[e]=t,ae.redraw(),u()}function R(e){if(Array.isArray(e))ae.selectedDates=e.map(ae.parseDate);else if(e instanceof Date||!isNaN(e))ae.selectedDates=[ae.parseDate(e)];else if(e&&e.substring)switch(ae.config.mode){case"single":ae.selectedDates=[ae.parseDate(e)];break;case"multiple":ae.selectedDates=e.split("; ").map(ae.parseDate);break;case"range":ae.selectedDates=e.split(ae.l10n.rangeSeparator).map(ae.parseDate)}ae.selectedDates=ae.selectedDates.filter(function(e){return e instanceof Date&&e.getTime()&&S(e,!1)}),ae.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function H(e,t){if(!e)return ae.clear();R(e),ae.selectedDates.length>0?(ae.dateIsPicked=!0,ae.latestSelectedDateObj=ae.selectedDates[0]):ae.latestSelectedDateObj=null,ae.redraw(),u(),i(),Q(),!1!==t&&z("Change")}function B(){function e(e){for(var t=e.length;t--;)"string"==typeof e[t]||+e[t]?e[t]=ae.parseDate(e[t],!0):e[t]&&e[t].from&&e[t].to&&(e[t].from=ae.parseDate(e[t].from),e[t].to=ae.parseDate(e[t].to));return e.filter(function(e){return e})}ae.selectedDates=[],ae.now=new Date,ae.config.disable.length&&(ae.config.disable=e(ae.config.disable)),ae.config.enable.length&&(ae.config.enable=e(ae.config.enable)),R(ae.config.defaultDate||ae.input.value);var t=ae.selectedDates.length?ae.selectedDates[0]:ae.config.minDate&&ae.config.minDate.getTime()>ae.now?ae.config.minDate:ae.config.maxDate&&ae.config.maxDate.getTime()<ae.now?ae.config.maxDate:ae.now;ae.currentYear=t.getFullYear(),ae.currentMonth=t.getMonth(),ae.selectedDates.length&&(ae.latestSelectedDateObj=ae.selectedDates[0]),ae.minDateHasTime=ae.config.minDate&&(ae.config.minDate.getHours()||ae.config.minDate.getMinutes()||ae.config.minDate.getSeconds()),ae.maxDateHasTime=ae.config.maxDate&&(ae.config.maxDate.getHours()||ae.config.maxDate.getMinutes()||ae.config.maxDate.getSeconds()),Object.defineProperty(ae,"latestSelectedDateObj",{get:function(){return ae._selectedDateObj||ae.selectedDates[ae.selectedDates.length-1]||null},set:function(e){ae._selectedDateObj=e}})}function q(){ae.utils={duration:{DAY:864e5},getDaysinMonth:function(e,t){return e=void 0===e?ae.currentMonth:e,t=void 0===t?ae.currentYear:t,1===e&&(t%4==0&&t%100!=0||t%400==0)?29:ae.l10n.daysInMonth[e]},monthToStr:function(e,t){return t=void 0===t?ae.config.shorthandCurrentMonth:t,ae.l10n.months[(t?"short":"long")+"hand"][e]}}}function U(){ae.formats={Z:function(e){return e.toISOString()},D:function(e){return ae.l10n.weekdays.shorthand[ae.formats.w(e)]},F:function(e){return ae.utils.monthToStr(ae.formats.n(e)-1,!1)},H:function(e){return Flatpickr.prototype.pad(e.getHours())},J:function(e){return e.getDate()+ae.l10n.ordinal(e.getDate())},K:function(e){return e.getHours()>11?"PM":"AM"},M:function(e){return ae.utils.monthToStr(e.getMonth(),!0)},S:function(e){return Flatpickr.prototype.pad(e.getSeconds())},U:function(e){return e.getTime()/1e3},Y:function(e){return e.getFullYear()},d:function(e){return Flatpickr.prototype.pad(ae.formats.j(e))},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return Flatpickr.prototype.pad(e.getMinutes())},j:function(e){return e.getDate()},l:function(e){return ae.l10n.weekdays.longhand[ae.formats.w(e)]},m:function(e){return Flatpickr.prototype.pad(ae.formats.n(e))},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(ae.formats.Y(e)).substring(2)}}}function Y(){if(ae.input=ae.config.wrap?ae.element.querySelector("[data-input]"):ae.element,!ae.input)return console.warn("Error: invalid input element specified",ae.input);ae.input._type=ae.input.type,ae.input.type="text",ae.input.classList.add("flatpickr-input"),ae.config.altInput&&(ae.altInput=X(ae.input.nodeName,ae.input.className+" "+ae.config.altInputClass),ae.altInput.placeholder=ae.input.placeholder,ae.altInput.type="text",ae.input.type="hidden",ae.input.parentNode&&ae.input.parentNode.insertBefore(ae.altInput,ae.input.nextSibling)),ae.config.allowInput||(ae.altInput||ae.input).setAttribute("readonly","readonly")}function W(){var e=ae.config.enableTime?ae.config.noCalendar?"time":"datetime-local":"date";ae.mobileInput=X("input",ae.input.className+" flatpickr-mobile"),ae.mobileInput.step="any",ae.mobileInput.tabIndex=1,ae.mobileInput.type=e,ae.mobileInput.disabled=ae.input.disabled,ae.mobileInput.placeholder=ae.input.placeholder,ae.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",ae.selectedDates.length&&(ae.mobileInput.defaultValue=ae.mobileInput.value=D(ae.mobileFormatStr,ae.selectedDates[0])),ae.config.minDate&&(ae.mobileInput.min=D("Y-m-d",ae.config.minDate)),ae.config.maxDate&&(ae.mobileInput.max=D("Y-m-d",ae.config.maxDate)),ae.input.type="hidden",ae.config.altInput&&(ae.altInput.type="hidden");try{ae.input.parentNode.insertBefore(ae.mobileInput,ae.input.nextSibling)}catch(e){}ae.mobileInput.addEventListener("change",function(e){ae.latestSelectedDateObj=ae.parseDate(e.target.value),ae.setDate(ae.latestSelectedDateObj),z("Change"),z("Close")})}function V(){ae.isOpen?ae.close():ae.open()}function z(e,t){var n=ae.config["on"+e];if(n)for(var r=0;r<n.length;r++)n[r](ae.selectedDates,ae.input.value,ae,t);if("Change"===e)if("function"==typeof Event&&Event.constructor)ae.input.dispatchEvent(new Event("change",{bubbles:!0})),ae.input.dispatchEvent(new Event("input",{bubbles:!0}));else{if(void 0!==window.document.createEvent)return ae.input.dispatchEvent(ae.changeEvent);ae.input.fireEvent("onchange")}}function G(e){for(var t=0;t<ae.selectedDates.length;t++)if(0===re(ae.selectedDates[t],e))return""+t;return!1}function K(e){return!("range"!==ae.config.mode||ae.selectedDates.length<2)&&(re(e,ae.selectedDates[0])>=0&&re(e,ae.selectedDates[1])<=0)}function J(){ae.config.noCalendar||ae.isMobile||!ae.monthNav||(ae.currentMonthElement.textContent=ae.utils.monthToStr(ae.currentMonth)+" ",ae.currentYearElement.value=ae.currentYear,ae._hidePrevMonthArrow=ae.config.minDate&&(ae.currentYear===ae.config.minDate.getFullYear()?ae.currentMonth<=ae.config.minDate.getMonth():ae.currentYear<ae.config.minDate.getFullYear()),ae._hideNextMonthArrow=ae.config.maxDate&&(ae.currentYear===ae.config.maxDate.getFullYear()?ae.currentMonth+1>ae.config.maxDate.getMonth():ae.currentYear>ae.config.maxDate.getFullYear()))}function Q(){if(!ae.selectedDates.length)return ae.clear();ae.isMobile&&(ae.mobileInput.value=ae.selectedDates.length?D(ae.mobileFormatStr,ae.latestSelectedDateObj):"");var e="range"!==ae.config.mode?"; ":ae.l10n.rangeSeparator;ae.input.value=ae.selectedDates.map(function(e){return D(ae.config.dateFormat,e)}).join(e),ae.config.altInput&&(ae.altInput.value=ae.selectedDates.map(function(e){return D(ae.config.altFormat,e)}).join(e)),z("ValueUpdate")}function Z(e){e.preventDefault();var t=Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY));E(parseInt(e.target.value,10)+t),e.target.value=ae.currentYear}function X(e,t,n){var r=window.document.createElement(e);return t=t||"",n=n||"",r.className=t,n&&(r.textContent=n),r}function ee(e){return Array.isArray(e)?e:[e]}function te(e,t,n){if(n)return e.classList.add(t);e.classList.remove(t)}function ne(e,t,n){var r=void 0;return function(){for(var i=arguments.length,a=Array(i),o=0;o<i;o++)a[o]=arguments[o];var s=this,l=function(){r=null,n||e.apply(s,a)};clearTimeout(r),r=setTimeout(l,t),n&&!r&&e.apply(s,a)}}function re(e,t,n){return e instanceof Date&&t instanceof Date&&(!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime())}function ie(e){e.preventDefault();var t="keydown"===e.type,n="wheel"===e.type;if("input"!==e.type&&!t&&(e.target.value||e.target.textContent).length>=2&&(e.target.focus(),e.target.blur()),ae.amPM&&e.target===ae.amPM)return e.target.textContent=["AM","PM"]["AM"===e.target.textContent|0];var r=Number(e.target.min),i=Number(e.target.max),a=Number(e.target.step),o=parseInt(e.target.value,10),s=t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0,l=o+(n||t)*a*s;if(2===e.target.value.length){var u=e.target===ae.hourElement;l<r?l=i+l+!u+(u&&!ae.amPM):l>i&&(l=e.target===ae.hourElement?l-i-!ae.amPM:r),ae.amPM&&u&&(1===a?l+o===23:Math.abs(l-o)>a)&&(ae.amPM.textContent="PM"===ae.amPM.textContent?"AM":"PM"),e.target.value=ae.pad(l)}}var ae=this;return ae.changeMonth=b,ae.changeYear=E,ae.clear=x,ae.close=k,ae._createElement=X,ae.destroy=w,ae.formatDate=D,ae.isEnabled=S,ae.jumpToDate=u,ae.open=O,ae.redraw=$,ae.set=L,ae.setDate=H,ae.toggle=V,function(){e._flatpickr&&w(e._flatpickr),e._flatpickr=ae,ae.element=e,ae.instanceConfig=t||{},ae.parseDate=Flatpickr.prototype.parseDate.bind(ae),U(),P(),N(),Y(),B(),q(),ae.isOpen=ae.config.inline,ae.isMobile=!ae.config.disableMobile&&!ae.config.inline&&"single"===ae.config.mode&&!ae.config.disable.length&&!ae.config.enable.length&&!ae.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),ae.isMobile||d(),l(),ae.isMobile||Object.defineProperty(ae,"dateIsPicked",{set:function(e){te(ae.calendarContainer,"dateIsPicked",e)}}),ae.dateIsPicked=ae.selectedDates.length>0||ae.config.noCalendar,ae.selectedDates.length&&(ae.config.enableTime&&i(),Q()),ae.config.weekNumbers&&(ae.calendarContainer.style.width=ae.days.clientWidth+ae.weekWrapper.clientWidth+"px"),z("Ready")}(),ae}function _flatpickr(e,t){for(var n=Array.prototype.slice.call(e),r=[],i=0;i<n.length;i++)try{n[i]._flatpickr=new Flatpickr(n[i],t||{}),
r.push(n[i]._flatpickr)}catch(e){console.warn(e,e.stack)}return 1===r.length?r[0]:r}function flatpickr(e,t){return _flatpickr(window.document.querySelectorAll(e),t)}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||te;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function r(e){var t=!!e&&"length"in e&&e.length,n=pe.type(e);return"function"!==n&&!pe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t,n){return pe.isFunction(t)?pe.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?pe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?pe.grep(e,function(e){return oe.call(t,e)>-1!==n}):_e.test(t)?pe.filter(t,e,n):(t=pe.filter(t,e),pe.grep(e,function(e){return oe.call(t,e)>-1!==n&&1===e.nodeType}))}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return pe.each(e.match(Ae)||[],function(e,n){t[n]=!0}),t}function s(e){return e}function l(e){throw e}function u(e,t,n){var r;try{e&&pe.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&pe.isFunction(r=e.then)?r.call(e,t,n):t.call(void 0,e)}catch(e){n.call(void 0,e)}}function c(){te.removeEventListener("DOMContentLoaded",c),e.removeEventListener("load",c),pe.ready()}function f(){this.expando=pe.expando+f.uid++}function d(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Fe.test(e)?JSON.parse(e):e)}function p(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace($e,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=d(n)}catch(e){}Ne.set(e,t,n)}else n=void 0;return n}function h(e,t,n,r){var i,a=1,o=20,s=r?function(){return r.cur()}:function(){return pe.css(e,t,"")},l=s(),u=n&&n[3]||(pe.cssNumber[t]?"":"px"),c=(pe.cssNumber[t]||"px"!==u&&+l)&&Le.exec(pe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{a=a||".5",c/=a,pe.style(e,t,c+u)}while(a!==(a=s()/l)&&1!==a&&--o)}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}function m(e){var t,n=e.ownerDocument,r=e.nodeName,i=qe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=pe.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),qe[r]=i,i)}function v(e,t){for(var n,r,i=[],a=0,o=e.length;a<o;a++)r=e[a],r.style&&(n=r.style.display,t?("none"===n&&(i[a]=Pe.get(r,"display")||null,i[a]||(r.style.display="")),""===r.style.display&&He(r)&&(i[a]=m(r))):"none"!==n&&(i[a]="none",Pe.set(r,"display",n)));for(a=0;a<o;a++)null!=i[a]&&(e[a].style.display=i[a]);return e}function g(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&pe.nodeName(e,t)?pe.merge([e],n):n}function y(e,t){for(var n=0,r=e.length;n<r;n++)Pe.set(e[n],"globalEval",!t||Pe.get(t[n],"globalEval"))}function b(e,t,n,r,i){for(var a,o,s,l,u,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((a=e[p])||0===a)if("object"===pe.type(a))pe.merge(d,a.nodeType?[a]:a);else if(ze.test(a)){for(o=o||f.appendChild(t.createElement("div")),s=(Ye.exec(a)||["",""])[1].toLowerCase(),l=Ve[s]||Ve._default,o.innerHTML=l[1]+pe.htmlPrefilter(a)+l[2],c=l[0];c--;)o=o.lastChild;pe.merge(d,o.childNodes),o=f.firstChild,o.textContent=""}else d.push(t.createTextNode(a));for(f.textContent="",p=0;a=d[p++];)if(r&&pe.inArray(a,r)>-1)i&&i.push(a);else if(u=pe.contains(a.ownerDocument,a),o=g(f.appendChild(a),"script"),u&&y(o),n)for(c=0;a=o[c++];)We.test(a.type||"")&&n.push(a);return f}function x(){return!0}function k(){return!1}function w(){try{return te.activeElement}catch(e){}}function _(e,t,n,r,i,a){var o,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)_(e,s,n,r,t[s],a);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=k;else if(!i)return e;return 1===a&&(o=i,i=function(e){return pe().off(e),o.apply(this,arguments)},i.guid=o.guid||(o.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,i,r,n)})}function C(e,t){return pe.nodeName(e,"table")&&pe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e:e}function D(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function E(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function S(e,t){var n,r,i,a,o,s,l,u;if(1===t.nodeType){if(Pe.hasData(e)&&(a=Pe.access(e),o=Pe.set(t,a),u=a.events)){delete o.handle,o.events={};for(i in u)for(n=0,r=u[i].length;n<r;n++)pe.event.add(t,i,u[i][n])}Ne.hasData(e)&&(s=Ne.access(e),l=pe.extend({},s),Ne.set(t,l))}}function A(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ue.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function T(e,t,r,i){t=ie.apply([],t);var a,o,s,l,u,c,f=0,d=e.length,p=d-1,h=t[0],m=pe.isFunction(h);if(m||d>1&&"string"==typeof h&&!de.checkClone&&et.test(h))return e.each(function(n){var a=e.eq(n);m&&(t[0]=h.call(this,n,a.html())),T(a,t,r,i)});if(d&&(a=b(t,e[0].ownerDocument,!1,e,i),o=a.firstChild,1===a.childNodes.length&&(a=o),o||i)){for(s=pe.map(g(a,"script"),D),l=s.length;f<d;f++)u=a,f!==p&&(u=pe.clone(u,!0,!0),l&&pe.merge(s,g(u,"script"))),r.call(e[f],u,f);if(l)for(c=s[s.length-1].ownerDocument,pe.map(s,E),f=0;f<l;f++)u=s[f],We.test(u.type||"")&&!Pe.access(u,"globalEval")&&pe.contains(c,u)&&(u.src?pe._evalUrl&&pe._evalUrl(u.src):n(u.textContent.replace(nt,""),c))}return e}function M(e,t,n){for(var r,i=t?pe.filter(t,e):e,a=0;null!=(r=i[a]);a++)n||1!==r.nodeType||pe.cleanData(g(r)),r.parentNode&&(n&&pe.contains(r.ownerDocument,r)&&y(g(r,"script")),r.parentNode.removeChild(r));return e}function O(e,t,n){var r,i,a,o,s=e.style;return n=n||at(e),n&&(o=n.getPropertyValue(t)||n[t],""!==o||pe.contains(e.ownerDocument,e)||(o=pe.style(e,t)),!de.pixelMarginRight()&&it.test(o)&&rt.test(t)&&(r=s.width,i=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=i,s.maxWidth=a)),void 0!==o?o+"":o}function j(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function P(e){if(e in ct)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=ut.length;n--;)if((e=ut[n]+t)in ct)return e}function N(e,t,n){var r=Le.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function F(e,t,n,r,i){var a,o=0;for(a=n===(r?"border":"content")?4:"width"===t?1:0;a<4;a+=2)"margin"===n&&(o+=pe.css(e,n+Re[a],!0,i)),r?("content"===n&&(o-=pe.css(e,"padding"+Re[a],!0,i)),"margin"!==n&&(o-=pe.css(e,"border"+Re[a]+"Width",!0,i))):(o+=pe.css(e,"padding"+Re[a],!0,i),"padding"!==n&&(o+=pe.css(e,"border"+Re[a]+"Width",!0,i)));return o}function $(e,t,n){var r,i=!0,a=at(e),o="border-box"===pe.css(e,"boxSizing",!1,a);if(e.getClientRects().length&&(r=e.getBoundingClientRect()[t]),r<=0||null==r){if(r=O(e,t,a),(r<0||null==r)&&(r=e.style[t]),it.test(r))return r;i=o&&(de.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+F(e,t,n||(o?"border":"content"),i,a)+"px"}function I(e,t,n,r,i){return new I.prototype.init(e,t,n,r,i)}function L(){dt&&(e.requestAnimationFrame(L),pe.fx.tick())}function R(){return e.setTimeout(function(){ft=void 0}),ft=pe.now()}function H(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=Re[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function B(e,t,n){for(var r,i=(Y.tweeners[t]||[]).concat(Y.tweeners["*"]),a=0,o=i.length;a<o;a++)if(r=i[a].call(n,t,e))return r}function q(e,t,n){var r,i,a,o,s,l,u,c,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&He(e),g=Pe.get(e,"fxshow");n.queue||(o=pe._queueHooks(e,"fx"),null==o.unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,d.always(function(){d.always(function(){o.unqueued--,pe.queue(e,"fx").length||o.empty.fire()})}));for(r in t)if(i=t[r],pt.test(i)){if(delete t[r],a=a||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}p[r]=g&&g[r]||pe.style(e,r)}if((l=!pe.isEmptyObject(t))||!pe.isEmptyObject(p)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=g&&g.display,null==u&&(u=Pe.get(e,"display")),c=pe.css(e,"display"),"none"===c&&(u?c=u:(v([e],!0),u=e.style.display||u,c=pe.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===pe.css(e,"float")&&(l||(d.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(r in p)l||(g?"hidden"in g&&(m=g.hidden):g=Pe.access(e,"fxshow",{display:u}),a&&(g.hidden=!m),m&&v([e],!0),d.done(function(){m||v([e]),Pe.remove(e,"fxshow");for(r in p)pe.style(e,r,p[r])})),l=B(m?g[r]:0,r,d),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}}function U(e,t){var n,r,i,a,o;for(n in e)if(r=pe.camelCase(n),i=t[r],a=e[n],pe.isArray(a)&&(i=a[1],a=e[n]=a[0]),n!==r&&(e[r]=a,delete e[n]),(o=pe.cssHooks[r])&&"expand"in o){a=o.expand(a),delete e[r];for(n in a)n in e||(e[n]=a[n],t[n]=i)}else t[r]=i}function Y(e,t,n){var r,i,a=0,o=Y.prefilters.length,s=pe.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=ft||R(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,a=1-r,o=0,l=u.tweens.length;o<l;o++)u.tweens[o].run(a);return s.notifyWith(e,[u,a,n]),a<1&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ft||R(),duration:n.duration,tweens:[],createTween:function(t,n){var r=pe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(U(c,u.opts.specialEasing);a<o;a++)if(r=Y.prefilters[a].call(u,e,c,u.opts))return pe.isFunction(r.stop)&&(pe._queueHooks(u.elem,u.opts.queue).stop=pe.proxy(r.stop,r)),r;return pe.map(c,B,u),pe.isFunction(u.opts.start)&&u.opts.start.call(e,u),pe.fx.timer(pe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function W(e){return(e.match(Ae)||[]).join(" ")}function V(e){return e.getAttribute&&e.getAttribute("class")||""}function z(e,t,n,r){var i;if(pe.isArray(t))pe.each(t,function(t,i){n||Ct.test(e)?r(e,i):z(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==pe.type(t))r(e,t);else for(i in t)z(e+"["+i+"]",t[i],n,r)}function G(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,a=t.toLowerCase().match(Ae)||[];if(pe.isFunction(n))for(;r=a[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function K(e,t,n,r){function i(s){var l;return a[s]=!0,pe.each(e[s]||[],function(e,s){var u=s(t,n,r);return"string"!=typeof u||o||a[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var a={},o=e===$t;return i(t.dataTypes[0])||!a["*"]&&i("*")}function J(e,t){var n,r,i=pe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&pe.extend(!0,e,r),e}function Q(e,t,n){for(var r,i,a,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)a=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){a=i;break}o||(o=i)}a=a||o}if(a)return a!==l[0]&&l.unshift(a),n[a]}function Z(e,t,n,r){var i,a,o,s,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(a=c.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=c.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(o=u[l+" "+a]||u["* "+a]))for(i in u)if(s=i.split(" "),s[1]===a&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[i]:!0!==u[i]&&(a=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}function X(e){return pe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var ee=[],te=e.document,ne=Object.getPrototypeOf,re=ee.slice,ie=ee.concat,ae=ee.push,oe=ee.indexOf,se={},le=se.toString,ue=se.hasOwnProperty,ce=ue.toString,fe=ce.call(Object),de={},pe=function(e,t){return new pe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ge=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:"3.1.1",constructor:pe,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:ee.sort,splice:ee.splice},pe.extend=pe.fn.extend=function(){var e,t,n,r,i,a,o=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[s]||{},s++),"object"==typeof o||pe.isFunction(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=o[t],r=e[t],o!==r&&(u&&r&&(pe.isPlainObject(r)||(i=pe.isArray(r)))?(i?(i=!1,a=n&&pe.isArray(n)?n:[]):a=n&&pe.isPlainObject(n)?n:{},o[t]=pe.extend(u,a,r)):void 0!==r&&(o[t]=r));return o},pe.extend({expando:"jQuery"+("3.1.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===pe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=pe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e))&&(!(t=ne(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&ce.call(n)===fe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?se[le.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ge)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,i=0;if(r(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(r(Object(e))?pe.merge(n,"string"==typeof e?[e]:e):ae.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:oe.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,a=e.length,o=!n;i<a;i++)!t(e[i],i)!==o&&r.push(e[i]);return r},map:function(e,t,n){var i,a,o=0,s=[];if(r(e))for(i=e.length;o<i;o++)null!=(a=t(e[o],o,n))&&s.push(a);else for(o in e)null!=(a=t(e[o],o,n))&&s.push(a);return ie.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),pe.isFunction(e))return r=re.call(arguments,2),i=function(){return e.apply(t||this,r.concat(re.call(arguments)))},i.guid=e.guid=e.guid||pe.guid++,i},now:Date.now,support:de}),"function"==typeof Symbol&&(pe.fn[Symbol.iterator]=ee[Symbol.iterator]),pe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){se["[object "+t+"]"]=t.toLowerCase()});var ye=function(e){function t(e,t,n,r){var i,a,o,s,l,c,d,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:R)!==O&&M(t),t=t||O,P)){if(11!==h&&(l=me.exec(e)))if(i=l[1]){if(9===h){if(!(o=t.getElementById(i)))return n;if(o.id===i)return n.push(o),n}else if(p&&(o=p.getElementById(i))&&I(t,o)&&o.id===i)return n.push(o),n}else{if(l[2])return J.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return J.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!Y[e+" "]&&(!N||!N.test(e))){if(1!==h)p=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,xe):t.setAttribute("id",s=L),c=C(e),a=c.length;a--;)c[a]="#"+s+" "+f(c[a]);d=c.join(","),p=ve.test(e)&&u(t.parentNode)||t}if(d)try{return J.apply(n,p.querySelectorAll(d)),n}catch(e){}finally{s===L&&t.removeAttribute("id")}}}return E(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>k.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[L]=!0,e}function i(e){var t=O.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function a(e,t){for(var n=e.split("|"),r=n.length;r--;)k.attrHandle[n[r]]=t}function o(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&we(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,a=e([],n.length,t),o=a.length;o--;)n[i=a[o]]&&(n[i]=!(r[i]=n[i]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function f(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=t.next,a=i||r,o=n&&"parentNode"===a,s=B++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,i);return!1}:function(t,n,l){var u,c,f,d=[H,s];if(l){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(f=t[L]||(t[L]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[a])&&u[0]===H&&u[1]===s)return d[2]=u[2];if(c[a]=d,d[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function h(e,n,r){for(var i=0,a=n.length;i<a;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var a,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(a=e[s])&&(n&&!n(a,r,i)||(o.push(a),u&&t.push(s)));return o}function v(e,t,n,i,a,o){return i&&!i[L]&&(i=v(i)),a&&!a[L]&&(a=v(a,o)),r(function(r,o,s,l){var u,c,f,d=[],p=[],v=o.length,g=r||h(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?g:m(g,d,e,s,l),b=n?a||(r?e:v||i)?[]:o:y;if(n&&n(y,b,s,l),i)for(u=m(b,p),i(u,[],s,l),c=u.length;c--;)(f=u[c])&&(b[p[c]]=!(y[p[c]]=f));if(r){if(a||e){if(a){for(u=[],c=b.length;c--;)(f=b[c])&&u.push(y[c]=f);a(null,b=[],u,l)}for(c=b.length;c--;)(f=b[c])&&(u=a?Z(r,f):d[c])>-1&&(r[u]=!(o[u]=f))}}else b=m(b===o?b.splice(v,b.length):b),a?a(null,o,b,l):J.apply(o,b)})}function g(e){for(var t,n,r,i=e.length,a=k.relative[e[0].type],o=a||k.relative[" "],s=a?1:0,l=d(function(e){return e===t},o,!0),u=d(function(e){return Z(t,e)>-1},o,!0),c=[function(e,n,r){var i=!a&&(r||n!==S)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];s<i;s++)if(n=k.relative[e[s].type])c=[d(p(c),n)];else{if(n=k.filter[e[s].type].apply(null,e[s].matches),n[L]){for(r=++s;r<i&&!k.relative[e[r].type];r++);return v(s>1&&p(c),s>1&&f(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(ae,"$1"),n,s<r&&g(e.slice(s,r)),r<i&&g(e=e.slice(r)),r<i&&f(e))}c.push(n)}return p(c)}function y(e,n){var i=n.length>0,a=e.length>0,o=function(r,o,s,l,u){var c,f,d,p=0,h="0",v=r&&[],g=[],y=S,b=r||a&&k.find.TAG("*",u),x=H+=null==y?1:Math.random()||.1,w=b.length;for(u&&(S=o===O||o||u);h!==w&&null!=(c=b[h]);h++){if(a&&c){for(f=0,o||c.ownerDocument===O||(M(c),s=!P);d=e[f++];)if(d(c,o||O,s)){l.push(c);break}u&&(H=x)}i&&((c=!d&&c)&&p--,r&&v.push(c))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(v,g,o,s);if(r){if(p>0)for(;h--;)v[h]||g[h]||(g[h]=G.call(l));g=m(g)}J.apply(l,g),u&&!r&&g.length>0&&p+n.length>1&&t.uniqueSort(l)}return u&&(H=x,S=y),v};return i?r(o):o}var b,x,k,w,_,C,D,E,S,A,T,M,O,j,P,N,F,$,I,L="sizzle"+1*new Date,R=e.document,H=0,B=0,q=n(),U=n(),Y=n(),W=function(e,t){return e===t&&(T=!0),0},V={}.hasOwnProperty,z=[],G=z.pop,K=z.push,J=z.push,Q=z.slice,Z=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},X="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),ae=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),oe=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(re),ce=new RegExp("^"+te+"$"),fe={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+X+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},de=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ve=/[+~]/,ge=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ke=function(){M()},we=d(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{J.apply(z=Q.call(R.childNodes),R.childNodes),z[R.childNodes.length].nodeType}catch(e){J={apply:z.length?function(e,t){K.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},_=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},M=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:R;return r!==O&&9===r.nodeType&&r.documentElement?(O=r,j=O.documentElement,P=!_(O),R!==O&&(n=O.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",ke,!1):n.attachEvent&&n.attachEvent("onunload",ke)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(O.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(O.getElementsByClassName),x.getById=i(function(e){return j.appendChild(e).id=L,!O.getElementsByName||!O.getElementsByName(L).length}),x.getById?(k.filter.ID=function(e){var t=e.replace(ge,ye);return function(e){return e.getAttribute("id")===t}},k.find.ID=function(e,t){if(void 0!==t.getElementById&&P){var n=t.getElementById(e);return n?[n]:[]}}):(k.filter.ID=function(e){var t=e.replace(ge,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},k.find.ID=function(e,t){if(void 0!==t.getElementById&&P){var n,r,i,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(i=t.getElementsByName(e),r=0;a=i[r++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),k.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[i++];)1===n.nodeType&&r.push(n);return r}return a},k.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&P)return t.getElementsByClassName(e)},F=[],N=[],(x.qsa=he.test(O.querySelectorAll))&&(i(function(e){j.appendChild(e).innerHTML="<a id='"+L+"'></a><select id='"+L+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||N.push("\\["+ee+"*(?:value|"+X+")"),e.querySelectorAll("[id~="+L+"-]").length||N.push("~="),e.querySelectorAll(":checked").length||N.push(":checked"),e.querySelectorAll("a#"+L+"+*").length||N.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=O.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&N.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&N.push(":enabled",":disabled"),j.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&N.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),N.push(",.*:")})),(x.matchesSelector=he.test($=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&i(function(e){x.disconnectedMatch=$.call(e,"*"),$.call(e,"[s!='']:x"),F.push("!=",re)}),N=N.length&&new RegExp(N.join("|")),F=F.length&&new RegExp(F.join("|")),t=he.test(j.compareDocumentPosition),I=t||he.test(j.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},W=t?function(e,t){if(e===t)return T=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===O||e.ownerDocument===R&&I(R,e)?-1:t===O||t.ownerDocument===R&&I(R,t)?1:A?Z(A,e)-Z(A,t):0:4&n?-1:1)}:function(e,t){if(e===t)return T=!0,0;var n,r=0,i=e.parentNode,a=t.parentNode,s=[e],l=[t];if(!i||!a)return e===O?-1:t===O?1:i?-1:a?1:A?Z(A,e)-Z(A,t):0;if(i===a)return o(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?o(s[r],l[r]):s[r]===R?-1:l[r]===R?1:0},O):O},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==O&&M(e),n=n.replace(le,"='$1']"),x.matchesSelector&&P&&!Y[n+" "]&&(!F||!F.test(n))&&(!N||!N.test(n)))try{var r=$.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,O,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==O&&M(e),I(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==O&&M(e);var n=k.attrHandle[t.toLowerCase()],r=n&&V.call(k.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==r?r:x.attributes||!P?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(T=!x.detectDuplicates,A=!x.sortStable&&e.slice(0),e.sort(W),T){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return A=null,e},w=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=w(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=w(t);return n},k=t.selectors={cacheLength:50,createPseudo:r,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ge,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ge,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ge,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=q[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&q(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var a=t.attr(i,e);return null==a?"!="===n:!n||(a+="","="===n?a===r:"!="===n?a!==r:"^="===n?r&&0===a.indexOf(r):"*="===n?r&&a.indexOf(r)>-1:"$="===n?r&&a.slice(-r.length)===r:"~="===n?(" "+a.replace(ie," ")+" ").indexOf(r)>-1:"|="===n&&(a===r||a.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var a="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,d,p,h,m=a!==o?"nextSibling":"previousSibling",v=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(v){if(a){for(;m;){for(d=t;d=d[m];)if(s?d.nodeName.toLowerCase()===g:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[o?v.firstChild:v.lastChild],o&&y){for(d=v,f=d[L]||(d[L]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),u=c[e]||[],p=u[0]===H&&u[1],b=p&&u[2],d=p&&v.childNodes[p];d=++p&&d&&d[m]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[H,p,b];break}}else if(y&&(d=t,f=d[L]||(d[L]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),u=c[e]||[],p=u[0]===H&&u[1],b=p),!1===b)for(;(d=++p&&d&&d[m]||(b=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==g:1!==d.nodeType)||!++b||(y&&(f=d[L]||(d[L]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),c[e]=[H,b]),d!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var i,a=k.pseudos[e]||k.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return a[L]?a(n):a.length>1?(i=[e,e,"",n],k.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=a(e,n),o=i.length;o--;)r=Z(e,i[o]),e[r]=!(t[r]=i[o])}):function(e){return a(e,0,i)}):a}},pseudos:{not:r(function(e){var t=[],n=[],i=D(e.replace(ae,"$1"));return i[L]?r(function(e,t,n,r){for(var a,o=i(e,null,r,[]),s=e.length;s--;)(a=o[s])&&(e[s]=!(t[s]=a))}):function(e,r,a){return t[0]=e,i(t,null,a,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ge,ye),function(t){return(t.textContent||t.innerText||w(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ge,ye).toLowerCase(),function(t){var n;do{if(n=P?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===j},focus:function(e){
return e===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!k.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return de.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},k.pseudos.nth=k.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})k.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})k.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=k.filters=k.pseudos,k.setFilters=new c,C=t.tokenize=function(e,n){var r,i,a,o,s,l,u,c=U[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=k.preFilter;s;){r&&!(i=oe.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(a=[])),r=!1,(i=se.exec(s))&&(r=i.shift(),a.push({value:r,type:i[0].replace(ae," ")}),s=s.slice(r.length));for(o in k.filter)!(i=fe[o].exec(s))||u[o]&&!(i=u[o](i))||(r=i.shift(),a.push({value:r,type:o,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):U(e,l).slice(0)},D=t.compile=function(e,t){var n,r=[],i=[],a=Y[e+" "];if(!a){for(t||(t=C(e)),n=t.length;n--;)a=g(t[n]),a[L]?r.push(a):i.push(a);a=Y(e,y(i,r)),a.selector=e}return a},E=t.select=function(e,t,n,r){var i,a,o,s,l,c="function"==typeof e&&e,d=!r&&C(e=c.selector||e);if(n=n||[],1===d.length){if(a=d[0]=d[0].slice(0),a.length>2&&"ID"===(o=a[0]).type&&9===t.nodeType&&P&&k.relative[a[1].type]){if(!(t=(k.find.ID(o.matches[0].replace(ge,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(a.shift().value.length)}for(i=fe.needsContext.test(e)?0:a.length;i--&&(o=a[i],!k.relative[s=o.type]);)if((l=k.find[s])&&(r=l(o.matches[0].replace(ge,ye),ve.test(a[0].type)&&u(t.parentNode)||t))){if(a.splice(i,1),!(e=r.length&&f(a)))return J.apply(n,r),n;break}}return(c||D(e,d))(r,t,!P,n,!t||ve.test(e)&&u(t.parentNode)||t),n},x.sortStable=L.split("").sort(W).join("")===L,x.detectDuplicates=!!T,M(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(O.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||a("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||a("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||a(X,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);pe.find=ye,pe.expr=ye.selectors,pe.expr[":"]=pe.expr.pseudos,pe.uniqueSort=pe.unique=ye.uniqueSort,pe.text=ye.getText,pe.isXMLDoc=ye.isXML,pe.contains=ye.contains,pe.escapeSelector=ye.escape;var be=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&pe(e).is(n))break;r.push(e)}return r},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ke=pe.expr.match.needsContext,we=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,_e=/^.[^:#\[\.,]*$/;pe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?pe.find.matchesSelector(r,e)?[r]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;t<r;t++)if(pe.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)pe.find(e,i[t],n);return r>1?pe.uniqueSort(n):n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&ke.test(e)?pe(e):e||[],!1).length}});var Ce,De=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(pe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Ce,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:De.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),we.test(r[1])&&pe.isPlainObject(t))for(r in t)pe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=te.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):pe.isFunction(e)?void 0!==n.ready?n.ready(e):e(pe):pe.makeArray(e,this)}).prototype=pe.fn,Ce=pe(te);var Ee=/^(?:parents|prev(?:Until|All))/,Se={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t=pe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(pe.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,a=[],o="string"!=typeof e&&pe(e);if(!ke.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&pe.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?pe.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?oe.call(pe(e),this[0]):oe.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return e.contentDocument||pe.merge([],e.childNodes)}},function(e,t){pe.fn[e]=function(n,r){var i=pe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=pe.filter(r,i)),this.length>1&&(Se[e]||pe.uniqueSort(i),Ee.test(e)&&i.reverse()),this.pushStack(i)}});var Ae=/[^\x20\t\r\n\f]+/g;pe.Callbacks=function(e){e="string"==typeof e?o(e):pe.extend({},e);var t,n,r,i,a=[],s=[],l=-1,u=function(){for(i=e.once,r=t=!0;s.length;l=-1)for(n=s.shift();++l<a.length;)!1===a[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},c={add:function(){return a&&(n&&!t&&(l=a.length-1,s.push(n)),function t(n){pe.each(n,function(n,r){pe.isFunction(r)?e.unique&&c.has(r)||a.push(r):r&&r.length&&"string"!==pe.type(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return pe.each(arguments,function(e,t){for(var n;(n=pe.inArray(t,a,n))>-1;)a.splice(n,1),n<=l&&l--}),this},has:function(e){return e?pe.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=s=[],n||t||(a=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},pe.extend({Deferred:function(t){var n=[["notify","progress",pe.Callbacks("memory"),pe.Callbacks("memory"),2],["resolve","done",pe.Callbacks("once memory"),pe.Callbacks("once memory"),0,"resolved"],["reject","fail",pe.Callbacks("once memory"),pe.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return pe.Deferred(function(t){pe.each(n,function(n,r){var i=pe.isFunction(e[r[4]])&&e[r[4]];a[r[1]](function(){var e=i&&i.apply(this,arguments);e&&pe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){function a(t,n,r,i){return function(){var u=this,c=arguments,f=function(){var e,f;if(!(t<o)){if((e=r.apply(u,c))===n.promise())throw new TypeError("Thenable self-resolution");f=e&&("object"==typeof e||"function"==typeof e)&&e.then,pe.isFunction(f)?i?f.call(e,a(o,n,s,i),a(o,n,l,i)):(o++,f.call(e,a(o,n,s,i),a(o,n,l,i),a(o,n,s,n.notifyWith))):(r!==s&&(u=void 0,c=[e]),(i||n.resolveWith)(u,c))}},d=i?f:function(){try{f()}catch(e){pe.Deferred.exceptionHook&&pe.Deferred.exceptionHook(e,d.stackTrace),t+1>=o&&(r!==l&&(u=void 0,c=[e]),n.rejectWith(u,c))}};t?d():(pe.Deferred.getStackHook&&(d.stackTrace=pe.Deferred.getStackHook()),e.setTimeout(d))}}var o=0;return pe.Deferred(function(e){n[0][3].add(a(0,e,pe.isFunction(i)?i:s,e.notifyWith)),n[1][3].add(a(0,e,pe.isFunction(t)?t:s)),n[2][3].add(a(0,e,pe.isFunction(r)?r:l))}).promise()},promise:function(e){return null!=e?pe.extend(e,i):i}},a={};return pe.each(n,function(e,t){var o=t[2],s=t[5];i[t[1]]=o.add,s&&o.add(function(){r=s},n[3-e][2].disable,n[0][2].lock),o.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=o.fireWith}),i.promise(a),t&&t.call(a,a),a},when:function(e){var t=arguments.length,n=t,r=Array(n),i=re.call(arguments),a=pe.Deferred(),o=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?re.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&(u(e,a.done(o(n)).resolve,a.reject),"pending"===a.state()||pe.isFunction(i[n]&&i[n].then)))return a.then();for(;n--;)u(i[n],o(n),a.reject);return a.promise()}});var Te=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;pe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Te.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},pe.readyException=function(t){e.setTimeout(function(){throw t})};var Me=pe.Deferred();pe.fn.ready=function(e){return Me.then(e).catch(function(e){pe.readyException(e)}),this},pe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?pe.readyWait++:pe.ready(!0)},ready:function(e){(!0===e?--pe.readyWait:pe.isReady)||(pe.isReady=!0,!0!==e&&--pe.readyWait>0||Me.resolveWith(te,[pe]))}}),pe.ready.then=Me.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(pe.ready):(te.addEventListener("DOMContentLoaded",c),e.addEventListener("load",c));var Oe=function(e,t,n,r,i,a,o){var s=0,l=e.length,u=null==n;if("object"===pe.type(n)){i=!0;for(s in n)Oe(e,t,s,n[s],!0,a,o)}else if(void 0!==r&&(i=!0,pe.isFunction(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(pe(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):a},je=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};f.uid=1,f.prototype={cache:function(e){var t=e[this.expando];return t||(t={},je(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[pe.camelCase(t)]=n;else for(r in t)i[pe.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][pe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){pe.isArray(t)?t=t.map(pe.camelCase):(t=pe.camelCase(t),t=t in r?[t]:t.match(Ae)||[]),n=t.length;for(;n--;)delete r[t[n]]}(void 0===t||pe.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!pe.isEmptyObject(t)}};var Pe=new f,Ne=new f,Fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,$e=/[A-Z]/g;pe.extend({hasData:function(e){return Ne.hasData(e)||Pe.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return Pe.access(e,t,n)},_removeData:function(e,t){Pe.remove(e,t)}}),pe.fn.extend({data:function(e,t){var n,r,i,a=this[0],o=a&&a.attributes;if(void 0===e){if(this.length&&(i=Ne.get(a),1===a.nodeType&&!Pe.get(a,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&(r=o[n].name,0===r.indexOf("data-")&&(r=pe.camelCase(r.slice(5)),p(a,r,i[r])));Pe.set(a,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Oe(this,function(t){var n;if(a&&void 0===t){if(void 0!==(n=Ne.get(a,e)))return n;if(void 0!==(n=p(a,e)))return n}else this.each(function(){Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),pe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Pe.get(e,t),n&&(!r||pe.isArray(n)?r=Pe.access(e,t,pe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=pe.queue(e,t),r=n.length,i=n.shift(),a=pe._queueHooks(e,t),o=function(){pe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete a.stop,i.call(e,o,a)),!r&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Pe.get(e,n)||Pe.access(e,n,{empty:pe.Callbacks("once memory").add(function(){Pe.remove(e,[t+"queue",n])})})}}),pe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?pe.queue(this[0],e):void 0===t?this:this.each(function(){var n=pe.queue(this,e,t);pe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&pe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){pe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=pe.Deferred(),a=this,o=this.length,s=function(){--r||i.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=Pe.get(a[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var Ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Le=new RegExp("^(?:([+-])=|)("+Ie+")([a-z%]*)$","i"),Re=["Top","Right","Bottom","Left"],He=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&pe.contains(e.ownerDocument,e)&&"none"===pe.css(e,"display")},Be=function(e,t,n,r){var i,a,o={};for(a in t)o[a]=e.style[a],e.style[a]=t[a];i=n.apply(e,r||[]);for(a in t)e.style[a]=o[a];return i},qe={};pe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){He(this)?pe(this).show():pe(this).hide()})}});var Ue=/^(?:checkbox|radio)$/i,Ye=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,We=/^$|\/(?:java|ecma)script/i,Ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ve.optgroup=Ve.option,Ve.tbody=Ve.tfoot=Ve.colgroup=Ve.caption=Ve.thead,Ve.th=Ve.td;var ze=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment(),t=e.appendChild(te.createElement("div")),n=te.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),de.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",de.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ge=te.documentElement,Ke=/^key/,Je=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^([^.]*)(?:\.(.+)|)/;pe.event={global:{},add:function(e,t,n,r,i){var a,o,s,l,u,c,f,d,p,h,m,v=Pe.get(e);if(v)for(n.handler&&(a=n,n=a.handler,i=a.selector),i&&pe.find.matchesSelector(Ge,i),n.guid||(n.guid=pe.guid++),(l=v.events)||(l=v.events={}),(o=v.handle)||(o=v.handle=function(t){return void 0!==pe&&pe.event.triggered!==t.type?pe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Ae)||[""],u=t.length;u--;)s=Qe.exec(t[u])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p&&(f=pe.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=pe.event.special[p]||{},c=pe.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&pe.expr.match.needsContext.test(i),namespace:h.join(".")},a),(d=l[p])||(d=l[p]=[],d.delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,o)||e.addEventListener&&e.addEventListener(p,o)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),pe.event.global[p]=!0)},remove:function(e,t,n,r,i){var a,o,s,l,u,c,f,d,p,h,m,v=Pe.hasData(e)&&Pe.get(e);if(v&&(l=v.events)){for(t=(t||"").match(Ae)||[""],u=t.length;u--;)if(s=Qe.exec(t[u])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p){for(f=pe.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,d=l[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=d.length;a--;)c=d[a],!i&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(a,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));o&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||pe.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)pe.event.remove(e,p+t[u],n,r,!0);pe.isEmptyObject(l)&&Pe.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,a,o,s=pe.event.fix(e),l=new Array(arguments.length),u=(Pe.get(this,"events")||{})[s.type]||[],c=pe.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(o=pe.event.handlers.call(this,s,u),t=0;(i=o[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(a=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(a.namespace)||(s.handleObj=a,s.data=a.data,void 0!==(r=((pe.event.special[a.origType]||{}).handle||a.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,a,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(a=[],o={},n=0;n<l;n++)r=t[n],i=r.selector+" ",void 0===o[i]&&(o[i]=r.needsContext?pe(i,this).index(u)>-1:pe.find(i,this,null,[u]).length),o[i]&&a.push(r);a.length&&s.push({elem:u,handlers:a})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(pe.Event.prototype,e,{enumerable:!0,configurable:!0,get:pe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[pe.expando]?e:new pe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==w()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===w()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&pe.nodeName(this,"input"))return this.click(),!1},_default:function(e){return pe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},pe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},pe.Event=function(e,t){if(!(this instanceof pe.Event))return new pe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:k,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&pe.extend(this,t),this.timeStamp=e&&e.timeStamp||pe.now(),this[pe.expando]=!0},pe.Event.prototype={constructor:pe.Event,isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},pe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Je.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},pe.event.addProp),pe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){pe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,a=e.handleObj;return i&&(i===r||pe.contains(r,i))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}}),pe.fn.extend({on:function(e,t,n,r){return _(this,e,t,n,r)},one:function(e,t,n,r){return _(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,pe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=k),this.each(function(){pe.event.remove(this,e,n,t)})}});var Ze=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Xe=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;pe.extend({htmlPrefilter:function(e){return e.replace(Ze,"<$1></$2>")},clone:function(e,t,n){var r,i,a,o,s=e.cloneNode(!0),l=pe.contains(e.ownerDocument,e);if(!(de.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||pe.isXMLDoc(e)))for(o=g(s),a=g(e),r=0,i=a.length;r<i;r++)A(a[r],o[r]);if(t)if(n)for(a=a||g(e),o=o||g(s),r=0,i=a.length;r<i;r++)S(a[r],o[r]);else S(e,s);return o=g(s,"script"),o.length>0&&y(o,!l&&g(e,"script")),s},cleanData:function(e){for(var t,n,r,i=pe.event.special,a=0;void 0!==(n=e[a]);a++)if(je(n)){if(t=n[Pe.expando]){if(t.events)for(r in t.events)i[r]?pe.event.remove(n,r):pe.removeEvent(n,r,t.handle);n[Pe.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),pe.fn.extend({detach:function(e){return M(this,e,!0)},remove:function(e){return M(this,e)},text:function(e){return Oe(this,function(e){return void 0===e?pe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){C(this,e).appendChild(e)}})},prepend:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=C(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(pe.cleanData(g(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return pe.clone(this,e,t)})},html:function(e){return Oe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Xe.test(e)&&!Ve[(Ye.exec(e)||["",""])[1].toLowerCase()]){e=pe.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(pe.cleanData(g(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return T(this,arguments,function(t){var n=this.parentNode;pe.inArray(this,e)<0&&(pe.cleanData(g(this)),n&&n.replaceChild(t,this))},e)}}),pe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){pe.fn[e]=function(e){for(var n,r=[],i=pe(e),a=i.length-1,o=0;o<=a;o++)n=o===a?this:this.clone(!0),pe(i[o])[t](n),ae.apply(r,n.get());return this.pushStack(r)}});var rt=/^margin/,it=new RegExp("^("+Ie+")(?!px)[a-z%]+$","i"),at=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ge.appendChild(o);var t=e.getComputedStyle(s);n="1%"!==t.top,a="2px"===t.marginLeft,r="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Ge.removeChild(o),s=null}}var n,r,i,a,o=te.createElement("div"),s=te.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",de.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(s),pe.extend(de,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),a}}))}();var ot=/^(none|table(?!-c[ea]).+)/,st={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"},ut=["Webkit","Moz","ms"],ct=te.createElement("div").style;pe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=O(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,a,o,s=pe.camelCase(t),l=e.style;if(t=pe.cssProps[s]||(pe.cssProps[s]=P(s)||s),o=pe.cssHooks[t]||pe.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(i=o.get(e,!1,r))?i:l[t];a=typeof n,"string"===a&&(i=Le.exec(n))&&i[1]&&(n=h(e,t,i),a="number"),null!=n&&n===n&&("number"===a&&(n+=i&&i[3]||(pe.cssNumber[s]?"":"px")),de.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(l[t]=n))}},css:function(e,t,n,r){var i,a,o,s=pe.camelCase(t);return t=pe.cssProps[s]||(pe.cssProps[s]=P(s)||s),o=pe.cssHooks[t]||pe.cssHooks[s],o&&"get"in o&&(i=o.get(e,!0,n)),void 0===i&&(i=O(e,t,r)),"normal"===i&&t in lt&&(i=lt[t]),""===n||n?(a=parseFloat(i),!0===n||isFinite(a)?a||0:i):i}}),pe.each(["height","width"],function(e,t){pe.cssHooks[t]={get:function(e,n,r){if(n)return!ot.test(pe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?$(e,t,r):Be(e,st,function(){return $(e,t,r)})},set:function(e,n,r){var i,a=r&&at(e),o=r&&F(e,t,r,"border-box"===pe.css(e,"boxSizing",!1,a),a);return o&&(i=Le.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=pe.css(e,t)),N(e,n,o)}}}),pe.cssHooks.marginLeft=j(de.reliableMarginLeft,function(e,t){if(t)return(parseFloat(O(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),pe.each({margin:"",padding:"",border:"Width"},function(e,t){pe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},a="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Re[r]+t]=a[r]||a[r-2]||a[0];return i}},rt.test(e)||(pe.cssHooks[e+t].set=N)}),pe.fn.extend({css:function(e,t){return Oe(this,function(e,t,n){var r,i,a={},o=0;if(pe.isArray(t)){for(r=at(e),i=t.length;o<i;o++)a[t[o]]=pe.css(e,t[o],!1,r);return a}return void 0!==n?pe.style(e,t,n):pe.css(e,t)},e,t,arguments.length>1)}}),pe.Tween=I,I.prototype={constructor:I,init:function(e,t,n,r,i,a){this.elem=e,this.prop=n,this.easing=i||pe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=a||(pe.cssNumber[n]?"":"px")},cur:function(){var e=I.propHooks[this.prop];return e&&e.get?e.get(this):I.propHooks._default.get(this)},run:function(e){var t,n=I.propHooks[this.prop];return this.options.duration?this.pos=t=pe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=pe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){pe.fx.step[e.prop]?pe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[pe.cssProps[e.prop]]&&!pe.cssHooks[e.prop]?e.elem[e.prop]=e.now:pe.style(e.elem,e.prop,e.now+e.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},pe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},pe.fx=I.prototype.init,pe.fx.step={};var ft,dt,pt=/^(?:toggle|show|hide)$/,ht=/queueHooks$/;pe.Animation=pe.extend(Y,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return h(n.elem,e,Le.exec(t),n),n}]},tweener:function(e,t){pe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ae);for(var n,r=0,i=e.length;r<i;r++)n=e[r],Y.tweeners[n]=Y.tweeners[n]||[],Y.tweeners[n].unshift(t)},prefilters:[q],prefilter:function(e,t){t?Y.prefilters.unshift(e):Y.prefilters.push(e)}}),pe.speed=function(e,t,n){var r=e&&"object"==typeof e?pe.extend({},e):{complete:n||!n&&t||pe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!pe.isFunction(t)&&t};return pe.fx.off||te.hidden?r.duration=0:"number"!=typeof r.duration&&(r.duration in pe.fx.speeds?r.duration=pe.fx.speeds[r.duration]:r.duration=pe.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){pe.isFunction(r.old)&&r.old.call(this),r.queue&&pe.dequeue(this,r.queue)},r},pe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(He).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=pe.isEmptyObject(e),a=pe.speed(t,n,r),o=function(){var t=Y(this,pe.extend({},e),a);(i||Pe.get(this,"finish"))&&t.stop(!0)};return o.finish=o,i||!1===a.queue?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){
var t=!0,i=null!=e&&e+"queueHooks",a=pe.timers,o=Pe.get(this);if(i)o[i]&&o[i].stop&&r(o[i]);else for(i in o)o[i]&&o[i].stop&&ht.test(i)&&r(o[i]);for(i=a.length;i--;)a[i].elem!==this||null!=e&&a[i].queue!==e||(a[i].anim.stop(n),t=!1,a.splice(i,1));!t&&n||pe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Pe.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],a=pe.timers,o=r?r.length:0;for(n.finish=!0,pe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),pe.each(["toggle","show","hide"],function(e,t){var n=pe.fn[t];pe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(H(t,!0),e,r,i)}}),pe.each({slideDown:H("show"),slideUp:H("hide"),slideToggle:H("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){pe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),pe.timers=[],pe.fx.tick=function(){var e,t=0,n=pe.timers;for(ft=pe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||pe.fx.stop(),ft=void 0},pe.fx.timer=function(e){pe.timers.push(e),e()?pe.fx.start():pe.timers.pop()},pe.fx.interval=13,pe.fx.start=function(){dt||(dt=e.requestAnimationFrame?e.requestAnimationFrame(L):e.setInterval(pe.fx.tick,pe.fx.interval))},pe.fx.stop=function(){e.cancelAnimationFrame?e.cancelAnimationFrame(dt):e.clearInterval(dt),dt=null},pe.fx.speeds={slow:600,fast:200,_default:400},pe.fn.delay=function(t,n){return t=pe.fx?pe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=te.createElement("input"),t=te.createElement("select"),n=t.appendChild(te.createElement("option"));e.type="checkbox",de.checkOn=""!==e.value,de.optSelected=n.selected,e=te.createElement("input"),e.value="t",e.type="radio",de.radioValue="t"===e.value}();var mt,vt=pe.expr.attrHandle;pe.fn.extend({attr:function(e,t){return Oe(this,pe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){pe.removeAttr(this,e)})}}),pe.extend({attr:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?pe.prop(e,t,n):(1===a&&pe.isXMLDoc(e)||(i=pe.attrHooks[t.toLowerCase()]||(pe.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void pe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=pe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!de.radioValue&&"radio"===t&&pe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(Ae);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?pe.removeAttr(e,n):e.setAttribute(n,n),n}},pe.each(pe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=vt[t]||pe.find.attr;vt[t]=function(e,t,r){var i,a,o=t.toLowerCase();return r||(a=vt[o],vt[o]=i,i=null!=n(e,t,r)?o:null,vt[o]=a),i}});var gt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;pe.fn.extend({prop:function(e,t){return Oe(this,pe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[pe.propFix[e]||e]})}}),pe.extend({prop:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&pe.isXMLDoc(e)||(t=pe.propFix[t]||t,i=pe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=pe.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),de.optSelected||(pe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),pe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pe.propFix[this.toLowerCase()]=this}),pe.fn.extend({addClass:function(e){var t,n,r,i,a,o,s,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).addClass(e.call(this,t,V(this)))});if("string"==typeof e&&e)for(t=e.match(Ae)||[];n=this[l++];)if(i=V(n),r=1===n.nodeType&&" "+W(i)+" "){for(o=0;a=t[o++];)r.indexOf(" "+a+" ")<0&&(r+=a+" ");s=W(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,a,o,s,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).removeClass(e.call(this,t,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ae)||[];n=this[l++];)if(i=V(n),r=1===n.nodeType&&" "+W(i)+" "){for(o=0;a=t[o++];)for(;r.indexOf(" "+a+" ")>-1;)r=r.replace(" "+a+" "," ");s=W(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):pe.isFunction(e)?this.each(function(n){pe(this).toggleClass(e.call(this,n,V(this),t),t)}):this.each(function(){var t,r,i,a;if("string"===n)for(r=0,i=pe(this),a=e.match(Ae)||[];t=a[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=V(this),t&&Pe.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Pe.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+W(V(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;pe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=pe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,pe(this).val()):e,null==i?i="":"number"==typeof i?i+="":pe.isArray(i)&&(i=pe.map(i,function(e){return null==e?"":e+""})),(t=pe.valHooks[this.type]||pe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=pe.valHooks[i.type]||pe.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(bt,""):null==n?"":n)}}}),pe.extend({valHooks:{option:{get:function(e){var t=pe.find.attr(e,"value");return null!=t?t:W(pe.text(e))}},select:{get:function(e){var t,n,r,i=e.options,a=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?a+1:i.length;for(r=a<0?l:o?a:0;r<l;r++)if(n=i[r],(n.selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!pe.nodeName(n.parentNode,"optgroup"))){if(t=pe(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,a=pe.makeArray(t),o=i.length;o--;)r=i[o],(r.selected=pe.inArray(pe.valHooks.option.get(r),a)>-1)&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),pe.each(["radio","checkbox"],function(){pe.valHooks[this]={set:function(e,t){if(pe.isArray(t))return e.checked=pe.inArray(pe(e).val(),t)>-1}},de.checkOn||(pe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var xt=/^(?:focusinfocus|focusoutblur)$/;pe.extend(pe.event,{trigger:function(t,n,r,i){var a,o,s,l,u,c,f,d=[r||te],p=ue.call(t,"type")?t.type:t,h=ue.call(t,"namespace")?t.namespace.split("."):[];if(o=s=r=r||te,3!==r.nodeType&&8!==r.nodeType&&!xt.test(p+pe.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),u=p.indexOf(":")<0&&"on"+p,t=t[pe.expando]?t:new pe.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:pe.makeArray(n,[t]),f=pe.event.special[p]||{},i||!f.trigger||!1!==f.trigger.apply(r,n))){if(!i&&!f.noBubble&&!pe.isWindow(r)){for(l=f.delegateType||p,xt.test(l+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),s=o;s===(r.ownerDocument||te)&&d.push(s.defaultView||s.parentWindow||e)}for(a=0;(o=d[a++])&&!t.isPropagationStopped();)t.type=a>1?l:f.bindType||p,c=(Pe.get(o,"events")||{})[t.type]&&Pe.get(o,"handle"),c&&c.apply(o,n),(c=u&&o[u])&&c.apply&&je(o)&&(t.result=c.apply(o,n),!1===t.result&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(d.pop(),n)||!je(r)||u&&pe.isFunction(r[p])&&!pe.isWindow(r)&&(s=r[u],s&&(r[u]=null),pe.event.triggered=p,r[p](),pe.event.triggered=void 0,s&&(r[u]=s)),t.result}},simulate:function(e,t,n){var r=pe.extend(new pe.Event,n,{type:e,isSimulated:!0});pe.event.trigger(r,null,t)}}),pe.fn.extend({trigger:function(e,t){return this.each(function(){pe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return pe.event.trigger(e,t,n,!0)}}),pe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){pe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),pe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),de.focusin="onfocusin"in e,de.focusin||pe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){pe.event.simulate(t,e.target,pe.event.fix(e))};pe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Pe.access(r,t);i||r.addEventListener(e,n,!0),Pe.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Pe.access(r,t)-1;i?Pe.access(r,t,i):(r.removeEventListener(e,n,!0),Pe.remove(r,t))}}});var kt=e.location,wt=pe.now(),_t=/\?/;pe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||pe.error("Invalid XML: "+t),n};var Ct=/\[\]$/,Dt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;pe.param=function(e,t){var n,r=[],i=function(e,t){var n=pe.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(pe.isArray(e)||e.jquery&&!pe.isPlainObject(e))pe.each(e,function(){i(this.name,this.value)});else for(n in e)z(n,e[n],t,i);return r.join("&")},pe.fn.extend({serialize:function(){return pe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=pe.prop(this,"elements");return e?pe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!pe(this).is(":disabled")&&St.test(this.nodeName)&&!Et.test(e)&&(this.checked||!Ue.test(e))}).map(function(e,t){var n=pe(this).val();return null==n?null:pe.isArray(n)?pe.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var At=/%20/g,Tt=/#.*$/,Mt=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Pt=/^(?:GET|HEAD)$/,Nt=/^\/\//,Ft={},$t={},It="*/".concat("*"),Lt=te.createElement("a");Lt.href=kt.href,pe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:jt.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":pe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?J(J(e,pe.ajaxSettings),t):J(pe.ajaxSettings,e)},ajaxPrefilter:G(Ft),ajaxTransport:G($t),ajax:function(t,n){function r(t,n,r,s){var u,d,p,x,k,w=n;c||(c=!0,l&&e.clearTimeout(l),i=void 0,o=s||"",_.readyState=t>0?4:0,u=t>=200&&t<300||304===t,r&&(x=Q(h,_,r)),x=Z(h,x,_,u),u?(h.ifModified&&(k=_.getResponseHeader("Last-Modified"),k&&(pe.lastModified[a]=k),(k=_.getResponseHeader("etag"))&&(pe.etag[a]=k)),204===t||"HEAD"===h.type?w="nocontent":304===t?w="notmodified":(w=x.state,d=x.data,p=x.error,u=!p)):(p=w,!t&&w||(w="error",t<0&&(t=0))),_.status=t,_.statusText=(n||w)+"",u?g.resolveWith(m,[d,w,_]):g.rejectWith(m,[_,w,p]),_.statusCode(b),b=void 0,f&&v.trigger(u?"ajaxSuccess":"ajaxError",[_,h,u?d:p]),y.fireWith(m,[_,w]),f&&(v.trigger("ajaxComplete",[_,h]),--pe.active||pe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,a,o,s,l,u,c,f,d,p,h=pe.ajaxSetup({},n),m=h.context||h,v=h.context&&(m.nodeType||m.jquery)?pe(m):pe.event,g=pe.Deferred(),y=pe.Callbacks("once memory"),b=h.statusCode||{},x={},k={},w="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Ot.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)_.always(e[_.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||w;return i&&i.abort(t),r(0,t),this}};if(g.promise(_),h.url=((t||h.url||kt.href)+"").replace(Nt,kt.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Ae)||[""],null==h.crossDomain){u=te.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=Lt.protocol+"//"+Lt.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=pe.param(h.data,h.traditional)),K(Ft,h,n,_),c)return _;f=pe.event&&h.global,f&&0==pe.active++&&pe.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Pt.test(h.type),a=h.url.replace(Tt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(p=h.url.slice(a.length),h.data&&(a+=(_t.test(a)?"&":"?")+h.data,delete h.data),!1===h.cache&&(a=a.replace(Mt,"$1"),p=(_t.test(a)?"&":"?")+"_="+wt+++p),h.url=a+p),h.ifModified&&(pe.lastModified[a]&&_.setRequestHeader("If-Modified-Since",pe.lastModified[a]),pe.etag[a]&&_.setRequestHeader("If-None-Match",pe.etag[a])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+It+"; q=0.01":""):h.accepts["*"]);for(d in h.headers)_.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(m,_,h)||c))return _.abort();if(w="abort",y.add(h.complete),_.done(h.success),_.fail(h.error),i=K($t,h,n,_)){if(_.readyState=1,f&&v.trigger("ajaxSend",[_,h]),c)return _;h.async&&h.timeout>0&&(l=e.setTimeout(function(){_.abort("timeout")},h.timeout));try{c=!1,i.send(x,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return _},getJSON:function(e,t,n){return pe.get(e,t,n,"json")},getScript:function(e,t){return pe.get(e,void 0,t,"script")}}),pe.each(["get","post"],function(e,t){pe[t]=function(e,n,r,i){return pe.isFunction(n)&&(i=i||r,r=n,n=void 0),pe.ajax(pe.extend({url:e,type:t,dataType:i,data:n,success:r},pe.isPlainObject(e)&&e))}}),pe._evalUrl=function(e){return pe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pe.fn.extend({wrapAll:function(e){var t;return this[0]&&(pe.isFunction(e)&&(e=e.call(this[0])),t=pe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return pe.isFunction(e)?this.each(function(t){pe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=pe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=pe.isFunction(e);return this.each(function(n){pe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){pe(this).replaceWith(this.childNodes)}),this}}),pe.expr.pseudos.hidden=function(e){return!pe.expr.pseudos.visible(e)},pe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},pe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Rt={0:200,1223:204},Ht=pe.ajaxSettings.xhr();de.cors=!!Ht&&"withCredentials"in Ht,de.ajax=Ht=!!Ht,pe.ajaxTransport(function(t){var n,r;if(de.cors||Ht&&!t.crossDomain)return{send:function(i,a){var o,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)s[o]=t.xhrFields[o];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)s.setRequestHeader(o,i[o]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?a(0,"error"):a(s.status,s.statusText):a(Rt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),pe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),pe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return pe.globalEval(e),e}}}),pe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),pe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=pe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Bt=[],qt=/(=)\?(?=&|$)|\?\?/;pe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||pe.expando+"_"+wt++;return this[e]=!0,e}}),pe.ajaxPrefilter("json jsonp",function(t,n,r){var i,a,o,s=!1!==t.jsonp&&(qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=pe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(qt,"$1"+i):!1!==t.jsonp&&(t.url+=(_t.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return o||pe.error(i+" was not called"),o[0]},t.dataTypes[0]="json",a=e[i],e[i]=function(){o=arguments},r.always(function(){void 0===a?pe(e).removeProp(i):e[i]=a,t[i]&&(t.jsonpCallback=n.jsonpCallback,Bt.push(i)),o&&pe.isFunction(a)&&a(o[0]),o=a=void 0}),"script"}),de.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),pe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,a;return t||(de.createHTMLDocument?(t=te.implementation.createHTMLDocument(""),r=t.createElement("base"),r.href=te.location.href,t.head.appendChild(r)):t=te),i=we.exec(e),a=!n&&[],i?[t.createElement(i[1])]:(i=b([e],t,a),a&&a.length&&pe(a).remove(),pe.merge([],i.childNodes))},pe.fn.load=function(e,t,n){var r,i,a,o=this,s=e.indexOf(" ");return s>-1&&(r=W(e.slice(s)),e=e.slice(0,s)),pe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),o.length>0&&pe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){a=arguments,o.html(r?pe("<div>").append(pe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,a||[e.responseText,t,e])})}),this},pe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){pe.fn[t]=function(e){return this.on(t,e)}}),pe.expr.pseudos.animated=function(e){return pe.grep(pe.timers,function(t){return e===t.elem}).length},pe.offset={setOffset:function(e,t,n){var r,i,a,o,s,l,u,c=pe.css(e,"position"),f=pe(e),d={};"static"===c&&(e.style.position="relative"),s=f.offset(),a=pe.css(e,"top"),l=pe.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(a+l).indexOf("auto")>-1,u?(r=f.position(),o=r.top,i=r.left):(o=parseFloat(a)||0,i=parseFloat(l)||0),pe.isFunction(t)&&(t=t.call(e,n,pe.extend({},s))),null!=t.top&&(d.top=t.top-s.top+o),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):f.css(d)}},pe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){pe.offset.setOffset(this,e,t)});var t,n,r,i,a=this[0];if(a)return a.getClientRects().length?(r=a.getBoundingClientRect(),r.width||r.height?(i=a.ownerDocument,n=X(i),t=i.documentElement,{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}):r):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===pe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),pe.nodeName(e[0],"html")||(r=e.offset()),r={top:r.top+pe.css(e[0],"borderTopWidth",!0),left:r.left+pe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-pe.css(n,"marginTop",!0),left:t.left-r.left-pe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===pe.css(e,"position");)e=e.offsetParent;return e||Ge})}}),pe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;pe.fn[e]=function(r){return Oe(this,function(e,r,i){var a=X(e);if(void 0===i)return a?a[t]:e[r];a?a.scrollTo(n?a.pageXOffset:i,n?i:a.pageYOffset):e[r]=i},e,r,arguments.length)}}),pe.each(["top","left"],function(e,t){pe.cssHooks[t]=j(de.pixelPosition,function(e,n){if(n)return n=O(e,t),it.test(n)?pe(e).position()[t]+"px":n})}),pe.each({Height:"height",Width:"width"},function(e,t){pe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){pe.fn[r]=function(i,a){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===a?"margin":"border");return Oe(this,function(t,n,i){var a;return pe.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===i?pe.css(t,n,s):pe.style(t,n,i,s)},t,o?i:void 0,o)}})}),pe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),pe.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pe});var Ut=e.jQuery,Yt=e.$;return pe.noConflict=function(t){return e.$===pe&&(e.$=Yt),t&&e.jQuery===pe&&(e.jQuery=Ut),pe},t||(e.jQuery=e.$=pe),pe}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Vue=t()}(this,function(){"use strict";function e(e){return null==e?"":"object"==typeof e?JSON.stringify(e,null,2):String(e)}function t(e){var t=parseFloat(e);return isNaN(t)?e:t}function n(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}function r(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}function i(e,t){return oi.call(e,t)}function a(e){return"string"==typeof e||"number"==typeof e}function o(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}function s(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function l(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function u(e,t){for(var n in t)e[n]=t[n];return e}function c(e){return null!==e&&"object"==typeof e}function f(e){return di.call(e)===pi}function d(e){for(var t={},n=0;n<e.length;n++)e[n]&&u(t,e[n]);return t}function p(){}function h(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function m(e,t){var n=c(e),r=c(t);return n&&r?JSON.stringify(e)===JSON.stringify(t):!n&&!r&&String(e)===String(t)}function v(e,t){for(var n=0;n<e.length;n++)if(m(e[n],t))return n;return-1}function g(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function y(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function b(e){if(!gi.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}function x(e){return/native code/.test(e.toString())}function k(e){Ni.target&&Fi.push(Ni.target),Ni.target=e}function w(){Ni.target=Fi.pop()}function _(e,t){e.__proto__=t}function C(e,t,n){for(var r=0,i=n.length;r<i;r++){var a=n[r];y(e,a,t[a])}}function D(e,t){if(c(e)){var n;return i(e,"__ob__")&&e.__ob__ instanceof Hi?n=e.__ob__:Ri.shouldConvert&&!Ei()&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Hi(e)),t&&n&&n.vmCount++,n}}function E(e,t,n,r){var i=new Ni,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var o=a&&a.get,s=a&&a.set,l=D(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=o?o.call(e):n;return Ni.target&&(i.depend(),l&&l.dep.depend(),Array.isArray(t)&&T(t)),t},set:function(t){var a=o?o.call(e):n;t===a||t!==t&&a!==a||(r&&r(),s?s.call(e,t):n=t,l=D(t),i.notify())}})}}function S(e,t,n){if(Array.isArray(e))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(i(e,t))return void(e[t]=n);var r=e.__ob__;return e._isVue||r&&r.vmCount?void Mi("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."):r?(E(r.value,t,n),r.dep.notify(),n):void(e[t]=n)}function A(e,t){var n=e.__ob__;if(e._isVue||n&&n.vmCount)return void Mi("Avoid deleting properties on a Vue instance or its root $data - just set it to null.");i(e,t)&&(delete e[t],n&&n.dep.notify())}function T(e){for(var t=void 0,n=0,r=e.length;n<r;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&T(t)}function M(e,t){if(!t)return e;for(var n,r,a,o=Object.keys(t),s=0;s<o.length;s++)n=o[s],r=e[n],a=t[n],i(e,n)?f(r)&&f(a)&&M(r,a):S(e,n,a);return e}function O(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function j(e,t){var n=Object.create(e||null);return t?u(n,t):n}function P(e){for(var t in e.components){var n=t.toLowerCase();(ai(n)||vi.isReservedTag(n))&&Mi("Do not use built-in or reserved HTML elements as component id: "+t)}}function N(e){var t=e.props;if(t){var n,r,i,a={};if(Array.isArray(t))for(n=t.length;n--;)r=t[n],"string"==typeof r?(i=li(r),a[i]={type:null}):Mi("props must be strings when using array syntax.");else if(f(t))for(var o in t)r=t[o],i=li(o),a[i]=f(r)?r:{type:r};e.props=a}}function F(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}function $(e,t,n){function r(r){var i=Bi[r]||Ui;c[r]=i(e[r],t[r],n,r)}P(t),N(t),F(t);var a=t.extends;if(a&&(e="function"==typeof a?$(e,a.options,n):$(e,a,n)),t.mixins)for(var o=0,s=t.mixins.length;o<s;o++){var l=t.mixins[o];l.prototype instanceof Re&&(l=l.options),e=$(e,l,n)}var u,c={};for(u in e)r(u);for(u in t)i(e,u)||r(u);return c}function I(e,t,n,r){if("string"==typeof n){var a=e[t];if(i(a,n))return a[n];var o=li(n);if(i(a,o))return a[o];var s=ui(o);if(i(a,s))return a[s];var l=a[n]||a[o]||a[s];return r&&!l&&Mi("Failed to resolve "+t.slice(0,-1)+": "+n,e),l}}function L(e,t,n,r){var a=t[e],o=!i(n,e),s=n[e];if(U(Boolean,a.type)&&(o&&!i(a,"default")?s=!1:U(String,a.type)||""!==s&&s!==fi(e)||(s=!0)),void 0===s){s=R(r,a,e);var l=Ri.shouldConvert;Ri.shouldConvert=!0,D(s),Ri.shouldConvert=l}return H(a,e,s,r,o),s}function R(e,t,n){if(i(t,"default")){var r=t.default;return c(r)&&Mi('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e[n]?e[n]:"function"==typeof r&&t.type!==Function?r.call(e):r}}function H(e,t,n,r,i){if(e.required&&i)return void Mi('Missing required prop: "'+t+'"',r);if(null!=n||e.required){var a=e.type,o=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!o;l++){var u=B(n,a[l]);s.push(u.expectedType||""),o=u.valid}}if(!o)return void Mi('Invalid prop: type check failed for prop "'+t+'". Expected '+s.map(ui).join(", ")+", got "+Object.prototype.toString.call(n).slice(8,-1)+".",r);var c=e.validator;c&&(c(n)||Mi('Invalid prop: custom validator check failed for prop "'+t+'".',r))}}function B(e,t){var n,r=q(t);return n="String"===r?typeof e==(r="string"):"Number"===r?typeof e==(r="number"):"Boolean"===r?typeof e==(r="boolean"):"Function"===r?typeof e==(r="function"):"Object"===r?f(e):"Array"===r?Array.isArray(e):e instanceof t,{valid:n,expectedType:r}}function q(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t&&t[1]}function U(e,t){if(!Array.isArray(t))return q(t)===q(e);for(var n=0,r=t.length;n<r;n++)if(q(t[n])===q(e))return!0;return!1}function Y(e){return new Qi(void 0,void 0,void 0,String(e))}function W(e){var t=new Qi(e.tag,e.data,e.children,e.text,e.elm,e.context,e.componentOptions);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isCloned=!0,t}function V(e){for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=W(e[n]);return t}function z(e,t,n,r,i){if(e){var a=n.$options._base;if(c(e)&&(e=a.extend(e)),"function"!=typeof e)return void Mi("Invalid Component definition: "+String(e),n);if(!e.cid)if(e.resolved)e=e.resolved;else if(!(e=ee(e,a,function(){n.$forceUpdate()})))return;Le(e),t=t||{};var o=te(t,e);if(e.options.functional)return G(e,o,t,n,r);var s=t.on;t.on=t.nativeOn,e.options.abstract&&(t={}),re(t);var l=e.options.name||i;return new Qi("vue-component-"+e.cid+(l?"-"+l:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:o,listeners:s,tag:i,children:r})}}function G(e,t,n,r,i){var a={},o=e.options.props;if(o)for(var s in o)a[s]=L(s,o,t);var l=Object.create(r),u=function(e,t,n,r){return de(l,e,t,n,r,!0)},c=e.options.render.call(null,u,{props:a,data:n,parent:r,children:i,slots:function(){return ve(i,r)}});return c instanceof Qi&&(c.functionalContext=r,n.slot&&((c.data||(c.data={})).slot=n.slot)),c}function K(e,t,n,r){var i=e.componentOptions,a={_isComponent:!0,parent:t,propsData:i.propsData,_componentTag:i.tag,_parentVnode:e,_parentListeners:i.listeners,_renderChildren:i.children,_parentElm:n||null,_refElm:r||null},o=e.data.inlineTemplate;return o&&(a.render=o.render,a.staticRenderFns=o.staticRenderFns),new i.Ctor(a)}function J(e,t,n,r){if(!e.componentInstance||e.componentInstance._isDestroyed){(e.componentInstance=K(e,oa,n,r)).$mount(t?e.elm:void 0,t)}else if(e.data.keepAlive){var i=e;Q(i,i)}}function Q(e,t){var n=t.componentOptions;(t.componentInstance=e.componentInstance)._updateFromParent(n.propsData,n.listeners,t,n.children)}function Z(e){e.componentInstance._isMounted||(e.componentInstance._isMounted=!0,we(e.componentInstance,"mounted")),e.data.keepAlive&&(e.componentInstance._inactive=!1,we(e.componentInstance,"activated"))}function X(e){e.componentInstance._isDestroyed||(e.data.keepAlive?(e.componentInstance._inactive=!0,we(e.componentInstance,"deactivated")):e.componentInstance.$destroy())}function ee(e,t,n){if(!e.requested){e.requested=!0;var r=e.pendingCallbacks=[n],i=!0,a=function(n){if(c(n)&&(n=t.extend(n)),e.resolved=n,!i)for(var a=0,o=r.length;a<o;a++)r[a](n)},o=function(t){Mi("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:""))},s=e(a,o)
;return s&&"function"==typeof s.then&&!e.resolved&&s.then(a,o),i=!1,e.resolved}e.pendingCallbacks.push(n)}function te(e,t){var n=t.options.props;if(n){var r={},i=e.attrs,a=e.props,o=e.domProps;if(i||a||o)for(var s in n){var l=fi(s);ne(r,a,s,l,!0)||ne(r,i,s,l)||ne(r,o,s,l)}return r}}function ne(e,t,n,r,a){if(t){if(i(t,n))return e[n]=t[n],a||delete t[n],!0;if(i(t,r))return e[n]=t[r],a||delete t[r],!0}return!1}function re(e){e.hook||(e.hook={});for(var t=0;t<na.length;t++){var n=na[t],r=e.hook[n],i=ta[n];e.hook[n]=r?ie(i,r):i}}function ie(e,t){return function(n,r,i,a){e(n,r,i,a),t(n,r,i,a)}}function ae(e,t,n,r){r+=t;var i=e.__injected||(e.__injected={});if(!i[r]){i[r]=!0;var a=e[t];e[t]=a?function(){a.apply(this,arguments),n.apply(this,arguments)}:n}}function oe(e){var t={fn:e,invoker:function(){var e=arguments,n=t.fn;if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r].apply(null,e);else n.apply(null,arguments)}};return t}function se(e,t,n,r,i){var a,o,s,l;for(a in e)o=e[a],s=t[a],l=ra(a),o?s?o!==s&&(s.fn=o,e[a]=s):(o.invoker||(o=e[a]=oe(o)),n(l.name,o.invoker,l.once,l.capture)):Mi('Invalid handler for event "'+l.name+'": got '+String(o),i);for(a in t)e[a]||(l=ra(a),r(l.name,t[a].invoker,l.capture))}function le(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function ue(e){return a(e)?[Y(e)]:Array.isArray(e)?ce(e):void 0}function ce(e,t){var n,r,i,o=[];for(n=0;n<e.length;n++)null!=(r=e[n])&&"boolean"!=typeof r&&(i=o[o.length-1],Array.isArray(r)?o.push.apply(o,ce(r,(t||"")+"_"+n)):a(r)?i&&i.text?i.text+=String(r):""!==r&&o.push(Y(r)):r.text&&i&&i.text?o[o.length-1]=Y(i.text+r.text):(r.tag&&null==r.key&&null!=t&&(r.key="__vlist"+t+"_"+n+"__"),o.push(r)));return o}function fe(e){return e&&e.filter(function(e){return e&&e.componentOptions})[0]}function de(e,t,n,r,i,o){return(Array.isArray(n)||a(n))&&(i=r,r=n,n=void 0),o&&(i=aa),pe(e,t,n,r,i)}function pe(e,t,n,r,i){if(n&&n.__ob__)return Mi("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),ea();if(!t)return ea();Array.isArray(r)&&"function"==typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===aa?r=ue(r):i===ia&&(r=le(r));var a,o;if("string"==typeof t){var s;o=vi.getTagNamespace(t),a=vi.isReservedTag(t)?new Qi(vi.parsePlatformTagName(t),n,r,void 0,void 0,e):(s=I(e.$options,"components",t))?z(s,n,e,r,t):new Qi(t,n,r,void 0,void 0,e)}else a=z(t,n,e,r);return a?(o&&he(a,o),a):ea()}function he(e,t){if(e.ns=t,"foreignObject"!==e.tag&&e.children)for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];i.tag&&!i.ns&&he(i,t)}}function me(e){e.$vnode=null,e._vnode=null,e._staticTrees=null;var t=e.$options._parentVnode,n=t&&t.context;e.$slots=ve(e.$options._renderChildren,n),e.$scopedSlots={},e._c=function(t,n,r,i){return de(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return de(e,t,n,r,i,!0)}}function ve(e,t){var n={};if(!e)return n;for(var r,i,a=[],o=0,s=e.length;o<s;o++)if(i=e[o],(i.context===t||i.functionalContext===t)&&i.data&&(r=i.data.slot)){var l=n[r]||(n[r]=[]);"template"===i.tag?l.push.apply(l,i.children):l.push(i)}else a.push(i);return a.length&&(1!==a.length||" "!==a[0].text&&!a[0].isComment)&&(n.default=a),n}function ge(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&xe(e,t)}function ye(e,t,n){n?Xi.$once(e,t):Xi.$on(e,t)}function be(e,t){Xi.$off(e,t)}function xe(e,t,n){Xi=e,se(t,n||{},ye,be,e)}function ke(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function we(e,t){var n=e.$options[t];if(n)for(var r=0,i=n.length;r<i;r++)n[r].call(e);e._hasHookEvent&&e.$emit("hook:"+t)}function _e(){sa.length=0,la={},ua={},ca=fa=!1}function Ce(){fa=!0;var e,t,n;for(sa.sort(function(e,t){return e.id-t.id}),da=0;da<sa.length;da++)if(e=sa[da],t=e.id,la[t]=null,e.run(),null!=la[t]&&(ua[t]=(ua[t]||0)+1,ua[t]>vi._maxUpdateCount)){Mi("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}for(da=sa.length;da--;)e=sa[da],n=e.vm,n._watcher===e&&n._isMounted&&we(n,"updated");Si&&vi.devtools&&Si.emit("flush"),_e()}function De(e){var t=e.id;if(null==la[t]){if(la[t]=!0,fa){for(var n=sa.length-1;n>=0&&sa[n].id>e.id;)n--;sa.splice(Math.max(n,da)+1,0,e)}else sa.push(e);ca||(ca=!0,Ai(Ce))}}function Ee(e){ma.clear(),Se(e,ma)}function Se(e,t){var n,r,i=Array.isArray(e);if((i||c(e))&&Object.isExtensible(e)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(n=e.length;n--;)Se(e[n],t);else for(r=Object.keys(e),n=r.length;n--;)Se(e[r[n]],t)}}function Ae(e){e._watchers=[];var t=e.$options;t.props&&Te(e,t.props),t.methods&&Pe(e,t.methods),t.data?Me(e):D(e._data={},!0),t.computed&&Oe(e,t.computed),t.watch&&Ne(e,t.watch)}function Te(e,t){var n=e.$options.propsData||{},r=e.$options._propKeys=Object.keys(t),i=!e.$parent;Ri.shouldConvert=i;for(var a=0;a<r.length;a++)!function(i){var a=r[i];va[a]&&Mi('"'+a+'" is a reserved attribute and cannot be used as component prop.',e),E(e,a,L(a,t,n,e),function(){e.$parent&&!Ri.isSettingProps&&Mi("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',e)})}(a);Ri.shouldConvert=!0}function Me(e){var t=e.$options.data;t=e._data="function"==typeof t?t.call(e):t||{},f(t)||(t={},Mi("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var n=Object.keys(t),r=e.$options.props,a=n.length;a--;)r&&i(r,n[a])?Mi('The data property "'+n[a]+'" is already declared as a prop. Use prop default value instead.',e):$e(e,n[a]);D(t,!0)}function Oe(e,t){for(var n in t){n in e&&Mi('existing instance property "'+n+'" will be overwritten by a computed property with the same name.',e);var r=t[n];"function"==typeof r?(ga.get=je(r,e),ga.set=p):(ga.get=r.get?!1!==r.cache?je(r.get,e):s(r.get,e):p,ga.set=r.set?s(r.set,e):p),Object.defineProperty(e,n,ga)}}function je(e,t){var n=new ha(t,e,p,{lazy:!0});return function(){return n.dirty&&n.evaluate(),Ni.target&&n.depend(),n.value}}function Pe(e,t){for(var n in t)e[n]=null==t[n]?p:s(t[n],e),null==t[n]&&Mi('method "'+n+'" has an undefined value in the component definition. Did you reference the function correctly?',e)}function Ne(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)Fe(e,n,r[i]);else Fe(e,n,r)}}function Fe(e,t,n){var r;f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function $e(e,t){g(t)||Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return e._data[t]},set:function(n){e._data[t]=n}})}function Ie(e,t){var n=e.$options=Object.create(e.constructor.options);n.parent=t.parent,n.propsData=t.propsData,n._parentVnode=t._parentVnode,n._parentListeners=t._parentListeners,n._renderChildren=t._renderChildren,n._componentTag=t._componentTag,n._parentElm=t._parentElm,n._refElm=t._refElm,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function Le(e){var t=e.options;if(e.super){var n=e.super.options,r=e.superOptions,i=e.extendOptions;n!==r&&(e.superOptions=n,i.render=t.render,i.staticRenderFns=t.staticRenderFns,i._scopeId=t._scopeId,t=e.options=$(n,i),t.name&&(t.components[t.name]=e))}return t}function Re(e){this instanceof Re||Mi("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function He(e){e.use=function(e){if(!e.installed){var t=l(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}}}function Be(e){e.mixin=function(e){this.options=$(this.options,e)}}function qe(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,i=e._Ctor||(e._Ctor={});if(i[r])return i[r];var a=e.name||n.options.name;/^[a-zA-Z][\w-]*$/.test(a)||Mi('Invalid component name: "'+a+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.');var o=function(e){this._init(e)};return o.prototype=Object.create(n.prototype),o.prototype.constructor=o,o.cid=t++,o.options=$(n.options,e),o.super=n,o.extend=n.extend,o.mixin=n.mixin,o.use=n.use,vi._assetTypes.forEach(function(e){o[e]=n[e]}),a&&(o.options.components[a]=o),o.superOptions=n.options,o.extendOptions=e,i[r]=o,o}}function Ue(e){vi._assetTypes.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&vi.isReservedTag(e)&&Mi("Do not use built-in or reserved HTML elements as component id: "+e),"component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}function Ye(e){return e&&(e.Ctor.options.name||e.tag)}function We(e,t){return"string"==typeof e?e.split(",").indexOf(t)>-1:e.test(t)}function Ve(e,t){for(var n in e){var r=e[n];if(r){var i=Ye(r.componentOptions);i&&!t(i)&&(ze(r),e[n]=null)}}}function ze(e){e&&(e.componentInstance._inactive||we(e.componentInstance,"deactivated"),e.componentInstance.$destroy())}function Ge(e){for(var t=e.data,n=e,r=e;r.componentInstance;)r=r.componentInstance._vnode,r.data&&(t=Ke(r.data,t));for(;n=n.parent;)n.data&&(t=Ke(t,n.data));return Je(t)}function Ke(e,t){return{staticClass:Qe(e.staticClass,t.staticClass),class:e.class?[e.class,t.class]:t.class}}function Je(e){var t=e.class,n=e.staticClass;return n||t?Qe(n,Ze(t)):""}function Qe(e,t){return e?t?e+" "+t:e:t||""}function Ze(e){var t="";if(!e)return t;if("string"==typeof e)return e;if(Array.isArray(e)){for(var n,r=0,i=e.length;r<i;r++)e[r]&&(n=Ze(e[r]))&&(t+=n+" ");return t.slice(0,-1)}if(c(e)){for(var a in e)e[a]&&(t+=a+" ");return t.slice(0,-1)}return t}function Xe(e){return Na(e)?"svg":"math"===e?"math":void 0}function et(e){if(!bi)return!0;if($a(e))return!1;if(e=e.toLowerCase(),null!=Ia[e])return Ia[e];var t=document.createElement(e);return e.indexOf("-")>-1?Ia[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Ia[e]=/HTMLUnknownElement/.test(t.toString())}function tt(e){if("string"==typeof e){var t=e;if(!(e=document.querySelector(e)))return Mi("Cannot find element: "+t),document.createElement("div")}return e}function nt(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&"multiple"in t.data.attrs&&n.setAttribute("multiple","multiple"),n)}function rt(e,t){return document.createElementNS(ja[e],t)}function it(e){return document.createTextNode(e)}function at(e){return document.createComment(e)}function ot(e,t,n){e.insertBefore(t,n)}function st(e,t){e.removeChild(t)}function lt(e,t){e.appendChild(t)}function ut(e){return e.parentNode}function ct(e){return e.nextSibling}function ft(e){return e.tagName}function dt(e,t){e.textContent=t}function pt(e,t,n){e.setAttribute(t,n)}function ht(e,t){var n=e.data.ref;if(n){var i=e.context,a=e.componentInstance||e.elm,o=i.$refs;t?Array.isArray(o[n])?r(o[n],a):o[n]===a&&(o[n]=void 0):e.data.refInFor?Array.isArray(o[n])&&o[n].indexOf(a)<0?o[n].push(a):o[n]=[a]:o[n]=a}}function mt(e){return null==e}function vt(e){return null!=e}function gt(e,t){return e.key===t.key&&e.tag===t.tag&&e.isComment===t.isComment&&!e.data==!t.data}function yt(e,t,n){var r,i,a={};for(r=t;r<=n;++r)i=e[r].key,vt(i)&&(a[i]=r);return a}function bt(e,t){(e.data.directives||t.data.directives)&&xt(e,t)}function xt(e,t){var n,r,i,a=e===Ha,o=t===Ha,s=kt(e.data.directives,e.context),l=kt(t.data.directives,t.context),u=[],c=[];for(n in l)r=s[n],i=l[n],r?(i.oldValue=r.value,_t(i,"update",t,e),i.def&&i.def.componentUpdated&&c.push(i)):(_t(i,"bind",t,e),i.def&&i.def.inserted&&u.push(i));if(u.length){var f=function(){for(var n=0;n<u.length;n++)_t(u[n],"inserted",t,e)};a?ae(t.data.hook||(t.data.hook={}),"insert",f,"dir-insert"):f()}if(c.length&&ae(t.data.hook||(t.data.hook={}),"postpatch",function(){for(var n=0;n<c.length;n++)_t(c[n],"componentUpdated",t,e)},"dir-postpatch"),!a)for(n in s)l[n]||_t(s[n],"unbind",e,e,o)}function kt(e,t){var n=Object.create(null);if(!e)return n;var r,i;for(r=0;r<e.length;r++)i=e[r],i.modifiers||(i.modifiers=Ua),n[wt(i)]=i,i.def=I(t.$options,"directives",i.name,!0);return n}function wt(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function _t(e,t,n,r,i){var a=e.def&&e.def[t];a&&a(n.elm,e,n,r,i)}function Ct(e,t){if(e.data.attrs||t.data.attrs){var n,r,i=t.elm,a=e.data.attrs||{},o=t.data.attrs||{};o.__ob__&&(o=t.data.attrs=u({},o));for(n in o)r=o[n],a[n]!==r&&Dt(i,n,r);wi&&o.value!==a.value&&Dt(i,"value",o.value);for(n in a)null==o[n]&&(Ta(n)?i.removeAttributeNS(Aa,Ma(n)):Ea(n)||i.removeAttribute(n))}}function Dt(e,t,n){Sa(t)?Oa(n)?e.removeAttribute(t):e.setAttribute(t,t):Ea(t)?e.setAttribute(t,Oa(n)||"false"===n?"false":"true"):Ta(t)?Oa(n)?e.removeAttributeNS(Aa,Ma(t)):e.setAttributeNS(Aa,t,n):Oa(n)?e.removeAttribute(t):e.setAttribute(t,n)}function Et(e,t){var n=t.elm,r=t.data,i=e.data;if(r.staticClass||r.class||i&&(i.staticClass||i.class)){var a=Ge(t),o=n._transitionClasses;o&&(a=Qe(a,Ze(o))),a!==n._prevClass&&(n.setAttribute("class",a),n._prevClass=a)}}function St(e,t,n,r){if(n){var i=t,a=wa;t=function(n){At(e,t,r,a),1===arguments.length?i(n):i.apply(null,arguments)}}wa.addEventListener(e,t,r)}function At(e,t,n,r){(r||wa).removeEventListener(e,t,n)}function Tt(e,t){if(e.data.on||t.data.on){var n=t.data.on||{},r=e.data.on||{};wa=t.elm,se(n,r,St,At,t.context)}}function Mt(e,t){if(e.data.domProps||t.data.domProps){var n,r,i=t.elm,a=e.data.domProps||{},o=t.data.domProps||{};o.__ob__&&(o=t.data.domProps=u({},o));for(n in a)null==o[n]&&(i[n]="");for(n in o)if(r=o[n],"textContent"!==n&&"innerHTML"!==n||(t.children&&(t.children.length=0),r!==a[n]))if("value"===n){i._value=r;var s=null==r?"":String(r);Ot(i,t,s)&&(i.value=s)}else i[n]=r}}function Ot(e,t,n){return!e.composing&&("option"===t.tag||jt(e,n)||Pt(t,n))}function jt(e,t){return document.activeElement!==e&&e.value!==t}function Pt(e,n){var r=e.elm.value,i=e.elm._vModifiers;return i&&i.number||"number"===e.elm.type?t(r)!==t(n):i&&i.trim?r.trim()!==n.trim():r!==n}function Nt(e){var t=Ft(e.style);return e.staticStyle?u(e.staticStyle,t):t}function Ft(e){return Array.isArray(e)?d(e):"string"==typeof e?Ka(e):e}function $t(e,t){var n,r={};if(t)for(var i=e;i.componentInstance;)i=i.componentInstance._vnode,i.data&&(n=Nt(i.data))&&u(r,n);(n=Nt(e.data))&&u(r,n);for(var a=e;a=a.parent;)a.data&&(n=Nt(a.data))&&u(r,n);return r}function It(e,t){var n=t.data,r=e.data;if(n.staticStyle||n.style||r.staticStyle||r.style){var i,a,o=t.elm,s=e.data.staticStyle,l=e.data.style||{},c=s||l,f=Ft(t.data.style)||{};t.data.style=f.__ob__?u({},f):f;var d=$t(t,!0);for(a in c)null==d[a]&&Za(o,a,"");for(a in d)(i=d[a])!==c[a]&&Za(o,a,null==i?"":i)}}function Lt(e,t){if(t&&t.trim())if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+e.getAttribute("class")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Rt(e,t){if(t&&t.trim())if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t);else{for(var n=" "+e.getAttribute("class")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");e.setAttribute("class",n.trim())}}function Ht(e){uo(function(){uo(e)})}function Bt(e,t){(e._transitionClasses||(e._transitionClasses=[])).push(t),Lt(e,t)}function qt(e,t){e._transitionClasses&&r(e._transitionClasses,t),Rt(e,t)}function Ut(e,t,n){var r=Yt(e,t),i=r.type,a=r.timeout,o=r.propCount;if(!i)return n();var s=i===ro?oo:lo,l=0,u=function(){e.removeEventListener(s,c),n()},c=function(t){t.target===e&&++l>=o&&u()};setTimeout(function(){l<o&&u()},a+1),e.addEventListener(s,c)}function Yt(e,t){var n,r=window.getComputedStyle(e),i=r[ao+"Delay"].split(", "),a=r[ao+"Duration"].split(", "),o=Wt(i,a),s=r[so+"Delay"].split(", "),l=r[so+"Duration"].split(", "),u=Wt(s,l),c=0,f=0;return t===ro?o>0&&(n=ro,c=o,f=a.length):t===io?u>0&&(n=io,c=u,f=l.length):(c=Math.max(o,u),n=c>0?o>u?ro:io:null,f=n?n===ro?a.length:l.length:0),{type:n,timeout:c,propCount:f,hasTransform:n===ro&&co.test(r[ao+"Property"])}}function Wt(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Vt(t)+Vt(e[n])}))}function Vt(e){return 1e3*Number(e.slice(0,-1))}function zt(e,t){var n=e.elm;n._leaveCb&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Kt(e.data.transition);if(r&&!n._enterCb&&1===n.nodeType){for(var i=r.css,a=r.type,o=r.enterClass,s=r.enterToClass,l=r.enterActiveClass,u=r.appearClass,c=r.appearToClass,f=r.appearActiveClass,d=r.beforeEnter,p=r.enter,h=r.afterEnter,m=r.enterCancelled,v=r.beforeAppear,g=r.appear,y=r.afterAppear,b=r.appearCancelled,x=oa,k=oa.$vnode;k&&k.parent;)k=k.parent,x=k.context;var w=!x._isMounted||!e.isRootInsert;if(!w||g||""===g){var _=w?u:o,C=w?f:l,D=w?c:s,E=w?v||d:d,S=w&&"function"==typeof g?g:p,A=w?y||h:h,T=w?b||m:m,M=!1!==i&&!wi,O=S&&(S._length||S.length)>1,j=n._enterCb=Jt(function(){M&&(qt(n,D),qt(n,C)),j.cancelled?(M&&qt(n,_),T&&T(n)):A&&A(n),n._enterCb=null});e.data.show||ae(e.data.hook||(e.data.hook={}),"insert",function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),S&&S(n,j)},"transition-insert"),E&&E(n),M&&(Bt(n,_),Bt(n,C),Ht(function(){Bt(n,D),qt(n,_),j.cancelled||O||Ut(n,a,j)})),e.data.show&&(t&&t(),S&&S(n,j)),M||O||j()}}}function Gt(e,t){function n(){g.cancelled||(e.data.show||((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),c&&c(r),m&&(Bt(r,s),Bt(r,u),Ht(function(){Bt(r,l),qt(r,s),g.cancelled||v||Ut(r,o,g)})),f&&f(r,g),m||v||g())}var r=e.elm;r._enterCb&&(r._enterCb.cancelled=!0,r._enterCb());var i=Kt(e.data.transition);if(!i)return t();if(!r._leaveCb&&1===r.nodeType){var a=i.css,o=i.type,s=i.leaveClass,l=i.leaveToClass,u=i.leaveActiveClass,c=i.beforeLeave,f=i.leave,d=i.afterLeave,p=i.leaveCancelled,h=i.delayLeave,m=!1!==a&&!wi,v=f&&(f._length||f.length)>1,g=r._leaveCb=Jt(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),m&&(qt(r,l),qt(r,u)),g.cancelled?(m&&qt(r,s),p&&p(r)):(t(),d&&d(r)),r._leaveCb=null});h?h(n):n()}}function Kt(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&u(t,fo(e.name||"v")),u(t,e),t}return"string"==typeof e?fo(e):void 0}}function Jt(e){var t=!1;return function(){t||(t=!0,e())}}function Qt(e,t){t.data.show||zt(t)}function Zt(e,t,n){var r=t.value,i=e.multiple;if(i&&!Array.isArray(r))return void Mi('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n);for(var a,o,s=0,l=e.options.length;s<l;s++)if(o=e.options[s],i)a=v(r,en(o))>-1,o.selected!==a&&(o.selected=a);else if(m(en(o),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}function Xt(e,t){for(var n=0,r=t.length;n<r;n++)if(m(en(t[n]),e))return!1;return!0}function en(e){return"_value"in e?e._value:e.value}function tn(e){e.target.composing=!0}function nn(e){e.target.composing=!1,rn(e.target,"input")}function rn(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function an(e){return!e.componentInstance||e.data&&e.data.transition?e:an(e.componentInstance._vnode)}function on(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?on(fe(t.children)):e}function sn(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var a in i)t[li(a)]=i[a].fn;return t}function ln(e,t){return/\d-keep-alive$/.test(t.tag)?e("keep-alive"):null}function un(e){for(;e=e.parent;)if(e.data.transition)return!0}function cn(e,t){return t.key===e.key&&t.tag===e.tag}function fn(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function dn(e){e.data.newPos=e.elm.getBoundingClientRect()}function pn(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+i+"px)",a.transitionDuration="0s"}}function hn(e){return Eo=Eo||document.createElement("div"),Eo.innerHTML=e,Eo.textContent}function mn(e,t){return t&&(e=e.replace(bs,"\n")),e.replace(gs,"<").replace(ys,">").replace(xs,"&").replace(ks,'"')}function vn(e,t){function n(t){u+=t,e=e.substring(t)}function r(e,n,r){var i,s;if(null==n&&(n=u),null==r&&(r=u),e&&(s=e.toLowerCase()),e)for(i=o.length-1;i>=0&&o[i].lowerCasedTag!==s;i--);else i=0;if(i>=0){for(var l=o.length-1;l>=i;l--)t.end&&t.end(o[l].tag,n,r);o.length=i,a=i&&o[i-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,r):"p"===s&&(t.start&&t.start(e,[],!1,n,r),t.end&&t.end(e,n,r))}for(var i,a,o=[],s=t.expectHTML,l=t.isUnaryTag||hi,u=0;e;){if(i=e,a&&ms(a)){var c=a.toLowerCase(),f=vs[c]||(vs[c]=new RegExp("([\\s\\S]*?)(</"+c+"[^>]*>)","i")),d=0,p=e.replace(f,function(e,n,r){return d=r.length,"script"!==c&&"style"!==c&&"noscript"!==c&&(n=n.replace(/<!--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),t.chars&&t.chars(n),""});u+=e.length-p.length,e=p,r(c,u-d,u)}else{var h=e.indexOf("<");if(0===h){if(Bo.test(e)){var m=e.indexOf("--\x3e");if(m>=0){n(m+3);continue}}if(qo.test(e)){var v=e.indexOf("]>");if(v>=0){n(v+2);continue}}var g=e.match(Ho);if(g){n(g[0].length);continue}var y=e.match(Ro);if(y){var b=u;n(y[0].length),r(y[1],b,u);continue}var x=function(){var t=e.match(Io);if(t){var r={tagName:t[1],attrs:[],start:u};n(t[0].length);for(var i,a;!(i=e.match(Lo))&&(a=e.match(No));)n(a[0].length),r.attrs.push(a);if(i)return r.unarySlash=i[1],n(i[0].length),r.end=u,r}}();if(x){!function(e){var n=e.tagName,i=e.unarySlash;s&&("p"===a&&Mo(n)&&r(a),To(n)&&a===n&&r(n));for(var u=l(n)||"html"===n&&"head"===a||!!i,c=e.attrs.length,f=new Array(c),d=0;d<c;d++){var p=e.attrs[d];Uo&&-1===p[0].indexOf('""')&&(""===p[3]&&delete p[3],""===p[4]&&delete p[4],""===p[5]&&delete p[5]);var h=p[3]||p[4]||p[5]||"";f[d]={name:p[1],value:mn(h,t.shouldDecodeNewlines)}}u||(o.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f}),a=n,i=""),t.start&&t.start(n,f,u,e.start,e.end)}(x);continue}}var k=void 0,w=void 0,_=void 0;if(h>0){for(w=e.slice(h);!(Ro.test(w)||Io.test(w)||Bo.test(w)||qo.test(w)||(_=w.indexOf("<",1))<0);)h+=_,w=e.slice(h);k=e.substring(0,h),n(h)}h<0&&(k=e,e=""),t.chars&&k&&t.chars(k)}if(e===i&&t.chars){t.chars(e);break}}r()}function gn(e){function t(){(o||(o=[])).push(e.slice(h,i).trim()),h=i+1}var n,r,i,a,o,s=!1,l=!1,u=!1,c=!1,f=0,d=0,p=0,h=0;for(i=0;i<e.length;i++)if(r=n,n=e.charCodeAt(i),s)39===n&&92!==r&&(s=!1);else if(l)34===n&&92!==r&&(l=!1);else if(u)96===n&&92!==r&&(u=!1);else if(c)47===n&&92!==r&&(c=!1);else if(124!==n||124===e.charCodeAt(i+1)||124===e.charCodeAt(i-1)||f||d||p){switch(n){case 34:l=!0;break;case 39:s=!0;break;case 96:u=!0;break;case 40:p++;break;case 41:p--;break;case 91:d++;break;case 93:d--;break;case 123:f++;break;case 125:f--}if(47===n){for(var m=i-1,v=void 0;m>=0&&" "===(v=e.charAt(m));m--);v&&/[\w$]/.test(v)||(c=!0)}}else void 0===a?(h=i+1,a=e.slice(0,i).trim()):t();if(void 0===a?a=e.slice(0,i).trim():0!==h&&t(),o)for(i=0;i<o.length;i++)a=yn(a,o[i]);return a}function yn(e,t){var n=t.indexOf("(");return n<0?'_f("'+t+'")('+e+")":'_f("'+t.slice(0,n)+'")('+e+","+t.slice(n+1)}function bn(e,t){var n=t?Cs(t):ws;if(n.test(e)){for(var r,i,a=[],o=n.lastIndex=0;r=n.exec(e);){i=r.index,i>o&&a.push(JSON.stringify(e.slice(o,i)));var s=gn(r[1].trim());a.push("_s("+s+")"),o=i+r[0].length}return o<e.length&&a.push(JSON.stringify(e.slice(o))),a.join("+")}}function xn(e){console.error("[Vue parser]: "+e)}function kn(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function wn(e,t,n){(e.props||(e.props=[])).push({name:t,value:n})}function _n(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n})}function Cn(e,t,n,r,i,a){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:r,arg:i,modifiers:a})}function Dn(e,t,n,r,i){r&&r.capture&&(delete r.capture,t="!"+t),r&&r.once&&(delete r.once,t="~"+t);var a;r&&r.native?(delete r.native,a=e.nativeEvents||(e.nativeEvents={})):a=e.events||(e.events={});var o={value:n,modifiers:r},s=a[t];Array.isArray(s)?i?s.unshift(o):s.push(o):a[t]=s?i?[o,s]:[s,o]:o}function En(e,t,n){var r=Sn(e,":"+t)||Sn(e,"v-bind:"+t);if(null!=r)return gn(r);if(!1!==n){var i=Sn(e,t);if(null!=i)return JSON.stringify(i)}}function Sn(e,t){var n;if(null!=(n=e.attrsMap[t]))for(var r=e.attrsList,i=0,a=r.length;i<a;i++)if(r[i].name===t){r.splice(i,1);break}return n}function An(e){if(Wo=e,Yo=Wo.length,zo=Go=Ko=0,e.indexOf("[")<0||e.lastIndexOf("]")<Yo-1)return{exp:e,idx:null};for(;!Mn();)Vo=Tn(),On(Vo)?Pn(Vo):91===Vo&&jn(Vo);return{exp:e.substring(0,Go),idx:e.substring(Go+1,Ko)}}function Tn(){return Wo.charCodeAt(++zo)}function Mn(){return zo>=Yo}function On(e){return 34===e||39===e}function jn(e){var t=1;for(Go=zo;!Mn();)if(e=Tn(),On(e))Pn(e);else if(91===e&&t++,93===e&&t--,0===t){Ko=zo;break}}function Pn(e){for(var t=e;!Mn()&&(e=Tn())!==t;);}function Nn(e,t){Jo=t.warn||xn,Qo=t.getTagNamespace||hi,Zo=t.mustUseProp||hi,Xo=t.isPreTag||hi,es=kn(t.modules,"preTransformNode"),ts=kn(t.modules,"transformNode"),ns=kn(t.modules,"postTransformNode"),rs=t.delimiters;var n,r,i=[],a=!1!==t.preserveWhitespace,o=!1,s=!1,l=!1;return vn(e,{expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,shouldDecodeNewlines:t.shouldDecodeNewlines,start:function(a,u,c){function f(t){l||("slot"!==t.tag&&"template"!==t.tag||(l=!0,Jo("Cannot use <"+t.tag+"> as component root element because it may contain multiple nodes:\n"+e)),t.attrsMap.hasOwnProperty("v-for")&&(l=!0,Jo("Cannot use v-for on stateful component root element because it renders multiple elements:\n"+e)))}var d=r&&r.ns||Qo(a);ki&&"svg"===d&&(u=Zn(u));var p={type:1,tag:a,attrsList:u,attrsMap:Jn(u),parent:r,children:[]};d&&(p.ns=d),Qn(p)&&!Ei()&&(p.forbidden=!0,Jo("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+a+">, as they will not be parsed."));for(var h=0;h<es.length;h++)es[h](p,t);if(o||(Fn(p),p.pre&&(o=!0)),Xo(p.tag)&&(s=!0),o)$n(p);else{Rn(p),Hn(p),Yn(p),In(p),p.plain=!p.key&&!u.length,Ln(p),Wn(p),Vn(p);for(var m=0;m<ts.length;m++)ts[m](p,t);zn(p)}if(n?i.length||(n.if&&(p.elseif||p.else)?(f(p),Un(n,{exp:p.elseif,block:p})):l||(l=!0,Jo("Component template should contain exactly one root element:\n\n"+e+"\n\nIf you are using v-if on multiple elements, use v-else-if to chain them instead."))):(n=p,f(n)),r&&!p.forbidden)if(p.elseif||p.else)Bn(p,r);else if(p.slotScope){r.plain=!1;var v=p.slotTarget||"default";(r.scopedSlots||(r.scopedSlots={}))[v]=p}else r.children.push(p),p.parent=r;c||(r=p,i.push(p));for(var g=0;g<ns.length;g++)ns[g](p,t)},end:function(){var e=i[i.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&e.children.pop(),i.length-=1,r=i[i.length-1],e.pre&&(o=!1),Xo(e.tag)&&(s=!1)},chars:function(t){if(!r)return void(l||t!==e||(l=!0,Jo("Component template requires a root element, rather than just text:\n\n"+e)));if(!ki||"textarea"!==r.tag||r.attrsMap.placeholder!==t){var n=r.children;if(t=s||t.trim()?js(t):a&&n.length?" ":""){var i;!o&&" "!==t&&(i=bn(t,rs))?n.push({type:2,expression:i,text:t}):" "===t&&" "===n[n.length-1].text||r.children.push({type:3,text:t})}}}}),n}function Fn(e){null!=Sn(e,"v-pre")&&(e.pre=!0)}function $n(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}function In(e){var t=En(e,"key");t&&("template"===e.tag&&Jo("<template> cannot be keyed. Place the key on real elements instead."),e.key=t)}function Ln(e){var t=En(e,"ref");t&&(e.ref=t,e.refInFor=Gn(e))}function Rn(e){var t;if(t=Sn(e,"v-for")){var n=t.match(Es);if(!n)return void Jo("Invalid v-for expression: "+t);e.for=n[2].trim();var r=n[1].trim(),i=r.match(Ss);i?(e.alias=i[1].trim(),e.iterator1=i[2].trim(),i[3]&&(e.iterator2=i[3].trim())):e.alias=r}}function Hn(e){var t=Sn(e,"v-if");if(t)e.if=t,Un(e,{exp:t,block:e});else{null!=Sn(e,"v-else")&&(e.else=!0);var n=Sn(e,"v-else-if");n&&(e.elseif=n)}}function Bn(e,t){var n=qn(t.children);n&&n.if?Un(n,{exp:e.elseif,block:e}):Jo("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.")}function qn(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&Jo('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.'),e.pop()}}function Un(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function Yn(e){null!=Sn(e,"v-once")&&(e.once=!0)}function Wn(e){if("slot"===e.tag)e.slotName=En(e,"name"),e.key&&Jo("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.");else{var t=En(e,"slot");t&&(e.slotTarget='""'===t?'"default"':t),"template"===e.tag&&(e.slotScope=Sn(e,"scope"))}}function Vn(e){var t;(t=En(e,"is"))&&(e.component=t),null!=Sn(e,"inline-template")&&(e.inlineTemplate=!0)}function zn(e){var t,n,r,i,a,o,s,l,u=e.attrsList;for(t=0,n=u.length;t<n;t++)if(r=i=u[t].name,a=u[t].value,Ds.test(r))if(e.hasBindings=!0,s=Kn(r),s&&(r=r.replace(Os,"")),As.test(r))r=r.replace(As,""),a=gn(a),l=!1,s&&(s.prop&&(l=!0,"innerHtml"===(r=li(r))&&(r="innerHTML")),s.camel&&(r=li(r))),l||Zo(e.tag,e.attrsMap.type,r)?wn(e,r,a):_n(e,r,a);else if(Ts.test(r))r=r.replace(Ts,""),Dn(e,r,a,s);else{r=r.replace(Ds,"");var c=r.match(Ms);c&&(o=c[1])&&(r=r.slice(0,-(o.length+1))),Cn(e,r,i,a,o,s),"model"===r&&Xn(e,a)}else{var f=bn(a,rs);f&&Jo(r+'="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.'),_n(e,r,JSON.stringify(a))}}function Gn(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function Kn(e){var t=e.match(Os);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function Jn(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]&&!ki&&Jo("duplicate attribute: "+e[n].name),t[e[n].name]=e[n].value;return t}function Qn(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}function Zn(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];Ps.test(r.name)||(r.name=r.name.replace(Ns,""),t.push(r))}return t}function Xn(e,t){for(var n=e;n;)n.for&&n.alias===t&&Jo("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.'),n=n.parent}function er(e,t){e&&(is=Fs(t.staticKeys||""),as=t.isReservedTag||hi,nr(e),rr(e,!1))}function tr(e){return n("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))}function nr(e){if(e.static=ar(e),1===e.type){if(!as(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];nr(r),r.static||(e.static=!1)}}}function rr(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,r=e.children.length;n<r;n++)rr(e.children[n],t||!!e.for);e.ifConditions&&ir(e.ifConditions,t)}}function ir(e,t){for(var n=1,r=e.length;n<r;n++)rr(e[n].block,t)}function ar(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||ai(e.tag)||!as(e.tag)||or(e)||!Object.keys(e).every(is))))}function or(e){for(;e.parent;){if(e=e.parent,"template"!==e.tag)return!1;if(e.for)return!0}return!1}function sr(e,t){
var n=t?"nativeOn:{":"on:{";for(var r in e)n+='"'+r+'":'+lr(r,e[r])+",";return n.slice(0,-1)+"}"}function lr(e,t){if(t){if(Array.isArray(t))return"["+t.map(function(t){return lr(e,t)}).join(",")+"]";if(t.modifiers){var n="",r=[];for(var i in t.modifiers)Rs[i]?n+=Rs[i]:r.push(i);r.length&&(n=ur(r)+n);return"function($event){"+n+(Is.test(t.value)?t.value+"($event)":t.value)+"}"}return $s.test(t.value)||Is.test(t.value)?t.value:"function($event){"+t.value+"}"}return"function(){}"}function ur(e){return"if("+e.map(cr).join("&&")+")return;"}function cr(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Ls[e];return"_k($event.keyCode,"+JSON.stringify(e)+(n?","+JSON.stringify(n):"")+")"}function fr(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+(t.modifiers&&t.modifiers.prop?",true":"")+")"}}function dr(e,t){var n=fs,r=fs=[],i=ds;ds=0,ps=t,os=t.warn||xn,ss=kn(t.modules,"transformCode"),ls=kn(t.modules,"genData"),us=t.directives||{},cs=t.isReservedTag||hi;var a=e?pr(e):'_c("div")';return fs=n,ds=i,{render:"with(this){return "+a+"}",staticRenderFns:r}}function pr(e){if(e.staticRoot&&!e.staticProcessed)return hr(e);if(e.once&&!e.onceProcessed)return mr(e);if(e.for&&!e.forProcessed)return yr(e);if(e.if&&!e.ifProcessed)return vr(e);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return Mr(e);var t;if(e.component)t=Or(e.component,e);else{var n=e.plain?void 0:br(e),r=e.inlineTemplate?null:Cr(e,!0);t="_c('"+e.tag+"'"+(n?","+n:"")+(r?","+r:"")+")"}for(var i=0;i<ss.length;i++)t=ss[i](e,t);return t}return Cr(e)||"void 0"}function hr(e){return e.staticProcessed=!0,fs.push("with(this){return "+pr(e)+"}"),"_m("+(fs.length-1)+(e.staticInFor?",true":"")+")"}function mr(e){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return vr(e);if(e.staticInFor){for(var t="",n=e.parent;n;){if(n.for){t=n.key;break}n=n.parent}return t?"_o("+pr(e)+","+ds+++(t?","+t:"")+")":(os("v-once can only be used inside v-for that is keyed. "),pr(e))}return hr(e)}function vr(e){return e.ifProcessed=!0,gr(e.ifConditions.slice())}function gr(e){function t(e){return e.once?mr(e):pr(e)}if(!e.length)return"_e()";var n=e.shift();return n.exp?"("+n.exp+")?"+t(n.block)+":"+gr(e):""+t(n.block)}function yr(e){var t=e.for,n=e.alias,r=e.iterator1?","+e.iterator1:"",i=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,"_l(("+t+"),function("+n+r+i+"){return "+pr(e)+"})"}function br(e){var t="{",n=xr(e);n&&(t+=n+","),e.key&&(t+="key:"+e.key+","),e.ref&&(t+="ref:"+e.ref+","),e.refInFor&&(t+="refInFor:true,"),e.pre&&(t+="pre:true,"),e.component&&(t+='tag:"'+e.tag+'",');for(var r=0;r<ls.length;r++)t+=ls[r](e);if(e.attrs&&(t+="attrs:{"+jr(e.attrs)+"},"),e.props&&(t+="domProps:{"+jr(e.props)+"},"),e.events&&(t+=sr(e.events)+","),e.nativeEvents&&(t+=sr(e.nativeEvents,!0)+","),e.slotTarget&&(t+="slot:"+e.slotTarget+","),e.scopedSlots&&(t+=wr(e.scopedSlots)+","),e.inlineTemplate){var i=kr(e);i&&(t+=i+",")}return t=t.replace(/,$/,"")+"}",e.wrapData&&(t=e.wrapData(t)),t}function xr(e){var t=e.directives;if(t){var n,r,i,a,o="directives:[",s=!1;for(n=0,r=t.length;n<r;n++){i=t[n],a=!0;var l=us[i.name]||Hs[i.name];l&&(a=!!l(e,i,os)),a&&(s=!0,o+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?',arg:"'+i.arg+'"':"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return s?o.slice(0,-1)+"]":void 0}}function kr(e){var t=e.children[0];if((e.children.length>1||1!==t.type)&&os("Inline-template components must have exactly one child element."),1===t.type){var n=dr(t,ps);return"inlineTemplate:{render:function(){"+n.render+"},staticRenderFns:["+n.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function wr(e){return"scopedSlots:{"+Object.keys(e).map(function(t){return _r(t,e[t])}).join(",")+"}"}function _r(e,t){return e+":function("+String(t.attrsMap.scope)+"){return "+("template"===t.tag?Cr(t)||"void 0":pr(t))+"}"}function Cr(e,t){var n=e.children;if(n.length){var r=n[0];if(1===n.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag)return pr(r);var i=Dr(n);return"["+n.map(Ar).join(",")+"]"+(t&&i?","+i:"")}}function Dr(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];if(1===r.type){if(Er(r)||r.ifConditions&&r.ifConditions.some(function(e){return Er(e.block)})){t=2;break}(Sr(r)||r.ifConditions&&r.ifConditions.some(function(e){return Sr(e.block)}))&&(t=1)}}return t}function Er(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Sr(e){return!cs(e.tag)}function Ar(e){return 1===e.type?pr(e):Tr(e)}function Tr(e){return"_v("+(2===e.type?e.expression:Pr(JSON.stringify(e.text)))+")"}function Mr(e){var t=e.slotName||'"default"',n=Cr(e),r="_t("+t+(n?","+n:""),i=e.attrs&&"{"+e.attrs.map(function(e){return li(e.name)+":"+e.value}).join(",")+"}",a=e.attrsMap["v-bind"];return!i&&!a||n||(r+=",null"),i&&(r+=","+i),a&&(r+=(i?"":",null")+","+a),r+")"}function Or(e,t){var n=t.inlineTemplate?null:Cr(t,!0);return"_c("+e+","+br(t)+(n?","+n:"")+")"}function jr(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+Pr(r.value)+","}return t.slice(0,-1)}function Pr(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function Nr(e,t){var n=Nn(e.trim(),t);er(n,t);var r=dr(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}}function Fr(e){var t=[];return e&&$r(e,t),t}function $r(e,t){if(1===e.type){for(var n in e.attrsMap)if(Ds.test(n)){var r=e.attrsMap[n];r&&("v-for"===n?Ir(e,'v-for="'+r+'"',t):Rr(r,n+'="'+r+'"',t))}if(e.children)for(var i=0;i<e.children.length;i++)$r(e.children[i],t)}else 2===e.type&&Rr(e.expression,e.text,t)}function Ir(e,t,n){Rr(e.for||"",t,n),Lr(e.alias,"v-for alias",t,n),Lr(e.iterator1,"v-for iterator",t,n),Lr(e.iterator2,"v-for iterator",t,n)}function Lr(e,t,n,r){"string"!=typeof e||qs.test(e)||r.push("- invalid "+t+' "'+e+'" in expression: '+n)}function Rr(e,t,n){try{new Function("return "+e)}catch(i){var r=e.replace(Us,"").match(Bs);r?n.push('- avoid using JavaScript keyword as property name: "'+r[0]+'" in expression '+t):n.push("- invalid expression: "+t)}}function Hr(e,t){var n=t.warn||xn,r=Sn(e,"class");if(r){bn(r,t.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.')}r&&(e.staticClass=JSON.stringify(r));var i=En(e,"class",!1);i&&(e.classBinding=i)}function Br(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}function qr(e,t){var n=t.warn||xn,r=Sn(e,"style");if(r){bn(r,t.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.'),e.staticStyle=JSON.stringify(Ka(r))}var i=En(e,"style",!1);i&&(e.styleBinding=i)}function Ur(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}function Yr(e,t,n){hs=n;var r=t.value,i=t.modifiers,a=e.tag,o=e.attrsMap.type,s=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];return"input"===a&&s&&hs('<input :type="'+s+'" v-model="'+r+'">:\nv-model does not support dynamic input types. Use v-if branches instead.'),"select"===a?Gr(e,r,i):"input"===a&&"checkbox"===o?Wr(e,r,i):"input"===a&&"radio"===o?Vr(e,r,i):zr(e,r,i),!0}function Wr(e,t,n){null!=e.attrsMap.checked&&hs("<"+e.tag+' v-model="'+t+"\" checked>:\ninline checked attributes will be ignored when using v-model. Declare initial values in the component's data option instead.");var r=n&&n.number,i=En(e,"value")||"null",a=En(e,"true-value")||"true",o=En(e,"false-value")||"false";wn(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===a?":("+t+")":":_q("+t+","+a+")")),Dn(e,"click","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+o+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$c){$$i<0&&("+t+"=$$a.concat($$v))}else{$$i>-1&&("+t+"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{"+t+"=$$c}",null,!0)}function Vr(e,t,n){null!=e.attrsMap.checked&&hs("<"+e.tag+' v-model="'+t+"\" checked>:\ninline checked attributes will be ignored when using v-model. Declare initial values in the component's data option instead.");var r=n&&n.number,i=En(e,"value")||"null";i=r?"_n("+i+")":i,wn(e,"checked","_q("+t+","+i+")"),Dn(e,"click",Jr(t,i),null,!0)}function zr(e,t,n){"input"===e.tag&&e.attrsMap.value&&hs("<"+e.tag+' v-model="'+t+'" value="'+e.attrsMap.value+"\">:\ninline value attributes will be ignored when using v-model. Declare initial values in the component's data option instead."),"textarea"===e.tag&&e.children.length&&hs('<textarea v-model="'+t+"\">:\ninline content inside <textarea> will be ignored when using v-model. Declare initial values in the component's data option instead.");var r=e.attrsMap.type,i=n||{},a=i.lazy,o=i.number,s=i.trim,l=a||ki&&"range"===r?"change":"input",u=!a&&"range"!==r,c="input"===e.tag||"textarea"===e.tag,f=c?"$event.target.value"+(s?".trim()":""):s?"(typeof $event === 'string' ? $event.trim() : $event)":"$event";f=o||"number"===r?"_n("+f+")":f;var d=Jr(t,f);c&&u&&(d="if($event.target.composing)return;"+d),"file"===r&&hs("<"+e.tag+' v-model="'+t+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.'),wn(e,"value",c?"_s("+t+")":"("+t+")"),Dn(e,l,d,null,!0),(s||o||"number"===r)&&Dn(e,"blur","$forceUpdate()")}function Gr(e,t,n){e.children.some(Kr),Dn(e,"change",Jr(t,'Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"})"+(null==e.attrsMap.multiple?"[0]":"")),null,!0)}function Kr(e){return 1===e.type&&"option"===e.tag&&null!=e.attrsMap.selected&&(hs('<select v-model="'+e.parent.attrsMap["v-model"]+"\">:\ninline selected attributes on <option> will be ignored when using v-model. Declare initial values in the component's data option instead."),!0)}function Jr(e,t){var n=An(e);return null===n.idx?e+"="+t:"var $$exp = "+n.exp+", $$idx = "+n.idx+";if (!Array.isArray($$exp)){"+e+"="+t+"}else{$$exp.splice($$idx, 1, "+t+")}"}function Qr(e,t){t.value&&wn(e,"textContent","_s("+t.value+")")}function Zr(e,t){t.value&&wn(e,"innerHTML","_s("+t.value+")")}function Xr(e,t){return t=t?u(u({},Ks),t):Ks,Nr(e,t)}function ei(e,t,n){var r=t&&t.warn||Mi;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&r("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var i=t&&t.delimiters?String(t.delimiters)+e:e;if(Gs[i])return Gs[i];var a={},o=Xr(e,t);a.render=ti(o.render);var s=o.staticRenderFns.length;a.staticRenderFns=new Array(s);for(var l=0;l<s;l++)a.staticRenderFns[l]=ti(o.staticRenderFns[l]);return(a.render===p||a.staticRenderFns.some(function(e){return e===p}))&&r("failed to compile template:\n\n"+e+"\n\n"+Fr(o.ast).join("\n")+"\n\n",n),Gs[i]=a}function ti(e){try{return new Function(e)}catch(e){return p}}function ni(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}var ri,ii,ai=n("slot,component",!0),oi=Object.prototype.hasOwnProperty,si=/-(\w)/g,li=o(function(e){return e.replace(si,function(e,t){return t?t.toUpperCase():""})}),ui=o(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),ci=/([^-])([A-Z])/g,fi=o(function(e){return e.replace(ci,"$1-$2").replace(ci,"$1-$2").toLowerCase()}),di=Object.prototype.toString,pi="[object Object]",hi=function(){return!1},mi=function(e){return e},vi={optionMergeStrategies:Object.create(null),silent:!1,devtools:!0,errorHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:hi,isUnknownElement:hi,getTagNamespace:p,parsePlatformTagName:mi,mustUseProp:hi,_assetTypes:["component","directive","filter"],_lifecycleHooks:["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],_maxUpdateCount:100},gi=/[^\w.$]/,yi="__proto__"in{},bi="undefined"!=typeof window,xi=bi&&window.navigator.userAgent.toLowerCase(),ki=xi&&/msie|trident/.test(xi),wi=xi&&xi.indexOf("msie 9.0")>0,_i=xi&&xi.indexOf("edge/")>0,Ci=xi&&xi.indexOf("android")>0,Di=xi&&/iphone|ipad|ipod|ios/.test(xi),Ei=function(){return void 0===ri&&(ri=!bi&&"undefined"!=typeof global&&"server"===global.process.env.VUE_ENV),ri},Si=bi&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Ai=function(){function e(){r=!1;var e=n.slice(0);n.length=0;for(var t=0;t<e.length;t++)e[t]()}var t,n=[],r=!1;if("undefined"!=typeof Promise&&x(Promise)){var i=Promise.resolve(),a=function(e){console.error(e)};t=function(){i.then(e).catch(a),Di&&setTimeout(p)}}else if("undefined"==typeof MutationObserver||!x(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())t=function(){setTimeout(e,0)};else{var o=1,s=new MutationObserver(e),l=document.createTextNode(String(o));s.observe(l,{characterData:!0}),t=function(){o=(o+1)%2,l.data=String(o)}}return function(e,i){var a;if(n.push(function(){e&&e.call(i),a&&a(i)}),r||(r=!0,t()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){a=e})}}();ii="undefined"!=typeof Set&&x(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var Ti,Mi=p,Oi="undefined"!=typeof console;Mi=function(e,t){Oi&&!vi.silent&&console.error("[Vue warn]: "+e+" "+(t?ji(Ti(t)):""))},Ti=function(e){if(e.$root===e)return"root instance";var t=e._isVue?e.$options.name||e.$options._componentTag:e.name;return(t?"component <"+t+">":"anonymous component")+(e._isVue&&e.$options.__file?" at "+e.$options.__file:"")};var ji=function(e){return"anonymous component"===e&&(e+=' - use the "name" option for better debugging messages.'),"\n(found in "+e+")"},Pi=0,Ni=function(){this.id=Pi++,this.subs=[]};Ni.prototype.addSub=function(e){this.subs.push(e)},Ni.prototype.removeSub=function(e){r(this.subs,e)},Ni.prototype.depend=function(){Ni.target&&Ni.target.addDep(this)},Ni.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},Ni.target=null;var Fi=[],$i=Array.prototype,Ii=Object.create($i);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=$i[e];y(Ii,e,function(){for(var n=arguments,r=arguments.length,i=new Array(r);r--;)i[r]=n[r];var a,o=t.apply(this,i),s=this.__ob__;switch(e){case"push":case"unshift":a=i;break;case"splice":a=i.slice(2)}return a&&s.observeArray(a),s.dep.notify(),o})});var Li=Object.getOwnPropertyNames(Ii),Ri={shouldConvert:!0,isSettingProps:!1},Hi=function(e){if(this.value=e,this.dep=new Ni,this.vmCount=0,y(e,"__ob__",this),Array.isArray(e)){(yi?_:C)(e,Ii,Li),this.observeArray(e)}else this.walk(e)};Hi.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)E(e,t[n],e[t[n]])},Hi.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)D(e[t])};var Bi=vi.optionMergeStrategies;Bi.el=Bi.propsData=function(e,t,n,r){return n||Mi('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Ui(e,t)},Bi.data=function(e,t,n){return n?e||t?function(){var r="function"==typeof t?t.call(n):t,i="function"==typeof e?e.call(n):void 0;return r?M(r,i):i}:void 0:t?"function"!=typeof t?(Mi('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):e?function(){return M(t.call(this),e.call(this))}:t:e},vi._lifecycleHooks.forEach(function(e){Bi[e]=O}),vi._assetTypes.forEach(function(e){Bi[e+"s"]=j}),Bi.watch=function(e,t){if(!t)return e;if(!e)return t;var n={};u(n,e);for(var r in t){var i=n[r],a=t[r];i&&!Array.isArray(i)&&(i=[i]),n[r]=i?i.concat(a):[a]}return n},Bi.props=Bi.methods=Bi.computed=function(e,t){if(!t)return e;if(!e)return t;var n=Object.create(null);return u(n,e),u(n,t),n};var qi,Ui=function(e,t){return void 0===t?e:t},Yi=Object.freeze({defineReactive:E,_toString:e,toNumber:t,makeMap:n,isBuiltInTag:ai,remove:r,hasOwn:i,isPrimitive:a,cached:o,camelize:li,capitalize:ui,hyphenate:fi,bind:s,toArray:l,extend:u,isObject:c,isPlainObject:f,toObject:d,noop:p,no:hi,identity:mi,genStaticKeys:h,looseEqual:m,looseIndexOf:v,isReserved:g,def:y,parsePath:b,hasProto:yi,inBrowser:bi,UA:xi,isIE:ki,isIE9:wi,isEdge:_i,isAndroid:Ci,isIOS:Di,isServerRendering:Ei,devtools:Si,nextTick:Ai,get _Set(){return ii},mergeOptions:$,resolveAsset:I,get warn(){return Mi},get formatComponentName(){return Ti},validateProp:L}),Wi=n("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Vi=function(e,t){Mi('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure to declare reactive data properties in the data option.',e)},zi="undefined"!=typeof Proxy&&Proxy.toString().match(/native code/);if(zi){var Gi=n("stop,prevent,self,ctrl,shift,alt,meta");vi.keyCodes=new Proxy(vi.keyCodes,{set:function(e,t,n){return Gi(t)?(Mi("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var Ki={has:function(e,t){var n=t in e,r=Wi(t)||"_"===t.charAt(0);return n||r||Vi(e,t),n||!r}},Ji={get:function(e,t){return"string"!=typeof t||t in e||Vi(e,t),e[t]}};qi=function(e){if(zi){var t=e.$options,n=t.render&&t.render._withStripped?Ji:Ki;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Qi=function(e,t,n,r,i,a,o){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=a,this.functionalContext=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1},Zi={child:{}};Zi.child.get=function(){return this.componentInstance},Object.defineProperties(Qi.prototype,Zi);var Xi,ea=function(){var e=new Qi;return e.text="",e.isComment=!0,e},ta={init:J,prepatch:Q,insert:Z,destroy:X},na=Object.keys(ta),ra=o(function(e){var t="~"===e.charAt(0);e=t?e.slice(1):e;var n="!"===e.charAt(0);return e=n?e.slice(1):e,{name:e,once:t,capture:n}}),ia=1,aa=2,oa=null,sa=[],la={},ua={},ca=!1,fa=!1,da=0,pa=0,ha=function(e,t,n,r){this.vm=e,e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++pa,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ii,this.newDepIds=new ii,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=b(t),this.getter||(this.getter=function(){},Mi('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};ha.prototype.get=function(){k(this);var e=this.getter.call(this.vm,this.vm);return this.deep&&Ee(e),w(),this.cleanupDeps(),e},ha.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},ha.prototype.cleanupDeps=function(){for(var e=this,t=this.deps.length;t--;){var n=e.deps[t];e.newDepIds.has(n.id)||n.removeSub(e)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},ha.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():De(this)},ha.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){if(!vi.errorHandler)throw Mi('Error in watcher "'+this.expression+'"',this.vm),e;vi.errorHandler.call(null,e,this.vm)}else this.cb.call(this.vm,e,t)}}},ha.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},ha.prototype.depend=function(){for(var e=this,t=this.deps.length;t--;)e.deps[t].depend()},ha.prototype.teardown=function(){var e=this;if(this.active){this.vm._isBeingDestroyed||r(this.vm._watchers,this);for(var t=this.deps.length;t--;)e.deps[t].removeSub(e);this.active=!1}};var ma=new ii,va={key:1,ref:1,slot:1},ga={enumerable:!0,configurable:!0,get:p,set:p},ya=0;!function(e){e.prototype._init=function(e){var t=this;t._uid=ya++,t._isVue=!0,e&&e._isComponent?Ie(t,e):t.$options=$(Le(t.constructor),e||{},t),qi(t),t._self=t,ke(t),ge(t),me(t),we(t,"beforeCreate"),Ae(t),we(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(Re),function(e){var t={};t.get=function(){return this._data},t.set=function(e){Mi("Avoid replacing instance root $data. Use nested data properties instead.",this)},Object.defineProperty(e.prototype,"$data",t),e.prototype.$set=S,e.prototype.$delete=A,e.prototype.$watch=function(e,t,n){var r=this;n=n||{},n.user=!0;var i=new ha(r,e,t,n);return n.immediate&&t.call(r,i.value),function(){i.teardown()}}}(Re),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;return(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0),r},e.prototype.$once=function(e,t){function n(){r.$off(e,n),t.apply(r,arguments)}var r=this;return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;var r=n._events[e];if(!r)return n;if(1===arguments.length)return n._events[e]=null,n;for(var i,a=r.length;a--;)if((i=r[a])===t||i.fn===t){r.splice(a,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?l(n):n;for(var r=l(arguments,1),i=0,a=n.length;i<a;i++)n[i].apply(t,r)}return t}}(Re),function(e){e.prototype._mount=function(e,t){var n=this;return n.$el=e,n.$options.render||(n.$options.render=ea,n.$options.template&&"#"!==n.$options.template.charAt(0)?Mi("You are using the runtime-only build of Vue where the template option is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",n):Mi("Failed to mount component: template or render function not defined.",n)),we(n,"beforeMount"),n._watcher=new ha(n,function(){n._update(n._render(),t)},p),t=!1,null==n.$vnode&&(n._isMounted=!0,we(n,"mounted")),n},e.prototype._update=function(e,t){var n=this;n._isMounted&&we(n,"beforeUpdate");var r=n.$el,i=n._vnode,a=oa;oa=n,n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1,n.$options._parentElm,n.$options._refElm),oa=a,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype._updateFromParent=function(e,t,n,r){var i=this,a=!(!i.$options._renderChildren&&!r);if(i.$options._parentVnode=n,i.$vnode=n,i._vnode&&(i._vnode.parent=n),i.$options._renderChildren=r,e&&i.$options.props){Ri.shouldConvert=!1,Ri.isSettingProps=!0;for(var o=i.$options._propKeys||[],s=0;s<o.length;s++){var l=o[s];i[l]=L(l,i.$options.props,e,i)}Ri.shouldConvert=!0,Ri.isSettingProps=!1,i.$options.propsData=e}if(t){var u=i.$options._parentListeners;i.$options._parentListeners=t,xe(i,t,u)}a&&(i.$slots=ve(r,n.context),i.$forceUpdate())},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){we(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||r(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,we(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.__patch__(e._vnode,null)}}}(Re),function(n){function r(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&i(e[r],t+"_"+r,n);else i(e,t,n)}function i(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}n.prototype.$nextTick=function(e){return Ai(e,this)},n.prototype._render=function(){var e=this,t=e.$options,n=t.render,r=t.staticRenderFns,i=t._parentVnode;if(e._isMounted)for(var a in e.$slots)e.$slots[a]=V(e.$slots[a]);i&&i.data.scopedSlots&&(e.$scopedSlots=i.data.scopedSlots),r&&!e._staticTrees&&(e._staticTrees=[]),e.$vnode=i;var o;try{o=n.call(e._renderProxy,e.$createElement)}catch(t){if(!vi.errorHandler)throw Mi("Error when rendering "+Ti(e)+":"),t;vi.errorHandler.call(null,t,e),o=e._vnode}return o instanceof Qi||(Array.isArray(o)&&Mi("Multiple root nodes returned from render function. Render function should return a single root node.",e),o=ea()),o.parent=i,o},n.prototype._s=e,n.prototype._v=Y,n.prototype._n=t,n.prototype._e=ea,n.prototype._q=m,n.prototype._i=v,n.prototype._m=function(e,t){var n=this._staticTrees[e];return n&&!t?Array.isArray(n)?V(n):W(n):(n=this._staticTrees[e]=this.$options.staticRenderFns[e].call(this._renderProxy),r(n,"__static__"+e,!1),n)},n.prototype._o=function(e,t,n){return r(e,"__once__"+t+(n?"_"+n:""),!0),e},n.prototype._f=function(e){return I(this.$options,"filters",e,!0)||mi},n.prototype._l=function(e,t){var n,r,i,a,o;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(c(e))for(a=Object.keys(e),n=new Array(a.length),r=0,i=a.length;r<i;r++)o=a[r],n[r]=t(e[o],o,r);return n},n.prototype._t=function(e,t,n,r){var i=this.$scopedSlots[e];if(i)return n=n||{},r&&u(n,r),i(n)||t;var a=this.$slots[e];return a&&(a._rendered&&Mi('Duplicate presence of slot "'+e+'" found in the same render tree - this will likely cause render errors.',this),a._rendered=!0),a||t},n.prototype._b=function(e,t,n,r){if(n)if(c(n)){Array.isArray(n)&&(n=d(n));for(var i in n)if("class"===i||"style"===i)e[i]=n[i];else{var a=e.attrs&&e.attrs.type,o=r||vi.mustUseProp(t,a,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={});o[i]=n[i]}}else Mi("v-bind without argument expects an Object or Array value",this);return e},n.prototype._k=function(e,t,n){var r=vi.keyCodes[t]||n;return Array.isArray(r)?-1===r.indexOf(e):r!==e}}(Re);var ba=[String,RegExp],xa={name:"keep-alive",abstract:!0,props:{include:ba,exclude:ba},created:function(){this.cache=Object.create(null)},destroyed:function(){var e=this;for(var t in this.cache)ze(e.cache[t])},watch:{include:function(e){Ve(this.cache,function(t){return We(e,t)})},exclude:function(e){Ve(this.cache,function(t){return!We(e,t)})}},render:function(){var e=fe(this.$slots.default),t=e&&e.componentOptions;if(t){var n=Ye(t);if(n&&(this.include&&!We(this.include,n)||this.exclude&&We(this.exclude,n)))return e;var r=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;this.cache[r]?e.componentInstance=this.cache[r].componentInstance:this.cache[r]=e,e.data.keepAlive=!0}return e}},ka={KeepAlive:xa};!function(e){var t={};t.get=function(){return vi},t.set=function(){Mi("Do not replace the Vue.config object, set individual fields instead.")},Object.defineProperty(e,"config",t),e.util=Yi,e.set=S,e.delete=A,e.nextTick=Ai,e.options=Object.create(null),vi._assetTypes.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,u(e.options.components,ka),He(e),Be(e),qe(e),Ue(e)}(Re),Object.defineProperty(Re.prototype,"$isServer",{get:Ei}),Re.version="2.1.10";var wa,_a,Ca=n("input,textarea,option,select"),Da=function(e,t,n){return"value"===n&&Ca(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Ea=n("contenteditable,draggable,spellcheck"),Sa=n("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Aa="http://www.w3.org/1999/xlink",Ta=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Ma=function(e){return Ta(e)?e.slice(6,e.length):""},Oa=function(e){return null==e||!1===e},ja={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Pa=n("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template"),Na=n("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Fa=function(e){return"pre"===e},$a=function(e){return Pa(e)||Na(e)},Ia=Object.create(null),La=Object.freeze({createElement:nt,createElementNS:rt,createTextNode:it,createComment:at,insertBefore:ot,removeChild:st,appendChild:lt,parentNode:ut,nextSibling:ct,tagName:ft,setTextContent:dt,setAttribute:pt}),Ra={create:function(e,t){ht(t)},update:function(e,t){e.data.ref!==t.data.ref&&(ht(e,!0),ht(t))},destroy:function(e){ht(e,!0)}},Ha=new Qi("",{},[]),Ba=["create","activate","update","remove","destroy"],qa={create:bt,update:bt,destroy:function(e){bt(e,Ha)}},Ua=Object.create(null),Ya=[Ra,qa],Wa={create:Ct,update:Ct},Va={create:Et,update:Et},za={create:Tt,update:Tt},Ga={create:Mt,update:Mt},Ka=o(function(e){var t={},n=/;(?![^(]*\))/g,r=/:(.+)/;return e.split(n).forEach(function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}),Ja=/^--/,Qa=/\s*!important$/,Za=function(e,t,n){Ja.test(t)?e.style.setProperty(t,n):Qa.test(n)?e.style.setProperty(t,n.replace(Qa,""),"important"):e.style[eo(t)]=n},Xa=["Webkit","Moz","ms"],eo=o(function(e){if(_a=_a||document.createElement("div"),"filter"!==(e=li(e))&&e in _a.style)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Xa.length;n++){var r=Xa[n]+t;if(r in _a.style)return r}}),to={create:It,update:It},no=bi&&!wi,ro="transition",io="animation",ao="transition",oo="transitionend",so="animation",lo="animationend";no&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ao="WebkitTransition",oo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(so="WebkitAnimation",lo="webkitAnimationEnd"));var uo=bi&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout,co=/\b(transform|all)(,|$)/,fo=o(function(e){return{enterClass:e+"-enter",leaveClass:e+"-leave",appearClass:e+"-enter",enterToClass:e+"-enter-to",leaveToClass:e+"-leave-to",appearToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveActiveClass:e+"-leave-active",appearActiveClass:e+"-enter-active"}}),po=bi?{create:Qt,activate:Qt,remove:function(e,t){e.data.show?t():Gt(e,t)}}:{},ho=[Wa,Va,za,Ga,to,po],mo=ho.concat(Ya),vo=function(e){function t(e){return new Qi(A.tagName(e).toLowerCase(),{},[],void 0,e)}function r(e,t){function n(){0==--n.listeners&&i(e)}return n.listeners=t,n}function i(e){var t=A.parentNode(e);t&&A.removeChild(t,e)}function o(e,t,n,r,i){if(e.isRootInsert=!i,!s(e,t,n,r)){var a=e.data,o=e.children,l=e.tag;vt(l)?(a&&a.pre&&T++,T||e.ns||vi.ignoredElements.length&&vi.ignoredElements.indexOf(l)>-1||!vi.isUnknownElement(l)||Mi("Unknown custom element: <"+l+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),
e.elm=e.ns?A.createElementNS(e.ns,l):A.createElement(l,e),h(e),f(e,o,t),vt(a)&&p(e,t),c(n,e.elm,r),a&&a.pre&&T--):e.isComment?(e.elm=A.createComment(e.text),c(n,e.elm,r)):(e.elm=A.createTextNode(e.text),c(n,e.elm,r))}}function s(e,t,n,r){var i=e.data;if(vt(i)){var a=vt(e.componentInstance)&&i.keepAlive;if(vt(i=i.hook)&&vt(i=i.init)&&i(e,!1,n,r),vt(e.componentInstance))return l(e,t),a&&u(e,t,n,r),!0}}function l(e,t){e.data.pendingInsert&&t.push.apply(t,e.data.pendingInsert),e.elm=e.componentInstance.$el,d(e)?(p(e,t),h(e)):(ht(e),t.push(e))}function u(e,t,n,r){for(var i,a=e;a.componentInstance;)if(a=a.componentInstance._vnode,vt(i=a.data)&&vt(i=i.transition)){for(i=0;i<E.activate.length;++i)E.activate[i](Ha,a);t.push(a);break}c(n,e.elm,r)}function c(e,t,n){e&&(n?A.insertBefore(e,t,n):A.appendChild(e,t))}function f(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)o(t[r],n,e.elm,null,!0);else a(e.text)&&A.appendChild(e.elm,A.createTextNode(e.text))}function d(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return vt(e.tag)}function p(e,t){for(var n=0;n<E.create.length;++n)E.create[n](Ha,e);C=e.data.hook,vt(C)&&(C.create&&C.create(Ha,e),C.insert&&t.push(e))}function h(e){var t;vt(t=e.context)&&vt(t=t.$options._scopeId)&&A.setAttribute(e.elm,t,""),vt(t=oa)&&t!==e.context&&vt(t=t.$options._scopeId)&&A.setAttribute(e.elm,t,"")}function m(e,t,n,r,i,a){for(;r<=i;++r)o(n[r],a,e,t)}function v(e){var t,n,r=e.data;if(vt(r))for(vt(t=r.hook)&&vt(t=t.destroy)&&t(e),t=0;t<E.destroy.length;++t)E.destroy[t](e);if(vt(t=e.children))for(n=0;n<e.children.length;++n)v(e.children[n])}function g(e,t,n,r){for(;n<=r;++n){var a=t[n];vt(a)&&(vt(a.tag)?(y(a),v(a)):i(a.elm))}}function y(e,t){if(t||vt(e.data)){var n=E.remove.length+1;for(t?t.listeners+=n:t=r(e.elm,n),vt(C=e.componentInstance)&&vt(C=C._vnode)&&vt(C.data)&&y(C,t),C=0;C<E.remove.length;++C)E.remove[C](e,t);vt(C=e.data.hook)&&vt(C=C.remove)?C(e,t):t()}else i(e.elm)}function b(e,t,n,r,i){for(var a,s,l,u,c=0,f=0,d=t.length-1,p=t[0],h=t[d],v=n.length-1,y=n[0],b=n[v],k=!i;c<=d&&f<=v;)mt(p)?p=t[++c]:mt(h)?h=t[--d]:gt(p,y)?(x(p,y,r),p=t[++c],y=n[++f]):gt(h,b)?(x(h,b,r),h=t[--d],b=n[--v]):gt(p,b)?(x(p,b,r),k&&A.insertBefore(e,p.elm,A.nextSibling(h.elm)),p=t[++c],b=n[--v]):gt(h,y)?(x(h,y,r),k&&A.insertBefore(e,h.elm,p.elm),h=t[--d],y=n[++f]):(mt(a)&&(a=yt(t,c,d)),s=vt(y.key)?a[y.key]:null,mt(s)?(o(y,r,e,p.elm),y=n[++f]):(l=t[s],l||Mi("It seems there are duplicate keys that is causing an update error. Make sure each v-for item has a unique key."),gt(l,y)?(x(l,y,r),t[s]=void 0,k&&A.insertBefore(e,y.elm,p.elm),y=n[++f]):(o(y,r,e,p.elm),y=n[++f])));c>d?(u=mt(n[v+1])?null:n[v+1].elm,m(e,u,n,f,v,r)):f>v&&g(e,t,c,d)}function x(e,t,n,r){if(e!==t){if(t.isStatic&&e.isStatic&&t.key===e.key&&(t.isCloned||t.isOnce))return t.elm=e.elm,void(t.componentInstance=e.componentInstance);var i,a=t.data,o=vt(a);o&&vt(i=a.hook)&&vt(i=i.prepatch)&&i(e,t);var s=t.elm=e.elm,l=e.children,u=t.children;if(o&&d(t)){for(i=0;i<E.update.length;++i)E.update[i](e,t);vt(i=a.hook)&&vt(i=i.update)&&i(e,t)}mt(t.text)?vt(l)&&vt(u)?l!==u&&b(s,l,u,n,r):vt(u)?(vt(e.text)&&A.setTextContent(s,""),m(s,null,u,0,u.length-1,n)):vt(l)?g(s,l,0,l.length-1):vt(e.text)&&A.setTextContent(s,""):e.text!==t.text&&A.setTextContent(s,t.text),o&&vt(i=a.hook)&&vt(i=i.postpatch)&&i(e,t)}}function k(e,t,n){if(n&&e.parent)e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}function w(e,t,n){if(!_(e,t))return!1;t.elm=e;var r=t.tag,i=t.data,a=t.children;if(vt(i)&&(vt(C=i.hook)&&vt(C=C.init)&&C(t,!0),vt(C=t.componentInstance)))return l(t,n),!0;if(vt(r)){if(vt(a))if(e.hasChildNodes()){for(var o=!0,s=e.firstChild,u=0;u<a.length;u++){if(!s||!w(s,a[u],n)){o=!1;break}s=s.nextSibling}if(!o||s)return"undefined"==typeof console||M||(M=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,a)),!1}else f(t,a,n);if(vt(i))for(var c in i)if(!O(c)){p(t,n);break}}else e.data!==t.text&&(e.data=t.text);return!0}function _(e,t){return t.tag?0===t.tag.indexOf("vue-component")||t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}var C,D,E={},S=e.modules,A=e.nodeOps;for(C=0;C<Ba.length;++C)for(E[Ba[C]]=[],D=0;D<S.length;++D)void 0!==S[D][Ba[C]]&&E[Ba[C]].push(S[D][Ba[C]]);var T=0,M=!1,O=n("attrs,style,class,staticClass,staticStyle,key");return function(e,n,r,i,a,s){if(!n)return void(e&&v(e));var l=!1,u=[];if(e){var c=vt(e.nodeType);if(!c&&gt(e,n))x(e,n,u,i);else{if(c){if(1===e.nodeType&&e.hasAttribute("server-rendered")&&(e.removeAttribute("server-rendered"),r=!0),r){if(w(e,n,u))return k(n,u,!0),e;Mi("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}e=t(e)}var f=e.elm,p=A.parentNode(f);if(o(n,u,f._leaveCb?null:p,A.nextSibling(f)),n.parent){for(var h=n.parent;h;)h.elm=n.elm,h=h.parent;if(d(n))for(var m=0;m<E.create.length;++m)E.create[m](Ha,n.parent)}null!==p?g(p,[e],0,0):vt(e.tag)&&v(e)}}else l=!0,o(n,u,a,s);return k(n,u,l),n.elm}}({nodeOps:La,modules:mo}),go=/^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;wi&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&rn(e,"input")});var yo={inserted:function(e,t,n){if(go.test(n.tag)||Mi("v-model is not supported on element type: <"+n.tag+">. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",n.context),"select"===n.tag){var r=function(){Zt(e,t,n.context)};r(),(ki||_i)&&setTimeout(r,0)}else"textarea"!==n.tag&&"text"!==e.type||(e._vModifiers=t.modifiers,t.modifiers.lazy||(Ci||(e.addEventListener("compositionstart",tn),e.addEventListener("compositionend",nn)),wi&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Zt(e,t,n.context);(e.multiple?t.value.some(function(t){return Xt(t,e.options)}):t.value!==t.oldValue&&Xt(t.value,e.options))&&rn(e,"change")}}},bo={bind:function(e,t,n){var r=t.value;n=an(n);var i=n.data&&n.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i&&!wi?(n.data.show=!0,zt(n,function(){e.style.display=a})):e.style.display=r?a:"none"},update:function(e,t,n){var r=t.value;r!==t.oldValue&&(n=an(n),n.data&&n.data.transition&&!wi?(n.data.show=!0,r?zt(n,function(){e.style.display=e.__vOriginalDisplay}):Gt(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}},xo={model:yo,show:bo},ko={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String},wo={name:"transition",props:ko,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(function(e){return e.tag}),n.length)){n.length>1&&Mi("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&Mi("invalid <transition> mode: "+r,this.$parent);var i=n[0];if(un(this.$vnode))return i;var o=on(i);if(!o)return i;if(this._leaving)return ln(e,i);var s="__transition-"+this._uid+"-",l=o.key=null==o.key?s+o.tag:a(o.key)?0===String(o.key).indexOf(s)?o.key:s+o.key:o.key,c=(o.data||(o.data={})).transition=sn(this),f=this._vnode,d=on(f);if(o.data.directives&&o.data.directives.some(function(e){return"show"===e.name})&&(o.data.show=!0),d&&d.data&&!cn(o,d)){var p=d&&(d.data.transition=u({},c));if("out-in"===r)return this._leaving=!0,ae(p,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()},l),ln(e,i);if("in-out"===r){var h,m=function(){h()};ae(c,"afterEnter",m,l),ae(c,"enterCancelled",m,l),ae(p,"delayLeave",function(e){h=e},l)}}return i}}},_o=u({tag:String,moveClass:String},ko);delete _o.mode;var Co={props:_o,render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],o=sn(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=o;else{var u=l.componentOptions,c=u?u.Ctor.options.name||u.tag:l.tag;Mi("<transition-group> children must be keyed: <"+c+">")}}if(r){for(var f=[],d=[],p=0;p<r.length;p++){var h=r[p];h.data.transition=o,h.data.pos=h.elm.getBoundingClientRect(),n[h.key]?f.push(h):d.push(h)}this.kept=e(t,null,f),this.removed=d}return e(t,null,a)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";if(e.length&&this.hasMove(e[0].elm,t)){e.forEach(fn),e.forEach(dn),e.forEach(pn);document.body.offsetHeight;e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;Bt(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(oo,n._moveCb=function e(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(oo,e),n._moveCb=null,qt(n,t))})}})}},methods:{hasMove:function(e,t){if(!no)return!1;if(null!=this._hasMove)return this._hasMove;Bt(e,t);var n=Yt(e);return qt(e,t),this._hasMove=n.hasTransform}}},Do={Transition:wo,TransitionGroup:Co};Re.config.isUnknownElement=et,Re.config.isReservedTag=$a,Re.config.getTagNamespace=Xe,Re.config.mustUseProp=Da,u(Re.options.directives,xo),u(Re.options.components,Do),Re.prototype.__patch__=bi?vo:p,Re.prototype.$mount=function(e,t){return e=e&&bi?tt(e):void 0,this._mount(e,t)},bi&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html"),setTimeout(function(){vi.devtools&&(Si?Si.emit("init",Re):bi&&!_i&&/Chrome\/\d+/.test(window.navigator.userAgent)&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools"))},0);var Eo,So=!!bi&&function(e,t){var n=document.createElement("div");return n.innerHTML='<div a="'+e+'">',n.innerHTML.indexOf(t)>0}("\n","&#10;"),Ao=n("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr",!0),To=n("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source",!0),Mo=n("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track",!0),Oo=/([^\s"'<>\/=]+)/,jo=/(?:=)/,Po=[/"([^"]*)"+/.source,/'([^']*)'+/.source,/([^\s"'=<>`]+)/.source],No=new RegExp("^\\s*"+Oo.source+"(?:\\s*("+jo.source+")\\s*(?:"+Po.join("|")+"))?"),Fo="[a-zA-Z_][\\w\\-\\.]*",$o="((?:"+Fo+"\\:)?"+Fo+")",Io=new RegExp("^<"+$o),Lo=/^\s*(\/?)>/,Ro=new RegExp("^<\\/"+$o+"[^>]*>"),Ho=/^<!DOCTYPE [^>]+>/i,Bo=/^<!--/,qo=/^<!\[/,Uo=!1;"x".replace(/x(.)?/g,function(e,t){Uo=""===t});var Yo,Wo,Vo,zo,Go,Ko,Jo,Qo,Zo,Xo,es,ts,ns,rs,is,as,os,ss,ls,us,cs,fs,ds,ps,hs,ms=n("script,style",!0),vs={},gs=/&lt;/g,ys=/&gt;/g,bs=/&#10;/g,xs=/&amp;/g,ks=/&quot;/g,ws=/\{\{((?:.|\n)+?)\}\}/g,_s=/[-.*+?^${}()|[\]\/\\]/g,Cs=o(function(e){var t=e[0].replace(_s,"\\$&"),n=e[1].replace(_s,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}),Ds=/^v-|^@|^:/,Es=/(.*?)\s+(?:in|of)\s+(.*)/,Ss=/\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/,As=/^:|^v-bind:/,Ts=/^@|^v-on:/,Ms=/:(.*)$/,Os=/\.[^.]+/g,js=o(hn),Ps=/^xmlns:NS\d+/,Ns=/^NS\d+:/,Fs=o(tr),$s=/^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,Is=/^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/,Ls={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Rs={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:"if($event.target !== $event.currentTarget)return;",ctrl:"if(!$event.ctrlKey)return;",shift:"if(!$event.shiftKey)return;",alt:"if(!$event.altKey)return;",meta:"if(!$event.metaKey)return;"},Hs={bind:fr,cloak:p},Bs=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),qs=/[A-Za-z_$][\w$]*/,Us=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g,Ys={staticKeys:["staticClass"],transformNode:Hr,genData:Br},Ws={staticKeys:["staticStyle"],transformNode:qr,genData:Ur},Vs=[Ys,Ws],zs={model:Yr,text:Qr,html:Zr},Gs=Object.create(null),Ks={expectHTML:!0,modules:Vs,staticKeys:h(Vs),directives:zs,isReservedTag:$a,isUnaryTag:Ao,mustUseProp:Da,getTagNamespace:Xe,isPreTag:Fa},Js=o(function(e){var t=tt(e);return t&&t.innerHTML}),Qs=Re.prototype.$mount;return Re.prototype.$mount=function(e,t){if((e=e&&tt(e))===document.body||e===document.documentElement)return Mi("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=Js(r))||Mi("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return Mi("invalid template option:"+r,this),this;r=r.innerHTML}else e&&(r=ni(e));if(r){var i=ei(r,{warn:Mi,shouldDecodeNewlines:So,delimiters:n.delimiters},this),a=i.render,o=i.staticRenderFns;n.render=a,n.staticRenderFns=o}}return Qs.call(this,e,t)},Re.compile=ei,Re}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.VeeValidate=t()}(this,function(){"use strict";function e(e){return e&&e.__esModule?e.default:e}function t(e,t){return t={exports:{}},e(t,t.exports),t.exports}function n(e,t,n){t&&(t.dirty?(ne(e,n.touched),re(e,n.untouched)):(ne(e,n.untouched),re(e,n.touched)),t.valid||t.passed?(ne(e,n.valid),re(e,n.invalid)):(ne(e,n.invalid),re(e,n.valid)))}function r(e,t){ne(e,t.dirty),re(e,t.pristine)}function i(e,t){ne(e,t.pristine),re(e,t.dirty)}var a=function(e){return/^[a-zA-Z]*$/.test(e)},o=function(e){return/^[a-zA-Z0-9_-]*$/.test(e)},s=function(e){return/^[a-zA-Z0-9]*$/.test(e)},l=function(e){return/^[a-zA-Z\s]*$/.test(e)},u=function(e,t){var n=t[0],r=t[1];return Number(n)<=e&&Number(r)>=e},c=function(e,t,n){var r=t[0],i=r?document.querySelector("input[name='"+r+"']"):document.querySelector("input[name='"+n+"_confirmation']");return!(!i||String(e)!==i.value)},f=t(function(e,t){function n(e){if("string"!=typeof e)throw new TypeError("This library (validator.js) validates strings only")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n,e.exports=t.default}),d=t(function(e,t){function n(e){(0,i.default)(e);var t=e.replace(/[^0-9]+/g,"");if(!a.test(t))return!1;for(var n=0,r=void 0,o=void 0,s=void 0,l=t.length-1;l>=0;l--)r=t.substring(l,l+1),o=parseInt(r,10),s?(o*=2,n+=o>=10?o%10+1:o):n+=o,s=!s;return!(n%10!=0||!t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var r=f,i=function(e){return e&&e.__esModule?e:{default:e}}(r),a=/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})|62[0-9]{14}$/;e.exports=t.default}),p=e(d),h=function(e){return p(String(e))},m=function(e,t){var n=Array.isArray(t)?t[0]||"*":"*";if(Array.isArray(e))return!1;if(null===e||void 0===e||""===e)return!0;if(0===Number(n))return/^-?\d*$/.test(e);var r="*"===n?"+":"{1,"+n+"}";if(!new RegExp("^-?\\d*(\\.\\d"+r+")?$").test(e))return!1;var i=parseFloat(e);return i===i},v=function(e,t){var n=t[0],r=String(e);return/^[0-9]*$/.test(r)&&r.length===Number(n)},g=function(e,t,n){var r=window.URL||window.webkitURL;return new Promise(function(i){var a=new Image;a.onerror=function(){return i({valid:!1})},a.onload=function(){return i({valid:a.width===Number(t)&&a.height===Number(n)})},a.src=r.createObjectURL(e)})},y=function(e,t){for(var n=t[0],r=t[1],i=[],a=0;a<e.length;a++){if(!/\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(e[a].name))return!1;i.push(e[a])}return Promise.all(i.map(function(e){return g(e,n,r)}))},b=t(function(e,t){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];for(var n in t)void 0===e[n]&&(e[n]=t[n]);return e}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n,e.exports=t.default}),x=t(function(e,t){function n(e,t){(0,a.default)(e);var n=void 0,i=void 0;"object"===(void 0===t?"undefined":r(t))?(n=t.min||0,i=t.max):(n=arguments[1],i=arguments[2]);var o=encodeURI(e).split(/%..|./).length-1;return o>=n&&(void 0===i||o<=i)}Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=n;var i=f,a=function(e){return e&&e.__esModule?e:{default:e}}(i);e.exports=t.default}),k=t(function(e,t){function n(e){return e&&e.__esModule?e:{default:e}}function r(e,t){(0,a.default)(e),t=(0,s.default)(t,l),t.allow_trailing_dot&&"."===e[e.length-1]&&(e=e.substring(0,e.length-1));var n=e.split(".");if(t.require_tld){var r=n.pop();if(!n.length||!/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(r))return!1}for(var i,o=0;o<n.length;o++){if(i=n[o],t.allow_underscores&&(i=i.replace(/_/g,"")),!/^[a-z\u00a1-\uffff0-9-]+$/i.test(i))return!1;if(/[\uff01-\uff5e]/.test(i))return!1;if("-"===i[0]||"-"===i[i.length-1])return!1}return!0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var i=f,a=n(i),o=b,s=n(o),l={require_tld:!0,allow_underscores:!1,allow_trailing_dot:!1};e.exports=t.default}),w=t(function(e,t){function n(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if((0,a.default)(e),t=(0,s.default)(t,p),t.allow_display_name){var n=e.match(h);n&&(e=n[1])}var r=e.split("@"),i=r.pop(),o=r.join("@"),l=i.toLowerCase();if("gmail.com"!==l&&"googlemail.com"!==l||(o=o.replace(/\./g,"").toLowerCase()),!(0,u.default)(o,{max:64})||!(0,u.default)(i,{max:256}))return!1;if(!(0,d.default)(i,{require_tld:t.require_tld}))return!1;if('"'===o[0])return o=o.slice(1,o.length-1),t.allow_utf8_local_part?y.test(o):v.test(o);for(var c=t.allow_utf8_local_part?g:m,f=o.split("."),b=0;b<f.length;b++)if(!c.test(f[b]))return!1;return!0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var i=f,a=n(i),o=b,s=n(o),l=x,u=n(l),c=k,d=n(c),p={allow_display_name:!1,allow_utf8_local_part:!0,require_tld:!0},h=/^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\s]*<(.+)>$/i,m=/^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i,v=/^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i,g=/^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i,y=/^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;e.exports=t.default}),_=e(w),C=function(e){return _(String(e))},D=function(e,t){var n=new RegExp(".("+t.join("|")+")$","i");return e.every(function(e){return n.test(e.name)})},E=function(e){return e.every(function(e){return/\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(e.name)})},S=function(e,t){return!!t.filter(function(t){return t==e}).length},A=t(function(e,t){function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if((0,i.default)(e),!(t=String(t)))return n(e,4)||n(e,6);if("4"===t){if(!a.test(e))return!1;return e.split(".").sort(function(e,t){return e-t})[3]<=255}if("6"===t){var r=e.split(":"),s=!1,l=n(r[r.length-1],4),u=l?7:8;if(r.length>u)return!1;if("::"===e)return!0;"::"===e.substr(0,2)?(r.shift(),r.shift(),s=!0):"::"===e.substr(e.length-2)&&(r.pop(),r.pop(),s=!0);for(var c=0;c<r.length;++c)if(""===r[c]&&c>0&&c<r.length-1){if(s)return!1;s=!0}else if(l&&c===r.length-1);else if(!o.test(r[c]))return!1;return s?r.length>=1:r.length===u}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var r=f,i=function(e){return e&&e.__esModule?e:{default:e}}(r),a=/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/,o=/^[0-9A-F]{1,4}$/i;e.exports=t.default}),T=e(A),M=function(e,t){void 0===t&&(t=[4]);var n=t[0];return T(e,n)},O=function(e,t){var n=t[0];return void 0===e||null===e?n>=0:String(e).length<=n},j=function(e,t){var n=t[0];return!Array.isArray(e)&&null!==e&&void 0!==e&&""!==e&&Number(e)<=n},P=function(e,t){var n=new RegExp(t.join("|").replace("*",".+")+"$","i");return e.every(function(e){return n.test(e.type)})},N=function(e,t){var n=t[0];return void 0!==e&&null!==e&&String(e).length>=n},F=function(e,t){var n=t[0];return!Array.isArray(e)&&null!==e&&void 0!==e&&""!==e&&Number(e)>=n},$=function(e,t){return!t.filter(function(t){return t==e}).length},I=t(function(e,t){function n(e){return(0,i.default)(e),a.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var r=f,i=function(e){return e&&e.__esModule?e:{default:e}}(r),a=/^[-+]?[0-9]+$/;e.exports=t.default}),L=e(I),R=function(e){return L(String(e))},H=function(e,t){var n=t[0],r=t.slice(1);return n instanceof RegExp?n.test(e):new RegExp(n,r).test(String(e))},B=function(e){return Array.isArray(e)?!!e.length:void 0!==e&&null!==e&&!!String(e).trim().length},q=function(e,t){var n=t[0];if(isNaN(n))return!1;for(var r=1024*Number(n),i=0;i<e.length;i++)if(e[i].size>r)return!1;return!0},U=t(function(e,t){function n(e){return e&&e.__esModule?e:{default:e}}function r(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];if(e===i||r(i)&&i.test(e))return!0}return!1}function a(e,t){if((0,s.default)(e),!e||e.length>=2083||/\s/.test(e))return!1;if(0===e.indexOf("mailto:"))return!1;t=(0,h.default)(t,m);var n=void 0,r=void 0,a=void 0,o=void 0,l=void 0,c=void 0,f=void 0,p=void 0;if(f=e.split("#"),e=f.shift(),f=e.split("?"),e=f.shift(),f=e.split("://"),f.length>1){if(n=f.shift(),t.require_valid_protocol&&-1===t.protocols.indexOf(n))return!1}else{if(t.require_protocol)return!1;t.allow_protocol_relative_urls&&"//"===e.substr(0,2)&&(f[0]=e.substr(2))}if(e=f.join("://"),f=e.split("/"),""===(e=f.shift())&&!t.require_host)return!0;if(f=e.split("@"),f.length>1&&(r=f.shift(),r.indexOf(":")>=0&&r.split(":").length>2))return!1;o=f.join("@"),c=p=null;var g=o.match(v);return g?(a="",p=g[1],c=g[2]||null):(f=o.split(":"),a=f.shift(),f.length&&(c=f.join(":"))),!(null!==c&&(l=parseInt(c,10),!/^[0-9]+$/.test(c)||l<=0||l>65535))&&(!!((0,d.default)(a)||(0,u.default)(a,t)||p&&(0,d.default)(p,6)||"localhost"===a)&&(a=a||p,!(t.host_whitelist&&!i(a,t.host_whitelist))&&(!t.host_blacklist||!i(a,t.host_blacklist))))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var o=f,s=n(o),l=k,u=n(l),c=A,d=n(c),p=b,h=n(p),m={protocols:["http","https","ftp"],require_tld:!0,require_protocol:!1,require_host:!0,require_valid_protocol:!0,allow_underscores:!1,allow_trailing_dot:!1,allow_protocol_relative_urls:!1},v=/^\[([^\]]+)\](?::([0-9]+))?$/;e.exports=t.default}),Y=e(U),W=function(e,t){void 0===t&&(t=[!0]);var n=t[0];return Y(e,{require_protocol:!!n})},V={alpha_dash:o,alpha_num:s,alpha_spaces:l,alpha:a,between:u,confirmed:c,credit_card:h,decimal:m,digits:v,dimensions:y,email:C,ext:D,image:E,in:S,ip:M,max:O,max_value:j,mimes:P,min:N,min_value:F,not_in:$,numeric:R,regex:H,required:B,size:q,url:W},z=function(){this.errors=[]};z.prototype.add=function(e,t,n,r){void 0===r&&(r="__global__"),this.errors.push({field:e,msg:t,rule:n,scope:r})},z.prototype.all=function(e){return e?this.errors.filter(function(t){return t.scope===e}).map(function(e){return e.msg}):this.errors.map(function(e){return e.msg})},z.prototype.any=function(e){return e?!!this.errors.filter(function(t){return t.scope===e}).length:!!this.errors.length},z.prototype.clear=function(e){e||(e="__global__"),this.errors=this.errors.filter(function(t){return t.scope!==e})},z.prototype.collect=function(e,t,n){if(void 0===n&&(n=!0),!e){var r={};return this.errors.forEach(function(e){r[e.field]||(r[e.field]=[]),r[e.field].push(n?e.msg:e)}),r}return t?this.errors.filter(function(n){return n.field===e&&n.scope===t}).map(function(e){return n?e.msg:e}):this.errors.filter(function(t){return t.field===e&&"__global__"===t.scope}).map(function(e){return n?e.msg:e})},z.prototype.count=function(){return this.errors.length},z.prototype.first=function(e,t){var n=this;void 0===t&&(t="__global__");var r=this._selector(e),i=this._scope(e);if(i){var a=this.first(i.name,i.scope);if(a)return a}if(r)return this.firstByRule(r.name,r.rule,t);for(var o=0;o<this.errors.length;o++)if(n.errors[o].field===e&&n.errors[o].scope===t)return n.errors[o].msg;return null},z.prototype.firstRule=function(e,t){var n=this.collect(e,t,!1);return n.length&&n[0].rule||null},z.prototype.has=function(e,t){return void 0===t&&(t="__global__"),!!this.first(e,t)},z.prototype.firstByRule=function(e,t,n){var r=this.collect(e,n,!1).filter(function(e){return e.rule===t})[0];return r&&r.msg||null},z.prototype.remove=function(e,t){if(t)return void(this.errors=this.errors.filter(function(n){return n.field!==e||n.scope!==t}));this.errors=this.errors.filter(function(t){return t.field!==e&&"__global__"===t.scope})},z.prototype._selector=function(e){if(e.indexOf(":")>-1){var t=e.split(":");return{name:t[0],rule:t[1]}}return null},z.prototype._scope=function(e){if(e.indexOf(".")>-1){var t=e.split("."),n=t[0];return{name:t[1],scope:n}}return null};var G=function(){function e(e){this.msg="[vee-validate]: "+e}return e.prototype.toString=function(){return this.msg},e}(),K=function(e,t){return e.getAttribute("data-vv-"+t)},J=function(e){var t=K(e,"scope");return!t&&e.form&&(t=K(e.form,"scope")),t},Q=function(e,t,n){void 0===t&&(t=0);var r;return function(){for(var i=[],a=arguments.length;a--;)i[a]=arguments[a];var o=function(){r=null,n||e.apply(void 0,i)},s=n&&!r;clearTimeout(r),r=setTimeout(o,t),s&&e(i)}},Z=function(e){console&&console.warn("[vee-validate]: "+e)},X=function(e){return null!==e&&e&&"object"==typeof e&&!Array.isArray(e)},ee=function(e){return"function"==typeof e},te=function(e,t){return e.classList?e.classList.contains(t):!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},ne=function(e,t){e.classList?e.classList.add(t):te(e,t)||(e.className+=" "+t)},re=function(e,t){if(e.classList)e.classList.remove(t);else if(te(e,t)){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")}},ie=function(e){if(Array.from)return Array.from(e);for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t},ae=function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if(Object.assign)return Object.assign.apply(Object,[e].concat(t));if(null==e)throw new TypeError("Cannot convert undefined or null to object");var r=Object(e);return t.forEach(function(e){null!=e&&Object.keys(e).forEach(function(t){r[t]=e[t]})}),r},oe=function(e,t){if(e.find)return e.find(t);var n;return e.some(function(e){return!!t(e)&&(n=e,!0)}),n},se=function(e,t,n){return e?"string"==typeof t?t:X(t.rules)?t.rules:t:K(n,"rules")},le=function(e){void 0===e&&(e={}),this.dictionary={},this.merge(e)};le.prototype.hasLocale=function(e){return!!this.dictionary[e]},le.prototype.getMessage=function(e,t,n){return void 0===n&&(n=""),this.hasMessage(e,t)?this.dictionary[e].messages[t]:n},le.prototype.getAttribute=function(e,t,n){return void 0===n&&(n=""),this.hasAttribute(e,t)?this.dictionary[e].attributes[t]:n},le.prototype.hasMessage=function(e,t){return!!(this.hasLocale(e)&&this.dictionary[e].messages&&this.dictionary[e].messages[t])},le.prototype.hasAttribute=function(e,t){return!!(this.hasLocale(e)&&this.dictionary[e].attributes&&this.dictionary[e].attributes[t])},le.prototype.merge=function(e){this._merge(this.dictionary,e)},le.prototype.setMessage=function(e,t,n){this.hasLocale(e)||(this.dictionary[e]={messages:{},attributes:{}}),this.dictionary[e].messages[t]=n},le.prototype.setAttribute=function(e,t,n){this.hasLocale(e)||(this.dictionary[e]={messages:{},attributes:{}}),this.dictionary[e].attributes[t]=n},le.prototype._merge=function(e,t){var n=this;return X(e)&&X(t)?(Object.keys(t).forEach(function(r){if(X(t[r])){if(!e[r]){ae(e,(i={},i[r]={},i));var i}return void n._merge(e[r],t[r])}ae(e,(a={},a[r]=t[r],a));var a}),e):e};var ue={alpha_dash:function(e){return"The "+e+" field may contain alpha-numeric characters as well as dashes and underscores."},alpha_num:function(e){return"The "+e+" field may only contain alpha-numeric characters."},alpha_spaces:function(e){return"The "+e+" field may only contain alphabetic characters as well as spaces."},alpha:function(e){return"The "+e+" field may only contain alphabetic characters."},between:function(e,t){return"The "+e+" field must be between "+t[0]+" and "+t[1]+"."},confirmed:function(e){return"The "+e+" confirmation does not match."},credit_card:function(e){return"The "+e+" field is invalid."},decimal:function(e,t){void 0===t&&(t=["*"]);var n=t[0];return"The "+e+" field must be numeric and may contain "+("*"===n?"":n)+" decimal points."},digits:function(e,t){return"The "+e+" field must be numeric and exactly contain "+t[0]+" digits."},dimensions:function(e,t){return"The "+e+" field must be "+t[0]+" pixels by "+t[1]+" pixels."},email:function(e){return"The "+e+" field must be a valid email."},ext:function(e){return"The "+e+" field must be a valid file."},image:function(e){return"The "+e+" field must be an image."},in:function(e){return"The "+e+" field must be a valid value."},ip:function(e){return"The "+e+" field must be a valid ip address."},max:function(e,t){return"The "+e+" field may not be greater than "+t[0]+" characters."},max_value:function(e,t){return"The "+e+" field must be "+t[0]+" or less."},mimes:function(e){return"The "+e+" field must have a valid file type."},min:function(e,t){return"The "+e+" field must be at least "+t[0]+" characters."},min_value:function(e,t){return"The "+e+" field must be "+t[0]+" or more."},not_in:function(e){return"The "+e+" field must be a valid value."},numeric:function(e){return"The "+e+" field may only contain numeric characters."},regex:function(e){return"The "+e+" field format is invalid."},required:function(e){return"The "+e+" field is required."},size:function(e,t){return"The "+e+" field must be less than "+t[0]+" KB."},url:function(e){return"The "+e+" field is not a valid URL."}},ce=function(e){return function(t,n){var r=n[0],i=n[1],a=e(t,i,!0),o=document.querySelector("input[name='"+r+"']");if(!a.isValid()||!o)return!1;var s=e(o.value,i,!0);return!!s.isValid()&&a.isAfter(s)}},fe=function(e){return function(t,n){var r=n[0],i=n[1],a=e(t,i,!0),o=document.querySelector("input[name='"+r+"']");if(!a.isValid()||!o)return!1;var s=e(o.value,i,!0);return!!s.isValid()&&a.isBefore(s)}},de=function(e){return function(t,n){var r=n[0];return e(t,r,!0).isValid()}},pe=function(e){return function(t,n){var r=n[0],i=n[1],a=n[2],o=e(r,a,!0),s=e(i,a,!0),l=e(t,a,!0);return!!(o.isValid()&&s.isValid()&&l.isValid())&&l.isBetween(o,s)}},he={after:function(e,t){return"The "+e+" must be after "+t[0]+"."},before:function(e,t){return"The "+e+" must be before "+t[0]+"."},date_between:function(e,t){return"The "+e+" must be between "+t[0]+" and "+t[1]+"."},date_format:function(e,t){return"The "+e+" must be in the format "+t[0]+"."}},me={make:function(e){return{date_format:de(e),after:ce(e),before:fe(e),date_between:pe(e)}},messages:he,installed:!1},ve=function(){this.fields={}};ve.prototype._add=function(e){this.fields[e]={},this._setFlags(e,{dirty:!1,
valid:!1},!0)},ve.prototype._addIfNotExists=function(e){this.fields[e]||this._add(e)},ve.prototype._remove=function(e){delete this.fields[e]},ve.prototype.reset=function(e){var t=this;if(!e)return void Object.keys(this.fields).forEach(function(e){t._setFlags(e,{dirty:!1,valid:!1},!0)});this._setFlags(e,{dirty:!1,valid:!1},!0)},ve.prototype._setFlags=function(e,t,n){var r=this;return void 0===n&&(n=!1),Object.keys(t).every(function(i){return r._setFlag(e,i,t[i],n)})},ve.prototype._setFlag=function(e,t,n,r){void 0===r&&(r=!1);var i="set"+t.charAt(0).toUpperCase()+t.slice(1);return"function"==typeof this[i]&&(this[i](e,n,r),!0)},ve.prototype.setDirty=function(e,t,n){void 0===n&&(n=!1),this.fields[e].dirty=t,this.fields[e].clean=n||!t,this.fields[e].passed=this.fields[e].valid&&t,this.fields[e].failed=!this.fields[e].valid&&t},ve.prototype.setValid=function(e,t){this.fields[e].valid=t,this.fields[e].passed=this.fields[e].dirty&&t,this.fields[e].failed=this.fields[e].dirty&&!t},ve.prototype._getFieldFlag=function(e,t){return!!this.fields[e]&&this.fields[e][t]},ve.prototype.dirty=function(e){var t=this;return e?this._getFieldFlag(e,"dirty"):Object.keys(this.fields).some(function(e){return t.fields[e].dirty})},ve.prototype.valid=function(e){var t=this;return e?this._getFieldFlag(e,"valid"):Object.keys(this.fields).every(function(e){return t.fields[e].valid})},ve.prototype.passed=function(e){var t=this;return e?this._getFieldFlag(e,"passed"):Object.keys(this.fields).every(function(e){return t.fields[e].passed})},ve.prototype.failed=function(e){var t=this;return e?this._getFieldFlag(e,"failed"):Object.keys(this.fields).some(function(e){return t.fields[e].failed})},ve.prototype.clean=function(e){return e?this._getFieldFlag(e,"clean"):!this.dirty()};var ge="en",ye=!0,be=new le({en:{messages:ue,attributes:{}}}),xe=function(e,t){void 0===t&&(t={init:!0}),this.strictMode=ye,this.$scopes={__global__:{}},this.fieldBag=new ve,this._createFields(e),this.errorBag=new z,this.$deferred=[],this.$ready=!1,"function"==typeof moment&&this.installDateTimeValidators(moment),t.init&&this.init()};xe._merge=function(e,t){if(ee(t))return V[e]=t,void be.setMessage("en",e,function(e){return"The "+e+" value is not valid."});V[e]=t.validate,t.getMessage&&ee(t.getMessage)&&be.setMessage("en",e,t.getMessage),t.messages&&be.merge(Object.keys(t.messages).reduce(function(n,r){var i=n;i[r]={messages:(a={},a[e]=t.messages[r],a)};var a;return i},{}))},xe._guardExtend=function(e,t){if(V[e])throw new G("Extension Error: There is an existing validator with the same name '"+e+"'.");if(!ee(t)){if(!ee(t.validate))throw new G("Extension Error: The validator '"+e+"' must be a function or have a 'validate' method.");if(!ee(t.getMessage)&&!X(t.messages))throw new G("Extension Error: The validator '"+e+"' must have a 'getMessage' method or have a 'messages' object.")}},xe.create=function(e,t,n){return new xe(e,t,n)},xe.extend=function(e,t){xe._guardExtend(e,t),xe._merge(e,t)},xe.installDateTimeValidators=function(e){if("function"!=typeof e)return Z("To use the date-time validators you must provide moment reference."),!1;if(me.installed)return!0;var t=me.make(e);return Object.keys(t).forEach(function(e){xe.extend(e,t[e])}),xe.updateDictionary({en:{messages:me.messages}}),me.installed=!0,!0},xe.remove=function(e){delete V[e]},xe.setLocale=function(e){void 0===e&&(e="en"),be.hasLocale(e)||Z("You are setting the validator locale to a locale that is not defined in the dicitionary. English messages may still be generated."),ge=e},xe.setStrictMode=function(e){void 0===e&&(e=!0),ye=e},xe.updateDictionary=function(e){be.merge(e)},xe.prototype._resolveScope=function(e){if("string"==typeof e)return e;if(ee(e)){var t=e();return"string"==typeof t?t:"__global__"}return"__global__"},xe.prototype._resolveValuesFromGetters=function(e){var t=this;if(void 0===e&&(e="__global__"),!this.$scopes[e])return{};var n={};return Object.keys(this.$scopes[e]).forEach(function(r){var i=t.$scopes[e][r],a=i.getter,o=i.context,s=t._resolveScope(i.scope);a&&o&&("__global__"===e||s===e)&&(n[r]={value:a(o()),scope:s})}),n},xe.prototype._createFields=function(e){var t=this;e&&Object.keys(e).forEach(function(n){t._createField(n,e[n])})},xe.prototype._createField=function(e,t,n){void 0===n&&(n="__global__"),n=this._resolveScope(n),this.$scopes[n]||(this.$scopes[n]={}),this.$scopes[n][e]||(this.$scopes[n][e]={});var r=this.$scopes[n][e];this.fieldBag._addIfNotExists(e),r.validations=this._normalizeRules(e,t,n),r.required=this._isRequired(r)},xe.prototype._normalizeRules=function(e,t,n){return t?"string"==typeof t?this._normalizeString(t):X(t)?this._normalizeObject(t):(Z("Your checks for '"+n+"."+e+"' must be either a string or an object."),{}):{}},xe.prototype._isRequired=function(e){return e.validations&&e.validations.required},xe.prototype._normalizeObject=function(e){var t=this,n={};return Object.keys(e).forEach(function(r){var i=[];i=!0===e[r]?[]:Array.isArray(e[r])?e[r]:[e[r]],!1===e[r]?delete n[r]:n[r]=i,me.installed&&t._isADateRule(r)&&n[r].push(t._getDateFormat(n))}),n},xe.prototype._getDateFormat=function(e){return e.date_format&&Array.isArray(e.date_format)?e.date_format[0]:null},xe.prototype._isADateRule=function(e){return!!~["after","before","date_between"].indexOf(e)},xe.prototype._normalizeString=function(e){var t=this,n={};return e.split("|").forEach(function(e){var r=t._parseRule(e);r.name&&("required"===r.name&&(n.required=!0),n[r.name]=r.params,me.installed&&t._isADateRule(r.name)&&n[r.name].push(t._getDateFormat(n)))}),n},xe.prototype._parseRule=function(e){var t=[],n=e.split(":")[0];return~e.indexOf(":")&&(t=e.split(":").slice(1).join(":").split(",")),{name:n,params:t}},xe.prototype._formatErrorMessage=function(e,t,n,r){void 0===n&&(n={}),void 0===r&&(r="__global__");var i=this._getFieldDisplayName(e,r),a=this._getLocalizedParams(t,r);return be.hasLocale(ge)&&"function"==typeof be.getMessage(ge,t.name)?be.getMessage(ge,t.name)(i,a,n):be.getMessage("en",t.name)(i,a,n)},xe.prototype._getLocalizedParams=function(e,t){return void 0===t&&(t="__global__"),~["after","before","confirmed"].indexOf(e.name)&&e.params&&e.params[0]?this.$scopes[t][e.params[0]]?[this.$scopes[t][e.params[0]].name]:[be.getAttribute(ge,e.params[0],e.params[0])]:e.params},xe.prototype._getFieldDisplayName=function(e,t){return void 0===t&&(t="__global__"),this.$scopes[t][e].name||be.getAttribute(ge,e,e)},xe.prototype._test=function(e,t,n,r){var i=this;void 0===r&&(r="__global__");var a=V[n.name];if(!a||"function"!=typeof a)throw new G("No such validator '"+n.name+"' exists.");var o=a(t,n.params,e);return ee(o.then)?o.then(function(t){var a=!0,o={};return Array.isArray(t)?a=t.every(function(e){return e.valid}):(a=t.valid,o=t.data),a||i.errorBag.add(e,i._formatErrorMessage(e,n,o,r),n.name,r),a}):(X(o)||(o={valid:o,data:{}}),o.valid||this.errorBag.add(e,this._formatErrorMessage(e,n,o.data,r),n.name,r),o.valid)},xe.prototype.attach=function(e,t,n){var r=this;void 0===n&&(n={});var i=function(){n.scope=r._resolveScope(n.scope),r.updateField(e,t,n);var i=r.$scopes[n.scope][e];i.scope=n.scope,i.name=n.prettyName,i.getter=n.getter,i.context=n.context,i.listeners=n.listeners||{detach:function(){}}};if(!(ee(n.scope)?n.scope():n.scope)&&!this.$ready)return void this.$deferred.push(i);i()},xe.prototype.init=function(){return this.$ready=!0,this.$deferred.forEach(function(e){e()}),this.$deferred=[],this},xe.prototype.append=function(e,t,n){void 0===n&&(n={}),n.scope=this._resolveScope(n.scope),this.$scopes[n.scope]&&this.$scopes[n.scope][e]||this.attach(e,t,n);var r=this.$scopes[n.scope][e],i=this._normalizeRules(e,t,n.scope);Object.keys(i).forEach(function(e){r.validations[e]=i[e]})},xe.prototype.updateField=function(e,t,n){void 0===n&&(n={});var r=this.$scopes[n.scope]&&this.$scopes[n.scope][e]||null,i=r?JSON.stringify(r.validations):"";this._createField(e,t,n.scope),r=this.$scopes[n.scope]&&this.$scopes[n.scope][e]||null,(r?JSON.stringify(r.validations):"")!==i&&this.errorBag.remove(e,n.scope)},xe.prototype.detach=function(e,t){void 0===t&&(t="__global__"),this.$scopes[t]&&this.$scopes[t][e]&&(this.$scopes[t][e].listeners.detach(),this.errorBag.remove(e,t),this.fieldBag._remove(e),delete this.$scopes[t][e])},xe.prototype.extend=function(e,t){xe.extend(e,t)},xe.prototype.getErrors=function(){return this.errorBag},xe.prototype.getLocale=function(){return ge},xe.prototype.installDateTimeValidators=function(e){xe.installDateTimeValidators(e)},xe.prototype.remove=function(e){xe.remove(e)},xe.prototype.setLocale=function(e){be.hasLocale(e)||Z("You are setting the validator locale to a locale that is not defined in the dicitionary. English messages may still be generated."),ge=e},xe.prototype.setStrictMode=function(e){void 0===e&&(e=!0),this.strictMode=e},xe.prototype.updateDictionary=function(e){xe.updateDictionary(e)},xe.prototype.addScope=function(e){e&&!this.$scopes[e]&&(this.$scopes[e]={})},xe.prototype.validate=function(e,t,n){var r=this;if(void 0===n&&(n="__global__"),e&&e.indexOf(".")>-1&&!this.$scopes.__global__[e]){var i;i=e.split("."),n=i[0],e=i[1]}if(n||(n="__global__"),!this.$scopes[n]||!this.$scopes[n][e]){if(!this.strictMode)return!0;return Z('Validating a non-existant field: "'+("__global__"===n?e:n+"."+e)+'". Use "attach()" first.'),!1}var a=this.$scopes[n][e];if(this.errorBag.remove(e,n),!a.required&&~[null,void 0,""].indexOf(t))return this.fieldBag._setFlags(e,{valid:!0,dirty:!0}),!0;var o=[],s=Object.keys(a.validations).every(function(i){var s=r._test(e,t,{name:i,params:a.validations[i]},n);return ee(s.then)&&o.push(s),s});return o.length?Promise.all(o).then(function(t){var n=t.every(function(e){return e})&&s;return r.fieldBag._setFlags(e,{valid:n,dirty:!0}),n}):(this.fieldBag._setFlags(e,{valid:s,dirty:!0}),s)},xe.prototype.validateAll=function(e){var t,n=this;e&&"string"!=typeof e?(t={},Object.keys(e).forEach(function(n){t[n]={value:e[n]}})):(this.errorBag.clear(e),t=this._resolveValuesFromGetters(e));var r=!0,i=[];return Object.keys(t).forEach(function(e){var a=n.validate(e,t[e].value,t[e].scope);if(ee(a.then))return void i.push(a);r=r&&a}),Promise.all(i).then(function(e){var t=e.every(function(e){return e})&&r;if(!t)throw new G("Validation Failed");return t})},xe.prototype.validateScopes=function(){var e=this;return Promise.all(Object.keys(this.$scopes).map(function(t){return e.validateAll(t)}))};var ke=function(e,t){return{computed:(n={},n[t.errorBagName]={get:function(){return this.$validator.errorBag}},n[t.fieldsBagName]={get:function(){return this.$validator.fieldBag}},n),beforeCreate:function(){this.$validator=new xe(null,{init:!1}),e.util.defineReactive(this.$validator,"errorBag",this.$validator.errorBag),e.util.defineReactive(this.$validator,"fieldBag",this.$validator.fieldBag)},mounted:function(){this.$validator.init()}};var n},we=function(e,t,n,r){this.unwatch=void 0,this.callbacks=[],this.el=e,this.scope=X(t.value)?t.value.scope:J(e),this.binding=t,this.vm=n.context,this.component=n.child,this.options=r,this.fieldName=this._resolveFieldName(),this.model=this._resolveModel(n.data.directives)};we.prototype._resolveModel=function(e){var t=/^[a-z_]+[0-9]*(\w*\.[a-z_]\w*)*$/i,n=oe(e,function(e){return"model"===e.name&&t.test(e.expression)});return n&&this._isExistingPath(n.expression)&&n.expression},we.prototype._isExistingPath=function(e){var t=this.vm;return e.split(".").every(function(e){return!!Object.prototype.hasOwnProperty.call(t,e)&&(t=t[e],!0)})},we.prototype._resolveFieldName=function(){return this.component?K(this.el,"name")||this.component.name:K(this.el,"name")||this.el.name},we.prototype._hasFieldDependency=function(e){var t=this,n=!1;return!!e&&(X(e)?(Object.keys(e).forEach(function(t){if(/confirmed|after|before/.test(t))return n=e[t],!1}),n):(e.split("|").every(function(e){return/\b(confirmed|after|before):/.test(e)?(n=e.split(":")[1],!1):!/\b(confirmed)/.test(e)||(n=t.fieldName+"_confirmation",!1)}),n))},we.prototype._inputListener=function(){this._validate(this.el.value)},we.prototype._fileListener=function(){!this._validate(ie(this.el.files))&&this.binding.modifiers.reject&&(this.el.value="")},we.prototype._radioListener=function(){var e=document.querySelector('input[name="'+this.el.name+'"]:checked');this._validate(e?e.value:null)},we.prototype._checkboxListener=function(){var e=this,t=document.querySelectorAll('input[name="'+this.el.name+'"]:checked');if(!t||!t.length)return void this._validate(null);ie(t).forEach(function(t){e._validate(t.value)})},we.prototype._validate=function(e){return this.vm.$validator.validate(this.fieldName,e,this.scope||J(this.el))},we.prototype._getScopedListener=function(e){var t=this;return function(n){(!n||n===t.scope||n instanceof Event)&&e()}},we.prototype._attachValidatorEvent=function(){var e=this,t=this._getScopedListener(this._getSuitableListener().listener.bind(this)),n=this._hasFieldDependency(se(this.binding.expression,this.binding.value,this.el));n&&this.vm.$nextTick(function(){var r=document.querySelector("input[name='"+n+"']");if(!r)return void Z("Cannot find target field, no additional listeners were attached.");r.addEventListener("input",t),e.callbacks.push({name:"input",listener:t,el:r})})},we.prototype._getSuitableListener=function(){var e;if("SELECT"===this.el.tagName)return{names:["change","blur"],listener:this._inputListener};switch(this.el.type){case"file":e={names:["change"],listener:this._fileListener};break;case"radio":e={names:["change"],listener:this._radioListener};break;case"checkbox":e={names:["change"],listener:this._checkboxListener};break;default:e={names:["input","blur"],listener:this._inputListener}}var t=K(this.el,"validate-on");return t&&(e.names=t.split("|")),e},we.prototype._attachComponentListeners=function(){var e=this;this.componentListener=Q(function(t){e._validate(t)},K(this.el,"delay")||this.options.delay),this.component.$on("input",this.componentListener)},we.prototype._attachFieldListeners=function(){var e=this;if(this.component)return void this._attachComponentListeners();var t=this._getSuitableListener(),n=Q(t.listener.bind(this),K(this.el,"delay")||this.options.delay);if(~["radio","checkbox"].indexOf(this.el.type))return void this.vm.$nextTick(function(){var r=document.querySelectorAll('input[name="'+e.el.name+'"]');ie(r).forEach(function(r){t.names.forEach(function(t){r.addEventListener(t,n),e.callbacks.push({name:t,listener:n,el:r})})})});t.names.forEach(function(t){e.el.addEventListener(t,n),e.callbacks.push({name:t,listener:n,el:e.el})})},we.prototype._resolveValueGetter=function(){var e=this;if(this.component)return{context:function(){return e.component},getter:function(e){return e[K(e.$el,"value-path")]||e.value}};switch(this.el.type){case"checkbox":return{context:function(){return document.querySelectorAll('input[name="'+e.el.name+'"]:checked')},getter:function(e){return e&&e.length?ie(e).map(function(e){return e.value}):null}};case"radio":return{context:function(){return document.querySelector('input[name="'+e.el.name+'"]:checked')},getter:function(e){return e&&e.value}};case"file":return{context:function(){return e.el},getter:function(e){return ie(e.files)}};default:return{context:function(){return e.el},getter:function(e){return e.value}}}},we.prototype._getArg=function(){return this.binding.arg?this.binding.arg:this.model?this.model:X(this.binding.value)?this.binding.value.arg:null},we.prototype._attachModelWatcher=function(e){var t=this,n=K(this.el,"validate-on")||"input|blur",r=Q(this._getSuitableListener().listener.bind(this),K(this.el,"delay")||this.options.delay);n.split("|").forEach(function(n){if(~["input","change"].indexOf(n)){var i=Q(function(e){t.vm.$validator.validate(t.fieldName,e,t.scope||J(t.el))},K(t.el,"delay")||t.options.delay);return void(t.unwatch=t.vm.$watch(e,i,{deep:!0}))}t.el.addEventListener(n,r),t.callbacks.push({name:n,listener:r,el:t.el})})},we.prototype.attach=function(){var e=this,t=this._resolveValueGetter(),n=t.context,r=t.getter;this.vm.$validator.attach(this.fieldName,se(this.binding.expression,this.binding.value,this.el),{scope:function(){return e.scope||J(e.el)},prettyName:K(this.el,"as"),context:n,getter:r,listeners:this}),this._attachValidatorEvent();var i=this._getArg();if(i)return void this._attachModelWatcher(i);this._attachFieldListeners()},we.prototype.detach=function(){this.component&&this.component.$off("input",this.componentListener),this.unwatch&&this.unwatch(),this.callbacks.forEach(function(e){e.el.removeEventListener(e.name,e.listener)}),this.callbacks=[]};var _e=[],Ce=function(e){return{bind:function(t,a,o){var s=new we(t,a,o,e);s.attach(),_e.push({vm:o.context,el:t,instance:s}),e.enableAutoClasses&&(i(t,e.classNames),t.onfocus=function(){r(t,e.classNames)},n(t,o.context.$validator.fieldBag.fields[s.fieldName],e.classNames))},update:function(t,r,i){var a=r.expression,o=r.value,s=r.oldValue,l=i.context,u=oe(_e,function(e){return e.vm===l&&e.el===t}),c=u.instance;if(e.enableAutoClasses&&n(t,l.$validator.fieldBag.fields[c.fieldName],e.classNames),a&&("string"!=typeof o||"string"!=typeof s||o!==s)){var f=X(o)?o.scope||J(t):J(t);l.$validator.updateField(c.fieldName,se(a,o,t),{scope:f||"__global__"})}},unbind:function(e,t,n){var r=t.value,i=n.context,a=oe(_e,function(t){return t.vm===i&&t.el===e});if(void 0!==a){var o=X(r)?r.scope:J(e)||"__global__";i.$validator.detach(a.instance.fieldName,o),_e.splice(_e.indexOf(a),1)}}}},De={touched:"touched",untouched:"untouched",valid:"valid",invalid:"invalid",pristine:"pristine",dirty:"dirty"};return{install:function(e,t){void 0===t&&(t={});var n=t.locale;void 0===n&&(n="en");var r=t.delay;void 0===r&&(r=0);var i=t.errorBagName;void 0===i&&(i="errors");var a=t.dictionary;void 0===a&&(a=null);var o=t.strict;void 0===o&&(o=!0);var s=t.fieldsBagName;void 0===s&&(s="fields");var l=t.enableAutoClasses;void 0===l&&(l=!1);var u=t.classNames;void 0===u&&(u={}),a&&xe.updateDictionary(a),xe.setLocale(n),xe.setStrictMode(o);var c={locale:n,delay:r,dictionary:a,errorBagName:i,fieldsBagName:s,enableAutoClasses:l,classNames:ae({},De,u)};e.mixin(ke(e,c)),e.directive("validate",Ce(c))},Validator:xe,ErrorBag:z,version:"2.0.0-beta.22"}}),function(e){function t(r,i){return this instanceof t?(e.isPlainObject(r)?i=r:(i=i||{},i.alias=r),this.el=void 0,this.opts=e.extend(!0,{},this.defaults,i),this.maskset=void 0,this.noMasksCache=i&&void 0!==i.definitions,this.userOptions=i||{},this.events={},this.dataAttribute="data-inputmask",this.isRTL=this.opts.numericInput,void n(this.opts.alias,i,this.opts)):new t(r,i)}function n(t,r,i){var a=i.aliases[t];return a?(a.alias&&n(a.alias,void 0,i),e.extend(!0,i,a),e.extend(!0,i,r),!0):(null===i.mask&&(i.mask=t),!1)}function r(n,r){function i(n,i,a){if(null!==n&&""!==n){if(1===n.length&&!1===a.greedy&&0!==a.repeat&&(a.placeholder=""),a.repeat>0||"*"===a.repeat||"+"===a.repeat){var o="*"===a.repeat?0:"+"===a.repeat?1:a.repeat;n=a.groupmarker.start+n+a.groupmarker.end+a.quantifiermarker.start+o+","+a.repeat+a.quantifiermarker.end}var s;return void 0===t.prototype.masksCache[n]||!0===r?(s={mask:n,maskToken:t.prototype.analyseMask(n,a),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:i,maskLength:void 0},!0!==r&&(t.prototype.masksCache[a.numericInput?n.split("").reverse().join(""):n]=s,s=e.extend(!0,{},t.prototype.masksCache[a.numericInput?n.split("").reverse().join(""):n]))):s=e.extend(!0,{},t.prototype.masksCache[a.numericInput?n.split("").reverse().join(""):n]),s}}var a;if(e.isFunction(n.mask)&&(n.mask=n.mask(n)),e.isArray(n.mask)){if(n.mask.length>1){n.keepStatic=null===n.keepStatic||n.keepStatic;var o=n.groupmarker.start;return e.each(n.numericInput?n.mask.reverse():n.mask,function(t,r){o.length>1&&(o+=n.groupmarker.end+n.alternatormarker+n.groupmarker.start),o+=void 0===r.mask||e.isFunction(r.mask)?r:r.mask}),o+=n.groupmarker.end,i(o,n.mask,n)}n.mask=n.mask.pop()}return n.mask&&(a=void 0===n.mask.mask||e.isFunction(n.mask.mask)?i(n.mask,n.mask,n):i(n.mask.mask,n.mask,n)),a}function i(n,r,a){function c(e,t,n){t=t||0;var r,i,o,s=[],l=0,u=p();-1===(U=void 0!==V?V.maxLength:void 0)&&(U=void 0);do{!0===e&&f().validPositions[l]?(o=f().validPositions[l],i=o.match,r=o.locator.slice(),s.push(!0===n?o.input:!1===n?i.nativeDef:O(l,i))):(o=v(l,r,l-1),i=o.match,r=o.locator.slice(),(!1===a.jitMasking||l<u||"number"==typeof a.jitMasking&&isFinite(a.jitMasking)&&a.jitMasking>l)&&s.push(!1===n?i.nativeDef:O(l,i))),l++}while((void 0===U||l<U)&&(null!==i.fn||""!==i.def)||t>l);return""===s[s.length-1]&&s.pop(),f().maskLength=l+1,s}function f(){return r}function d(e){var t=f();t.buffer=void 0,!0!==e&&(t._buffer=void 0,t.validPositions={},t.p=0)}function p(e,t,n){var r=-1,i=-1,a=n||f().validPositions;void 0===e&&(e=-1);for(var o in a){var s=parseInt(o);a[s]&&(t||null!==a[s].match.fn)&&(s<=e&&(r=s),s>=e&&(i=s))}return-1!==r&&e-r>1||i<e?r:i}function h(t,n,r,i){var o,s=t,l=e.extend(!0,{},f().validPositions),u=!1;for(f().p=t,o=n-1;o>=s;o--)void 0!==f().validPositions[o]&&(!0!==r&&(!f().validPositions[o].match.optionality&&function(e){var t=f().validPositions[e];if(void 0!==t&&null===t.match.fn){var n=f().validPositions[e-1],r=f().validPositions[e+1];return void 0!==n&&void 0!==r}return!1}(o)||!1===a.canClearPosition(f(),o,p(),i,a))||delete f().validPositions[o]);for(d(!0),o=s+1;o<=p();){for(;void 0!==f().validPositions[s];)s++;if(o<s&&(o=s+1),void 0===f().validPositions[o]&&E(o))o++;else{var c=v(o);!1===u&&l[s]&&l[s].match.def===c.match.def?(f().validPositions[s]=e.extend(!0,{},l[s]),f().validPositions[s].input=c.input,delete f().validPositions[o],o++):y(s,c.match.def)?!1!==D(s,c.input||O(o),!0)&&(delete f().validPositions[o],o++,u=!0):E(o)||(o++,s--),s++}}d(!0)}function m(e,t){for(var n,r=e,i=p(),o=f().validPositions[i]||b(0)[0],s=void 0!==o.alternation?o.locator[o.alternation].toString().split(","):[],l=0;l<r.length&&(n=r[l],!(n.match&&(a.greedy&&!0!==n.match.optionalQuantifier||(!1===n.match.optionality||!1===n.match.newBlockMarker)&&!0!==n.match.optionalQuantifier)&&(void 0===o.alternation||o.alternation!==n.alternation||void 0!==n.locator[o.alternation]&&C(n.locator[o.alternation].toString().split(","),s)))||!0===t&&(null!==n.match.fn||/[0-9a-bA-Z]/.test(n.match.def)));l++);return n}function v(e,t,n){return f().validPositions[e]||m(b(e,t?t.slice():t,n))}function g(e){return f().validPositions[e]?f().validPositions[e]:b(e)[0]}function y(e,t){for(var n=!1,r=b(e),i=0;i<r.length;i++)if(r[i].match&&r[i].match.def===t){n=!0;break}return n}function b(t,n,r){function i(n,r,o,l){function c(o,l,m){function v(t,n){var r=0===e.inArray(t,n.matches);return r||e.each(n.matches,function(e,i){if(!0===i.isQuantifier&&(r=v(t,n.matches[e-1])))return!1}),r}function g(t,n,r){var i,a;return(f().tests[t]||f().validPositions[t])&&e.each(f().tests[t]||[f().validPositions[t]],function(e,t){var o=void 0!==r?r:t.alternation,s=void 0!==t.locator[o]?t.locator[o].toString().indexOf(n):-1;(void 0===a||s<a)&&-1!==s&&(i=t,a=s)}),i?i.locator.slice((void 0!==r?r:i.alternation)+1):void 0!==r?g(t,n):void 0}if(u>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+f().mask;if(u===t&&void 0===o.matches)return d.push({match:o,locator:l.reverse(),cd:h}),!0;if(void 0!==o.matches){if(o.isGroup&&m!==o){if(o=c(n.matches[e.inArray(o,n.matches)+1],l))return!0}else if(o.isOptional){var y=o;if(o=i(o,r,l,m)){if(s=d[d.length-1].match,!v(s,y))return!0;p=!0,u=t}}else if(o.isAlternator){var b,x=o,k=[],w=d.slice(),_=l.length,C=r.length>0?r.shift():-1;if(-1===C||"string"==typeof C){var D,E=u,S=r.slice(),A=[];if("string"==typeof C)A=C.split(",");else for(D=0;D<x.matches.length;D++)A.push(D);for(var T=0;T<A.length;T++){if(D=parseInt(A[T]),d=[],r=g(u,D,_)||S.slice(),!0!==(o=c(x.matches[D]||n.matches[D],[D].concat(l),m)||o)&&void 0!==o&&A[A.length-1]<x.matches.length){var M=e.inArray(o,n.matches)+1;n.matches.length>M&&(o=c(n.matches[M],[M].concat(l.slice(1,l.length)),m))&&(A.push(M.toString()),e.each(d,function(e,t){t.alternation=l.length-1}))}b=d.slice(),u=E,d=[];for(var O=0;O<b.length;O++){var j=b[O],P=!1;j.alternation=j.alternation||_;for(var N=0;N<k.length;N++){var F=k[N];if(("string"!=typeof C||-1!==e.inArray(j.locator[j.alternation].toString(),A))&&(j.match.def===F.match.def||function(e,n){return null===e.match.fn&&null!==n.match.fn&&n.match.fn.test(e.match.def,f(),t,!1,a,!1)}(j,F))){P=j.match.nativeDef===F.match.nativeDef,j.alternation==F.alternation&&-1===F.locator[F.alternation].toString().indexOf(j.locator[j.alternation])&&(F.locator[F.alternation]=F.locator[F.alternation]+","+j.locator[j.alternation],F.alternation=j.alternation,null==j.match.fn&&(F.na=F.na||j.locator[j.alternation].toString(),-1===F.na.indexOf(j.locator[j.alternation])&&(F.na=F.na+","+j.locator[j.alternation])));break}}P||k.push(j)}}"string"==typeof C&&(k=e.map(k,function(t,n){if(isFinite(n)){var r=t.alternation,i=t.locator[r].toString().split(",");t.locator[r]=void 0,t.alternation=void 0;for(var a=0;a<i.length;a++)-1!==e.inArray(i[a],A)&&(void 0!==t.locator[r]?(t.locator[r]+=",",t.locator[r]+=i[a]):t.locator[r]=parseInt(i[a]),t.alternation=r);if(void 0!==t.locator[r])return t}})),d=w.concat(k),u=t,p=d.length>0,r=S.slice()}else o=c(x.matches[C]||n.matches[C],[C].concat(l),m);if(o)return!0}else if(o.isQuantifier&&m!==n.matches[e.inArray(o,n.matches)-1])for(var $=o,I=r.length>0?r.shift():0;I<(isNaN($.quantifier.max)?I+1:$.quantifier.max)&&u<=t;I++){var L=n.matches[e.inArray($,n.matches)-1];if(o=c(L,[I].concat(l),L)){if(s=d[d.length-1].match,s.optionalQuantifier=I>$.quantifier.min-1,v(s,L)){if(I>$.quantifier.min-1){p=!0,u=t;break}return!0}return!0}}else if(o=i(o,r,l,m))return!0}else u++}for(var m=r.length>0?r.shift():0;m<n.matches.length;m++)if(!0!==n.matches[m].isQuantifier){var v=c(n.matches[m],[m].concat(o),l);if(v&&u===t)return v;if(u>t)break}}function o(e){return a.keepStatic&&t>0&&e.length>1+(""===e[e.length-1].match.def?1:0)&&!0!==e[0].match.optionality&&!0!==e[0].match.optionalQuantifier&&null===e[0].match.fn&&!/[0-9a-bA-Z]/.test(e[0].match.def)?[m(e)]:e}var s,l=f().maskToken,u=n?r:0,c=n?n.slice():[0],d=[],p=!1,h=n?n.join(""):"";if(t>-1){if(void 0===n){for(var v,g=t-1;void 0===(v=f().validPositions[g]||f().tests[g])&&g>-1;)g--;void 0!==v&&g>-1&&(c=function(t){var n=[];return e.isArray(t)||(t=[t]),t.length>0&&(void 0===t[0].alternation?(n=m(t.slice()).locator.slice(),0===n.length&&(n=t[0].locator.slice())):e.each(t,function(e,t){if(""!==t.def)if(0===n.length)n=t.locator.slice();else for(var r=0;r<n.length;r++)t.locator[r]&&-1===n[r].toString().indexOf(t.locator[r])&&(n[r]+=","+t.locator[r])})),n}(v),h=c.join(""),u=g)}if(f().tests[t]&&f().tests[t][0].cd===h)return o(f().tests[t]);for(var y=c.shift();y<l.length;y++){if(i(l[y],c,[y])&&u===t||u>t)break}}return(0===d.length||p)&&d.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:"",placeholder:""},locator:[],cd:h}),void 0!==n&&f().tests[t]?o(e.extend(!0,[],d)):(f().tests[t]=e.extend(!0,[],d),o(f().tests[t]))}function x(){return void 0===f()._buffer&&(f()._buffer=c(!1,1),void 0===f().buffer&&f()._buffer.slice()),f()._buffer}function k(e){return void 0!==f().buffer&&!0!==e||(f().buffer=c(!0,p(),!0)),f().buffer}function w(e,t,n){var r;if(!0===e)d(),e=0,t=n.length;else for(r=e;r<t;r++)delete f().validPositions[r];for(r=e;r<t;r++)d(!0),n[r]!==a.skipOptionalPartCharacter&&D(r,n[r],!0,!0)}function _(e,n,r){switch(a.casing||n.casing){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase();break;case"title":var i=f().validPositions[r-1];e=0===r||i&&i.input===String.fromCharCode(t.keyCode.SPACE)?e.toUpperCase():e.toLowerCase()}return e}function C(t,n){for(var r=a.greedy?n:n.slice(0,1),i=!1,o=0;o<t.length;o++)if(-1!==e.inArray(t[o],r)){i=!0;break}return i}function D(n,r,i,o,s){function l(e){var t=z?e.begin-e.end>1||e.begin-e.end==1&&a.insertMode:e.end-e.begin>1||e.end-e.begin==1&&a.insertMode;return t&&0===e.begin&&e.end===f().maskLength?"full":t}function u(t,r,i){var s=!1;return e.each(b(t),function(u,m){for(var v=m.match,g=r?1:0,y="",b=v.cardinality;b>g;b--)y+=T(t-(b-1));if(r&&(y+=r),k(!0),!1!==(s=null!=v.fn?v.fn.test(y,f(),t,i,a,l(n)):(r===v.def||r===a.skipOptionalPartCharacter)&&""!==v.def&&{c:v.placeholder||v.def,pos:t})){var x=void 0!==s.c?s.c:r;x=x===a.skipOptionalPartCharacter&&null===v.fn?v.placeholder||v.def:x;var C=t,E=k();if(void 0!==s.remove&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort(function(e,t){return t-e}),function(e,t){h(t,t+1,!0)})),void 0!==s.insert&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort(function(e,t){return e-t}),function(e,t){D(t.pos,t.c,!0,o)})),s.refreshFromBuffer){var S=s.refreshFromBuffer;if(i=!0,w(!0===S?S:S.start,S.end,E),void 0===s.pos&&void 0===s.c)return s.pos=p(),!1;if((C=void 0!==s.pos?s.pos:t)!==t)return s=e.extend(s,D(C,x,!0,o)),!1}else if(!0!==s&&void 0!==s.pos&&s.pos!==t&&(C=s.pos,w(t,C,k().slice()),C!==t))return s=e.extend(s,D(C,x,!0)),!1;return(!0===s||void 0!==s.pos||void 0!==s.c)&&(u>0&&d(!0),c(C,e.extend({},m,{input:_(x,v,C)}),o,l(n))||(s=!1),!1)}}),s}function c(t,n,r,i){if(i||a.insertMode&&void 0!==f().validPositions[t]&&void 0===r){var o,s=e.extend(!0,{},f().validPositions),l=p(void 0,!0);for(o=t;o<=l;o++)delete f().validPositions[o];f().validPositions[t]=e.extend(!0,{},n);var u,c=!0,h=f().validPositions,m=!1,v=f().maskLength;for(o=u=t;o<=l;o++){var b=s[o];if(void 0!==b)for(var x=u;x<f().maskLength&&(null===b.match.fn&&h[o]&&(!0===h[o].match.optionalQuantifier||!0===h[o].match.optionality)||null!=b.match.fn);){if(x++,!1===m&&s[x]&&s[x].match.def===b.match.def)f().validPositions[x]=e.extend(!0,{},s[x]),f().validPositions[x].input=b.input,g(x),u=x,c=!0;else if(y(x,b.match.def)){var k=D(x,b.input,!0,!0);c=!1!==k,u=k.caret||k.insert?p():x,m=!0}else c=!0===b.generatedInput;if(f().maskLength<v&&(f().maskLength=v),c)break}if(!c)break}if(!c)return f().validPositions=e.extend(!0,{},s),d(!0),!1}else f().validPositions[t]=e.extend(!0,{},n);return d(!0),!0}function g(t){for(var n=t-1;n>-1&&!f().validPositions[n];n--);var r,i;for(n++;n<t;n++)void 0===f().validPositions[n]&&(!1===a.jitMasking||a.jitMasking>n)&&(i=b(n,v(n-1).locator,n-1).slice(),""===i[i.length-1].match.def&&i.pop(),(r=m(i))&&(r.match.def===a.radixPointDefinitionSymbol||!E(n,!0)||e.inArray(a.radixPoint,k())<n&&r.match.fn&&r.match.fn.test(O(n),f(),n,!1,a))&&!1!==(A=u(n,r.match.placeholder||(null==r.match.fn?r.match.def:""!==O(n)?O(n):k()[n]),!0))&&(f().validPositions[A.pos||n].generatedInput=!0))}i=!0===i;var x=n;void 0!==n.begin&&(x=z&&!l(n)?n.end:n.begin);var A=!1,M=e.extend(!0,{},f().validPositions);if(g(x),l(n)&&(L(void 0,t.keyCode.DELETE,n),x=f().p),x<f().maskLength&&(A=u(x,r,i),(!i||!0===o)&&!1===A)){var j=f().validPositions[x];if(!j||null!==j.match.fn||j.match.def!==r&&r!==a.skipOptionalPartCharacter){if((a.insertMode||void 0===f().validPositions[S(x)])&&!E(x,!0)){var P=b(x).slice();""===P[P.length-1].match.def&&P.pop();var N=m(P,!0);N&&null===N.match.fn&&(N=N.match.placeholder||N.match.def,u(x,N,i),f().validPositions[x].generatedInput=!0);for(var F=x+1,$=S(x);F<=$;F++)if(!1!==(A=u(F,r,i))){(function(t,n){var r=f().validPositions[n];if(r)for(var i=r.locator,a=i.length,o=t;o<n;o++)if(void 0===f().validPositions[o]&&!E(o,!0)){var s=b(o),l=s[0],u=-1;e.each(s,function(e,t){for(var n=0;n<a&&void 0!==t.locator[n]&&C(t.locator[n].toString().split(","),i[n].toString().split(","));n++)u<n&&(u=n,l=t)}),c(o,e.extend({},l,{input:l.match.placeholder||l.match.def}),!0)}})(x,void 0!==A.pos?A.pos:F),x=F;break}}}else A={caret:S(x)}}return!1===A&&a.keepStatic&&!i&&!0!==s&&(A=function(t,n,r){var i,s,l,u,c,h,m,v,g=e.extend(!0,{},f().validPositions),y=!1,x=p();for(u=f().validPositions[x];x>=0;x--)if((l=f().validPositions[x])&&void 0!==l.alternation){if(i=x,s=f().validPositions[i].alternation,u.locator[l.alternation]!==l.locator[l.alternation])break;u=l}if(void 0!==s){v=parseInt(i);var k=void 0!==u.locator[u.alternation||s]?u.locator[u.alternation||s]:m[0]
;k.length>0&&(k=k.split(",")[0]);var w=f().validPositions[v],_=f().validPositions[v-1];e.each(b(v,_?_.locator:void 0,v-1),function(i,l){m=l.locator[s]?l.locator[s].toString().split(","):[];for(var u=0;u<m.length;u++){var b=[],x=0,_=0,C=!1;if(k<m[u]&&(void 0===l.na||-1===e.inArray(m[u],l.na.split(",")))){f().validPositions[v]=e.extend(!0,{},l);var E=f().validPositions[v].locator;for(f().validPositions[v].locator[s]=parseInt(m[u]),null==l.match.fn?(w.input!==l.match.def&&(C=!0,!0!==w.generatedInput&&b.push(w.input)),_++,f().validPositions[v].generatedInput=!/[0-9a-bA-Z]/.test(l.match.def),f().validPositions[v].input=l.match.def):f().validPositions[v].input=w.input,c=v+1;c<p(void 0,!0)+1;c++)h=f().validPositions[c],h&&!0!==h.generatedInput&&/[0-9a-bA-Z]/.test(h.input)?b.push(h.input):c<t&&x++,delete f().validPositions[c];for(C&&b[0]===l.match.def&&b.shift(),d(!0),y=!0;b.length>0;){var S=b.shift();if(S!==a.skipOptionalPartCharacter&&!(y=D(p(void 0,!0)+1,S,!1,o,!0)))break}if(y){f().validPositions[v].locator=E;var A=p(t)+1;for(c=v+1;c<p()+1;c++)(void 0===(h=f().validPositions[c])||null==h.match.fn)&&c<t+(_-x)&&_++;t+=_-x,y=D(t>A?A:t,n,r,o,!0)}if(y)return!1;d(),f().validPositions=e.extend(!0,{},g)}}})}return y}(x,r,i)),!0===A&&(A={pos:x}),e.isFunction(a.postValidation)&&!1!==A&&!i&&!0!==o&&(A=!!a.postValidation(k(!0),A,a)&&A),void 0===A.pos&&(A.pos=x),!1===A&&(d(!0),f().validPositions=e.extend(!0,{},M)),A}function E(e,t){var n;if(t?(n=v(e).match,""===n.def&&(n=g(e).match)):n=g(e).match,null!=n.fn)return n.fn;if(!0!==t&&e>-1){var r=b(e);return r.length>1+(""===r[r.length-1].match.def?1:0)}return!1}function S(e,t){var n=f().maskLength;if(e>=n)return n;for(var r=e;++r<n&&(!0===t&&(!0!==g(r).match.newBlockMarker||!E(r))||!0!==t&&!E(r)););return r}function A(e,t){var n,r=e;if(r<=0)return 0;for(;--r>0&&(!0===t&&!0!==g(r).match.newBlockMarker||!0!==t&&!E(r)&&(n=b(r),n.length<2||2===n.length&&""===n[1].match.def)););return r}function T(e){return void 0===f().validPositions[e]?O(e):f().validPositions[e].input}function M(t,n,r,i,o){if(i&&e.isFunction(a.onBeforeWrite)){var s=a.onBeforeWrite(i,n,r,a);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;w(!0===l?l:l.start,l.end,s.buffer||n),n=k(!0)}void 0!==r&&(r=void 0!==s.caret?s.caret:r)}}t.inputmask._valueSet(n.join("")),void 0===r||void 0!==i&&"blur"===i.type?H(t,n,r):N(t,r),!0===o&&(K=!0,e(t).trigger("input"))}function O(e,t){if(t=t||g(e).match,void 0!==t.placeholder)return t.placeholder;if(null===t.fn){if(e>-1&&void 0===f().validPositions[e]){var n,r=b(e),i=[];if(r.length>1+(""===r[r.length-1].match.def?1:0))for(var o=0;o<r.length;o++)if(!0!==r[o].match.optionality&&!0!==r[o].match.optionalQuantifier&&(null===r[o].match.fn||void 0===n||!1!==r[o].match.fn.test(n.match.def,f(),e,!0,a))&&(i.push(r[o]),null===r[o].match.fn&&(n=r[o]),i.length>1&&/[0-9a-bA-Z]/.test(i[0].match.def)))return a.placeholder.charAt(e%a.placeholder.length)}return t.def}return a.placeholder.charAt(e%a.placeholder.length)}function j(n,r,i,o,s,l){function u(){var e=!1,t=x().slice(m,S(m)).join("").indexOf(h);if(-1!==t&&!E(m)){e=!0;for(var n=x().slice(m,m+t),r=0;r<n.length;r++)if(" "!==n[r]){e=!1;break}}return e}var c=o.slice(),h="",m=0,g=void 0;if(d(),f().p=S(-1),!i)if(!0!==a.autoUnmask){var y=x().slice(0,S(-1)).join(""),b=c.join("").match(new RegExp("^"+t.escapeRegex(y),"g"));b&&b.length>0&&(c.splice(0,b.length*y.length),m=S(m))}else m=S(m);if(e.each(c,function(t,r){if(void 0!==r){var o=new e.Event("keypress");o.which=r.charCodeAt(0),h+=r;var s=p(void 0,!0),l=f().validPositions[s],c=v(s+1,l?l.locator.slice():void 0,s);if(!u()||i||a.autoUnmask){var y=i?t:null==c.match.fn&&c.match.optionality&&s+1<f().p?s+1:f().p;g=X.keypressEvent.call(n,o,!0,!1,i,y),m=y+1,h=""}else g=X.keypressEvent.call(n,o,!0,!1,!0,s+1);if(!i&&e.isFunction(a.onBeforeWrite)&&(g=a.onBeforeWrite(o,k(),g.forwardPosition,a))&&g.refreshFromBuffer){var b=g.refreshFromBuffer;w(!0===b?b:b.start,b.end,g.buffer),d(!0),g.caret&&(f().p=g.caret)}}}),r){var _=void 0,C=p();document.activeElement===n&&(s||g)&&(_=N(n).begin,s&&!1===g&&(_=S(p(_))),g&&!0!==l&&(_<C+1||-1===C)&&(_=a.numericInput&&void 0===g.caret?A(g.forwardPosition):g.forwardPosition)),M(n,k(),_,s||new e.Event("checkval"))}}function P(t){if(t&&void 0===t.inputmask)return t.value;var n=[],r=f().validPositions;for(var i in r)r[i].match&&null!=r[i].match.fn&&n.push(r[i].input);var o=0===n.length?"":(z?n.reverse():n).join("");if(e.isFunction(a.onUnMask)){var s=(z?k().slice().reverse():k()).join("");o=a.onUnMask(s,o,a)||o}return o}function N(e,t,n,r){function i(e){if(!0!==r&&z&&"number"==typeof e&&(!a.greedy||""!==a.placeholder)){e=k().join("").length-e}return e}var s;if("number"!=typeof t)return e.setSelectionRange?(t=e.selectionStart,n=e.selectionEnd):window.getSelection?(s=window.getSelection().getRangeAt(0),s.commonAncestorContainer.parentNode!==e&&s.commonAncestorContainer!==e||(t=s.startOffset,n=s.endOffset)):document.selection&&document.selection.createRange&&(s=document.selection.createRange(),t=0-s.duplicate().moveStart("character",-e.inputmask._valueGet().length),n=t+s.text.length),{begin:i(t),end:i(n)};t=i(t),n=i(n),n="number"==typeof n?n:t;var l=parseInt(((e.ownerDocument.defaultView||window).getComputedStyle?(e.ownerDocument.defaultView||window).getComputedStyle(e,null):e.currentStyle).fontSize)*n;if(e.scrollLeft=l>e.scrollWidth?l:0,o||!1!==a.insertMode||t!==n||n++,e.setSelectionRange)e.selectionStart=t,e.selectionEnd=n;else if(window.getSelection){if(s=document.createRange(),void 0===e.firstChild||null===e.firstChild){var u=document.createTextNode("");e.appendChild(u)}s.setStart(e.firstChild,t<e.inputmask._valueGet().length?t:e.inputmask._valueGet().length),s.setEnd(e.firstChild,n<e.inputmask._valueGet().length?n:e.inputmask._valueGet().length),s.collapse(!0);var c=window.getSelection();c.removeAllRanges(),c.addRange(s)}else e.createTextRange&&(s=e.createTextRange(),s.collapse(!0),s.moveEnd("character",n),s.moveStart("character",t),s.select());H(e,void 0,{begin:t,end:n})}function F(t){var n,r,i=k(),a=i.length,o=p(),s={},l=f().validPositions[o],u=void 0!==l?l.locator.slice():void 0;for(n=o+1;n<i.length;n++)r=v(n,u,n-1),u=r.locator.slice(),s[n]=e.extend(!0,{},r);var c=l&&void 0!==l.alternation?l.locator[l.alternation]:void 0;for(n=a-1;n>o&&(r=s[n],(r.match.optionality||r.match.optionalQuantifier||c&&(c!==s[n].locator[l.alternation]&&null!=r.match.fn||null===r.match.fn&&r.locator[l.alternation]&&C(r.locator[l.alternation].toString().split(","),c.toString().split(","))&&""!==b(n)[0].def))&&i[n]===O(n,r.match));n--)a--;return t?{l:a,def:s[a]?s[a].match:void 0}:a}function $(e){for(var t=F(),n=e.length-1;n>t&&!E(n);n--);return e.splice(t,n+1-t),e}function I(t){if(e.isFunction(a.isComplete))return a.isComplete(t,a);if("*"!==a.repeat){var n=!1,r=F(!0),i=A(r.l);if(void 0===r.def||r.def.newBlockMarker||r.def.optionality||r.def.optionalQuantifier){n=!0;for(var o=0;o<=i;o++){var s=v(o).match;if(null!==s.fn&&void 0===f().validPositions[o]&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[o]!==O(o,s)){n=!1;break}}}return n}}function L(n,r,i,o){if((a.numericInput||z)&&(r===t.keyCode.BACKSPACE?r=t.keyCode.DELETE:r===t.keyCode.DELETE&&(r=t.keyCode.BACKSPACE),z)){var s=i.end;i.end=i.begin,i.begin=s}r===t.keyCode.BACKSPACE&&(i.end-i.begin<1||!1===a.insertMode)?(i.begin=A(i.begin),void 0===f().validPositions[i.begin]||f().validPositions[i.begin].input!==a.groupSeparator&&f().validPositions[i.begin].input!==a.radixPoint||i.begin--):r===t.keyCode.DELETE&&i.begin===i.end&&(i.end=E(i.end,!0)?i.end+1:S(i.end)+1,void 0===f().validPositions[i.begin]||f().validPositions[i.begin].input!==a.groupSeparator&&f().validPositions[i.begin].input!==a.radixPoint||i.end++),h(i.begin,i.end,!1,o),!0!==o&&function(){if(a.keepStatic){for(var t=[],r=p(-1,!0),i=e.extend(!0,{},f().validPositions),o=f().validPositions[r];r>=0;r--){var s=f().validPositions[r];if(s){if(!0!==s.generatedInput&&/[0-9a-bA-Z]/.test(s.input)&&t.push(s.input),delete f().validPositions[r],void 0!==s.alternation&&s.locator[s.alternation]!==o.locator[s.alternation])break;o=s}}if(r>-1)for(f().p=S(p(-1,!0));t.length>0;){var l=new e.Event("keypress");l.which=t.pop().charCodeAt(0),X.keypressEvent.call(n,l,!0,!1,!1,f().p)}else f().validPositions=e.extend(!0,{},i)}}();var l=p(i.begin,!0);l<i.begin?f().p=S(l):!0!==o&&(f().p=i.begin)}function R(t){function n(e){var n,r=document.createElement("span");for(var i in o)isNaN(i)&&-1!==i.indexOf("font")&&(r.style[i]=o[i]);r.style.textTransform=o.textTransform,r.style.letterSpacing=o.letterSpacing,r.style.position="absolute",r.style.height="auto",r.style.width="auto",r.style.visibility="hidden",r.style.whiteSpace="nowrap",document.body.appendChild(r);var a,s=t.inputmask._valueGet(),l=0;for(n=0,a=s.length;n<=a;n++){if(r.innerHTML+=s.charAt(n)||"_",r.offsetWidth>=e){var u=e-l,c=r.offsetWidth-e;r.innerHTML=s.charAt(n),u-=r.offsetWidth/3,n=u<c?n-1:n;break}l=r.offsetWidth}return document.body.removeChild(r),n}function r(){Y.style.position="absolute",Y.style.top=i.top+"px",Y.style.left=i.left+"px",Y.style.width=parseInt(t.offsetWidth)-parseInt(o.paddingLeft)-parseInt(o.paddingRight)-parseInt(o.borderLeftWidth)-parseInt(o.borderRightWidth)+"px",Y.style.height=parseInt(t.offsetHeight)-parseInt(o.paddingTop)-parseInt(o.paddingBottom)-parseInt(o.borderTopWidth)-parseInt(o.borderBottomWidth)+"px",Y.style.lineHeight=Y.style.height,Y.style.zIndex=isNaN(o.zIndex)?-1:o.zIndex-1,Y.style.webkitAppearance="textfield",Y.style.mozAppearance="textfield",Y.style.Appearance="textfield"}var i=e(t).position(),o=(t.ownerDocument.defaultView||window).getComputedStyle(t,null);t.parentNode,Y=document.createElement("div"),document.body.appendChild(Y);for(var s in o)isNaN(s)&&"cssText"!==s&&-1==s.indexOf("webkit")&&(Y.style[s]=o[s]);t.style.backgroundColor="transparent",t.style.color="transparent",t.style.webkitAppearance="caret",t.style.mozAppearance="caret",t.style.Appearance="caret",r(),e(window).on("resize",function(n){i=e(t).position(),o=(t.ownerDocument.defaultView||window).getComputedStyle(t,null),r()}),e(t).on("click",function(e){return N(t,n(e.clientX)),X.clickEvent.call(this,[e])}),e(t).on("keydown",function(e){e.shiftKey||!1===a.insertMode||setTimeout(function(){H(t)},0)})}function H(e,t,n){function r(){o||null!==l.fn&&void 0!==u.input?o&&null!==l.fn&&void 0!==u.input&&(o=!1,i+="</span>"):(o=!0,i+="<span class='im-static''>")}if(void 0!==Y){t=t||k(),void 0===n?n=N(e):void 0===n.begin&&(n={begin:n,end:n});var i="",o=!1;if(""!=t){var s,l,u,c=0,d=p();do{c===n.begin&&document.activeElement===e&&(i+="<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>"),f().validPositions[c]?(u=f().validPositions[c],l=u.match,s=u.locator.slice(),r(),i+=u.input):(u=v(c,s,c-1),l=u.match,s=u.locator.slice(),(!1===a.jitMasking||c<d||"number"==typeof a.jitMasking&&isFinite(a.jitMasking)&&a.jitMasking>c)&&(r(),i+=O(c,l))),c++}while((void 0===U||c<U)&&(null!==l.fn||""!==l.def)||d>c)}Y.innerHTML=i}}r=r||this.maskset,a=a||this.opts;var B,q,U,Y,W,V=this.el,z=this.isRTL,G=!1,K=!1,J=!1,Q=!1,Z={on:function(n,r,i){var o=function(n){if(void 0===this.inputmask&&"FORM"!==this.nodeName){var r=e.data(this,"_inputmask_opts");r?new t(r).mask(this):Z.off(this)}else{if("setvalue"===n.type||!(this.disabled||this.readOnly&&!("keydown"===n.type&&n.ctrlKey&&67===n.keyCode||!1===a.tabThrough&&n.keyCode===t.keyCode.TAB))){switch(n.type){case"input":if(!0===K)return K=!1,n.preventDefault();break;case"keydown":G=!1,K=!1;break;case"keypress":if(!0===G)return n.preventDefault();G=!0;break;case"click":if(s||l){var o=this,u=arguments;return setTimeout(function(){i.apply(o,u)},0),!1}}var c=i.apply(this,arguments);return!1===c&&(n.preventDefault(),n.stopPropagation()),c}n.preventDefault()}};n.inputmask.events[r]=n.inputmask.events[r]||[],n.inputmask.events[r].push(o),-1!==e.inArray(r,["submit","reset"])?null!=n.form&&e(n.form).on(r,o):e(n).on(r,o)},off:function(t,n){if(t.inputmask&&t.inputmask.events){var r;n?(r=[],r[n]=t.inputmask.events[n]):r=t.inputmask.events,e.each(r,function(n,r){for(;r.length>0;){var i=r.pop();-1!==e.inArray(n,["submit","reset"])?null!=t.form&&e(t.form).off(n,i):e(t).off(n,i)}delete t.inputmask.events[n]})}}},X={keydownEvent:function(n){var r=this,i=e(r),o=n.keyCode,s=N(r);if(o===t.keyCode.BACKSPACE||o===t.keyCode.DELETE||l&&o===t.keyCode.BACKSPACE_SAFARI||n.ctrlKey&&o===t.keyCode.X&&!function(e){var t=document.createElement("input"),n="on"+e,r=n in t;return r||(t.setAttribute(n,"return;"),r="function"==typeof t[n]),t=null,r}("cut"))n.preventDefault(),L(r,o,s),M(r,k(!0),f().p,n,r.inputmask._valueGet()!==k().join("")),r.inputmask._valueGet()===x().join("")?i.trigger("cleared"):!0===I(k())&&i.trigger("complete");else if(o===t.keyCode.END||o===t.keyCode.PAGE_DOWN){n.preventDefault();var u=S(p());a.insertMode||u!==f().maskLength||n.shiftKey||u--,N(r,n.shiftKey?s.begin:u,u,!0)}else o===t.keyCode.HOME&&!n.shiftKey||o===t.keyCode.PAGE_UP?(n.preventDefault(),N(r,0,n.shiftKey?s.begin:0,!0)):(a.undoOnEscape&&o===t.keyCode.ESCAPE||90===o&&n.ctrlKey)&&!0!==n.altKey?(j(r,!0,!1,B.split("")),i.trigger("click")):o!==t.keyCode.INSERT||n.shiftKey||n.ctrlKey?!0===a.tabThrough&&o===t.keyCode.TAB?(!0===n.shiftKey?(null===g(s.begin).match.fn&&(s.begin=S(s.begin)),s.end=A(s.begin,!0),s.begin=A(s.end,!0)):(s.begin=S(s.begin,!0),s.end=S(s.begin,!0),s.end<f().maskLength&&s.end--),s.begin<f().maskLength&&(n.preventDefault(),N(r,s.begin,s.end))):n.shiftKey||!1===a.insertMode&&(o===t.keyCode.RIGHT?setTimeout(function(){var e=N(r);N(r,e.begin)},0):o===t.keyCode.LEFT&&setTimeout(function(){var e=N(r);N(r,z?e.begin+1:e.begin-1)},0)):(a.insertMode=!a.insertMode,N(r,a.insertMode||s.begin!==f().maskLength?s.begin:s.begin-1));a.onKeyDown.call(this,n,k(),N(r).begin,a),J=-1!==e.inArray(o,a.ignorables)},keypressEvent:function(n,r,i,o,s){var l=this,u=e(l),c=n.which||n.charCode||n.keyCode;if(!(!0===r||n.ctrlKey&&n.altKey)&&(n.ctrlKey||n.metaKey||J))return c===t.keyCode.ENTER&&B!==k().join("")&&(B=k().join(""),setTimeout(function(){u.trigger("change")},0)),!0;if(c){46===c&&!1===n.shiftKey&&","===a.radixPoint&&(c=44);var p,h=r?{begin:s,end:s}:N(l),m=String.fromCharCode(c);f().writeOutBuffer=!0;var v=D(h,m,o);if(!1!==v&&(d(!0),p=void 0!==v.caret?v.caret:r?v.pos+1:S(v.pos),f().p=p),!1!==i){var g=this;if(setTimeout(function(){a.onKeyValidation.call(g,c,v,a)},0),f().writeOutBuffer&&!1!==v){var y=k();M(l,y,a.numericInput&&void 0===v.caret?A(p):p,n,!0!==r),!0!==r&&setTimeout(function(){!0===I(y)&&u.trigger("complete")},0)}}if(n.preventDefault(),r)return v.forwardPosition=p,v}},pasteEvent:function(t){var n,r=this,i=t.originalEvent||t,o=e(r),s=r.inputmask._valueGet(!0),l=N(r);z&&(n=l.end,l.end=l.begin,l.begin=n);var u=s.substr(0,l.begin),c=s.substr(l.end,s.length);if(u===(z?x().reverse():x()).slice(0,l.begin).join("")&&(u=""),c===(z?x().reverse():x()).slice(l.end).join("")&&(c=""),z&&(n=u,u=c,c=n),window.clipboardData&&window.clipboardData.getData)s=u+window.clipboardData.getData("Text")+c;else{if(!i.clipboardData||!i.clipboardData.getData)return!0;s=u+i.clipboardData.getData("text/plain")+c}var f=s;if(e.isFunction(a.onBeforePaste)){if(!1===(f=a.onBeforePaste(s,a)))return t.preventDefault();f||(f=s)}return j(r,!1,!1,z?f.split("").reverse():f.toString().split("")),M(r,k(),S(p()),t,B!==k().join("")),!0===I(k())&&o.trigger("complete"),t.preventDefault()},inputFallBackEvent:function(n){var r=this,i=r.inputmask._valueGet();if(k().join("")!==i){var a=N(r);if(i=i.replace(new RegExp("("+t.escapeRegex(x().join(""))+")*"),""),s){var o=i.replace(k().join(""),"");if(1===o.length){var l=new e.Event("keypress");return l.which=o.charCodeAt(0),X.keypressEvent.call(r,l,!0,!0,!1,f().validPositions[a.begin-1]?a.begin:a.begin-1),!1}}if(a.begin>i.length&&(N(r,i.length),a=N(r)),k().length-i.length!=1||i.charAt(a.begin)===k()[a.begin]||i.charAt(a.begin+1)===k()[a.begin]||E(a.begin)){for(var u=p()+1,c=x().join("");null===i.match(t.escapeRegex(c)+"$");)c=c.slice(1);i=i.replace(c,""),i=i.split(""),j(r,!0,!1,i,n,a.begin<u),!0===I(k())&&e(r).trigger("complete")}else n.keyCode=t.keyCode.BACKSPACE,X.keydownEvent.call(r,n);n.preventDefault()}},setValueEvent:function(t){var n=this,r=n.inputmask._valueGet();j(n,!0,!1,(e.isFunction(a.onBeforeMask)?a.onBeforeMask(r,a)||r:r).split("")),B=k().join(""),(a.clearMaskOnLostFocus||a.clearIncomplete)&&n.inputmask._valueGet()===x().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this,n=t.inputmask._valueGet();a.showMaskOnFocus&&(!a.showMaskOnHover||a.showMaskOnHover&&""===n)&&(t.inputmask._valueGet()!==k().join("")?M(t,k(),S(p())):!1===Q&&N(t,S(p()))),!0===a.positionCaretOnTab&&X.clickEvent.apply(t,[e,!0]),B=k().join("")},mouseleaveEvent:function(e){var t=this;if(Q=!1,a.clearMaskOnLostFocus&&document.activeElement!==t){var n=k().slice(),r=t.inputmask._valueGet();r!==t.getAttribute("placeholder")&&""!==r&&(-1===p()&&r===x().join("")?n=[]:$(n),M(t,n))}},clickEvent:function(t,n){function r(t){if(""!==a.radixPoint){var n=f().validPositions;if(void 0===n[t]||n[t].input===O(t)){if(t<S(-1))return!0;var r=e.inArray(a.radixPoint,k());if(-1!==r){for(var i in n)if(r<i&&n[i].input!==O(i))return!1;return!0}}}return!1}var i=this;setTimeout(function(){if(document.activeElement===i){var t=N(i);if(n&&(t.begin=t.end),t.begin===t.end)switch(a.positionCaretOnClick){case"none":break;case"radixFocus":if(r(t.begin)){var o=e.inArray(a.radixPoint,k().join(""));N(i,a.numericInput?S(o):o);break}default:var s=t.begin,l=p(s,!0),u=S(l);if(s<u)N(i,E(s)||E(s-1)?s:S(s));else{var c=O(u);(""!==c&&k()[u]!==c&&!0!==g(u).match.optionalQuantifier||!E(u)&&g(u).match.def===c)&&(u=S(u)),N(i,u)}}}},0)},dblclickEvent:function(e){var t=this;setTimeout(function(){N(t,0,S(p()))},0)},cutEvent:function(n){var r=this,i=e(r),a=N(r),o=n.originalEvent||n,s=window.clipboardData||o.clipboardData,l=z?k().slice(a.end,a.begin):k().slice(a.begin,a.end);s.setData("text",z?l.reverse().join(""):l.join("")),document.execCommand&&document.execCommand("copy"),L(r,t.keyCode.DELETE,a),M(r,k(),f().p,n,B!==k().join("")),r.inputmask._valueGet()===x().join("")&&i.trigger("cleared")},blurEvent:function(t){var n=e(this),r=this;if(r.inputmask){var i=r.inputmask._valueGet(),o=k().slice();B!==o.join("")&&setTimeout(function(){n.trigger("change"),B=o.join("")},0),""!==i&&(a.clearMaskOnLostFocus&&(-1===p()&&i===x().join("")?o=[]:$(o)),!1===I(o)&&(setTimeout(function(){n.trigger("incomplete")},0),a.clearIncomplete&&(d(),o=a.clearMaskOnLostFocus?[]:x().slice())),M(r,o,void 0,t))}},mouseenterEvent:function(e){var t=this;Q=!0,document.activeElement!==t&&a.showMaskOnHover&&t.inputmask._valueGet()!==k().join("")&&M(t,k())},submitEvent:function(e){B!==k().join("")&&q.trigger("change"),a.clearMaskOnLostFocus&&-1===p()&&V.inputmask._valueGet&&V.inputmask._valueGet()===x().join("")&&V.inputmask._valueSet(""),a.removeMaskOnSubmit&&(V.inputmask._valueSet(V.inputmask.unmaskedvalue(),!0),setTimeout(function(){M(V,k())},0))},resetEvent:function(e){setTimeout(function(){q.trigger("setvalue")},0)}};if(void 0!==n)switch(n.action){case"isComplete":return V=n.el,I(k());case"unmaskedvalue":return void 0!==V&&void 0===n.value||(W=n.value,W=(e.isFunction(a.onBeforeMask)?a.onBeforeMask(W,a)||W:W).split(""),j(void 0,!1,!1,z?W.reverse():W),e.isFunction(a.onBeforeWrite)&&a.onBeforeWrite(void 0,k(),0,a)),P(V);case"mask":!function(t){var n=function(t,n){var r=t.getAttribute("type"),i="INPUT"===t.tagName&&-1!==e.inArray(r,n.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!i)if("INPUT"===t.tagName){var a=document.createElement("input");a.setAttribute("type",r),i="text"===a.type,a=null}else i="partial";return!1!==i&&function(t){function r(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==p()||!0!==n.nullable?document.activeElement===this&&n.clearMaskOnLostFocus?(z?$(k().slice()).reverse():$(k().slice())).join(""):a.call(this):"":a.call(this)}function i(t){o.call(this,t),this.inputmask&&e(this).trigger("setvalue")}var a,o;if(!t.inputmask.__valueGet){if(!0!==n.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"==typeof"test".__proto__?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var s=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):void 0;s&&s.get&&s.set?(a=s.get,o=s.set,Object.defineProperty(t,"value",{get:r,set:i,configurable:!0})):"INPUT"!==t.tagName&&(a=function(){return this.textContent},o=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:r,set:i,configurable:!0}))}else document.__lookupGetter__&&t.__lookupGetter__("value")&&(a=t.__lookupGetter__("value"),o=t.__lookupSetter__("value"),t.__defineGetter__("value",r),t.__defineSetter__("value",i));t.inputmask.__valueGet=a,t.inputmask.__valueSet=o}t.inputmask._valueGet=function(e){return z&&!0!==e?a.call(this.el).split("").reverse().join(""):a.call(this.el)},t.inputmask._valueSet=function(e,t){o.call(this.el,null===e||void 0===e?"":!0!==t&&z?e.split("").reverse().join(""):e)},void 0===a&&(a=function(){return this.value},o=function(e){this.value=e},function(t){if(e.valHooks&&(void 0===e.valHooks[t]||!0!==e.valHooks[t].inputmaskpatch)){var r=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},i=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=r(e);return-1!==p(void 0,void 0,e.inputmask.maskset.validPositions)||!0!==n.nullable?t:""}return r(e)},set:function(t,n){var r,a=e(t);return r=i(t,n),t.inputmask&&a.trigger("setvalue"),r},inputmaskpatch:!0}}}(t.type),function(t){Z.on(t,"mouseenter",function(t){var n=e(this);this.inputmask._valueGet()!==k().join("")&&n.trigger("setvalue")})}(t))}}(t),i}(t,a);if(!1!==n&&(V=t,q=e(V),("rtl"===V.dir||a.rightAlign)&&(V.style.textAlign="right"),("rtl"===V.dir||a.numericInput)&&(V.dir="ltr",V.removeAttribute("dir"),V.inputmask.isRTL=!0,z=!0),!0===a.colorMask&&R(V),u&&(V.hasOwnProperty("inputmode")&&(V.inputmode=a.inputmode,V.setAttribute("inputmode",a.inputmode)),"rtfm"===a.androidHack&&(!0!==a.colorMask&&R(V),V.type="password")),Z.off(V),!0===n&&(Z.on(V,"submit",X.submitEvent),Z.on(V,"reset",X.resetEvent),Z.on(V,"mouseenter",X.mouseenterEvent),Z.on(V,"blur",X.blurEvent),Z.on(V,"focus",X.focusEvent),Z.on(V,"mouseleave",X.mouseleaveEvent),!0!==a.colorMask&&Z.on(V,"click",X.clickEvent),Z.on(V,"dblclick",X.dblclickEvent),Z.on(V,"paste",X.pasteEvent),Z.on(V,"dragdrop",X.pasteEvent),Z.on(V,"drop",X.pasteEvent),Z.on(V,"cut",X.cutEvent),Z.on(V,"complete",a.oncomplete),Z.on(V,"incomplete",a.onincomplete),Z.on(V,"cleared",a.oncleared),!0!==a.inputEventOnly&&(Z.on(V,"keydown",X.keydownEvent),Z.on(V,"keypress",X.keypressEvent)),Z.on(V,"compositionstart",e.noop),Z.on(V,"compositionupdate",e.noop),Z.on(V,"compositionend",e.noop),Z.on(V,"keyup",e.noop),Z.on(V,"input",X.inputFallBackEvent)),Z.on(V,"setvalue",X.setValueEvent),x(),""!==V.inputmask._valueGet()||!1===a.clearMaskOnLostFocus||document.activeElement===V)){var r=e.isFunction(a.onBeforeMask)?a.onBeforeMask(V.inputmask._valueGet(),a)||V.inputmask._valueGet():V.inputmask._valueGet();j(V,!0,!1,r.split(""));var i=k().slice();B=i.join(""),!1===I(i)&&a.clearIncomplete&&d(),a.clearMaskOnLostFocus&&document.activeElement!==V&&(-1===p()?i=[]:$(i)),M(V,i),document.activeElement===V&&N(V,S(p()))}}(V);break;case"format":return W=(e.isFunction(a.onBeforeMask)?a.onBeforeMask(n.value,a)||n.value:n.value).split(""),j(void 0,!1,!1,z?W.reverse():W),e.isFunction(a.onBeforeWrite)&&a.onBeforeWrite(void 0,k(),0,a),n.metadata?{value:z?k().slice().reverse().join(""):k().join(""),metadata:i.call(this,{action:"getmetadata"},r,a)}:z?k().slice().reverse().join(""):k().join("");case"isValid":n.value?(W=n.value.split(""),j(void 0,!1,!0,z?W.reverse():W)):n.value=k().join("");for(var ee=k(),te=F(),ne=ee.length-1;ne>te&&!E(ne);ne--);return ee.splice(te,ne+1-te),I(ee)&&n.value===k().join("");case"getemptymask":return x().join("");case"remove":if(V){q=e(V),V.inputmask._valueSet(P(V)),Z.off(V);Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(V),"value")&&V.inputmask.__valueGet&&Object.defineProperty(V,"value",{get:V.inputmask.__valueGet,set:V.inputmask.__valueSet,configurable:!0}):document.__lookupGetter__&&V.__lookupGetter__("value")&&V.inputmask.__valueGet&&(V.__defineGetter__("value",V.inputmask.__valueGet),V.__defineSetter__("value",V.inputmask.__valueSet)),V.inputmask=void 0}return V;case"getmetadata":if(e.isArray(r.metadata)){var re=c(!0,0,!1).join("");return e.each(r.metadata,function(e,t){if(t.mask===re)return re=t,!1}),re}return r.metadata}}var a=navigator.userAgent,o=/mobile/i.test(a),s=/iemobile/i.test(a),l=/iphone/i.test(a)&&!s,u=/android/i.test(a)&&!s;t.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask(t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",radixPointDefinitionSymbol:void 0,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","password"],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:e.noop,postValidation:null,staticDefinitionSymbol:void 0,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,androidHack:!1},masksCache:{},mask:function(a){function o(t,r,i,a){function o(e,n){null!==(n=void 0!==n?n:t.getAttribute(a+"-"+e))&&("string"==typeof n&&(0===e.indexOf("on")?n=window[n]:"false"===n?n=!1:"true"===n&&(n=!0)),i[e]=n)}var s,l,u,c,f=t.getAttribute(a);if(f&&""!==f&&(f=f.replace(new RegExp("'","g"),'"'),l=JSON.parse("{"+f+"}")),l){u=void 0;for(c in l)if("alias"===c.toLowerCase()){u=l[c];break}}o("alias",u),i.alias&&n(i.alias,i,r);for(s in r){if(l){u=void 0;for(c in l)if(c.toLowerCase()===s.toLowerCase()){u=l[c];break}}o(s,u)}return e.extend(!0,r,i),r}var s=this;return"string"==typeof a&&(a=document.getElementById(a)||document.querySelectorAll(a)),a=a.nodeName?[a]:a,e.each(a,function(n,a){var l=e.extend(!0,{},s.opts);o(a,l,e.extend(!0,{},s.userOptions),s.dataAttribute);var u=r(l,s.noMasksCache);void 0!==u&&(void 0!==a.inputmask&&a.inputmask.remove(),a.inputmask=new t,a.inputmask.opts=l,a.inputmask.noMasksCache=s.noMasksCache,a.inputmask.userOptions=e.extend(!0,{},s.userOptions),a.inputmask.el=a,a.inputmask.maskset=u,e.data(a,"_inputmask_opts",l),i.call(a.inputmask,{action:"mask"}))}),a&&a[0]?a[0].inputmask||this:this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"==typeof t?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),i.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return i.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),i.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),i.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),i.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),i.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),i.call(this,{action:"format",value:e,metadata:t})},analyseMask:function(t,n){function r(e,t,n,r){this.matches=[],this.openGroup=e||!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=r||!1,this.quantifier={min:1,max:1}}function i(t,r,i){var a=n.definitions[r];i=void 0!==i?i:t.matches.length;var o=t.matches[i-1];if(a&&!v){a.placeholder=e.isFunction(a.placeholder)?a.placeholder(n):a.placeholder;for(var s=a.prevalidator,l=s?s.length:0,u=1;u<a.cardinality;u++){var c=l>=u?s[u-1]:[],f=c.validator,d=c.cardinality;t.matches.splice(i++,0,{fn:f?"string"==typeof f?new RegExp(f):new function(){this.test=f}:new RegExp("."),cardinality:d||1,optionality:t.isOptional,newBlockMarker:void 0===o||o.def!==(a.definitionSymbol||r),casing:a.casing,def:a.definitionSymbol||r,placeholder:a.placeholder,nativeDef:r}),o=t.matches[i-1]}t.matches.splice(i++,0,{fn:a.validator?"string"==typeof a.validator?new RegExp(a.validator):new function(){this.test=a.validator}:new RegExp("."),cardinality:a.cardinality,optionality:t.isOptional,newBlockMarker:void 0===o||o.def!==(a.definitionSymbol||r),casing:a.casing,def:a.definitionSymbol||r,placeholder:a.placeholder,nativeDef:r})}else t.matches.splice(i++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:void 0===o||o.def!==r,casing:null,def:n.staticDefinitionSymbol||r,placeholder:void 0!==n.staticDefinitionSymbol?r:void 0,nativeDef:r}),v=!1}function a(t){t&&t.matches&&e.each(t.matches,function(e,r){var o=t.matches[e+1];(void 0===o||void 0===o.matches||!1===o.isQuantifier)&&r&&r.isGroup&&(r.isGroup=!1,i(r,n.groupmarker.start,0),!0!==r.openGroup&&i(r,n.groupmarker.end)),a(r)})}function o(){if(y.length>0){if(f=y[y.length-1],i(f,u),f.isAlternator){d=y.pop();for(var e=0;e<d.matches.length;e++)d.matches[e].isGroup=!1;y.length>0?(f=y[y.length-1],f.matches.push(d)):g.matches.push(d)}}else i(g,u)}function s(e){e.matches=e.matches.reverse();for(var t in e.matches){var r=parseInt(t);if(e.matches[t].isQuantifier&&e.matches[r+1]&&e.matches[r+1].isGroup){var i=e.matches[t];e.matches.splice(t,1),e.matches.splice(r+1,0,i)}void 0!==e.matches[t].matches?e.matches[t]=s(e.matches[t]):e.matches[t]=function(e){return e===n.optionalmarker.start?e=n.optionalmarker.end:e===n.optionalmarker.end?e=n.optionalmarker.start:e===n.groupmarker.start?e=n.groupmarker.end:e===n.groupmarker.end&&(e=n.groupmarker.start),e}(e.matches[t])}return e}for(var l,u,c,f,d,p,h,m=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,v=!1,g=new r,y=[],b=[];l=m.exec(t);)if(u=l[0],v)o();else switch(u.charAt(0)){case n.escapeChar:v=!0;break;case n.optionalmarker.end:case n.groupmarker.end:if(c=y.pop(),c.openGroup=!1,void 0!==c)if(y.length>0){if(f=y[y.length-1],f.matches.push(c),f.isAlternator){d=y.pop();for(var x=0;x<d.matches.length;x++)d.matches[x].isGroup=!1;y.length>0?(f=y[y.length-1],f.matches.push(d)):g.matches.push(d)}}else g.matches.push(c);else o();break;case n.optionalmarker.start:y.push(new r(!1,!0));break;case n.groupmarker.start:y.push(new r(!0));break;case n.quantifiermarker.start:var k=new r(!1,!1,!0);u=u.replace(/[{}]/g,"");var w=u.split(","),_=isNaN(w[0])?w[0]:parseInt(w[0]),C=1===w.length?_:isNaN(w[1])?w[1]:parseInt(w[1]);if("*"!==C&&"+"!==C||(_="*"===C?0:1),k.quantifier={min:_,max:C},y.length>0){var D=y[y.length-1].matches;l=D.pop(),l.isGroup||(h=new r(!0),h.matches.push(l),l=h),D.push(l),D.push(k)}else l=g.matches.pop(),l.isGroup||(h=new r(!0),h.matches.push(l),l=h),g.matches.push(l),g.matches.push(k);break;case n.alternatormarker:
y.length>0?(f=y[y.length-1],p=f.matches.pop()):p=g.matches.pop(),p.isAlternator?y.push(p):(d=new r(!1,!1,!1,!0),d.matches.push(p),y.push(d));break;default:o()}for(;y.length>0;)c=y.pop(),g.matches.push(c);return g.matches.length>0&&(a(g),b.push(g)),n.numericInput&&s(b[0]),b}},t.extendDefaults=function(n){e.extend(!0,t.prototype.defaults,n)},t.extendDefinitions=function(n){e.extend(!0,t.prototype.defaults.definitions,n)},t.extendAliases=function(n){e.extend(!0,t.prototype.defaults.aliases,n)},t.format=function(e,n,r){return t(n).format(e,r)},t.unmask=function(e,n){return t(n).unmaskedvalue(e)},t.isValid=function(e,n){return t(n).isValid(e)},t.remove=function(t){e.each(t,function(e,t){t.inputmask&&t.inputmask.remove()})},t.escapeRegex=function(e){var t=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return e.replace(new RegExp("(\\"+t.join("|\\")+")","gim"),"\\$1")},t.keyCode={ALT:18,BACKSPACE:8,BACKSPACE_SAFARI:127,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91,X:88},window.Inputmask=t}(jQuery),function(e,t){void 0===e.fn.inputmask&&(e.fn.inputmask=function(n,r){var i,a=this[0];if(void 0===r&&(r={}),"string"==typeof n)switch(n){case"unmaskedvalue":return a&&a.inputmask?a.inputmask.unmaskedvalue():e(a).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return a&&a.inputmask?a.inputmask.getemptymask():"";case"hasMaskedValue":return!(!a||!a.inputmask)&&a.inputmask.hasMaskedValue();case"isComplete":return!a||!a.inputmask||a.inputmask.isComplete();case"getmetadata":return a&&a.inputmask?a.inputmask.getmetadata():void 0;case"setvalue":e(a).val(r),a&&void 0===a.inputmask&&e(a).triggerHandler("setvalue");break;case"option":if("string"!=typeof r)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(r)});if(a&&void 0!==a.inputmask)return a.inputmask.option(r);break;default:return r.alias=n,i=new t(r),this.each(function(){i.mask(this)})}else{if("object"==typeof n)return i=new t(n),void 0===n.mask&&void 0===n.alias?this.each(function(){return void 0!==this.inputmask?this.inputmask.option(n):void i.mask(this)}):this.each(function(){i.mask(this)});if(void 0===n)return this.each(function(){i=new t(r),i.mask(this)})}}),e.fn.inputmask}(jQuery,Inputmask),jQuery,Inputmask,function(e,t){function n(e){return isNaN(e)||29===new Date(e,2,0).getDate()}t.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+n+"[01])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9])"+n+"(0[1-9]|1[012]))|(30"+n+"(0[13-9]|1[012]))|(31"+n+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(e,t,n){if(isNaN(e))return!1;var r=parseInt(e.concat(t.toString().slice(e.length))),i=parseInt(e.concat(n.toString().slice(e.length)));return!isNaN(r)&&t<=r&&r<=n||!isNaN(i)&&t<=i&&i<=n},determinebaseyear:function(e,t,n){var r=(new Date).getFullYear();if(e>r)return e;if(t<r){for(var i=t.toString().slice(0,2),a=t.toString().slice(2,4);t<i+n;)i--;var o=i+a;return e>o?e:o}if(e<=r&&r<=t){for(var s=r.toString().slice(0,2);t<s+n;)s--;var l=s+n;return l<e?e:l}return r},onKeyDown:function(n,r,i,a){var o=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;o.val(s.getDate().toString()+(s.getMonth()+1).toString()+s.getFullYear().toString()),o.trigger("setvalue")}},getFrontValue:function(e,t,n){for(var r=0,i=0,a=0;a<e.length&&"2"!==e.charAt(a);a++){var o=n.definitions[e.charAt(a)];o?(r+=i,i=o.cardinality):i++}return t.join("").substr(r,i)},postValidation:function(e,t,r){var i,a,o=e.join("");return 0===r.mask.indexOf("y")?(a=o.substr(0,4),i=o.substr(4,11)):(a=o.substr(6,11),i=o.substr(0,6)),t&&(i!==r.leapday||n(a))},definitions:{1:{validator:function(e,t,n,r,i){var a=i.regex.val1.test(e);return r||a||e.charAt(1)!==i.separator&&-1==="-./".indexOf(e.charAt(1))||!(a=i.regex.val1.test("0"+e.charAt(0)))?a:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,r,i){var a=e;isNaN(t.buffer[n+1])||(a+=t.buffer[n+1]);var o=1===a.length?i.regex.val1pre.test(a):i.regex.val1.test(a);if(!r&&!o){if(o=i.regex.val1.test(e+"0"))return t.buffer[n]=e,t.buffer[++n]="0",{pos:n,c:"0"};if(o=i.regex.val1.test("0"+e))return t.buffer[n]="0",n++,{pos:n}}return o},cardinality:1}]},2:{validator:function(e,t,n,r,i){var a=i.getFrontValue(t.mask,t.buffer,i);-1!==a.indexOf(i.placeholder[0])&&(a="01"+i.separator);var o=i.regex.val2(i.separator).test(a+e);return r||o||e.charAt(1)!==i.separator&&-1==="-./".indexOf(e.charAt(1))||!(o=i.regex.val2(i.separator).test(a+"0"+e.charAt(0)))?o:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,r,i){isNaN(t.buffer[n+1])||(e+=t.buffer[n+1]);var a=i.getFrontValue(t.mask,t.buffer,i);-1!==a.indexOf(i.placeholder[0])&&(a="01"+i.separator);var o=1===e.length?i.regex.val2pre(i.separator).test(a+e):i.regex.val2(i.separator).test(a+e);return r||o||!(o=i.regex.val2(i.separator).test(a+"0"+e))?o:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},y:{validator:function(e,t,n,r,i){return i.isInYearRange(e,i.yearrange.minyear,i.yearrange.maxyear)},cardinality:4,prevalidator:[{validator:function(e,t,n,r,i){var a=i.isInYearRange(e,i.yearrange.minyear,i.yearrange.maxyear);if(!r&&!a){var o=i.determinebaseyear(i.yearrange.minyear,i.yearrange.maxyear,e+"0").toString().slice(0,1);if(a=i.isInYearRange(o+e,i.yearrange.minyear,i.yearrange.maxyear))return t.buffer[n++]=o.charAt(0),{pos:n};if(o=i.determinebaseyear(i.yearrange.minyear,i.yearrange.maxyear,e+"0").toString().slice(0,2),a=i.isInYearRange(o+e,i.yearrange.minyear,i.yearrange.maxyear))return t.buffer[n++]=o.charAt(0),t.buffer[n++]=o.charAt(1),{pos:n}}return a},cardinality:1},{validator:function(e,t,n,r,i){var a=i.isInYearRange(e,i.yearrange.minyear,i.yearrange.maxyear);if(!r&&!a){var o=i.determinebaseyear(i.yearrange.minyear,i.yearrange.maxyear,e).toString().slice(0,2);if(a=i.isInYearRange(e[0]+o[1]+e[1],i.yearrange.minyear,i.yearrange.maxyear))return t.buffer[n++]=o.charAt(1),{pos:n};if(o=i.determinebaseyear(i.yearrange.minyear,i.yearrange.maxyear,e).toString().slice(0,2),a=i.isInYearRange(o+e,i.yearrange.minyear,i.yearrange.maxyear))return t.buffer[n-1]=o.charAt(0),t.buffer[n++]=o.charAt(1),t.buffer[n++]=e.charAt(0),{refreshFromBuffer:{start:n-3,end:n},pos:n}}return a},cardinality:2},{validator:function(e,t,n,r,i){return i.isInYearRange(e,i.yearrange.minyear,i.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,r,i,a){var o=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;o.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),o.trigger("setvalue")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(n,r,i,a){var o=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;o.val(s.getFullYear().toString()+(s.getMonth()+1).toString()+s.getDate().toString()),o.trigger("setvalue")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(e,t,n,r,i){if("24"===i.hourFormat&&24===parseInt(e,10))return t.buffer[n-1]="0",t.buffer[n]="0",{refreshFromBuffer:{start:n-1,end:n},c:"0"};var a=i.regex.hrs.test(e);if(!r&&!a&&(e.charAt(1)===i.timeseparator||-1!=="-.:".indexOf(e.charAt(1)))&&(a=i.regex.hrs.test("0"+e.charAt(0))))return t.buffer[n-1]="0",t.buffer[n]=e.charAt(0),n++,{refreshFromBuffer:{start:n-2,end:n},pos:n,c:i.timeseparator};if(a&&"24"!==i.hourFormat&&i.regex.hrs24.test(e)){var o=parseInt(e,10);return 24===o?(t.buffer[n+5]="a",t.buffer[n+6]="m"):(t.buffer[n+5]="p",t.buffer[n+6]="m"),o-=12,o<10?(t.buffer[n]=o.toString(),t.buffer[n-1]="0"):(t.buffer[n]=o.toString().charAt(1),t.buffer[n-1]=o.toString().charAt(0)),{refreshFromBuffer:{start:n-1,end:n+6},c:t.buffer[n]}}return a},cardinality:2,prevalidator:[{validator:function(e,t,n,r,i){var a=i.regex.hrspre.test(e);return r||a||!(a=i.regex.hrs.test("0"+e))?a:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(e,t,n,r,i){var a=i.regex.mspre.test(e);return r||a||!(a=i.regex.ms.test("0"+e))?a:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},t:{validator:function(e,t,n,r,i){return i.regex.ampm.test(e+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,r,i,a){var o=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;o.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),o.trigger("setvalue")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"[0-3])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+n+"30)|((0[1-6])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0}})}(jQuery,Inputmask),function(e,t){t.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),t.extendAliases({url:{definitions:{i:{validator:".",cardinality:1}},mask:"(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",insertMode:!1,autoUnmask:!1,inputmode:"url"},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,r,i){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)},cardinality:1}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,onBeforePaste:function(e,t){return e=e.toLowerCase(),e.replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"},"-":{validator:"[0-9A-Za-z-]",cardinality:1,casing:"lower"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",cardinality:1,casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}})}(jQuery,Inputmask),function(e,t){t.extendAliases({numeric:{mask:function(e){function n(t){for(var n="",r=0;r<t.length;r++)n+=e.definitions[t.charAt(r)]||e.optionalmarker.start===t.charAt(r)||e.optionalmarker.end===t.charAt(r)||e.quantifiermarker.start===t.charAt(r)||e.quantifiermarker.end===t.charAt(r)||e.groupmarker.start===t.charAt(r)||e.groupmarker.end===t.charAt(r)||e.alternatormarker===t.charAt(r)?"\\"+t.charAt(r):t.charAt(r);return n}if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var r=Math.floor(e.integerDigits/e.groupSize),i=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===i?r-1:r),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var a="[+]";if(a+=n(e.prefix),a+=!0===e.integerOptional?"~{1,"+e.integerDigits+"}":"~{"+e.integerDigits+"}",void 0!==e.digits){e.decimalProtect&&(e.radixPointDefinitionSymbol=":");var o=e.digits.toString().split(",");isFinite(o[0]&&o[1]&&isFinite(o[1]))?a+=(e.decimalProtect?":":e.radixPoint)+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(a+=e.digitsOptional?"["+(e.decimalProtect?":":e.radixPoint)+";{1,"+e.digits+"}]":(e.decimalProtect?":":e.radixPoint)+";{"+e.digits+"}")}return a+=n(e.suffix),a+="[-]",e.greedy=!1,null!==e.min&&(e.min=e.min.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.min=e.min.replace(e.radixPoint,"."))),null!==e.max&&(e.max=e.max.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.max=e.max.replace(e.radixPoint,"."))),a},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowPlus:!0,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputmode:"numeric",postFormat:function(n,r,i){!0===i.numericInput&&(n=n.reverse(),isFinite(r)&&(r=n.join("").length-r-1));var a,o;r=r>=n.length?n.length-1:r<0?0:r;var s=n[r],l=n.slice();s===i.groupSeparator&&(l.splice(r--,1),s=l[r]);var u=l.join("").match(new RegExp("^"+t.escapeRegex(i.negationSymbol.front)));u=null!==u&&1===u.length,r>(u?i.negationSymbol.front.length:0)+i.prefix.length&&r<l.length-i.suffix.length&&(l[r]="!");var c=l.join(""),f=l.join();if(u&&(c=c.replace(new RegExp("^"+t.escapeRegex(i.negationSymbol.front)),""),c=c.replace(new RegExp(t.escapeRegex(i.negationSymbol.back)+"$"),"")),c=c.replace(new RegExp(t.escapeRegex(i.suffix)+"$"),""),c=c.replace(new RegExp("^"+t.escapeRegex(i.prefix)),""),c.length>0&&i.autoGroup||-1!==c.indexOf(i.groupSeparator)){var d=t.escapeRegex(i.groupSeparator);c=c.replace(new RegExp(d,"g"),"");var p=c.split(s===i.radixPoint?"!":i.radixPoint);if(c=""===i.radixPoint?c:p[0],s!==i.negationSymbol.front&&(c=c.replace("!","?")),c.length>i.groupSize)for(var h=new RegExp("([-+]?[\\d?]+)([\\d?]{"+i.groupSize+"})");h.test(c)&&""!==i.groupSeparator;)c=c.replace(h,"$1"+i.groupSeparator+"$2"),c=c.replace(i.groupSeparator+i.groupSeparator,i.groupSeparator);c=c.replace("?","!"),""!==i.radixPoint&&p.length>1&&(c+=(s===i.radixPoint?"!":i.radixPoint)+p[1])}c=i.prefix+c+i.suffix,u&&(c=i.negationSymbol.front+c+i.negationSymbol.back);var m=f!==c.split("").join(),v=e.inArray("!",c);if(-1===v&&(v=r),m){for(n.length=c.length,a=0,o=c.length;a<o;a++)n[a]=c.charAt(a);n[v]=s}return v=i.numericInput&&isFinite(r)?n.join("").length-v-1:v,i.numericInput&&(n=n.reverse(),e.inArray(i.radixPoint,n)<v&&n.join("").length-i.suffix.length!==v&&(v-=1)),{pos:v,refreshFromBuffer:m,buffer:n,isNegative:u}},onBeforeWrite:function(n,r,i,a){var o;if(n&&("blur"===n.type||"checkval"===n.type||"keydown"===n.type)){var s=a.numericInput?r.slice().reverse().join(""):r.join(""),l=s.replace(a.prefix,"");l=l.replace(a.suffix,""),l=l.replace(new RegExp(t.escapeRegex(a.groupSeparator),"g"),""),","===a.radixPoint&&(l=l.replace(a.radixPoint,"."));var u=l.match(new RegExp("[-"+t.escapeRegex(a.negationSymbol.front)+"]","g"));if(u=null!==u&&1===u.length,l=l.replace(new RegExp("[-"+t.escapeRegex(a.negationSymbol.front)+"]","g"),""),l=l.replace(new RegExp(t.escapeRegex(a.negationSymbol.back)+"$"),""),isNaN(a.placeholder)&&(l=l.replace(new RegExp(t.escapeRegex(a.placeholder),"g"),"")),""!==(l=l===a.negationSymbol.front?l+"0":l)&&isFinite(l)){var c=parseFloat(l),f=u?-1*c:c;if(null!==a.min&&isFinite(a.min)&&f<parseFloat(a.min)?(c=Math.abs(a.min),u=a.min<0,s=void 0):null!==a.max&&isFinite(a.max)&&f>parseFloat(a.max)&&(c=Math.abs(a.max),u=a.max<0,s=void 0),l=c.toString().replace(".",a.radixPoint).split(""),isFinite(a.digits)){var d=e.inArray(a.radixPoint,l),p=e.inArray(a.radixPoint,s);-1===d&&(l.push(a.radixPoint),d=l.length-1);for(var h=1;h<=a.digits;h++)a.digitsOptional||void 0!==l[d+h]&&l[d+h]!==a.placeholder.charAt(0)?-1!==p&&void 0!==s[p+h]&&(l[d+h]=l[d+h]||s[p+h]):l[d+h]="0";l[l.length-1]===a.radixPoint&&delete l[l.length-1]}if(c.toString()!==l&&c.toString()+"."!==l||u)return l=(a.prefix+l.join("")).split(""),!u||0===c&&"blur"===n.type||(l.unshift(a.negationSymbol.front),l.push(a.negationSymbol.back)),a.numericInput&&(l=l.reverse()),o=a.postFormat(l,a.numericInput?i:i-1,a),o.buffer&&(o.refreshFromBuffer=o.buffer.join("")!==r.join("")),o}}if(a.autoGroup)return o=a.postFormat(r,a.numericInput?i:i-1,a),o.caret=i<(o.isNegative?a.negationSymbol.front.length:0)+a.prefix.length||i>o.buffer.length-(o.isNegative?a.negationSymbol.back.length:0)?o.pos:o.pos+1,o},regex:{integerPart:function(e){return new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+t.escapeRegex(e.groupSeparator)+t.escapeRegex(e.placeholder.charAt(0))+"]+")}},signHandler:function(e,t,n,r,i){if(!r&&i.allowMinus&&"-"===e||i.allowPlus&&"+"===e){var a=t.buffer.join("").match(i.regex.integerPart(i));if(a&&a[0].length>0)return t.buffer[a.index]===("-"===e?"+":i.negationSymbol.front)?"-"===e?""!==i.negationSymbol.back?{pos:0,c:i.negationSymbol.front,remove:0,caret:n,insert:{pos:t.buffer.length-1,c:i.negationSymbol.back}}:{pos:0,c:i.negationSymbol.front,remove:0,caret:n}:""!==i.negationSymbol.back?{pos:0,c:"+",remove:[0,t.buffer.length-1],caret:n}:{pos:0,c:"+",remove:0,caret:n}:t.buffer[0]===("-"===e?i.negationSymbol.front:"+")?"-"===e&&""!==i.negationSymbol.back?{remove:[0,t.buffer.length-1],caret:n-1}:{remove:0,caret:n-1}:"-"===e?""!==i.negationSymbol.back?{pos:0,c:i.negationSymbol.front,caret:n+1,insert:{pos:t.buffer.length,c:i.negationSymbol.back}}:{pos:0,c:i.negationSymbol.front,caret:n+1}:{pos:0,c:e,caret:n+1}}return!1},radixHandler:function(t,n,r,i,a){if(!i&&!0!==a.numericInput&&t===a.radixPoint&&void 0!==a.digits&&(isNaN(a.digits)||parseInt(a.digits)>0)){var o=e.inArray(a.radixPoint,n.buffer),s=n.buffer.join("").match(a.regex.integerPart(a));if(-1!==o&&n.validPositions[o])return n.validPositions[o-1]?{caret:o+1}:{pos:s.index,c:s[0],caret:o+1};if(!s||"0"===s[0]&&s.index+1!==r)return n.buffer[s?s.index:r]="0",{pos:(s?s.index:r)+1,c:a.radixPoint}}return!1},leadingZeroHandler:function(t,n,r,i,a,o){if(!i){var s=n.buffer.slice("");if(s.splice(0,a.prefix.length),s.splice(s.length-a.suffix.length,a.suffix.length),!0===a.numericInput){var s=s.reverse();if("0"===s[0]&&void 0===n.validPositions[r-1])return{pos:r,remove:s.length-1}}else{r-=a.prefix.length;var l=e.inArray(a.radixPoint,s),u=s.slice(0,-1!==l?l:void 0).join("").match(a.regex.integerNPart(a));if(u&&(-1===l||r<=l)){var c=-1===l?0:parseInt(s.slice(l+1).join(""));if(0===u[0].indexOf(""!==a.placeholder?a.placeholder.charAt(0):"0")&&(u.index+1===r||!0!==o&&0===c))return n.buffer.splice(u.index+a.prefix.length,1),{pos:u.index+a.prefix.length,remove:u.index+a.prefix.length};if("0"===t&&r<=u.index&&u[0]!==a.groupSeparator)return!1}}}return!0},definitions:{"~":{validator:function(n,r,i,a,o,s){var l=o.signHandler(n,r,i,a,o);if(!l&&!(l=o.radixHandler(n,r,i,a,o))&&!0===(l=a?new RegExp("[0-9"+t.escapeRegex(o.groupSeparator)+"]").test(n):new RegExp("[0-9]").test(n))&&!0===(l=o.leadingZeroHandler(n,r,i,a,o,s))){var u=e.inArray(o.radixPoint,r.buffer);l=-1!==u&&(!1===o.digitsOptional||r.validPositions[i])&&!0!==o.numericInput&&i>u&&!a?{pos:i,remove:i}:{pos:i}}return l},cardinality:1},"+":{validator:function(e,t,n,r,i){var a=i.signHandler(e,t,n,r,i);return!a&&(r&&i.allowMinus&&e===i.negationSymbol.front||i.allowMinus&&"-"===e||i.allowPlus&&"+"===e)&&(a=!(!r&&"-"===e)||(""!==i.negationSymbol.back?{pos:n,c:"-"===e?i.negationSymbol.front:"+",caret:n+1,insert:{pos:t.buffer.length,c:i.negationSymbol.back}}:{pos:n,c:"-"===e?i.negationSymbol.front:"+",caret:n+1})),a},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,r,i){var a=i.signHandler(e,t,n,r,i);return!a&&r&&i.allowMinus&&e===i.negationSymbol.back&&(a=!0),a},cardinality:1,placeholder:""},":":{validator:function(e,n,r,i,a){var o=a.signHandler(e,n,r,i,a);if(!o){var s="["+t.escapeRegex(a.radixPoint)+"]";(o=new RegExp(s).test(e))&&n.validPositions[r]&&n.validPositions[r].match.placeholder===a.radixPoint&&(o={caret:r+1})}return o},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,n,r){if(""===n&&!0===r.nullable)return n;var i=e.replace(r.prefix,"");return i=i.replace(r.suffix,""),i=i.replace(new RegExp(t.escapeRegex(r.groupSeparator),"g"),""),r.unmaskAsNumber?(""!==r.radixPoint&&-1!==i.indexOf(r.radixPoint)&&(i=i.replace(t.escapeRegex.call(this,r.radixPoint),".")),Number(i)):i},isComplete:function(e,n){var r=e.join(""),i=e.slice();if(n.postFormat(i,0,n),i.join("")!==r)return!1;var a=r.replace(n.prefix,"");return a=a.replace(n.suffix,""),a=a.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),","===n.radixPoint&&(a=a.replace(t.escapeRegex(n.radixPoint),".")),isFinite(a)},onBeforeMask:function(e,n){if(!0===n.numericInput&&(e=e.split("").reverse().join("")),""!==n.radixPoint&&isFinite(e)){var r=e.split("."),i=""!==n.groupSeparator?parseInt(n.groupSize):0;2===r.length&&(r[0].length>i||r[1].length>i)&&(e=e.toString().replace(".",n.radixPoint))}var a=e.match(/,/g),o=e.match(/\./g);if(o&&a?o.length>a.length?(e=e.replace(/\./g,""),e=e.replace(",",n.radixPoint)):a.length>o.length?(e=e.replace(/,/g,""),e=e.replace(".",n.radixPoint)):e=e.indexOf(".")<e.indexOf(",")?e.replace(/\./g,""):e=e.replace(/,/g,""):e=e.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),0===n.digits&&(-1!==e.indexOf(".")?e=e.substring(0,e.indexOf(".")):-1!==e.indexOf(",")&&(e=e.substring(0,e.indexOf(",")))),""!==n.radixPoint&&isFinite(n.digits)&&-1!==e.indexOf(n.radixPoint)){var s=e.split(n.radixPoint),l=s[1].match(new RegExp("\\d*"))[0];if(parseInt(n.digits)<l.toString().length){var u=Math.pow(10,parseInt(n.digits));e=e.replace(t.escapeRegex(n.radixPoint),"."),e=Math.round(parseFloat(e)*u)/u,e=e.toString().replace(".",n.radixPoint)}}return!0===n.numericInput&&(e=e.split("").reverse().join("")),e.toString()},canClearPosition:function(e,t,n,r,i){var a=e.validPositions[t].input;return a!==i.radixPoint||null!==e.validPositions[t].match.fn&&!1===i.decimalProtect||isFinite(a)||t===n||a===i.groupSeparator||a===i.negationSymbol.front||a===i.negationSymbol.back},onKeyDown:function(n,r,i,a){var o=e(this);if(n.ctrlKey)switch(n.keyCode){case t.keyCode.UP:o.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(a.step)),o.trigger("setvalue");break;case t.keyCode.DOWN:o.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(a.step)),o.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowPlus:!1,allowMinus:!1}})}(jQuery,Inputmask),function(e,t){function n(e,t){var n=(e.mask||e).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),r=(t.mask||t).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),i=(e.mask||e).split("#")[0],a=(t.mask||t).split("#")[0];return 0===a.indexOf(i)?-1:0===i.indexOf(a)?1:n.localeCompare(r)}var r=t.prototype.analyseMask;t.prototype.analyseMask=function(t,n){function i(e,n,r){n=n||"",r=r||o,""!==n&&(r[n]={});for(var a="",s=r[n]||r,l=e.length-1;l>=0;l--)t=e[l].mask||e[l],a=t.substr(0,1),s[a]=s[a]||[],s[a].unshift(t.substr(1)),e.splice(l,1);for(var u in s)s[u].length>500&&i(s[u].slice(),u,s)}function a(t){var r="",i=[];for(var o in t)e.isArray(t[o])?1===t[o].length?i.push(o+t[o]):i.push(o+n.groupmarker.start+t[o].join(n.groupmarker.end+n.alternatormarker+n.groupmarker.start)+n.groupmarker.end):i.push(o+a(t[o]));return r+=1===i.length?i[0]:n.groupmarker.start+i.join(n.groupmarker.end+n.alternatormarker+n.groupmarker.start)+n.groupmarker.end}var o={};return n.phoneCodes&&n.phoneCodes.length>1e3&&(t=t.substr(1,t.length-2),i(t.split(n.groupmarker.end+n.alternatormarker+n.groupmarker.start)),t=a(o)),r.call(this,t,n)},t.extendAliases({abstractphone:{groupmarker:{start:"<",end:">"},countrycode:"",phoneCodes:[],mask:function(e){return e.definitions={"#":e.definitions[9]},e.phoneCodes.sort(n)},keepStatic:!0,onBeforeMask:function(e,t){var n=e.replace(/^0{1,2}/,"").replace(/[\s]/g,"");return(n.indexOf(t.countrycode)>1||-1===n.indexOf(t.countrycode))&&(n="+"+t.countrycode+n),n},onUnMask:function(e,t,n){return t},inputmode:"tel"}})}(jQuery,Inputmask),function(e,t){t.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(e,t){return new RegExp(t.regex).test(e.join(""))},definitions:{r:{validator:function(t,n,r,i,a){function o(e,t){this.matches=[],this.isGroup=e||!1,this.isQuantifier=t||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function s(t,n){var r=!1;n&&(f+="(",p++);for(var i=0;i<t.matches.length;i++){var a=t.matches[i];if(!0===a.isGroup)r=s(a,!0);else if(!0===a.isQuantifier){var o=e.inArray(a,t.matches),u=t.matches[o-1],c=f;if(isNaN(a.quantifier.max)){for(;a.repeaterPart&&a.repeaterPart!==f&&a.repeaterPart.length>f.length&&!(r=s(u,!0)););r=r||s(u,!0),r&&(a.repeaterPart=f),f=c+a.quantifier.max}else{for(var d=0,h=a.quantifier.max-1;d<h&&!(r=s(u,!0));d++);f=c+"{"+a.quantifier.min+","+a.quantifier.max+"}"}}else if(void 0!==a.matches)for(var m=0;m<a.length&&!(r=s(a[m],n));m++);else{var v;if("["==a.charAt(0)){v=f,v+=a;for(var g=0;g<p;g++)v+=")";var y=new RegExp("^("+v+")$");r=y.test(l)}else for(var b=0,x=a.length;b<x;b++)if("\\"!==a.charAt(b)){v=f,v+=a.substr(0,b+1),v=v.replace(/\|$/,"");for(var g=0;g<p;g++)v+=")";var y=new RegExp("^("+v+")$");if(r=y.test(l))break}f+=a}if(r)break}return n&&(f+=")",p--),r}var l,u,c=n.buffer.slice(),f="",d=!1,p=0;null===a.regexTokens&&function(){var e,t,n=new o,r=[];for(a.regexTokens=[];e=a.tokenizer.exec(a.regex);)switch(t=e[0],t.charAt(0)){case"(":r.push(new o(!0));break;case")":u=r.pop(),r.length>0?r[r.length-1].matches.push(u):n.matches.push(u);break;case"{":case"+":case"*":var i=new o(!1,!0);t=t.replace(/[{}]/g,"");var s=t.split(","),l=isNaN(s[0])?s[0]:parseInt(s[0]),c=1===s.length?l:isNaN(s[1])?s[1]:parseInt(s[1]);if(i.quantifier={min:l,max:c},r.length>0){var f=r[r.length-1].matches;e=f.pop(),e.isGroup||(u=new o(!0),u.matches.push(e),e=u),f.push(e),f.push(i)}else e=n.matches.pop(),e.isGroup||(u=new o(!0),u.matches.push(e),e=u),n.matches.push(e),n.matches.push(i);break;default:r.length>0?r[r.length-1].matches.push(t):n.matches.push(t)}n.matches.length>0&&a.regexTokens.push(n)}(),c.splice(r,0,t),l=c.join("");for(var h=0;h<a.regexTokens.length;h++){var m=a.regexTokens[h];if(d=s(m,m.isGroup))break}return d},cardinality:1}}}})}(jQuery,Inputmask);var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Flatpickr.defaultConfig={mode:"single",utc:!1,wrap:!1,weekNumbers:!1,allowInput:!1,clickOpens:!0,time_24hr:!1,enableTime:!1,noCalendar:!1,dateFormat:"Y-m-d",altInput:!1,altInputClass:"flatpickr-input form-control input",altFormat:"F j, Y",defaultDate:null,minDate:null,maxDate:null,parseDate:null,formatDate:null,getWeek:function(e){var t=new Date(e.getTime());t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)},enable:[],disable:[],shorthandCurrentMonth:!1,inline:!1,static:!1,appendTo:null,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",enableSeconds:!1,hourIncrement:1,minuteIncrement:5,defaultHour:12,defaultMinute:0,disableMobile:!1,locale:"default",plugins:[],onChange:[],onOpen:[],onClose:[],onReady:[],onValueUpdate:[],onDayCreate:[],onMonthChange:[],onYearChange:[]},Flatpickr.l10ns={en:{weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},
daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle"}},Flatpickr.l10ns.default=Object.create(Flatpickr.l10ns.en),Flatpickr.localize=function(e){return _extends(Flatpickr.l10ns.default,e||{})},Flatpickr.setDefaults=function(e){return _extends(Flatpickr.defaultConfig,e||{})},Flatpickr.prototype={pad:function(e){return("0"+e).slice(-2)},parseDate:function(e,t){if(!e)return null;var n=/(\d+)/g,r=/^(\d{1,2})[:\s](\d\d)?[:\s]?(\d\d)?\s?(a|p|A|P)?/i,i=/^(\d+)$/g,a=e;if(e.toFixed||i.test(e))e=new Date(e);else if("string"==typeof e)if("today"===(e=e.trim()))e=new Date,t=!0;else if(this.config&&this.config.parseDate)e=this.config.parseDate(e);else if(r.test(e)){var o=e.match(r),s=o[4]?o[1]%12+("p"===o[4].toLowerCase()?12:0):o[1];e=new Date,e.setHours(s,o[2]||0,o[3]||0)}else if(/Z$/.test(e)||/GMT$/.test(e))e=new Date(e);else if(n.test(e)&&/^[0-9]/.test(e)){var l=e.match(n),u=/(am|AM)$/.test(e),c=/(pm|PM)$/.test(e);e=new Date(l[0]+"/"+(l[1]||1)+"/"+(l[2]||1)+" "+(l[3]||0)+":"+(l[4]||0)+":"+(l[5]||0)),(u||c)&&e.setHours(e.getHours()%12+12*c)}else e=new Date(e);else e instanceof Date&&(e=new Date(e.getTime()));return e instanceof Date?(this.config&&this.config.utc&&!e.fp_isUTC&&(e=e.fp_toUTC()),!0===t&&e.setHours(0,0,0,0),e):(console.warn("flatpickr: invalid date "+a),console.info(this.element),null)}},"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return _flatpickr(this,e)},HTMLElement.prototype.flatpickr=function(e){return _flatpickr([this],e)}),"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return _flatpickr(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+parseInt(e,10))},Date.prototype.fp_isUTC=!1,Date.prototype.fp_toUTC=function(){var e=new Date(this.getUTCFullYear(),this.getUTCMonth(),this.getUTCDate(),this.getUTCHours(),this.getUTCMinutes(),this.getUTCSeconds());return e.fp_isUTC=!0,e},!window.document.documentElement.classList&&Object.defineProperty&&"undefined"!=typeof HTMLElement&&Object.defineProperty(HTMLElement.prototype,"classList",{get:function(){function e(e){return function(n){var r=t.className.split(/\s+/),i=r.indexOf(n);e(r,i,n),t.className=r.join(" ")}}var t=this,n={add:e(function(e,t,n){~t||e.push(n)}),remove:e(function(e,t){~t&&e.splice(t,1)}),toggle:e(function(e,t,n){~t?e.splice(t,1):e.push(n)}),contains:function(e){return!!~t.className.split(/\s+/).indexOf(e)},item:function(e){return t.className.split(/\s+/)[e]||null}};return Object.defineProperty(n,"length",{get:function(){return t.className.split(/\s+/).length}}),n}}),"undefined"!=typeof module&&(module.exports=Flatpickr);var Flatpickr=Flatpickr||{l10ns:{}};Flatpickr.l10ns.ru={},Flatpickr.l10ns.ru.firstDayOfWeek=1,Flatpickr.l10ns.ru.weekdays={shorthand:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],longhand:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]},Flatpickr.l10ns.ru.months={shorthand:["Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сен","Окт","Ноя","Дек"],longhand:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"]},"undefined"!=typeof module&&(module.exports=Flatpickr.l10ns);var messagesRu={alpha_dash:function(e){return"Поле "+e+" может содержать только буквы, цифры и дефис."},alpha_num:function(e){return"Поле "+e+" может содержать только буквы и цифры."},alpha_spaces:function(e){return"Поле "+e+" может содержать только буквы и пробелы."},alpha:function(e){return"Поле "+e+" может содержать только буквенные знаки."},between:function(e,t){return"Значение поля "+e+" должно быть между "+t[0]+" и "+t[1]+"."},confirmed:function(e){return"Поле "+e+" не совпадает."},credit_card:function(e){return"Поле "+e+" не валидно."},decimal:function(e,t){void 0===t&&(t=["*"]);var n=t[0];return"Поле "+e+" должно быть числовым и может содержать "+("*"===n?"":n)+" десятичных числа."},digits:function(e,t){return"Поле "+e+" должно быть числовым и точно содержать "+t[0]+" цифры."},dimensions:function(e,t){return"Поле "+e+" должно быть "+t[0]+" пикселей на "+t[1]+" пикселей."},email:function(e){return"Поле "+e+" должно быть действительным электронным адресом."},ext:function(e){return"Поле "+e+" должно быть действительным файлом."},image:function(e){return"Поле "+e+" должно быть изображением."},in:function(e){return"Поле "+e+" должно быть допустимым значением."},ip:function(e){return"Поле "+e+" должно быть действительным IP-адресом."},max:function(e,t){return"Поле "+e+" не может быть более "+t[0]+" символов."},max_value:function(e,t){return"Поле "+e+" должно быть "+t[0]+" или меньше."},mimes:function(e){return"Поле "+e+" должно иметь действительный тип файла."},min:function(e,t){return"Поле "+e+" должно быть не менее "+t[0]+" символов."},min_value:function(e,t){return"Поле "+e+" должно быть "+t[0]+" или больше."},not_in:function(e){return"Поле "+e+" должно быть допустимым значением."},numeric:function(e){return"Поле "+e+" должно быть числом."},regex:function(e){return"Формат поля "+e+" неверный."},required:function(e){return"Поле "+e+" должно быть заполнено."},size:function(e,t){return"Поле "+e+" должно быть меньше, чем "+t[0]+" KB."},url:function(e){return"Поле "+e+" не является валидным URL."}},validateConfig={locale:"ru",dictionary:{ru:{messages:messagesRu}},errorBagName:"formErrors",fieldsBagName:"formFields"};Vue.use(VeeValidate,validateConfig),Vue.config.debug=!0,Vue.component("Modal",{template:"#modal-template",props:["show","onClose"],methods:{close:function(){this.onClose()}},ready:function(){document.addEventListener("keydown",function(e){this.show&&27==e.keyCode&&this.onClose()})}}),Vue.component("LoginModal",{template:"#login-modal-template",props:["show"],data:function(){return{}},methods:{close:function(){this.$parent.showLoginModal=!1},loginPost:function(){alert("Login complete"),this.close()}}});var vueApp=new Vue({el:"#vue-app",data:{formActive:!1,currentStep:1,showLoginModal:!1,timer:0,birthdayMonth:1,birthdayYear:1,months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],volunteer:0},computed:{years:function(){for(var e=[],t=(new Date).getFullYear(),n=t-50;n<t;n++)e.push(n);return e},daysInMonth:function(e,t){return new Date(this.birthdayYear,this.birthdayMonth,0).getDate()}},methods:{activateForm:function(e){var t=this;if(t.formActive=!0,e&&e.target&&$(e.target).removeClass("button-blue-hollow").addClass("button-blue"),$(t.$el).find("[data-remaining]").length){t.timer=$(t.$el).find("[data-remaining]").data("remaining");var n=setInterval(function(){t.timer>0?t.timer+=-1:clearInterval(n)},1e3)}},downloadAndActivateForm:function(e,t){},scrollTop:function(){$("html, body").animate({scrollTop:$(".question-form").offset().top-30},1e3)},changeStep:function(e){var t=this,n="form-"+t.currentStep;t.$validator.validateAll(n).then(function(n){n&&(t.scrollTop(),t.currentStep=e)},function(e){alert("Пожалуйста, проверьте все поля на правильность заполнения");var r=t.formErrors.errors.map(function(e){return e.scope==n&&e});$("html, body").animate({scrollTop:$('input[name="'+r[0].field+'"]').offset().top-35},1e3)})},stepBack:function(){this.scrollTop(),this.currentStep--},submitForm:function(e){var t=this,n="form-"+t.currentStep,r=e.target.getAttribute("action"),i=e.target.getAttribute("method")||"post",a=$(e.target).serialize();this.$validator.validateAll(n).then(function(e){e&&$.ajax({method:i,url:r,data:a}).done(function(e){alert("Данные были успешно отправлены!"),window.location.reload()}).fail(function(e,t,n){alert("Возникла ошибка отправки данных! Пожалуйста, попробуйте отправить форму еще раз, либо свяжитесь с нами."),console.log(e,t,n)})},function(e){alert("Пожалуйста, проверьте все поля на правильность заполнения")})}},mounted:function(){$(".js-date-picker").flatpickr({dateFormat:"d.m.Y",locale:"ru",maxDate:new Date}),$(":input").inputmask()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsYXRwaWNrci5qcyIsImpxdWVyeS5qcyIsInZ1ZS5qcyIsInZlZS12YWxpZGF0ZS5qcyIsImpxdWVyeS5pbnB1dG1hc2suYnVuZGxlLm1pbi5qcyIsInJ1LmpzIiwidmFsaWRhdGUtcnUuanMiLCJhcHAuanMiXSwibmFtZXMiOlsiRmxhdHBpY2tyIiwiZWxlbWVudCIsImNvbmZpZyIsInVwZGF0ZVRpbWUiLCJlIiwic2VsZiIsIm5vQ2FsZW5kYXIiLCJzZWxlY3RlZERhdGVzIiwibGVuZ3RoIiwibm93IiwidGltZVdyYXBwZXIiLCJtaW5EYXRlSGFzVGltZSIsInR5cGUiLCJ0YXJnZXQiLCJ2YWx1ZSIsInNldEhvdXJzRnJvbUlucHV0cyIsInVwZGF0ZVZhbHVlIiwic2V0VGltZW91dCIsImVuYWJsZVRpbWUiLCJob3VycyIsInBhcnNlSW50IiwiaG91ckVsZW1lbnQiLCJtaW51dGVzIiwibWludXRlRWxlbWVudCIsInNlY29uZHMiLCJlbmFibGVTZWNvbmRzIiwic2Vjb25kRWxlbWVudCIsImFtUE0iLCJ0ZXh0Q29udGVudCIsImNvbXBhcmVEYXRlcyIsImxhdGVzdFNlbGVjdGVkRGF0ZU9iaiIsIm1pbkRhdGUiLCJNYXRoIiwibWF4IiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwibWF4RGF0ZUhhc1RpbWUiLCJtYXhEYXRlIiwibWluIiwic2V0SG91cnMiLCJzZXRIb3Vyc0Zyb21EYXRlIiwiZGF0ZU9iaiIsImRhdGUiLCJnZXRTZWNvbmRzIiwiaXNNb2JpbGUiLCJwYWQiLCJ0aW1lXzI0aHIiLCJvblllYXJJbnB1dCIsImV2ZW50IiwieWVhciIsImN1cnJlbnRZZWFyRWxlbWVudCIsImJsdXIiLCJ0ZXN0IiwiY2hhbmdlWWVhciIsIm9uTW9udGhTY3JvbGwiLCJwcmV2ZW50RGVmYXVsdCIsImNoYW5nZU1vbnRoIiwid2hlZWxEZWx0YSIsImRlbHRhWSIsImJpbmQiLCJ3cmFwIiwiZm9yRWFjaCIsImVsIiwidG9nZ2xlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVuZGVmaW5lZCIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJjaGFuZ2VFdmVudCIsImluaXRFdmVudCIsInNldHVwTW9iaWxlIiwiZGVib3VuY2VkUmVzaXplIiwiZGVib3VuY2UiLCJvblJlc2l6ZSIsInRyaWdnZXJDaGFuZ2UiLCJ0cmlnZ2VyRXZlbnQiLCJkZWJvdW5jZWRDaGFuZ2UiLCJtb2RlIiwiZGF5cyIsIm9uTW91c2VPdmVyIiwib25LZXlEb3duIiwiaW5saW5lIiwic3RhdGljIiwib250b3VjaHN0YXJ0IiwiZG9jdW1lbnRDbGljayIsImNsaWNrT3BlbnMiLCJhbHRJbnB1dCIsImlucHV0Iiwib3BlbiIsInByZXZNb250aE5hdiIsIm5leHRNb250aE5hdiIsImN1cnJlbnRNb250aEVsZW1lbnQiLCJ5ZWFyU2Nyb2xsIiwic2VsZWN0Iiwic2VsZWN0RGF0ZSIsInRpbWVDb250YWluZXIiLCJwb3NpdGlvbkNhbGVuZGFyIiwianVtcFRvRGF0ZSIsImp1bXBEYXRlIiwicGFyc2VEYXRlIiwiY3VycmVudFllYXIiLCJnZXRGdWxsWWVhciIsImN1cnJlbnRNb250aCIsImdldE1vbnRoIiwiY29uc29sZSIsImVycm9yIiwic3RhY2siLCJ3YXJuIiwicmVkcmF3IiwiaW5jcmVtZW50TnVtSW5wdXQiLCJkZWx0YSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGVzIiwic3RlcCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImJ1YmJsZXMiLCJldiIsImluaXRDdXN0b21FdmVudCIsImNyZWF0ZU51bWJlcklucHV0IiwiaW5wdXRDbGFzc05hbWUiLCJ3cmFwcGVyIiwiY3JlYXRlRWxlbWVudCIsIm51bUlucHV0IiwiYXJyb3dVcCIsImFycm93RG93biIsInBhdHRlcm4iLCJhcHBlbmRDaGlsZCIsImJ1aWxkIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2FsZW5kYXJDb250YWluZXIiLCJudW1JbnB1dFR5cGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwiYnVpbGRNb250aE5hdiIsImlubmVyQ29udGFpbmVyIiwid2Vla051bWJlcnMiLCJidWlsZFdlZWtzIiwickNvbnRhaW5lciIsImJ1aWxkV2Vla2RheXMiLCJ0YWJJbmRleCIsImJ1aWxkRGF5cyIsImJ1aWxkVGltZSIsImNsYXNzTGlzdCIsImFkZCIsImN1c3RvbUFwcGVuZCIsImFwcGVuZFRvIiwibm9kZVR5cGUiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsImJvZHkiLCJjcmVhdGVEYXkiLCJjbGFzc05hbWUiLCJkYXlOdW1iZXIiLCJkYXRlSXNFbmFibGVkIiwiaXNFbmFibGVkIiwiZGF5RWxlbWVudCIsImdldERhdGUiLCJ0b2dnbGVDbGFzcyIsImlzRGF0ZVNlbGVjdGVkIiwic2VsZWN0ZWREYXRlRWxlbSIsIm1pblJhbmdlRGF0ZSIsIm1heFJhbmdlRGF0ZSIsImlzRGF0ZUluUmFuZ2UiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJnZXRXZWVrIiwibW9udGgiLCJmaXJzdE9mTW9udGgiLCJEYXRlIiwiZ2V0RGF5IiwibDEwbiIsImZpcnN0RGF5T2ZXZWVrIiwiaXNSYW5nZU1vZGUiLCJwcmV2TW9udGhEYXlzIiwidXRpbHMiLCJnZXREYXlzaW5Nb250aCIsImRheXNJbk1vbnRoIiwiZmlyc3RDaGlsZCIsImRheU51bSIsIl9oaWRlUHJldk1vbnRoQXJyb3ciLCJfaGlkZU5leHRNb250aEFycm93IiwidXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCIsIm1vbnRoTmF2RnJhZ21lbnQiLCJtb250aE5hdiIsImlubmVySFRNTCIsInByZXZBcnJvdyIsInRpdGxlIiwic2Nyb2xsVGl0bGUiLCJ5ZWFySW5wdXQiLCJkaXNhYmxlZCIsIm5leHRBcnJvdyIsIm5hdmlnYXRpb25DdXJyZW50TW9udGgiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInRoaXMiLCJfX2hpZGVQcmV2TW9udGhBcnJvdyIsInNldCIsImJvb2wiLCJzdHlsZSIsImRpc3BsYXkiLCJfX2hpZGVOZXh0TW9udGhBcnJvdyIsInNlcGFyYXRvciIsImhvdXJJbnB1dCIsIm1pbnV0ZUlucHV0IiwiZGVmYXVsdEhvdXIiLCJkZWZhdWx0TWludXRlIiwiaG91ckluY3JlbWVudCIsIm1pbnV0ZUluY3JlbWVudCIsInNlY29uZElucHV0IiwidG9nZ2xlVGl0bGUiLCJ3ZWVrZGF5Q29udGFpbmVyIiwid2Vla2RheXMiLCJzaG9ydGhhbmQiLCJzbGljZSIsImNvbmNhdCIsInNwbGljZSIsImpvaW4iLCJ3ZWVrV3JhcHBlciIsIndlZWtBYmJyZXZpYXRpb24iLCJpc19vZmZzZXQiLCJmb2N1cyIsImNsZWFyIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwibW9iaWxlSW5wdXQiLCJkYXRlSXNQaWNrZWQiLCJjbG9zZSIsImlzT3BlbiIsInJlbW92ZSIsImRlc3Ryb3kiLCJpbnN0YW5jZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsIl90eXBlIiwicmVtb3ZlQXR0cmlidXRlIiwiX2ZsYXRwaWNrciIsImlzQ2FsZW5kYXJFbGVtIiwiZWxlbSIsImNvbnRhaW5zIiwiaXNJbnB1dCIsInBhdGgiLCJmb3JtYXREYXRlIiwiZnJtdCIsImNoYXJzIiwic3BsaXQiLCJtYXAiLCJjIiwiZm9ybWF0cyIsIm5ld1llYXIiLCJuZXdZZWFyTnVtIiwiaXNOZXdZZWFyIiwidGltZWxlc3MiLCJsdG1pbiIsImd0bWF4IiwiZW5hYmxlIiwiZGlzYWJsZSIsImQiLCJkYXRlVG9DaGVjayIsImFycmF5IiwiRnVuY3Rpb24iLCJnZXRUaW1lIiwiX3R5cGVvZiIsImZyb20iLCJ0byIsIndoaWNoIiwiaG92ZXJEYXRlIiwiaW5pdGlhbERhdGUiLCJyYW5nZVN0YXJ0RGF0ZSIsInJhbmdlRW5kRGF0ZSIsImNvbnRhaW5zRGlzYWJsZWQiLCJ0IiwiZHVyYXRpb24iLCJEQVkiLCJ0aW1lc3RhbXAiLCJvdXRPZlJhbmdlIiwiY2xpY2siLCJhbGxvd0lucHV0IiwibWluTWF4RGF0ZVNldHRlciIsImludmVyc2VEYXRlT2JqIiwiaXNWYWxpZERhdGUiLCJmaWx0ZXIiLCJwYXJzZUNvbmZpZyIsImJvb2xPcHRzIiwiaG9va3MiLCJjcmVhdGUiLCJkZWZhdWx0Q29uZmlnIiwiX21pbkRhdGUiLCJfbWF4RGF0ZSIsInVzZXJDb25maWciLCJfZXh0ZW5kcyIsImluc3RhbmNlQ29uZmlnIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiZGF0YXNldCIsIl9pIiwiYXJyYXlpZnkiLCJkYXRlRm9ybWF0IiwiYWx0Rm9ybWF0IiwiX2kyIiwicGx1Z2lucyIsInBsdWdpbkNvbmYiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJzZXR1cExvY2FsZSIsImxvY2FsZSIsImwxMG5zIiwiZGVmYXVsdCIsImNhbGVuZGFySGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiY2FsZW5kYXJXaWR0aCIsIm9mZnNldFdpZHRoIiwiaW5wdXRCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkaXN0YW5jZUZyb21Cb3R0b20iLCJpbm5lckhlaWdodCIsImJvdHRvbSIsImJvdHRvbUNhbGVuZGFyIiwidG9wIiwicGFnZVlPZmZzZXQiLCJsZWZ0IiwicGFnZVhPZmZzZXQiLCJyaWdodCIsInJpZ2h0TW9zdCIsInN0b3BQcm9wYWdhdGlvbiIsInNldERhdGUiLCJzZWxlY3RlZERhdGUiLCJzZWxlY3RlZEluZGV4IiwicHVzaCIsInNvcnQiLCJhIiwiYiIsIm9wdGlvbiIsInNldFNlbGVjdGVkRGF0ZSIsImlucHV0RGF0ZSIsImlzTmFOIiwic3Vic3RyaW5nIiwicmFuZ2VTZXBhcmF0b3IiLCJzZXR1cERhdGVzIiwicGFyc2VEYXRlUnVsZXMiLCJhcnIiLCJ4IiwiZGVmYXVsdERhdGUiLCJfc2VsZWN0ZWREYXRlT2JqIiwic2V0dXBIZWxwZXJGdW5jdGlvbnMiLCJ5ciIsIm1vbnRoVG9TdHIiLCJtb250aE51bWJlciIsInNob3J0aGFuZEN1cnJlbnRNb250aCIsIm1vbnRocyIsInNldHVwRm9ybWF0cyIsIloiLCJ0b0lTT1N0cmluZyIsIkQiLCJ3IiwiRiIsIm4iLCJIIiwicHJvdG90eXBlIiwiSiIsIm9yZGluYWwiLCJLIiwiTSIsIlMiLCJVIiwiWSIsImoiLCJoIiwibCIsImxvbmdoYW5kIiwibSIsInMiLCJ5IiwiU3RyaW5nIiwic2V0dXBJbnB1dHMiLCJxdWVyeVNlbGVjdG9yIiwibm9kZU5hbWUiLCJhbHRJbnB1dENsYXNzIiwicGxhY2Vob2xkZXIiLCJzZXRBdHRyaWJ1dGUiLCJpbnB1dFR5cGUiLCJtb2JpbGVGb3JtYXRTdHIiLCJkZWZhdWx0VmFsdWUiLCJ0b2dnbGUiLCJkYXRhIiwiY29uc3RydWN0b3IiLCJmaXJlRXZlbnQiLCJqb2luQ2hhciIsImRPYmoiLCJ0YWciLCJjb250ZW50Iiwib2JqIiwiZnVuYyIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwiX2xlbiIsImFyZ3VtZW50cyIsImFyZ3MiLCJfa2V5IiwiY29udGV4dCIsImxhdGVyIiwiYXBwbHkiLCJjbGVhclRpbWVvdXQiLCJkYXRlMSIsImRhdGUyIiwiaXNLZXlEb3duIiwiaXNXaGVlbCIsIk51bWJlciIsImN1clZhbHVlIiwibmV3VmFsdWUiLCJpc0hvdXJFbGVtIiwiYWJzIiwiX2NyZWF0ZUVsZW1lbnQiLCJkaXNhYmxlTW9iaWxlIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsIm5vZGVMaXN0Iiwibm9kZXMiLCJjYWxsIiwiaW5zdGFuY2VzIiwiZmxhdHBpY2tyIiwic2VsZWN0b3IiLCJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsIkVycm9yIiwibm9HbG9iYWwiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsInRleHQiLCJoZWFkIiwiaXNBcnJheUxpa2UiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJyaXNTaW1wbGUiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJlYWNoIiwibWF0Y2giLCJybm90aHRtbHdoaXRlIiwiXyIsImZsYWciLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm1ldGhvZCIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsInRoZW4iLCJjb21wbGV0ZWQiLCJyZWFkeSIsIkRhdGEiLCJleHBhbmRvIiwidWlkIiwiZ2V0RGF0YSIsInJicmFjZSIsImRhdGFBdHRyIiwibmFtZSIsInJlcGxhY2UiLCJybXVsdGlEYXNoIiwidG9Mb3dlckNhc2UiLCJnZXRBdHRyaWJ1dGUiLCJkYXRhVXNlciIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImNzcyIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInJjc3NOdW0iLCJleGVjIiwic3RhcnQiLCJlbmQiLCJnZXREZWZhdWx0RGlzcGxheSIsInRlbXAiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJpbmRleCIsImRhdGFQcml2IiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZ2V0QWxsIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJtZXJnZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwidG1wIiwicmh0bWwiLCJydGFnTmFtZSIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImh0bWxQcmVmaWx0ZXIiLCJsYXN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImluQXJyYXkiLCJyc2NyaXB0VHlwZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJmbiIsIm9uZSIsIm9yaWdGbiIsIm9mZiIsImd1aWQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiZXh0ZW5kIiwiZml4SW5wdXQiLCJyY2hlY2thYmxlVHlwZSIsImNoZWNrZWQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJjYWxsYmFjayIsImZpcnN0IiwiaGFzU2NyaXB0cyIsIm5vZGUiLCJpTm9DbG9uZSIsInN1cHBvcnQiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJlcSIsImh0bWwiLCJjbG9uZSIsIl9ldmFsVXJsIiwicmNsZWFuU2NyaXB0Iiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRTdHlsZXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsInJudW1ub25weCIsInJtYXJnaW4iLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsInZlbmRvclByb3BOYW1lIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJ0b1VwcGVyQ2FzZSIsImNzc1ByZWZpeGVzIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImdldENsaWVudFJlY3RzIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0IiwiVHdlZW4iLCJlYXNpbmciLCJpbml0IiwicmFmIiwidGltZXJJZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZ4IiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImF0dHJzIiwiaGVpZ2h0Iiwib3BhY2l0eSIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwicHJvcHMiLCJvcHRzIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJhbmltIiwib3JpZyIsImhpZGRlbiIsImRhdGFTaG93IiwicXVldWUiLCJfcXVldWVIb29rcyIsInVucXVldWVkIiwiZW1wdHkiLCJmaXJlIiwiYWx3YXlzIiwicmZ4dHlwZXMiLCJpc0VtcHR5T2JqZWN0Iiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsImNhbWVsQ2FzZSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwicGVyY2VudCIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3h5IiwidGltZXIiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInJicmFja2V0IiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInRocm93cyIsInN0YXRlIiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJsYXN0IiwibGVuIiwiY29weSIsImNvcHlJc0FycmF5IiwiaXNQbGFpbk9iamVjdCIsInJhbmRvbSIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwiaXNOdW1lcmljIiwicHJvdG8iLCJDdG9yIiwiZ2xvYmFsRXZhbCIsInN0cmluZyIsInRyaW0iLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJwcmVmZXJyZWREb2MiLCJzZXREb2N1bWVudCIsImRvY3VtZW50SXNIVE1MIiwicnF1aWNrRXhwciIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwidG9rZW5pemUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJ0ZXN0Q29udGV4dCIsInFzYUVycm9yIiwiY3JlYXRlQ2FjaGUiLCJjYWNoZSIsImtleXMiLCJFeHByIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImRpZmYiLCJzb3VyY2VJbmRleCIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImRpc2FibGVkQW5jZXN0b3IiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJuZXh0IiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImF0dGFjaEV2ZW50IiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJoYXNGb2N1cyIsImhyZWYiLCJlbmFibGVkIiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJsb2NrIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsIlR5cGVFcnJvciIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJjb25maWd1cmFibGUiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInN3YXAiLCJvbGQiLCJoaWRlIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJjc3NQcm9wcyIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0Zpbml0ZSIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJwb3MiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjbGVhckludGVydmFsIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInN0YXR1c1RleHQiLCJ0aW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwidXJsQW5jaG9yIiwidW5jYWNoZWQiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwiYWJvcnQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJyZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInBhcnNlSlNPTiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiVnVlIiwiX3RvU3RyaW5nIiwidG9OdW1iZXIiLCJtYWtlTWFwIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsInJlbW92ZSQxIiwiaXRlbSIsImlzUHJpbWl0aXZlIiwiYmluZCQxIiwiY3R4IiwiYm91bmRGbiIsIl9sZW5ndGgiLCJfZnJvbSIsImlzT2JqZWN0IiwiT0JKRUNUX1NUUklORyIsInRvT2JqZWN0IiwicmVzIiwiZ2VuU3RhdGljS2V5cyIsIm1vZHVsZXMiLCJyZWR1Y2UiLCJzdGF0aWNLZXlzIiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImxvb3NlSW5kZXhPZiIsImlzUmVzZXJ2ZWQiLCJkZWYiLCJwYXJzZVBhdGgiLCJiYWlsUkUiLCJzZWdtZW50cyIsImlzTmF0aXZlIiwicHVzaFRhcmdldCIsIl90YXJnZXQiLCJEZXAiLCJ0YXJnZXRTdGFjayIsInBvcFRhcmdldCIsInByb3RvQXVnbWVudCIsIl9fcHJvdG9fXyIsImNvcHlBdWdtZW50Iiwib2JzZXJ2ZSIsImFzUm9vdERhdGEiLCJvYiIsIl9fb2JfXyIsIk9ic2VydmVyIiwib2JzZXJ2ZXJTdGF0ZSIsInNob3VsZENvbnZlcnQiLCJpc1NlcnZlclJlbmRlcmluZyIsImlzRXh0ZW5zaWJsZSIsIl9pc1Z1ZSIsInZtQ291bnQiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsImN1c3RvbVNldHRlciIsImRlcCIsInByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY2hpbGRPYiIsImRlcGVuZCIsImRlcGVuZEFycmF5IiwibmV3VmFsIiwic2V0JDEiLCJkZWwiLCJtZXJnZURhdGEiLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZUhvb2siLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsIm1lcmdlQXNzZXRzIiwiY2hlY2tDb21wb25lbnRzIiwiY29tcG9uZW50cyIsImxvd2VyIiwiaXNCdWlsdEluVGFnIiwiaXNSZXNlcnZlZFRhZyIsIm5vcm1hbGl6ZVByb3BzIiwiY2FtZWxpemUiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJ1cGRhdGUiLCJtZXJnZU9wdGlvbnMiLCJjaGlsZCIsInZtIiwibWVyZ2VGaWVsZCIsInN0cmF0Iiwic3RyYXRzIiwiZGVmYXVsdFN0cmF0IiwiZXh0ZW5kc0Zyb20iLCJleHRlbmRzIiwibWl4aW5zIiwibWl4aW4iLCJWdWUkMyIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJjYXBpdGFsaXplIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJhYnNlbnQiLCJpc1R5cGUiLCJCb29sZWFuIiwiaHlwaGVuYXRlIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRDb252ZXJ0IiwiYXNzZXJ0UHJvcCIsIiRvcHRpb25zIiwicmVxdWlyZWQiLCJ2YWxpZCIsImV4cGVjdGVkVHlwZXMiLCJhc3NlcnRlZFR5cGUiLCJhc3NlcnRUeXBlIiwiZXhwZWN0ZWRUeXBlIiwidmFsaWRhdG9yIiwiZ2V0VHlwZSIsImNyZWF0ZVRleHRWTm9kZSIsIlZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsIm5zIiwiaXNTdGF0aWMiLCJpc0Nsb25lZCIsImNsb25lVk5vZGVzIiwidm5vZGVzIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJfYmFzZSIsImNpZCIsInJlc29sdmVkIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiJGZvcmNlVXBkYXRlIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsImV4dHJhY3RQcm9wcyIsImZ1bmN0aW9uYWwiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibGlzdGVuZXJzIiwibmF0aXZlT24iLCJhYnN0cmFjdCIsIm1lcmdlSG9va3MiLCJfY29udGV4dCIsInJlbmRlciIsInNsb3RzIiwicmVzb2x2ZVNsb3RzIiwiZnVuY3Rpb25hbENvbnRleHQiLCJzbG90IiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsInBhcmVudEVsbSIsInJlZkVsbSIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsIl9pc0NvbXBvbmVudCIsIl9jb21wb25lbnRUYWciLCJfcGFyZW50Vm5vZGUiLCJfcGFyZW50TGlzdGVuZXJzIiwiX3JlbmRlckNoaWxkcmVuIiwiX3BhcmVudEVsbSIsIl9yZWZFbG0iLCJpbmxpbmVUZW1wbGF0ZSIsInN0YXRpY1JlbmRlckZucyIsImh5ZHJhdGluZyIsImNvbXBvbmVudEluc3RhbmNlIiwiX2lzRGVzdHJveWVkIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwib2xkVm5vZGUiLCJfdXBkYXRlRnJvbVBhcmVudCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsIl9pbmFjdGl2ZSIsImRlc3Ryb3kkMSIsIiRkZXN0cm95IiwiY2IiLCJyZXF1ZXN0ZWQiLCJjYnMiLCJwZW5kaW5nQ2FsbGJhY2tzIiwic3luYyIsInJlYXNvbiIsImRvbVByb3BzIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJob29rc1RvTWVyZ2UiLCJmcm9tUGFyZW50Iiwib3VycyIsIm1lcmdlSG9vayQxIiwidHdvIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5IiwiaW5qZWN0ZWRIYXNoIiwiX19pbmplY3RlZCIsIm9sZEhvb2siLCJjcmVhdGVFdmVudEhhbmRsZSIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwibm9ybWFsaXplRXZlbnQiLCJjYXB0dXJlIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsIkFMV0FZU19OT1JNQUxJWkUiLCJjcmVhdGVFbXB0eVZOb2RlIiwic2NvcGVkU2xvdHMiLCJTSU1QTEVfTk9STUFMSVpFIiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJhcHBseU5TIiwiaW5pdFJlbmRlciIsIiR2bm9kZSIsIl92bm9kZSIsIl9zdGF0aWNUcmVlcyIsInBhcmVudFZub2RlIiwicmVuZGVyQ29udGV4dCIsIiRzbG90cyIsIiRzY29wZWRTbG90cyIsIl9jIiwiJGNyZWF0ZUVsZW1lbnQiLCJkZWZhdWx0U2xvdCIsImlzQ29tbWVudCIsImluaXRFdmVudHMiLCJfZXZlbnRzIiwiX2hhc0hvb2tFdmVudCIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsImFkZCQxIiwiJG9uY2UiLCIkb24iLCJyZW1vdmUkMiIsIiRvZmYiLCJvbGRMaXN0ZW5lcnMiLCJpbml0TGlmZWN5Y2xlIiwiJHBhcmVudCIsIiRjaGlsZHJlbiIsIiRyb290IiwiJHJlZnMiLCJfd2F0Y2hlciIsIl9pc0JlaW5nRGVzdHJveWVkIiwiJGVtaXQiLCJyZXNldFNjaGVkdWxlclN0YXRlIiwiaGFzJDEiLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwiX21heFVwZGF0ZUNvdW50IiwidXNlciIsImRldnRvb2xzIiwiZW1pdCIsInF1ZXVlV2F0Y2hlciIsIm5leHRUaWNrIiwidHJhdmVyc2UiLCJzZWVuT2JqZWN0cyIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJkZXBJZCIsImluaXRTdGF0ZSIsIl93YXRjaGVycyIsImluaXRQcm9wcyIsIm1ldGhvZHMiLCJpbml0TWV0aG9kcyIsImluaXREYXRhIiwiaW5pdENvbXB1dGVkIiwid2F0Y2giLCJpbml0V2F0Y2giLCJfcHJvcEtleXMiLCJpc1Jvb3QiLCJpc1Jlc2VydmVkUHJvcCIsImlzU2V0dGluZ1Byb3BzIiwidXNlckRlZiIsImNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbiIsIm1ha2VDb21wdXRlZEdldHRlciIsIldhdGNoZXIiLCJsYXp5IiwiZGlydHkiLCJldmFsdWF0ZSIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsImNhY2hlZFN1cGVyT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJfc2NvcGVJZCIsIl9pbml0IiwiaW5pdFVzZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZCIsImluc3RhbGwiLCJpbml0TWl4aW4kMSIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiX2Fzc2V0VHlwZXMiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJkZWZpbml0aW9uIiwiZ2V0Q29tcG9uZW50TmFtZSIsInBydW5lQ2FjaGUiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiZ2VuQ2xhc3NGb3JWbm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwiZ2VuQ2xhc3NGcm9tRGF0YSIsInN0YXRpY0NsYXNzIiwiZHluYW1pY0NsYXNzIiwic3RyaW5naWZ5Q2xhc3MiLCJzdHJpbmdpZmllZCIsImlzU1ZHIiwiaXNVbmtub3duRWxlbWVudCIsImluQnJvd3NlciIsInVua25vd25FbGVtZW50Q2FjaGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInF1ZXJ5IiwiY3JlYXRlRWxlbWVudCQxIiwidGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZU1hcCIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwic2V0VGV4dENvbnRlbnQiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZiIsInJlZnMiLCJyZWZJbkZvciIsImlzVW5kZWYiLCJpc0RlZiIsInNhbWVWbm9kZSIsInZub2RlMSIsInZub2RlMiIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwiX3VwZGF0ZSIsIm9sZERpciIsImlzQ3JlYXRlIiwiZW1wdHlOb2RlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkVmFsdWUiLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImluc2VydGVkIiwiY2FsbEluc2VydCIsIm1vZGlmaWVycyIsImVtcHR5TW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJ1cGRhdGVBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsImlzSUU5IiwiaXNYbGluayIsInJlbW92ZUF0dHJpYnV0ZU5TIiwieGxpbmtOUyIsImdldFhsaW5rUHJvcCIsImlzRW51bWVyYXRlZEF0dHIiLCJpc0Jvb2xlYW5BdHRyIiwiaXNGYWxzeUF0dHJWYWx1ZSIsInNldEF0dHJpYnV0ZU5TIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImFkZCQyIiwib2xkSGFuZGxlciIsInRhcmdldCQxIiwicmVtb3ZlJDMiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsImlzRGlydHkiLCJpc0lucHV0Q2hhbmdlZCIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJwYXJzZVN0eWxlVGV4dCIsImdldFN0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwic2V0UHJvcCIsInRhciIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiVFJBTlNJVElPTiIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvbkVuZEV2ZW50IiwiZW5kZWQiLCJvbkVuZCIsInRyYW5zaXRpb25lRGVsYXlzIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJBTklNQVRJT04iLCJoYXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1SRSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInJlc29sdmVUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwiaXNSb290SW5zZXJ0Iiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwibGVhdmUiLCJybSIsInBlcmZvcm1MZWF2ZSIsImJlZm9yZUxlYXZlIiwibGVhdmVDbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZGVmJCQxIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJjYWxsZWQiLCJfZW50ZXIiLCJzZXRTZWxlY3RlZCIsImJpbmRpbmciLCJpc011bHRpcGxlIiwibXVsdGlwbGUiLCJnZXRWYWx1ZSIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwibG9jYXRlTm9kZSIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwiY29tcCIsImtleSQxIiwicmF3Q2hpbGQiLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiaXNTYW1lQ2hpbGQiLCJvbGRDaGlsZCIsImNhbGxQZW5kaW5nQ2JzIiwiX21vdmVDYiIsInJlY29yZFBvc2l0aW9uIiwibmV3UG9zIiwiYXBwbHlUcmFuc2xhdGlvbiIsIm9sZFBvcyIsImR4IiwiZHkiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsImRlY29kZSIsImRlY29kZXIiLCJkZWNvZGVBdHRyIiwic2hvdWxkRGVjb2RlTmV3bGluZXMiLCJubFJFIiwibHRSRSIsImd0UkUiLCJhbXBSRSIsInF1b3RlUkUiLCJhZHZhbmNlIiwicGFyc2VFbmRUYWciLCJsb3dlckNhc2VkVGFnTmFtZSIsImxvd2VyQ2FzZWRUYWciLCJsYXN0VGFnIiwiZXhwZWN0SFRNTCIsImlzVW5hcnlUYWckJDEiLCJpc1VuYXJ5VGFnIiwibm8iLCJpc1NjcmlwdE9yU3R5bGUiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVDYWNoZSIsImVuZFRhZ0xlbmd0aCIsInJlc3QiLCJlbmRUYWciLCJ0ZXh0RW5kIiwiY29tbWVudCIsImNvbW1lbnRFbmQiLCJjb25kaXRpb25hbENvbW1lbnQiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImRvY3R5cGUiLCJlbmRUYWdNYXRjaCIsImN1ckluZGV4Iiwic3RhcnRUYWdNYXRjaCIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJhdHRyaWJ1dGUiLCJ1bmFyeVNsYXNoIiwiaXNOb25QaHJhc2luZ1RhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJ1bmFyeSIsIklTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4iLCJyZXN0JDEiLCJwYXJzZUZpbHRlcnMiLCJleHAiLCJwdXNoRmlsdGVyIiwibGFzdEZpbHRlckluZGV4IiwiZXhwcmVzc2lvbiIsImluU2luZ2xlIiwiaW5Eb3VibGUiLCJpblRlbXBsYXRlU3RyaW5nIiwiaW5SZWdleCIsImN1cmx5Iiwic3F1YXJlIiwicGFyZW4iLCJjaGFyQXQiLCJ3cmFwRmlsdGVyIiwicGFyc2VUZXh0IiwiZGVsaW1pdGVycyIsInRhZ1JFIiwiYnVpbGRSZWdleCIsImRlZmF1bHRUYWdSRSIsImxhc3RJbmRleCIsImJhc2VXYXJuIiwicGx1Y2tNb2R1bGVGdW5jdGlvbiIsImFkZEF0dHIiLCJhZGREaXJlY3RpdmUiLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwibmF0aXZlIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsImdldEJpbmRpbmdBdHRyIiwiZ2V0U3RhdGljIiwiZHluYW1pY1ZhbHVlIiwiZ2V0QW5kUmVtb3ZlQXR0ciIsInN0YXRpY1ZhbHVlIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJwYXJzZU1vZGVsIiwiaW5kZXgkMSIsImV4cHJlc3Npb25Qb3MiLCJleHByZXNzaW9uRW5kUG9zIiwibGFzdEluZGV4T2YiLCJlb2YiLCJjaHIiLCJpc1N0cmluZ1N0YXJ0IiwicGFyc2VTdHJpbmciLCJwYXJzZUJyYWNrZXQiLCJpbkJyYWNrZXQiLCJzdHJpbmdRdW90ZSIsInRlbXBsYXRlIiwid2FybiQxIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwibXVzdFVzZVByb3AiLCJwbGF0Zm9ybUlzUHJlVGFnIiwiaXNQcmVUYWciLCJwcmVUcmFuc2Zvcm1zIiwidHJhbnNmb3JtcyIsInBvc3RUcmFuc2Zvcm1zIiwiY3VycmVudFBhcmVudCIsInByZXNlcnZlV2hpdGVzcGFjZSIsImluVlByZSIsImluUHJlIiwid2FybmVkIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJpc0lFIiwiZ3VhcmRJRVNWR0J1ZyIsIm1ha2VBdHRyc01hcCIsImlzRm9yYmlkZGVuVGFnIiwiZm9yYmlkZGVuIiwicHJvY2Vzc1ByZSIsInByZSIsInByb2Nlc3NSYXdBdHRycyIsInByb2Nlc3NGb3IiLCJwcm9jZXNzSWYiLCJwcm9jZXNzT25jZSIsInByb2Nlc3NLZXkiLCJwbGFpbiIsInByb2Nlc3NSZWYiLCJwcm9jZXNzU2xvdCIsInByb2Nlc3NDb21wb25lbnQiLCJpJDEiLCJwcm9jZXNzQXR0cnMiLCJpZiIsImVsc2VpZiIsImVsc2UiLCJhZGRJZkNvbmRpdGlvbiIsImJsb2NrIiwicHJvY2Vzc0lmQ29uZGl0aW9ucyIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJpJDIiLCJsYXN0Tm9kZSIsImRlY29kZUhUTUxDYWNoZWQiLCJjaGVja0luRm9yIiwiaW5NYXRjaCIsImZvckFsaWFzUkUiLCJhbGlhcyIsIml0ZXJhdG9yTWF0Y2giLCJmb3JJdGVyYXRvclJFIiwiaXRlcmF0b3IxIiwiaXRlcmF0b3IyIiwiZmluZFByZXZFbGVtZW50IiwiY29uZGl0aW9uIiwiaWZDb25kaXRpb25zIiwic2xvdE5hbWUiLCJjb21wb25lbnQiLCJpc1Byb3AiLCJkaXJSRSIsImhhc0JpbmRpbmdzIiwicGFyc2VNb2RpZmllcnMiLCJtb2RpZmllclJFIiwiYmluZFJFIiwiY2FtZWwiLCJvblJFIiwiYXJnTWF0Y2giLCJhcmdSRSIsImNoZWNrRm9yQWxpYXNNb2RlbCIsImllTlNCdWciLCJpZU5TUHJlZml4IiwiX2VsIiwib3B0aW1pemUiLCJpc1N0YXRpY0tleSIsImdlblN0YXRpY0tleXNDYWNoZWQiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWciLCJtYXJrU3RhdGljIiwibWFya1N0YXRpY1Jvb3RzIiwiZ2VuU3RhdGljS2V5cyQxIiwiaXNJbkZvciIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsIndhbGtUaHJvdWdoQ29uZGl0aW9uc0Jsb2NrcyIsImNvbmRpdGlvbkJsb2NrcyIsImlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIiwiZXZlcnkiLCJnZW5IYW5kbGVycyIsImdlbkhhbmRsZXIiLCJtb2RpZmllckNvZGUiLCJnZW5LZXlGaWx0ZXIiLCJzaW1wbGVQYXRoUkUiLCJmbkV4cFJFIiwiZ2VuRmlsdGVyQ29kZSIsImtleVZhbCIsImtleUNvZGVzIiwiYmluZCQyIiwid3JhcERhdGEiLCJnZW5lcmF0ZSIsImFzdCIsInByZXZTdGF0aWNSZW5kZXJGbnMiLCJjdXJyZW50U3RhdGljUmVuZGVyRm5zIiwicHJldk9uY2VDb3VudCIsIm9uY2VDb3VudCIsImN1cnJlbnRPcHRpb25zIiwid2FybiQyIiwidHJhbnNmb3JtcyQxIiwiZGF0YUdlbkZucyIsInBsYXRmb3JtRGlyZWN0aXZlcyQxIiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDEiLCJnZW5FbGVtZW50Iiwic3RhdGljUHJvY2Vzc2VkIiwiZ2VuU3RhdGljIiwib25jZVByb2Nlc3NlZCIsImdlbk9uY2UiLCJmb3JQcm9jZXNzZWQiLCJnZW5Gb3IiLCJpZlByb2Nlc3NlZCIsImdlbklmIiwiZ2VuU2xvdCIsImdlbkNvbXBvbmVudCIsImdlbkRhdGEiLCJnZW5DaGlsZHJlbiIsImdlbklmQ29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJnZW5UZXJuYXJ5RXhwIiwiZ2VuRGlyZWN0aXZlcyIsImdlblByb3BzIiwiZ2VuU2NvcGVkU2xvdHMiLCJnZW5JbmxpbmVUZW1wbGF0ZSIsIm5lZWRSdW50aW1lIiwiaGFzUnVudGltZSIsImdlbiIsImJhc2VEaXJlY3RpdmVzIiwiaW5saW5lUmVuZGVyRm5zIiwiZ2VuU2NvcGVkU2xvdCIsInNjb3BlIiwiY2hlY2tTa2lwIiwiZWwkMSIsImdldE5vcm1hbGl6YXRpb25UeXBlIiwiZ2VuTm9kZSIsIm5lZWRzTm9ybWFsaXphdGlvbiIsInNvbWUiLCJtYXliZUNvbXBvbmVudCIsImdlblRleHQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJiaW5kJCQxIiwiY29tcG9uZW50TmFtZSIsImNvbXBpbGUkMSIsImRldGVjdEVycm9ycyIsImVycm9ycyIsImNoZWNrTm9kZSIsImNoZWNrRm9yIiwiY2hlY2tFeHByZXNzaW9uIiwiY2hlY2tJZGVudGlmaWVyIiwiaWRlbnQiLCJpZGVudFJFIiwia2V5d29yZE1hdGNoIiwic3RyaXBTdHJpbmdSRSIsInByb2hpYml0ZWRLZXl3b3JkUkUiLCJ0cmFuc2Zvcm1Ob2RlIiwiY2xhc3NCaW5kaW5nIiwiZ2VuRGF0YSQxIiwidHJhbnNmb3JtTm9kZSQxIiwic3R5bGVCaW5kaW5nIiwiZ2VuRGF0YSQyIiwibW9kZWwkMSIsIl93YXJuIiwid2FybiQzIiwiZHluYW1pY1R5cGUiLCJnZW5TZWxlY3QiLCJnZW5DaGVja2JveE1vZGVsIiwiZ2VuUmFkaW9Nb2RlbCIsImdlbkRlZmF1bHRNb2RlbCIsInZhbHVlQmluZGluZyIsInRydWVWYWx1ZUJpbmRpbmciLCJmYWxzZVZhbHVlQmluZGluZyIsImdlbkFzc2lnbm1lbnRDb2RlIiwibmVlZENvbXBvc2l0aW9uR3VhcmQiLCJ2YWx1ZUV4cHJlc3Npb24iLCJjaGVja09wdGlvbldhcm5pbmciLCJhc3NpZ25tZW50IiwibW9kZWxScyIsImNvbXBpbGUkJDEiLCJiYXNlT3B0aW9ucyIsImNvbXBpbGVUb0Z1bmN0aW9ucyIsIm1ha2VGdW5jdGlvbiIsImdldE91dGVySFRNTCIsIm91dGVySFRNTCIsIl9pc1NlcnZlciIsIl9TZXQiLCJjYW1lbGl6ZVJFIiwiaHlwaGVuYXRlUkUiLCJpZGVudGl0eSIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsImVycm9ySGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsIl9saWZlY3ljbGVIb29rcyIsImhhc1Byb3RvIiwiVUEiLCJpc0VkZ2UiLCJpc0FuZHJvaWQiLCJpc0lPUyIsImVudiIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwibmV4dFRpY2tIYW5kbGVyIiwicGVuZGluZyIsImNvcGllcyIsImNhbGxiYWNrcyIsInRpbWVyRnVuYyIsIlByb21pc2UiLCJsb2dFcnJvciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJfcmVzb2x2ZSIsIlNldCIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJoYXNDb25zb2xlIiwiZm9ybWF0TG9jYXRpb24iLCJfX2ZpbGUiLCJ1aWQkMSIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJhZGREZXAiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwib2JzZXJ2ZUFycmF5IiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIndhbGsiLCJpdGVtcyIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwiaW5pdFByb3h5IiwidXRpbCIsImZyZWV6ZSIsImRlZmluZVJlYWN0aXZlIiwiYWxsb3dlZEdsb2JhbHMiLCJ3YXJuTm9uUHJlc2VudCIsImhhc1Byb3h5IiwiUHJveHkiLCJpc0J1aWx0SW5Nb2RpZmllciIsImhhc0hhbmRsZXIiLCJpc0FsbG93ZWQiLCJnZXRIYW5kbGVyIiwiX3dpdGhTdHJpcHBlZCIsIl9yZW5kZXJQcm94eSIsImlzT25jZSIsInByb3RvdHlwZUFjY2Vzc29ycyIsImRlZmluZVByb3BlcnRpZXMiLCJ1aWQkMiIsImV4cE9yRm4iLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImNsZWFudXBEZXBzIiwidGhpcyQxIiwiX3VpZCIsIl9zZWxmIiwiZGF0YURlZiIsIm5ld0RhdGEiLCIkc2V0IiwiJGRlbGV0ZSIsImhvb2tSRSIsIl9tb3VudCIsIiRlbCIsIl9yZW5kZXIiLCJwcmV2RWwiLCJwcmV2Vm5vZGUiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwicmVuZGVyQ2hpbGRyZW4iLCJoYXNDaGlsZHJlbiIsInByb3BLZXlzIiwidHJlZSIsIm1hcmtTdGF0aWNOb2RlIiwiJG5leHRUaWNrIiwiX3MiLCJfdiIsIl9uIiwiX2UiLCJfcSIsIl9tIiwiX28iLCJfZiIsIl9sIiwiX3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCJzbG90Tm9kZXMiLCJfcmVuZGVyZWQiLCJfYiIsImFzUHJvcCIsIl9rIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbkFsaWFzIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJjb25maWdEZWYiLCJkZWxldGUiLCJ2ZXJzaW9uIiwidGVzdEVsIiwiYWNjZXB0VmFsdWUiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwibm9kZU9wcyIsImhvb2tzJDEiLCJiYXNlTW9kdWxlcyIsImtsYXNzIiwibGlzdERlbGltaXRlciIsInByb3BlcnR5RGVsaW1pdGVyIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplIiwicHJlZml4ZXMiLCJ1cHBlciIsInByZWZpeGVkIiwiaGFzVHJhbnNpdGlvbiIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJhY3RpdmF0ZSIsInBsYXRmb3JtTW9kdWxlcyIsInBhdGNoJDEiLCJiYWNrZW5kIiwiZW1wdHlOb2RlQXQiLCJjcmVhdGVSbUNiIiwiY2hpbGRFbG0iLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwibmVzdGVkIiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJyZW1vdmVPbmx5Iiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsImVsbVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwicGF0Y2hWbm9kZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJoeWRyYXRlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJiYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwib2xkRWxtIiwicGFyZW50RWxtJDEiLCJhbmNlc3RvciIsIm1vZGVsYWJsZVRhZ1JFIiwidm1vZGVsIiwibW9kZWwiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJrZXB0IiwicmVtb3ZlZCIsImMkMSIsImJlZm9yZVVwZGF0ZSIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJpbmZvIiwicGxhdGZvcm1Db21wb25lbnRzIiwiZW5jb2RlZCIsInNpbmdsZUF0dHJJZGVudGlmaWVyIiwic2luZ2xlQXR0ckFzc2lnbiIsInNpbmdsZUF0dHJWYWx1ZXMiLCJuY25hbWUiLCJxbmFtZUNhcHR1cmUiLCJnIiwicmVnZXhFc2NhcGVSRSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJkb3duIiwicHJldmVudCIsImN0cmwiLCJhbHQiLCJtZXRhIiwiY2xvYWsiLCJrbGFzcyQxIiwic3R5bGUkMSIsIm1vZHVsZXMkMSIsImRpcmVjdGl2ZXMkMSIsImlkVG9UZW1wbGF0ZSIsIm1vdW50IiwiVmVlVmFsaWRhdGUiLCJ1bndyYXBFeHBvcnRzIiwiX19lc01vZHVsZSIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiYWRkQ2xhc3NlcyIsImZsYWdzIiwidG91Y2hlZCIsInVudG91Y2hlZCIsInBhc3NlZCIsImludmFsaWQiLCJzZXREaXJ0eSIsInByaXN0aW5lIiwic2V0UHJpc3RpbmUiLCJhbHBoYSIsImFscGhhX2Rhc2giLCJhbHBoYV9udW0iLCJhbHBoYV9zcGFjZXMiLCJiZXR3ZWVuIiwiY29uZmlybWVkIiwidmFsaWRhdGluZ0ZpZWxkIiwiY29uZmlybWVkRmllbGQiLCJmaWVsZCIsImFzc2VydFN0cmluZ18xIiwiYXNzZXJ0U3RyaW5nIiwiaXNDcmVkaXRDYXJkXzEiLCJpc0NyZWRpdENhcmQiLCJfYXNzZXJ0U3RyaW5nMiIsInNhbml0aXplZCIsImNyZWRpdENhcmQiLCJzdW0iLCJkaWdpdCIsInRtcE51bSIsInNob3VsZERvdWJsZSIsIl9hc3NlcnRTdHJpbmciLCJjcmVkaXRfY2FyZCIsImRlY2ltYWwiLCJkZWNpbWFscyIsInJlZ2V4UGFydCIsInBhcnNlZFZhbHVlIiwiZGlnaXRzIiwic3RyVmFsIiwidmFsaWRhdGVJbWFnZSIsIlVSTCIsIndlYmtpdFVSTCIsIkltYWdlIiwiY3JlYXRlT2JqZWN0VVJMIiwiZGltZW5zaW9ucyIsImZpbGVzIiwibWVyZ2VfMSIsImRlZmF1bHRzIiwiaXNCeXRlTGVuZ3RoXzEiLCJpc0J5dGVMZW5ndGgiLCJlbmNvZGVVUkkiLCJpc0ZRRE4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiaXNGRFFOIiwiX21lcmdlMiIsImRlZmF1bHRfZnFkbl9vcHRpb25zIiwiYWxsb3dfdHJhaWxpbmdfZG90IiwicmVxdWlyZV90bGQiLCJ0bGQiLCJwYXJ0IiwiYWxsb3dfdW5kZXJzY29yZXMiLCJfbWVyZ2UiLCJpc0VtYWlsXzEiLCJpc0VtYWlsIiwiZGVmYXVsdF9lbWFpbF9vcHRpb25zIiwiYWxsb3dfZGlzcGxheV9uYW1lIiwiZGlzcGxheV9lbWFpbCIsImRpc3BsYXlOYW1lIiwiZG9tYWluIiwibG93ZXJfZG9tYWluIiwiX2lzQnl0ZUxlbmd0aDIiLCJfaXNGUUROMiIsImFsbG93X3V0ZjhfbG9jYWxfcGFydCIsInF1b3RlZEVtYWlsVXNlclV0ZjgiLCJxdW90ZWRFbWFpbFVzZXIiLCJlbWFpbFVzZXJVdGY4UGFydCIsImVtYWlsVXNlclBhcnQiLCJ1c2VyX3BhcnRzIiwiX2lzQnl0ZUxlbmd0aCIsIl9pc0ZRRE4iLCJlbWFpbCIsImV4dCIsImV4dGVuc2lvbnMiLCJyZWdleCIsIkluIiwiaXNJUF8xIiwiaXNJUCIsImlwdjRNYXliZSIsImJsb2NrcyIsImZvdW5kT21pc3Npb25CbG9jayIsImZvdW5kSVB2NFRyYW5zaXRpb25CbG9jayIsImV4cGVjdGVkTnVtYmVyT2ZCbG9ja3MiLCJzdWJzdHIiLCJpcHY2QmxvY2siLCJpcCIsIm1heF92YWx1ZSIsIm1pbWVzIiwibWluX3ZhbHVlIiwibm90X2luIiwiaXNOdW1lcmljXzEiLCJudW1lcmljIiwic2l6ZSIsIm5TaXplIiwiaXNVUkxfMSIsImlzUmVnRXhwIiwiY2hlY2tIb3N0IiwiaXNVUkwiLCJkZWZhdWx0X3VybF9vcHRpb25zIiwiYXV0aCIsImhvc3RuYW1lIiwicG9ydCIsInBvcnRfc3RyIiwiaXB2NiIsInJlcXVpcmVfdmFsaWRfcHJvdG9jb2wiLCJwcm90b2NvbHMiLCJyZXF1aXJlX3Byb3RvY29sIiwiYWxsb3dfcHJvdG9jb2xfcmVsYXRpdmVfdXJscyIsInJlcXVpcmVfaG9zdCIsImlwdjZfbWF0Y2giLCJ3cmFwcGVkX2lwdjYiLCJfaXNJUDIiLCJob3N0X3doaXRlbGlzdCIsImhvc3RfYmxhY2tsaXN0IiwiX2lzSVAiLCJyZXF1aXJlUHJvdG9jb2wiLCJSdWxlcyIsImluIiwiRXJyb3JCYWciLCJydWxlIiwiYW55IiwiY29sbGVjdCIsIl9zZWxlY3RvciIsInNjb3BlZCIsIl9zY29wZSIsImZpcnN0QnlSdWxlIiwiZmlyc3RSdWxlIiwiVmFsaWRhdG9yRXhjZXB0aW9uIiwiYW5vbnltb3VzIiwiZ2V0RGF0YUF0dHJpYnV0ZSIsImdldFNjb3BlIiwiZm9ybSIsImNhbGxOb3ciLCJpc0NhbGxhYmxlIiwicmVnIiwiYXJyYXlMaWtlIiwiYXNzaWduIiwib3RoZXJzIiwicHJlZGljYXRlIiwiZ2V0UnVsZXMiLCJydWxlcyIsIkRpY3Rpb25hcnkiLCJkaWN0aW9uYXJ5IiwiaGFzTG9jYWxlIiwiZ2V0TWVzc2FnZSIsImhhc01lc3NhZ2UiLCJtZXNzYWdlcyIsInNldE1lc3NhZ2UiLCJvYmokMSIsIm1vbWVudCIsInRhcmdldEZpZWxkIiwiZm9ybWF0IiwiZGF0ZVZhbHVlIiwiaXNWYWxpZCIsIm90aGVyIiwiaXNBZnRlciIsImlzQmVmb3JlIiwiZGF0ZV9mb3JtYXQiLCJkYXRlX2JldHdlZW4iLCJkYXRlVmFsIiwiaXNCZXR3ZWVuIiwibWVzc2FnZXMkMSIsIm1ha2UiLCJGaWVsZEJhZyIsImZpZWxkcyIsIl9hZGQiLCJfc2V0RmxhZ3MiLCJfYWRkSWZOb3RFeGlzdHMiLCJfcmVtb3ZlIiwiX3NldEZsYWciLCJjbGVhbiIsImZhaWxlZCIsInNldFZhbGlkIiwiX2dldEZpZWxkRmxhZyIsIkxPQ0FMRSIsIlNUUklDVF9NT0RFIiwiZW4iLCJWYWxpZGF0b3IiLCJ2YWxpZGF0aW9ucyIsInN0cmljdE1vZGUiLCIkc2NvcGVzIiwiX19nbG9iYWxfXyIsImZpZWxkQmFnIiwiX2NyZWF0ZUZpZWxkcyIsImVycm9yQmFnIiwiJGRlZmVycmVkIiwiJHJlYWR5IiwiaW5zdGFsbERhdGVUaW1lVmFsaWRhdG9ycyIsInZhbGlkYXRlIiwiY3VyciIsImRpY3QiLCJfZ3VhcmRFeHRlbmQiLCIkdm0iLCJ2YWxpZGF0b3JzIiwidXBkYXRlRGljdGlvbmFyeSIsInNldExvY2FsZSIsImxhbmd1YWdlIiwic2V0U3RyaWN0TW9kZSIsIl9yZXNvbHZlU2NvcGUiLCJfcmVzb2x2ZVZhbHVlc0Zyb21HZXR0ZXJzIiwiZmllbGRTY29wZSIsIl9jcmVhdGVGaWVsZCIsImNoZWNrcyIsIl9ub3JtYWxpemVSdWxlcyIsIl9pc1JlcXVpcmVkIiwiX25vcm1hbGl6ZVN0cmluZyIsIl9ub3JtYWxpemVPYmplY3QiLCJfaXNBRGF0ZVJ1bGUiLCJfZ2V0RGF0ZUZvcm1hdCIsInBhcnNlZFJ1bGUiLCJfcGFyc2VSdWxlIiwiX2Zvcm1hdEVycm9yTWVzc2FnZSIsIl9nZXRGaWVsZERpc3BsYXlOYW1lIiwiX2dldExvY2FsaXplZFBhcmFtcyIsIl90ZXN0IiwiYWxsVmFsaWQiLCJhdHRhY2giLCJ1cGRhdGVGaWVsZCIsInByZXR0eU5hbWUiLCJuZXdDaGVja3MiLCJvbGRDaGVja3MiLCJnZXRFcnJvcnMiLCJnZXRMb2NhbGUiLCJhZGRTY29wZSIsImFzc2lnbiQkMSIsInByb21pc2VzIiwidmFsaWRhdGVBbGwiLCJub3JtYWxpemVkVmFsdWVzIiwidmFscyIsInZhbGlkYXRlU2NvcGVzIiwibWFrZU1peGluIiwiZXJyb3JCYWdOYW1lIiwiJHZhbGlkYXRvciIsImZpZWxkc0JhZ05hbWUiLCJiZWZvcmVDcmVhdGUiLCJtb3VudGVkIiwiTGlzdGVuZXJHZW5lcmF0b3IiLCJ1bndhdGNoIiwiZmllbGROYW1lIiwiX3Jlc29sdmVGaWVsZE5hbWUiLCJfcmVzb2x2ZU1vZGVsIiwiZXhwUmVnZXgiLCJfaXNFeGlzdGluZ1BhdGgiLCJfaGFzRmllbGREZXBlbmRlbmN5IiwiciIsIl9pbnB1dExpc3RlbmVyIiwiX3ZhbGlkYXRlIiwiX2ZpbGVMaXN0ZW5lciIsIl9yYWRpb0xpc3RlbmVyIiwiX2NoZWNrYm94TGlzdGVuZXIiLCJjaGVja2VkQm94ZXMiLCJib3giLCJfZ2V0U2NvcGVkTGlzdGVuZXIiLCJfYXR0YWNoVmFsaWRhdG9yRXZlbnQiLCJsaXN0ZW5lciIsIl9nZXRTdWl0YWJsZUxpc3RlbmVyIiwibmFtZXMiLCJfYXR0YWNoQ29tcG9uZW50TGlzdGVuZXJzIiwiY29tcG9uZW50TGlzdGVuZXIiLCJfYXR0YWNoRmllbGRMaXN0ZW5lcnMiLCJlbG1zIiwiaGFuZGxlck5hbWUiLCJfcmVzb2x2ZVZhbHVlR2V0dGVyIiwiX2dldEFyZyIsIl9hdHRhY2hNb2RlbFdhdGNoZXIiLCJkZWJvdW5jZWQiLCJsaXN0ZW5lcnNJbnN0YW5jZXMiLCJtYWtlRGlyZWN0aXZlIiwiZW5hYmxlQXV0b0NsYXNzZXMiLCJvbmZvY3VzIiwicmVmJDEiLCJyZWYkMiIsImhvbGRlciIsIkRFRkFVTFRfQ0xBU1NfTkFNRVMiLCJzdHJpY3QiLCJkaXJlY3RpdmUiLCJtYXNrc2V0Iiwibm9NYXNrc0NhY2hlIiwiZGVmaW5pdGlvbnMiLCJ1c2VyT3B0aW9ucyIsImRhdGFBdHRyaWJ1dGUiLCJpc1JUTCIsIm51bWVyaWNJbnB1dCIsImYiLCJhbGlhc2VzIiwibWFzayIsImdyZWVkeSIsInJlcGVhdCIsImdyb3VwbWFya2VyIiwicXVhbnRpZmllcm1hcmtlciIsIm1hc2tzQ2FjaGUiLCJtYXNrVG9rZW4iLCJhbmFseXNlTWFzayIsInZhbGlkUG9zaXRpb25zIiwiX2J1ZmZlciIsImJ1ZmZlciIsInRlc3RzIiwibWV0YWRhdGEiLCJtYXNrTGVuZ3RoIiwia2VlcFN0YXRpYyIsImFsdGVybmF0b3JtYXJrZXIiLCJrIiwiViIsIm1heExlbmd0aCIsImxvY2F0b3IiLCJuYXRpdmVEZWYiLCJxIiwiaml0TWFza2luZyIsIm8iLCJvcHRpb25hbGl0eSIsImNhbkNsZWFyUG9zaXRpb24iLCJBIiwieiIsImFsdGVybmF0aW9uIiwib3B0aW9uYWxRdWFudGlmaWVyIiwibmV3QmxvY2tNYXJrZXIiLCJpc1F1YW50aWZpZXIiLCJjZCIsImlzR3JvdXAiLCJpc09wdGlvbmFsIiwiaXNBbHRlcm5hdG9yIiwidSIsIkIiLCJDIiwiRSIsIkciLCJJIiwibmEiLCJMIiwicXVhbnRpZmllciIsIk4iLCJjYXJkaW5hbGl0eSIsImNhc2luZyIsInNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIiLCJTUEFDRSIsIlciLCJiZWdpbiIsImluc2VydE1vZGUiLCJyZWZyZXNoRnJvbUJ1ZmZlciIsImNhcmV0IiwiZ2VuZXJhdGVkSW5wdXQiLCJyYWRpeFBvaW50RGVmaW5pdGlvblN5bWJvbCIsInJhZGl4UG9pbnQiLCJERUxFVEUiLCJwb3N0VmFsaWRhdGlvbiIsIm9uQmVmb3JlV3JpdGUiLCJpbnB1dG1hc2siLCJfdmFsdWVTZXQiLCJPIiwiYXV0b1VubWFzayIsImVzY2FwZVJlZ2V4IiwiYWEiLCJrZXlwcmVzc0V2ZW50IiwiZm9yd2FyZFBvc2l0aW9uIiwib25Vbk1hc2siLCJzZXRTZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0UmFuZ2VBdCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJjcmVhdGVSYW5nZSIsImR1cGxpY2F0ZSIsIm1vdmVTdGFydCIsIl92YWx1ZUdldCIsImN1cnJlbnRTdHlsZSIsImZvbnRTaXplIiwic2Nyb2xsV2lkdGgiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbGxhcHNlIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJtb3ZlRW5kIiwiaXNDb21wbGV0ZSIsIkJBQ0tTUEFDRSIsImdyb3VwU2VwYXJhdG9yIiwidGV4dFRyYW5zZm9ybSIsIndoaXRlU3BhY2UiLCJUIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwid2Via2l0QXBwZWFyYW5jZSIsIm1vekFwcGVhcmFuY2UiLCJBcHBlYXJhbmNlIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJjbGlja0V2ZW50IiwiUSIsIlIiLCJYIiwicmVhZE9ubHkiLCJ0YWJUaHJvdWdoIiwiVEFCIiwia2V5ZG93bkV2ZW50IiwiQkFDS1NQQUNFX1NBRkFSSSIsIkVORCIsIlBBR0VfRE9XTiIsIkhPTUUiLCJQQUdFX1VQIiwidW5kb09uRXNjYXBlIiwiRVNDQVBFIiwiSU5TRVJUIiwiUklHSFQiLCJMRUZUIiwiaWdub3JhYmxlcyIsIkVOVEVSIiwid3JpdGVPdXRCdWZmZXIiLCJvbktleVZhbGlkYXRpb24iLCJwYXN0ZUV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsIm9uQmVmb3JlUGFzdGUiLCJpbnB1dEZhbGxCYWNrRXZlbnQiLCJzZXRWYWx1ZUV2ZW50Iiwib25CZWZvcmVNYXNrIiwiY2xlYXJNYXNrT25Mb3N0Rm9jdXMiLCJjbGVhckluY29tcGxldGUiLCJmb2N1c0V2ZW50Iiwic2hvd01hc2tPbkZvY3VzIiwic2hvd01hc2tPbkhvdmVyIiwicG9zaXRpb25DYXJldE9uVGFiIiwibW91c2VsZWF2ZUV2ZW50IiwicG9zaXRpb25DYXJldE9uQ2xpY2siLCJkYmxjbGlja0V2ZW50IiwiY3V0RXZlbnQiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJibHVyRXZlbnQiLCJtb3VzZWVudGVyRXZlbnQiLCJzdWJtaXRFdmVudCIsInJlbW92ZU1hc2tPblN1Ym1pdCIsInVubWFza2VkdmFsdWUiLCJyZXNldEV2ZW50IiwiYWN0aW9uIiwic3VwcG9ydHNJbnB1dFR5cGUiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIm51bGxhYmxlIiwiX192YWx1ZUdldCIsIm5vVmFsdWVQYXRjaGluZyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJfX3ZhbHVlU2V0IiwiaW5wdXRtYXNrcGF0Y2giLCJyaWdodEFsaWduIiwidGV4dEFsaWduIiwiY29sb3JNYXNrIiwiaW5wdXRtb2RlIiwiYW5kcm9pZEhhY2siLCJvbmNvbXBsZXRlIiwib25pbmNvbXBsZXRlIiwib25jbGVhcmVkIiwiaW5wdXRFdmVudE9ubHkiLCJiYSIsImNhIiwiZGEiLCJmYSIsIm9wdGlvbmFsbWFya2VyIiwiZXNjYXBlQ2hhciIsIjkiLCJkZWZpbml0aW9uU3ltYm9sIiwic3RhdGljRGVmaW5pdGlvblN5bWJvbCIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJvcGVuR3JvdXAiLCJwcmV2YWxpZGF0b3IiLCJleHRlbmREZWZhdWx0cyIsImV4dGVuZERlZmluaXRpb25zIiwiZXh0ZW5kQWxpYXNlcyIsInVubWFzayIsIkFMVCIsIkNBUFNfTE9DSyIsIkNPTU1BIiwiQ09NTUFORCIsIkNPTU1BTkRfTEVGVCIsIkNPTU1BTkRfUklHSFQiLCJDT05UUk9MIiwiRE9XTiIsIk1FTlUiLCJOVU1QQURfQUREIiwiTlVNUEFEX0RFQ0lNQUwiLCJOVU1QQURfRElWSURFIiwiTlVNUEFEX0VOVEVSIiwiTlVNUEFEX01VTFRJUExZIiwiTlVNUEFEX1NVQlRSQUNUIiwiUEVSSU9EIiwiU0hJRlQiLCJVUCIsIldJTkRPV1MiLCJJbnB1dG1hc2siLCJkZC9tbS95eXl5IiwidmFsMXByZSIsInZhbDEiLCJ2YWwycHJlIiwidmFsMiIsImxlYXBkYXkiLCJ5ZWFycmFuZ2UiLCJtaW55ZWFyIiwibWF4eWVhciIsImlzSW5ZZWFyUmFuZ2UiLCJkZXRlcm1pbmViYXNleWVhciIsImdldEZyb250VmFsdWUiLCIxIiwiMiIsIm1tL2RkL3l5eXkiLCJ5eXl5L21tL2RkIiwiZGQubW0ueXl5eSIsImRkLW1tLXl5eXkiLCJtbS5kZC55eXl5IiwibW0tZGQteXl5eSIsInl5eXkubW0uZGQiLCJ5eXl5LW1tLWRkIiwiZGF0ZXRpbWUiLCJocnNwcmUiLCJocnMyNCIsImhycyIsImFtcG0iLCJtc3ByZSIsIm1zIiwidGltZXNlcGFyYXRvciIsImhvdXJGb3JtYXQiLCJkYXRldGltZTEyIiwibW0vZGQveXl5eSBoaDptbSB4bSIsImhoOm1tIHQiLCJoOnMgdCIsImhoOm1tOnNzIiwiaGg6bW0iLCJtbS95eXl5Iiwic2hhbXNpIiwiJiIsIiMiLCItIiwibWFjIiwidmluIiwiaW50ZWdlckRpZ2l0cyIsImF1dG9Hcm91cCIsImdyb3VwU2l6ZSIsImZsb29yIiwiaW50ZWdlck9wdGlvbmFsIiwiZGlnaXRzT3B0aW9uYWwiLCJkZWNpbWFsUHJvdGVjdCIsImFsbG93UGx1cyIsImFsbG93TWludXMiLCJuZWdhdGlvblN5bWJvbCIsImZyb250IiwiYmFjayIsInVubWFza0FzTnVtYmVyIiwicG9zdEZvcm1hdCIsImlzTmVnYXRpdmUiLCJpbnRlZ2VyUGFydCIsImludGVnZXJOUGFydCIsInNpZ25IYW5kbGVyIiwicmFkaXhIYW5kbGVyIiwibGVhZGluZ1plcm9IYW5kbGVyIiwiOiIsInBvdyIsInJvdW5kIiwiY3VycmVuY3kiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsImxvY2FsZUNvbXBhcmUiLCJwaG9uZUNvZGVzIiwiYWJzdHJhY3RwaG9uZSIsImNvdW50cnljb2RlIiwiUmVnZXgiLCJyZWdleFRva2VucyIsInRva2VuaXplciIsInF1YW50aWZpZXJGaWx0ZXIiLCJyZXBlYXRlclBhcnQiLCJ1dGMiLCJnaXZlbkRhdGUiLCJ3ZWVrMSIsIm9uQ2hhbmdlIiwib25PcGVuIiwib25DbG9zZSIsIm9uUmVhZHkiLCJvblZhbHVlVXBkYXRlIiwib25EYXlDcmVhdGUiLCJvbk1vbnRoQ2hhbmdlIiwib25ZZWFyQ2hhbmdlIiwibnRoIiwibG9jYWxpemUiLCJzZXREZWZhdWx0cyIsImRhdGVUaW1lUmVnZXgiLCJ0aW1lUmVnZXgiLCJkYXRlX29yaWciLCJ0b0ZpeGVkIiwiaXNBTSIsImlzUE0iLCJmcF9pc1VUQyIsImZwX3RvVVRDIiwiSFRNTENvbGxlY3Rpb24iLCJOb2RlTGlzdCIsImZwX2luY3IiLCJuZXdEYXRlIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwicnUiLCJtZXNzYWdlc1J1IiwidmFsaWRhdGVDb25maWciLCJkZWJ1ZyIsInNob3dMb2dpbk1vZGFsIiwibG9naW5Qb3N0IiwiYWxlcnQiLCJ2dWVBcHAiLCJmb3JtQWN0aXZlIiwiY3VycmVudFN0ZXAiLCJiaXJ0aGRheU1vbnRoIiwiYmlydGhkYXlZZWFyIiwidm9sdW50ZWVyIiwieWVhcnMiLCJhY3RpdmF0ZUZvcm0iLCJfdGhpcyIsInRpbWVvdXRJbnRlcnZhbCIsImRvd25sb2FkQW5kQWN0aXZhdGVGb3JtIiwiY2hhbmdlU3RlcCIsImN1cnJlbnRTY29wZSIsImN1cnJlbnRTY29wZUVycm9ycyIsImZvcm1FcnJvcnMiLCJmaWVsZEVycm9yIiwic3RlcEJhY2siLCJzdWJtaXRGb3JtIiwiZm9ybVVybCIsImZvcm1NZXRob2QiLCJmb3JtRGF0YSIsInJlbG9hZCIsInRleHRTdGF0dXMiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUtBLFFBQUFBLFdBQUFDLEVBQUFDLEdBaUVBLFFBQUFDLEdBQUFDLEdBQ0FDLEdBQUFILE9BQUFJLGFBQUFELEdBQUFFLGNBQUFDLFNBRUFILEdBQUFFLGVBQUFGLEdBQUFJLE1BRUFDLEdBQUFOLEdBRUFDLEdBQUFFLGNBQUFDLFVBRUFILEdBQUFNLGdCQUFBLFVBQUFQLEVBQUFRLE1BQUFSLEVBQUFTLE9BQUFDLE1BQUFOLFFBQUEsR0FDQU8sSUFDQUMsS0FFQUMsV0FBQSxXQUNBRixJQUNBQyxLQUNBLE1BSUEsUUFBQUQsS0FDQSxHQUFBVixHQUFBSCxPQUFBZ0IsV0FBQSxDQUVBLEdBQUFDLEdBQUFDLFNBQUFmLEdBQUFnQixZQUFBUCxNQUFBLEtBQUEsRUFDQVEsRUFBQUYsU0FBQWYsR0FBQWtCLGNBQUFULE1BQUEsS0FBQSxFQUNBVSxFQUFBbkIsR0FBQUgsT0FBQXVCLGNBQUFMLFNBQUFmLEdBQUFxQixjQUFBWixNQUFBLEtBQUEsRUFBQSxDQUVBVCxJQUFBc0IsT0FBQVIsRUFBQUEsRUFBQSxHQUFBLElBQUEsT0FBQWQsR0FBQXNCLEtBQUFDLGNBRUF2QixHQUFBTSxnQkFBQSxJQUFBa0IsR0FBQXhCLEdBQUF5QixzQkFBQXpCLEdBQUFILE9BQUE2QixXQUVBWixFQUFBYSxLQUFBQyxJQUFBZCxFQUFBZCxHQUFBSCxPQUFBNkIsUUFBQUcsZUFDQTdCLEdBQUFILE9BQUE2QixRQUFBRyxhQUFBWixFQUFBVSxLQUFBQyxJQUFBWCxFQUFBakIsR0FBQUgsT0FBQTZCLFFBQUFJLGVBR0E5QixHQUFBK0IsZ0JBQUEsSUFBQVAsR0FBQXhCLEdBQUF5QixzQkFBQXpCLEdBQUFILE9BQUFtQyxXQUNBbEIsRUFBQWEsS0FBQU0sSUFBQW5CLEVBQUFkLEdBQUFILE9BQUFtQyxRQUFBSCxlQUNBN0IsR0FBQUgsT0FBQW1DLFFB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QUExN0IsT0FBQXU3QixHQUFBRyxHQUlBM3FELEdBQUEsY0FBQW5OLFNBQ0FmLFVBQUFrTyxFQUFBLGVBQUF5cUQsRUFBQSxHQUFBOW1CLE1BQUEsTUFBQTFsQyxTQUFBcm1DLElBQUEsSUFDQSxRQUdBZ3pGLFNBQUEsV0FDQTU2RixLQUFBOGhDLFlBQ0E5aEMsS0FBQTg1RixlQUVBZSxXQUFBLFNBQUFya0csR0FDQSxHQUFBNGpHLEdBQUFwNkYsS0FDQXc2RixFQUFBLFFBQUFKLEVBQUFOLFlBRUFnQixFQUFBdGtHLEVBQUFuQyxPQUFBeWQsYUFBQSxVQUNBaXBGLEVBQUF2a0csRUFBQW5DLE9BQUF5ZCxhQUFBLFdBQUEsT0FDQWtwRixFQUFBaHJELEVBQUF4NUMsRUFBQW5DLFFBQUFrekMsV0FHQXZuQyxNQUFBeWhGLFdBQUFOLFlBQUFxWixHQUFBdnBGLEtBQUEsU0FBQXc0QixHQUNBQSxHQUlBdUcsRUFBQTNHLE1BQ0F4NEIsT0FBQWtxRixFQUNBMXlELElBQUF5eUQsRUFDQWh2RixLQUFBa3ZGLElBQ0FqcUYsS0FBQSxTQUFBK1IsR0FFQTYyRSxNQUFBLG1DQUNBL2hHLE9BQUE2NEIsU0FBQXdxRSxXQUNBanFGLEtBQUEsU0FBQWlPLEVBQUFpOEUsRUFBQXRuRyxHQUNBK2xHLE1BQUEsMkdBQ0F4L0YsUUFBQWdoRyxJQUFBbDhFLEVBQUFpOEUsRUFBQXRuRyxNQUdBLFNBQUF3RyxHQUNBdS9GLE1BQUEsaUVBSUEvWCxRQUFBLFdBQ0E1eEMsRUFBQSxtQkFBQTdoQyxXQUNBN0gsV0FBQSxRQUNBUyxPQUFBLEtBQ0FsUixRQUFBLEdBQUF3SSxRQUdBMnhDLEVBQUEsVUFBQTI0QyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyohIGZsYXRwaWNrciB2Mi40LjIsIEBsaWNlbnNlIE1JVCAqL1xuZnVuY3Rpb24gRmxhdHBpY2tyKGVsZW1lbnQsIGNvbmZpZykge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0c2VsZi5jaGFuZ2VNb250aCA9IGNoYW5nZU1vbnRoO1xuXHRzZWxmLmNoYW5nZVllYXIgPSBjaGFuZ2VZZWFyO1xuXHRzZWxmLmNsZWFyID0gY2xlYXI7XG5cdHNlbGYuY2xvc2UgPSBjbG9zZTtcblx0c2VsZi5fY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7XG5cdHNlbGYuZGVzdHJveSA9IGRlc3Ryb3k7XG5cdHNlbGYuZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGU7XG5cdHNlbGYuaXNFbmFibGVkID0gaXNFbmFibGVkO1xuXHRzZWxmLmp1bXBUb0RhdGUgPSBqdW1wVG9EYXRlO1xuXHRzZWxmLm9wZW4gPSBvcGVuO1xuXHRzZWxmLnJlZHJhdyA9IHJlZHJhdztcblx0c2VsZi5zZXQgPSBzZXQ7XG5cdHNlbGYuc2V0RGF0ZSA9IHNldERhdGU7XG5cdHNlbGYudG9nZ2xlID0gdG9nZ2xlO1xuXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cdFx0aWYgKGVsZW1lbnQuX2ZsYXRwaWNrcikgZGVzdHJveShlbGVtZW50Ll9mbGF0cGlja3IpO1xuXG5cdFx0ZWxlbWVudC5fZmxhdHBpY2tyID0gc2VsZjtcblxuXHRcdHNlbGYuZWxlbWVudCA9IGVsZW1lbnQ7XG5cdFx0c2VsZi5pbnN0YW5jZUNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblx0XHRzZWxmLnBhcnNlRGF0ZSA9IEZsYXRwaWNrci5wcm90b3R5cGUucGFyc2VEYXRlLmJpbmQoc2VsZik7XG5cblx0XHRzZXR1cEZvcm1hdHMoKTtcblxuXHRcdHBhcnNlQ29uZmlnKCk7XG5cdFx0c2V0dXBMb2NhbGUoKTtcblx0XHRzZXR1cElucHV0cygpO1xuXHRcdHNldHVwRGF0ZXMoKTtcblx0XHRzZXR1cEhlbHBlckZ1bmN0aW9ucygpO1xuXG5cdFx0c2VsZi5pc09wZW4gPSBzZWxmLmNvbmZpZy5pbmxpbmU7XG5cblx0XHRzZWxmLmlzTW9iaWxlID0gIXNlbGYuY29uZmlnLmRpc2FibGVNb2JpbGUgJiYgIXNlbGYuY29uZmlnLmlubGluZSAmJiBzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiICYmICFzZWxmLmNvbmZpZy5kaXNhYmxlLmxlbmd0aCAmJiAhc2VsZi5jb25maWcuZW5hYmxlLmxlbmd0aCAmJiAhc2VsZi5jb25maWcud2Vla051bWJlcnMgJiYgL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5cdFx0aWYgKCFzZWxmLmlzTW9iaWxlKSBidWlsZCgpO1xuXG5cdFx0YmluZCgpO1xuXG5cdFx0aWYgKCFzZWxmLmlzTW9iaWxlKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgXCJkYXRlSXNQaWNrZWRcIiwge1xuXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uIHNldChib29sKSB7XG5cdFx0XHRcdFx0dG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJkYXRlSXNQaWNrZWRcIiwgYm9vbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHNlbGYuZGF0ZUlzUGlja2VkID0gc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDAgfHwgc2VsZi5jb25maWcubm9DYWxlbmRhcjtcblxuXHRcdGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XG5cdFx0XHRpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSkgc2V0SG91cnNGcm9tRGF0ZSgpO1xuXHRcdFx0dXBkYXRlVmFsdWUoKTtcblx0XHR9XG5cblx0XHRpZiAoc2VsZi5jb25maWcud2Vla051bWJlcnMpIHtcblx0XHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUud2lkdGggPSBzZWxmLmRheXMuY2xpZW50V2lkdGggKyBzZWxmLndlZWtXcmFwcGVyLmNsaWVudFdpZHRoICsgXCJweFwiO1xuXHRcdH1cblxuXHRcdHRyaWdnZXJFdmVudChcIlJlYWR5XCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVGltZShlKSB7XG5cdFx0aWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgJiYgIXNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGgpXG5cdFx0XHQvLyBwaWNraW5nIHRpbWUgb25seVxuXHRcdFx0c2VsZi5zZWxlY3RlZERhdGVzID0gW3NlbGYubm93XTtcblxuXHRcdHRpbWVXcmFwcGVyKGUpO1xuXG5cdFx0aWYgKCFzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSByZXR1cm47XG5cblx0XHRpZiAoIXNlbGYubWluRGF0ZUhhc1RpbWUgfHwgZS50eXBlICE9PSBcImlucHV0XCIgfHwgZS50YXJnZXQudmFsdWUubGVuZ3RoID49IDIpIHtcblx0XHRcdHNldEhvdXJzRnJvbUlucHV0cygpO1xuXHRcdFx0dXBkYXRlVmFsdWUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNldEhvdXJzRnJvbUlucHV0cygpO1xuXHRcdFx0XHR1cGRhdGVWYWx1ZSgpO1xuXHRcdFx0fSwgMTAwMCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0SG91cnNGcm9tSW5wdXRzKCkge1xuXHRcdGlmICghc2VsZi5jb25maWcuZW5hYmxlVGltZSkgcmV0dXJuO1xuXG5cdFx0dmFyIGhvdXJzID0gcGFyc2VJbnQoc2VsZi5ob3VyRWxlbWVudC52YWx1ZSwgMTApIHx8IDAsXG5cdFx0ICAgIG1pbnV0ZXMgPSBwYXJzZUludChzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUsIDEwKSB8fCAwLFxuXHRcdCAgICBzZWNvbmRzID0gc2VsZi5jb25maWcuZW5hYmxlU2Vjb25kcyA/IHBhcnNlSW50KHNlbGYuc2Vjb25kRWxlbWVudC52YWx1ZSwgMTApIHx8IDAgOiAwO1xuXG5cdFx0aWYgKHNlbGYuYW1QTSkgaG91cnMgPSBob3VycyAlIDEyICsgMTIgKiAoc2VsZi5hbVBNLnRleHRDb250ZW50ID09PSBcIlBNXCIpO1xuXG5cdFx0aWYgKHNlbGYubWluRGF0ZUhhc1RpbWUgJiYgY29tcGFyZURhdGVzKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLmNvbmZpZy5taW5EYXRlKSA9PT0gMCkge1xuXG5cdFx0XHRob3VycyA9IE1hdGgubWF4KGhvdXJzLCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEhvdXJzKCkpO1xuXHRcdFx0aWYgKGhvdXJzID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEhvdXJzKCkpIG1pbnV0ZXMgPSBNYXRoLm1heChtaW51dGVzLCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1pbnV0ZXMoKSk7XG5cdFx0fVxuXG5cdFx0aWYgKHNlbGYubWF4RGF0ZUhhc1RpbWUgJiYgY29tcGFyZURhdGVzKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLmNvbmZpZy5tYXhEYXRlKSA9PT0gMCkge1xuXHRcdFx0aG91cnMgPSBNYXRoLm1pbihob3Vycywgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRIb3VycygpKTtcblx0XHRcdGlmIChob3VycyA9PT0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRIb3VycygpKSBtaW51dGVzID0gTWF0aC5taW4obWludXRlcywgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNaW51dGVzKCkpO1xuXHRcdH1cblxuXHRcdHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldEhvdXJzRnJvbURhdGUoZGF0ZU9iaikge1xuXHRcdHZhciBkYXRlID0gZGF0ZU9iaiB8fCBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iajtcblxuXHRcdGlmIChkYXRlKSBzZXRIb3VycyhkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSk7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRIb3Vycyhob3VycywgbWludXRlcywgc2Vjb25kcykge1xuXHRcdGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XG5cdFx0XHRzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5zZXRIb3Vycyhob3VycyAlIDI0LCBtaW51dGVzLCBzZWNvbmRzIHx8IDAsIDApO1xuXHRcdH1cblxuXHRcdGlmICghc2VsZi5jb25maWcuZW5hYmxlVGltZSB8fCBzZWxmLmlzTW9iaWxlKSByZXR1cm47XG5cblx0XHRzZWxmLmhvdXJFbGVtZW50LnZhbHVlID0gc2VsZi5wYWQoIXNlbGYuY29uZmlnLnRpbWVfMjRociA/ICgxMiArIGhvdXJzKSAlIDEyICsgMTIgKiAoaG91cnMgJSAxMiA9PT0gMCkgOiBob3Vycyk7XG5cblx0XHRzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBzZWxmLnBhZChtaW51dGVzKTtcblxuXHRcdGlmICghc2VsZi5jb25maWcudGltZV8yNGhyICYmIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGgpIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLmdldEhvdXJzKCkgPj0gMTIgPyBcIlBNXCIgOiBcIkFNXCI7XG5cblx0XHRpZiAoc2VsZi5jb25maWcuZW5hYmxlU2Vjb25kcykgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gc2VsZi5wYWQoc2Vjb25kcyk7XG5cdH1cblxuXHRmdW5jdGlvbiBvblllYXJJbnB1dChldmVudCkge1xuXHRcdHZhciB5ZWFyID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXHRcdGlmICh5ZWFyLmxlbmd0aCA9PT0gNCkge1xuXHRcdFx0c2VsZi5jdXJyZW50WWVhckVsZW1lbnQuYmx1cigpO1xuXHRcdFx0aWYgKCEvW15cXGRdLy50ZXN0KHllYXIpKSBjaGFuZ2VZZWFyKHllYXIpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIG9uTW9udGhTY3JvbGwoZSkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRzZWxmLmNoYW5nZU1vbnRoKE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCBlLndoZWVsRGVsdGEgfHwgLWUuZGVsdGFZKSkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYmluZCgpIHtcblx0XHRpZiAoc2VsZi5jb25maWcud3JhcCkge1xuXHRcdFx0W1wib3BlblwiLCBcImNsb3NlXCIsIFwidG9nZ2xlXCIsIFwiY2xlYXJcIl0uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0dmFyIHRvZ2dsZXMgPSBzZWxmLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLVwiICsgZWwgKyBcIl1cIik7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdG9nZ2xlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHRvZ2dsZXNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNlbGZbZWxdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRzZWxmLmNoYW5nZUV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiSFRNTEV2ZW50c1wiKTtcblx0XHRcdHNlbGYuY2hhbmdlRXZlbnQuaW5pdEV2ZW50KFwiY2hhbmdlXCIsIGZhbHNlLCB0cnVlKTtcblx0XHR9XG5cblx0XHRpZiAoc2VsZi5pc01vYmlsZSkgcmV0dXJuIHNldHVwTW9iaWxlKCk7XG5cblx0XHRzZWxmLmRlYm91bmNlZFJlc2l6ZSA9IGRlYm91bmNlKG9uUmVzaXplLCA1MCk7XG5cdFx0c2VsZi50cmlnZ2VyQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dHJpZ2dlckV2ZW50KFwiQ2hhbmdlXCIpO1xuXHRcdH07XG5cdFx0c2VsZi5kZWJvdW5jZWRDaGFuZ2UgPSBkZWJvdW5jZShzZWxmLnRyaWdnZXJDaGFuZ2UsIDMwMCk7XG5cblx0XHRpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiICYmIHNlbGYuZGF5cykgc2VsZi5kYXlzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgb25Nb3VzZU92ZXIpO1xuXG5cdFx0d2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5RG93bik7XG5cblx0XHRpZiAoIXNlbGYuY29uZmlnLmlubGluZSAmJiAhc2VsZi5jb25maWcuc3RhdGljKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBzZWxmLmRlYm91bmNlZFJlc2l6ZSk7XG5cblx0XHRpZiAod2luZG93Lm9udG91Y2hzdGFydCkgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGRvY3VtZW50Q2xpY2spO1xuXG5cdFx0d2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkb2N1bWVudENsaWNrKTtcblx0XHR3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZG9jdW1lbnRDbGljayk7XG5cblx0XHRpZiAoc2VsZi5jb25maWcuY2xpY2tPcGVucykgKHNlbGYuYWx0SW5wdXQgfHwgc2VsZi5pbnB1dCkuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIG9wZW4pO1xuXG5cdFx0aWYgKCFzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSB7XG5cdFx0XHRzZWxmLnByZXZNb250aE5hdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gY2hhbmdlTW9udGgoLTEpO1xuXHRcdFx0fSk7XG5cdFx0XHRzZWxmLm5leHRNb250aE5hdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gY2hhbmdlTW9udGgoMSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0c2VsZi5jdXJyZW50TW9udGhFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRyZXR1cm4gZGVib3VuY2Uob25Nb250aFNjcm9sbChlKSwgNTApO1xuXHRcdFx0fSk7XG5cdFx0XHRzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0cmV0dXJuIGRlYm91bmNlKHllYXJTY3JvbGwoZSksIDUwKTtcblx0XHRcdH0pO1xuXHRcdFx0c2VsZi5jdXJyZW50WWVhckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5jdXJyZW50WWVhckVsZW1lbnQuc2VsZWN0KCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0c2VsZi5jdXJyZW50WWVhckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIG9uWWVhcklucHV0KTtcblx0XHRcdHNlbGYuY3VycmVudFllYXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbmNyZW1lbnRcIiwgb25ZZWFySW5wdXQpO1xuXG5cdFx0XHRzZWxmLmRheXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNlbGVjdERhdGUpO1xuXHRcdH1cblxuXHRcdGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7XG5cdFx0XHRzZWxmLnRpbWVDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgcG9zaXRpb25DYWxlbmRhcik7XG5cdFx0XHRzZWxmLnRpbWVDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdHJldHVybiBkZWJvdW5jZSh1cGRhdGVUaW1lKGUpLCA1KTtcblx0XHRcdH0pO1xuXHRcdFx0c2VsZi50aW1lQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB1cGRhdGVUaW1lKTtcblx0XHRcdHNlbGYudGltZUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiaW5jcmVtZW50XCIsIHVwZGF0ZVRpbWUpO1xuXHRcdFx0c2VsZi50aW1lQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpbmNyZW1lbnRcIiwgc2VsZi5kZWJvdW5jZWRDaGFuZ2UpO1xuXG5cdFx0XHRzZWxmLnRpbWVDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIHNlbGYuZGVib3VuY2VkQ2hhbmdlKTtcblx0XHRcdHNlbGYudGltZUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgc2VsZi50cmlnZ2VyQ2hhbmdlKTtcblxuXHRcdFx0c2VsZi5ob3VyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmhvdXJFbGVtZW50LnNlbGVjdCgpO1xuXHRcdFx0fSk7XG5cdFx0XHRzZWxmLm1pbnV0ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5taW51dGVFbGVtZW50LnNlbGVjdCgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChzZWxmLnNlY29uZEVsZW1lbnQpIHtcblx0XHRcdFx0c2VsZi5zZWNvbmRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0c2VsZi5zZWNvbmRFbGVtZW50LnNlbGVjdCgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlbGYuYW1QTSkge1xuXHRcdFx0XHRzZWxmLmFtUE0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0dXBkYXRlVGltZShlKTtcblx0XHRcdFx0XHRzZWxmLnRyaWdnZXJDaGFuZ2UoZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGp1bXBUb0RhdGUoanVtcERhdGUpIHtcblx0XHRqdW1wRGF0ZSA9IGp1bXBEYXRlID8gc2VsZi5wYXJzZURhdGUoanVtcERhdGUpIDogc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogfHwgKHNlbGYuY29uZmlnLm1pbkRhdGUgPiBzZWxmLm5vdyA/IHNlbGYuY29uZmlnLm1pbkRhdGUgOiBzZWxmLmNvbmZpZy5tYXhEYXRlICYmIHNlbGYuY29uZmlnLm1heERhdGUgPCBzZWxmLm5vdyA/IHNlbGYuY29uZmlnLm1heERhdGUgOiBzZWxmLm5vdyk7XG5cblx0XHR0cnkge1xuXHRcdFx0c2VsZi5jdXJyZW50WWVhciA9IGp1bXBEYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0XHRzZWxmLmN1cnJlbnRNb250aCA9IGp1bXBEYXRlLmdldE1vbnRoKCk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0XHRcdGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG5cdFx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdFx0Y29uc29sZS53YXJuKFwiSW52YWxpZCBkYXRlIHN1cHBsaWVkOiBcIiArIGp1bXBEYXRlKTtcblx0XHR9XG5cblx0XHRzZWxmLnJlZHJhdygpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5jcmVtZW50TnVtSW5wdXQoZSwgZGVsdGEpIHtcblx0XHR2YXIgaW5wdXQgPSBlLnRhcmdldC5wYXJlbnROb2RlLmNoaWxkTm9kZXNbMF07XG5cdFx0aW5wdXQudmFsdWUgPSBwYXJzZUludChpbnB1dC52YWx1ZSwgMTApICsgZGVsdGEgKiAoaW5wdXQuc3RlcCB8fCAxKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRpbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImluY3JlbWVudFwiLCB7IFwiYnViYmxlc1wiOiB0cnVlIH0pKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHR2YXIgZXYgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcblx0XHRcdGV2LmluaXRDdXN0b21FdmVudChcImluY3JlbWVudFwiLCB0cnVlLCB0cnVlLCB7fSk7XG5cdFx0XHRpbnB1dC5kaXNwYXRjaEV2ZW50KGV2KTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVOdW1iZXJJbnB1dChpbnB1dENsYXNzTmFtZSkge1xuXHRcdHZhciB3cmFwcGVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcIm51bUlucHV0V3JhcHBlclwiKSxcblx0XHQgICAgbnVtSW5wdXQgPSBjcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgXCJudW1JbnB1dCBcIiArIGlucHV0Q2xhc3NOYW1lKSxcblx0XHQgICAgYXJyb3dVcCA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiYXJyb3dVcFwiKSxcblx0XHQgICAgYXJyb3dEb3duID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJhcnJvd0Rvd25cIik7XG5cblx0XHRudW1JbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG5cdFx0bnVtSW5wdXQucGF0dGVybiA9IFwiXFxcXGQqXCI7XG5cdFx0d3JhcHBlci5hcHBlbmRDaGlsZChudW1JbnB1dCk7XG5cdFx0d3JhcHBlci5hcHBlbmRDaGlsZChhcnJvd1VwKTtcblx0XHR3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93RG93bik7XG5cblx0XHRhcnJvd1VwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0cmV0dXJuIGluY3JlbWVudE51bUlucHV0KGUsIDEpO1xuXHRcdH0pO1xuXHRcdGFycm93RG93bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcblx0XHRcdHJldHVybiBpbmNyZW1lbnROdW1JbnB1dChlLCAtMSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHdyYXBwZXI7XG5cdH1cblxuXHRmdW5jdGlvbiBidWlsZCgpIHtcblx0XHR2YXIgZnJhZ21lbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWNhbGVuZGFyXCIpO1xuXHRcdHNlbGYubnVtSW5wdXRUeXBlID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRSA5LjBcIikgPiAwID8gXCJ0ZXh0XCIgOiBcIm51bWJlclwiO1xuXG5cdFx0aWYgKCFzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSB7XG5cdFx0XHRmcmFnbWVudC5hcHBlbmRDaGlsZChidWlsZE1vbnRoTmF2KCkpO1xuXHRcdFx0c2VsZi5pbm5lckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItaW5uZXJDb250YWluZXJcIik7XG5cblx0XHRcdGlmIChzZWxmLmNvbmZpZy53ZWVrTnVtYmVycykgc2VsZi5pbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChidWlsZFdlZWtzKCkpO1xuXG5cdFx0XHRzZWxmLnJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXJDb250YWluZXJcIik7XG5cdFx0XHRzZWxmLnJDb250YWluZXIuYXBwZW5kQ2hpbGQoYnVpbGRXZWVrZGF5cygpKTtcblxuXHRcdFx0aWYgKCFzZWxmLmRheXMpIHtcblx0XHRcdFx0c2VsZi5kYXlzID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1kYXlzXCIpO1xuXHRcdFx0XHRzZWxmLmRheXMudGFiSW5kZXggPSAtMTtcblx0XHRcdH1cblxuXHRcdFx0YnVpbGREYXlzKCk7XG5cdFx0XHRzZWxmLnJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5kYXlzKTtcblxuXHRcdFx0c2VsZi5pbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLnJDb250YWluZXIpO1xuXHRcdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoc2VsZi5pbm5lckNvbnRhaW5lcik7XG5cdFx0fVxuXG5cdFx0aWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUpIGZyYWdtZW50LmFwcGVuZENoaWxkKGJ1aWxkVGltZSgpKTtcblxuXHRcdGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInJhbmdlTW9kZVwiKTtcblxuXHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG5cdFx0dmFyIGN1c3RvbUFwcGVuZCA9IHNlbGYuY29uZmlnLmFwcGVuZFRvICYmIHNlbGYuY29uZmlnLmFwcGVuZFRvLm5vZGVUeXBlO1xuXG5cdFx0aWYgKHNlbGYuY29uZmlnLmlubGluZSB8fCBzZWxmLmNvbmZpZy5zdGF0aWMpIHtcblx0XHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzZWxmLmNvbmZpZy5pbmxpbmUgPyBcImlubGluZVwiIDogXCJzdGF0aWNcIik7XG5cdFx0XHRwb3NpdGlvbkNhbGVuZGFyKCk7XG5cblx0XHRcdGlmIChzZWxmLmNvbmZpZy5pbmxpbmUgJiYgIWN1c3RvbUFwcGVuZCkge1xuXHRcdFx0XHRyZXR1cm4gc2VsZi5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIChzZWxmLmFsdElucHV0IHx8IHNlbGYuaW5wdXQpLm5leHRTaWJsaW5nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlbGYuY29uZmlnLnN0YXRpYykge1xuXHRcdFx0XHR2YXIgd3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd3JhcHBlclwiKTtcblx0XHRcdFx0c2VsZi5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHNlbGYuZWxlbWVudCk7XG5cdFx0XHRcdHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5lbGVtZW50KTtcblx0XHRcdFx0d3JhcHBlci5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdChjdXN0b21BcHBlbmQgPyBzZWxmLmNvbmZpZy5hcHBlbmRUbyA6IHdpbmRvdy5kb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZURheShjbGFzc05hbWUsIGRhdGUsIGRheU51bWJlcikge1xuXHRcdHZhciBkYXRlSXNFbmFibGVkID0gaXNFbmFibGVkKGRhdGUsIHRydWUpLFxuXHRcdCAgICBkYXlFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItZGF5IFwiICsgY2xhc3NOYW1lLCBkYXRlLmdldERhdGUoKSk7XG5cblx0XHRkYXlFbGVtZW50LmRhdGVPYmogPSBkYXRlO1xuXG5cdFx0dG9nZ2xlQ2xhc3MoZGF5RWxlbWVudCwgXCJ0b2RheVwiLCBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5ub3cpID09PSAwKTtcblxuXHRcdGlmIChkYXRlSXNFbmFibGVkKSB7XG5cdFx0XHRkYXlFbGVtZW50LnRhYkluZGV4ID0gMDtcblxuXHRcdFx0aWYgKGlzRGF0ZVNlbGVjdGVkKGRhdGUpKSB7XG5cdFx0XHRcdGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuXHRcdFx0XHRzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gPSBkYXlFbGVtZW50O1xuXHRcdFx0XHRpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKSB7XG5cdFx0XHRcdFx0dG9nZ2xlQ2xhc3MoZGF5RWxlbWVudCwgXCJzdGFydFJhbmdlXCIsIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0pID09PSAwKTtcblxuXHRcdFx0XHRcdHRvZ2dsZUNsYXNzKGRheUVsZW1lbnQsIFwiZW5kUmFuZ2VcIiwgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSkgPT09IDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xuXHRcdFx0aWYgKHNlbGYuc2VsZWN0ZWREYXRlc1swXSAmJiBkYXRlID4gc2VsZi5taW5SYW5nZURhdGUgJiYgZGF0ZSA8IHNlbGYuc2VsZWN0ZWREYXRlc1swXSkgc2VsZi5taW5SYW5nZURhdGUgPSBkYXRlO2Vsc2UgaWYgKHNlbGYuc2VsZWN0ZWREYXRlc1swXSAmJiBkYXRlIDwgc2VsZi5tYXhSYW5nZURhdGUgJiYgZGF0ZSA+IHNlbGYuc2VsZWN0ZWREYXRlc1swXSkgc2VsZi5tYXhSYW5nZURhdGUgPSBkYXRlO1xuXHRcdH1cblxuXHRcdGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcblx0XHRcdGlmIChpc0RhdGVJblJhbmdlKGRhdGUpICYmICFpc0RhdGVTZWxlY3RlZChkYXRlKSkgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaW5SYW5nZVwiKTtcblxuXHRcdFx0aWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDEgJiYgKGRhdGUgPCBzZWxmLm1pblJhbmdlRGF0ZSB8fCBkYXRlID4gc2VsZi5tYXhSYW5nZURhdGUpKSBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJub3RBbGxvd2VkXCIpO1xuXHRcdH1cblxuXHRcdGlmIChzZWxmLmNvbmZpZy53ZWVrTnVtYmVycyAmJiBjbGFzc05hbWUgIT09IFwicHJldk1vbnRoRGF5XCIgJiYgZGF5TnVtYmVyICUgNyA9PT0gMSkge1xuXHRcdFx0c2VsZi53ZWVrTnVtYmVycy5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgXCI8c3BhbiBjbGFzcz0nZGlzYWJsZWQgZmxhdHBpY2tyLWRheSc+XCIgKyBzZWxmLmNvbmZpZy5nZXRXZWVrKGRhdGUpICsgXCI8L3NwYW4+XCIpO1xuXHRcdH1cblxuXHRcdHRyaWdnZXJFdmVudChcIkRheUNyZWF0ZVwiLCBkYXlFbGVtZW50KTtcblxuXHRcdHJldHVybiBkYXlFbGVtZW50O1xuXHR9XG5cblx0ZnVuY3Rpb24gYnVpbGREYXlzKHllYXIsIG1vbnRoKSB7XG5cdFx0dmFyIGZpcnN0T2ZNb250aCA9IChuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBzZWxmLmN1cnJlbnRNb250aCwgMSkuZ2V0RGF5KCkgLSBzZWxmLmwxMG4uZmlyc3REYXlPZldlZWsgKyA3KSAlIDcsXG5cdFx0ICAgIGlzUmFuZ2VNb2RlID0gc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiO1xuXG5cdFx0c2VsZi5wcmV2TW9udGhEYXlzID0gc2VsZi51dGlscy5nZXREYXlzaW5Nb250aCgoc2VsZi5jdXJyZW50TW9udGggLSAxICsgMTIpICUgMTIpO1xuXG5cdFx0dmFyIGRheXNJbk1vbnRoID0gc2VsZi51dGlscy5nZXREYXlzaW5Nb250aCgpLFxuXHRcdCAgICBkYXlzID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuXHRcdHZhciBkYXlOdW1iZXIgPSBzZWxmLnByZXZNb250aERheXMgKyAxIC0gZmlyc3RPZk1vbnRoO1xuXG5cdFx0aWYgKHNlbGYuY29uZmlnLndlZWtOdW1iZXJzICYmIHNlbGYud2Vla051bWJlcnMuZmlyc3RDaGlsZCkgc2VsZi53ZWVrTnVtYmVycy50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0XHRpZiAoaXNSYW5nZU1vZGUpIHtcblx0XHRcdC8vIGNvbnN0IGRhdGVMaW1pdHMgPSBzZWxmLmNvbmZpZy5lbmFibGUubGVuZ3RoIHx8IHNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoIHx8IHNlbGYuY29uZmlnLm1peERhdGUgfHwgc2VsZi5jb25maWcubWF4RGF0ZTtcblx0XHRcdHNlbGYubWluUmFuZ2VEYXRlID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGggLSAxLCBkYXlOdW1iZXIpO1xuXHRcdFx0c2VsZi5tYXhSYW5nZURhdGUgPSBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBzZWxmLmN1cnJlbnRNb250aCArIDEsICg0MiAtIGZpcnN0T2ZNb250aCkgJSBkYXlzSW5Nb250aCk7XG5cdFx0fVxuXG5cdFx0aWYgKHNlbGYuZGF5cy5maXJzdENoaWxkKSBzZWxmLmRheXMudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdFx0Ly8gcHJlcGVuZCBkYXlzIGZyb20gdGhlIGVuZGluZyBvZiBwcmV2aW91cyBtb250aFxuXHRcdGZvciAodmFyIGkgPSAwOyBkYXlOdW1iZXIgPD0gc2VsZi5wcmV2TW9udGhEYXlzOyBpKyssIGRheU51bWJlcisrKSB7XG5cdFx0XHRkYXlzLmFwcGVuZENoaWxkKGNyZWF0ZURheShcInByZXZNb250aERheVwiLCBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBzZWxmLmN1cnJlbnRNb250aCAtIDEsIGRheU51bWJlciksIGRheU51bWJlcikpO1xuXHRcdH1cblxuXHRcdC8vIFN0YXJ0IGF0IDEgc2luY2UgdGhlcmUgaXMgbm8gMHRoIGRheVxuXHRcdGZvciAoZGF5TnVtYmVyID0gMTsgZGF5TnVtYmVyIDw9IGRheXNJbk1vbnRoOyBkYXlOdW1iZXIrKykge1xuXHRcdFx0ZGF5cy5hcHBlbmRDaGlsZChjcmVhdGVEYXkoXCJcIiwgbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIGRheU51bWJlciksIGRheU51bWJlcikpO1xuXHRcdH1cblxuXHRcdC8vIGFwcGVuZCBkYXlzIGZyb20gdGhlIG5leHQgbW9udGhcblx0XHRmb3IgKHZhciBkYXlOdW0gPSBkYXlzSW5Nb250aCArIDE7IGRheU51bSA8PSA0MiAtIGZpcnN0T2ZNb250aDsgZGF5TnVtKyspIHtcblx0XHRcdGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwibmV4dE1vbnRoRGF5XCIsIG5ldyBEYXRlKHNlbGYuY3VycmVudFllYXIsIHNlbGYuY3VycmVudE1vbnRoICsgMSwgZGF5TnVtICUgZGF5c0luTW9udGgpLCBkYXlOdW0pKTtcblx0XHR9XG5cblx0XHRpZiAoaXNSYW5nZU1vZGUgJiYgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMSAmJiBkYXlzLmNoaWxkTm9kZXNbMF0pIHtcblx0XHRcdHNlbGYuX2hpZGVQcmV2TW9udGhBcnJvdyA9IHNlbGYuX2hpZGVQcmV2TW9udGhBcnJvdyB8fCBzZWxmLm1pblJhbmdlRGF0ZSA+IGRheXMuY2hpbGROb2Rlc1swXS5kYXRlT2JqO1xuXG5cdFx0XHRzZWxmLl9oaWRlTmV4dE1vbnRoQXJyb3cgPSBzZWxmLl9oaWRlTmV4dE1vbnRoQXJyb3cgfHwgc2VsZi5tYXhSYW5nZURhdGUgPCBkYXlzLmNoaWxkTm9kZXNbNDFdLmRhdGVPYmo7XG5cdFx0fSBlbHNlIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcblxuXHRcdHNlbGYuZGF5cy5hcHBlbmRDaGlsZChkYXlzKTtcblx0XHRyZXR1cm4gc2VsZi5kYXlzO1xuXHR9XG5cblx0ZnVuY3Rpb24gYnVpbGRNb250aE5hdigpIHtcblx0XHR2YXIgbW9udGhOYXZGcmFnbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0c2VsZi5tb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItbW9udGhcIik7XG5cblx0XHRzZWxmLnByZXZNb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXByZXYtbW9udGhcIik7XG5cdFx0c2VsZi5wcmV2TW9udGhOYXYuaW5uZXJIVE1MID0gc2VsZi5jb25maWcucHJldkFycm93O1xuXG5cdFx0c2VsZi5jdXJyZW50TW9udGhFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJjdXItbW9udGhcIik7XG5cdFx0c2VsZi5jdXJyZW50TW9udGhFbGVtZW50LnRpdGxlID0gc2VsZi5sMTBuLnNjcm9sbFRpdGxlO1xuXG5cdFx0dmFyIHllYXJJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiY3VyLXllYXJcIik7XG5cdFx0c2VsZi5jdXJyZW50WWVhckVsZW1lbnQgPSB5ZWFySW5wdXQuY2hpbGROb2Rlc1swXTtcblx0XHRzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC50aXRsZSA9IHNlbGYubDEwbi5zY3JvbGxUaXRsZTtcblxuXHRcdGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKSBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5taW4gPSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCk7XG5cblx0XHRpZiAoc2VsZi5jb25maWcubWF4RGF0ZSkge1xuXHRcdFx0c2VsZi5jdXJyZW50WWVhckVsZW1lbnQubWF4ID0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpO1xuXG5cdFx0XHRzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5kaXNhYmxlZCA9IHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpID09PSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0fVxuXG5cdFx0c2VsZi5uZXh0TW9udGhOYXYgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci1uZXh0LW1vbnRoXCIpO1xuXHRcdHNlbGYubmV4dE1vbnRoTmF2LmlubmVySFRNTCA9IHNlbGYuY29uZmlnLm5leHRBcnJvdztcblxuXHRcdHNlbGYubmF2aWdhdGlvbkN1cnJlbnRNb250aCA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLWN1cnJlbnQtbW9udGhcIik7XG5cdFx0c2VsZi5uYXZpZ2F0aW9uQ3VycmVudE1vbnRoLmFwcGVuZENoaWxkKHNlbGYuY3VycmVudE1vbnRoRWxlbWVudCk7XG5cdFx0c2VsZi5uYXZpZ2F0aW9uQ3VycmVudE1vbnRoLmFwcGVuZENoaWxkKHllYXJJbnB1dCk7XG5cblx0XHRtb250aE5hdkZyYWdtZW50LmFwcGVuZENoaWxkKHNlbGYucHJldk1vbnRoTmF2KTtcblx0XHRtb250aE5hdkZyYWdtZW50LmFwcGVuZENoaWxkKHNlbGYubmF2aWdhdGlvbkN1cnJlbnRNb250aCk7XG5cdFx0bW9udGhOYXZGcmFnbWVudC5hcHBlbmRDaGlsZChzZWxmLm5leHRNb250aE5hdik7XG5cdFx0c2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChtb250aE5hdkZyYWdtZW50KTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcIl9oaWRlUHJldk1vbnRoQXJyb3dcIiwge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9faGlkZVByZXZNb250aEFycm93O1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gc2V0KGJvb2wpIHtcblx0XHRcdFx0aWYgKHRoaXMuX19oaWRlUHJldk1vbnRoQXJyb3cgIT09IGJvb2wpIHNlbGYucHJldk1vbnRoTmF2LnN0eWxlLmRpc3BsYXkgPSBib29sID8gXCJub25lXCIgOiBcImJsb2NrXCI7XG5cdFx0XHRcdHRoaXMuX19oaWRlUHJldk1vbnRoQXJyb3cgPSBib29sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIFwiX2hpZGVOZXh0TW9udGhBcnJvd1wiLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX19oaWRlTmV4dE1vbnRoQXJyb3c7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoYm9vbCkge1xuXHRcdFx0XHRpZiAodGhpcy5fX2hpZGVOZXh0TW9udGhBcnJvdyAhPT0gYm9vbCkgc2VsZi5uZXh0TW9udGhOYXYuc3R5bGUuZGlzcGxheSA9IGJvb2wgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcblx0XHRcdFx0dGhpcy5fX2hpZGVOZXh0TW9udGhBcnJvdyA9IGJvb2w7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG5cblx0XHRyZXR1cm4gc2VsZi5tb250aE5hdjtcblx0fVxuXG5cdGZ1bmN0aW9uIGJ1aWxkVGltZSgpIHtcblx0XHRzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJoYXNUaW1lXCIpO1xuXHRcdGlmIChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJub0NhbGVuZGFyXCIpO1xuXHRcdHNlbGYudGltZUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItdGltZVwiKTtcblx0XHRzZWxmLnRpbWVDb250YWluZXIudGFiSW5kZXggPSAtMTtcblx0XHR2YXIgc2VwYXJhdG9yID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItdGltZS1zZXBhcmF0b3JcIiwgXCI6XCIpO1xuXG5cdFx0dmFyIGhvdXJJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiZmxhdHBpY2tyLWhvdXJcIik7XG5cdFx0c2VsZi5ob3VyRWxlbWVudCA9IGhvdXJJbnB1dC5jaGlsZE5vZGVzWzBdO1xuXG5cdFx0dmFyIG1pbnV0ZUlucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3ItbWludXRlXCIpO1xuXHRcdHNlbGYubWludXRlRWxlbWVudCA9IG1pbnV0ZUlucHV0LmNoaWxkTm9kZXNbMF07XG5cblx0XHRzZWxmLmhvdXJFbGVtZW50LnRhYkluZGV4ID0gc2VsZi5taW51dGVFbGVtZW50LnRhYkluZGV4ID0gMDtcblxuXHRcdHNlbGYuaG91ckVsZW1lbnQudmFsdWUgPSBzZWxmLnBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLmdldEhvdXJzKCkgOiBzZWxmLmNvbmZpZy5kZWZhdWx0SG91cik7XG5cblx0XHRzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBzZWxmLnBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLmdldE1pbnV0ZXMoKSA6IHNlbGYuY29uZmlnLmRlZmF1bHRNaW51dGUpO1xuXG5cdFx0c2VsZi5ob3VyRWxlbWVudC5zdGVwID0gc2VsZi5jb25maWcuaG91ckluY3JlbWVudDtcblx0XHRzZWxmLm1pbnV0ZUVsZW1lbnQuc3RlcCA9IHNlbGYuY29uZmlnLm1pbnV0ZUluY3JlbWVudDtcblxuXHRcdHNlbGYuaG91ckVsZW1lbnQubWluID0gc2VsZi5jb25maWcudGltZV8yNGhyID8gMCA6IDE7XG5cdFx0c2VsZi5ob3VyRWxlbWVudC5tYXggPSBzZWxmLmNvbmZpZy50aW1lXzI0aHIgPyAyMyA6IDEyO1xuXG5cdFx0c2VsZi5taW51dGVFbGVtZW50Lm1pbiA9IDA7XG5cdFx0c2VsZi5taW51dGVFbGVtZW50Lm1heCA9IDU5O1xuXG5cdFx0c2VsZi5ob3VyRWxlbWVudC50aXRsZSA9IHNlbGYubWludXRlRWxlbWVudC50aXRsZSA9IHNlbGYubDEwbi5zY3JvbGxUaXRsZTtcblxuXHRcdHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChob3VySW5wdXQpO1xuXHRcdHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZXBhcmF0b3IpO1xuXHRcdHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChtaW51dGVJbnB1dCk7XG5cblx0XHRpZiAoc2VsZi5jb25maWcudGltZV8yNGhyKSBzZWxmLnRpbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRpbWUyNGhyXCIpO1xuXG5cdFx0aWYgKHNlbGYuY29uZmlnLmVuYWJsZVNlY29uZHMpIHtcblx0XHRcdHNlbGYudGltZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzU2Vjb25kc1wiKTtcblxuXHRcdFx0dmFyIHNlY29uZElucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3Itc2Vjb25kXCIpO1xuXHRcdFx0c2VsZi5zZWNvbmRFbGVtZW50ID0gc2Vjb25kSW5wdXQuY2hpbGROb2Rlc1swXTtcblxuXHRcdFx0c2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPyBzZWxmLnBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5nZXRTZWNvbmRzKCkpIDogXCIwMFwiO1xuXG5cdFx0XHRzZWxmLnNlY29uZEVsZW1lbnQuc3RlcCA9IHNlbGYubWludXRlRWxlbWVudC5zdGVwO1xuXHRcdFx0c2VsZi5zZWNvbmRFbGVtZW50Lm1pbiA9IHNlbGYubWludXRlRWxlbWVudC5taW47XG5cdFx0XHRzZWxmLnNlY29uZEVsZW1lbnQubWF4ID0gc2VsZi5taW51dGVFbGVtZW50Lm1heDtcblxuXHRcdFx0c2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXRpbWUtc2VwYXJhdG9yXCIsIFwiOlwiKSk7XG5cdFx0XHRzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2Vjb25kSW5wdXQpO1xuXHRcdH1cblxuXHRcdGlmICghc2VsZi5jb25maWcudGltZV8yNGhyKSB7XG5cdFx0XHQvLyBhZGQgc2VsZi5hbVBNIGlmIGFwcHJvcHJpYXRlXG5cdFx0XHRzZWxmLmFtUE0gPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci1hbS1wbVwiLCBbXCJBTVwiLCBcIlBNXCJdW3NlbGYuaG91ckVsZW1lbnQudmFsdWUgPiAxMSB8IDBdKTtcblx0XHRcdHNlbGYuYW1QTS50aXRsZSA9IHNlbGYubDEwbi50b2dnbGVUaXRsZTtcblx0XHRcdHNlbGYuYW1QTS50YWJJbmRleCA9IDA7XG5cdFx0XHRzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5hbVBNKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2VsZi50aW1lQ29udGFpbmVyO1xuXHR9XG5cblx0ZnVuY3Rpb24gYnVpbGRXZWVrZGF5cygpIHtcblx0XHRpZiAoIXNlbGYud2Vla2RheUNvbnRhaW5lcikgc2VsZi53ZWVrZGF5Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrZGF5c1wiKTtcblxuXHRcdHZhciBmaXJzdERheU9mV2VlayA9IHNlbGYubDEwbi5maXJzdERheU9mV2Vlaztcblx0XHR2YXIgd2Vla2RheXMgPSBzZWxmLmwxMG4ud2Vla2RheXMuc2hvcnRoYW5kLnNsaWNlKCk7XG5cblx0XHRpZiAoZmlyc3REYXlPZldlZWsgPiAwICYmIGZpcnN0RGF5T2ZXZWVrIDwgd2Vla2RheXMubGVuZ3RoKSB7XG5cdFx0XHR3ZWVrZGF5cyA9IFtdLmNvbmNhdCh3ZWVrZGF5cy5zcGxpY2UoZmlyc3REYXlPZldlZWssIHdlZWtkYXlzLmxlbmd0aCksIHdlZWtkYXlzLnNwbGljZSgwLCBmaXJzdERheU9mV2VlaykpO1xuXHRcdH1cblxuXHRcdHNlbGYud2Vla2RheUNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlxcblxcdFxcdDxzcGFuIGNsYXNzPWZsYXRwaWNrci13ZWVrZGF5PlxcblxcdFxcdFxcdFwiICsgd2Vla2RheXMuam9pbihcIjwvc3Bhbj48c3BhbiBjbGFzcz1mbGF0cGlja3Itd2Vla2RheT5cIikgKyBcIlxcblxcdFxcdDwvc3Bhbj5cXG5cXHRcXHRcIjtcblxuXHRcdHJldHVybiBzZWxmLndlZWtkYXlDb250YWluZXI7XG5cdH1cblxuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRmdW5jdGlvbiBidWlsZFdlZWtzKCkge1xuXHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1dlZWtzXCIpO1xuXHRcdHNlbGYud2Vla1dyYXBwZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdlZWt3cmFwcGVyXCIpO1xuXHRcdHNlbGYud2Vla1dyYXBwZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3Itd2Vla2RheVwiLCBzZWxmLmwxMG4ud2Vla0FiYnJldmlhdGlvbikpO1xuXHRcdHNlbGYud2Vla051bWJlcnMgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdlZWtzXCIpO1xuXHRcdHNlbGYud2Vla1dyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi53ZWVrTnVtYmVycyk7XG5cblx0XHRyZXR1cm4gc2VsZi53ZWVrV3JhcHBlcjtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoYW5nZU1vbnRoKHZhbHVlLCBpc19vZmZzZXQpIHtcblx0XHRpc19vZmZzZXQgPSB0eXBlb2YgaXNfb2Zmc2V0ID09PSBcInVuZGVmaW5lZFwiIHx8IGlzX29mZnNldDtcblx0XHR2YXIgZGVsdGEgPSBpc19vZmZzZXQgPyB2YWx1ZSA6IHZhbHVlIC0gc2VsZi5jdXJyZW50TW9udGg7XG5cblx0XHRpZiAoZGVsdGEgPCAwICYmIHNlbGYuX2hpZGVQcmV2TW9udGhBcnJvdyB8fCBkZWx0YSA+IDAgJiYgc2VsZi5faGlkZU5leHRNb250aEFycm93KSByZXR1cm47XG5cblx0XHRzZWxmLmN1cnJlbnRNb250aCArPSBkZWx0YTtcblxuXHRcdGlmIChzZWxmLmN1cnJlbnRNb250aCA8IDAgfHwgc2VsZi5jdXJyZW50TW9udGggPiAxMSkge1xuXHRcdFx0c2VsZi5jdXJyZW50WWVhciArPSBzZWxmLmN1cnJlbnRNb250aCA+IDExID8gMSA6IC0xO1xuXHRcdFx0c2VsZi5jdXJyZW50TW9udGggPSAoc2VsZi5jdXJyZW50TW9udGggKyAxMikgJSAxMjtcblxuXHRcdFx0dHJpZ2dlckV2ZW50KFwiWWVhckNoYW5nZVwiKTtcblx0XHR9XG5cblx0XHR1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG5cdFx0YnVpbGREYXlzKCk7XG5cblx0XHRpZiAoIXNlbGYuY29uZmlnLm5vQ2FsZW5kYXIpIHNlbGYuZGF5cy5mb2N1cygpO1xuXG5cdFx0dHJpZ2dlckV2ZW50KFwiTW9udGhDaGFuZ2VcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBjbGVhcih0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcblx0XHRzZWxmLmlucHV0LnZhbHVlID0gXCJcIjtcblxuXHRcdGlmIChzZWxmLmFsdElucHV0KSBzZWxmLmFsdElucHV0LnZhbHVlID0gXCJcIjtcblxuXHRcdGlmIChzZWxmLm1vYmlsZUlucHV0KSBzZWxmLm1vYmlsZUlucHV0LnZhbHVlID0gXCJcIjtcblxuXHRcdHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtdO1xuXHRcdHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gbnVsbDtcblx0XHRzZWxmLmRhdGVJc1BpY2tlZCA9IGZhbHNlO1xuXG5cdFx0c2VsZi5yZWRyYXcoKTtcblxuXHRcdGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQgIT09IGZhbHNlKVxuXHRcdFx0Ly8gdHJpZ2dlckNoYW5nZUV2ZW50IGlzIHRydWUgKGRlZmF1bHQpIG9yIGFuIEV2ZW50XG5cdFx0XHR0cmlnZ2VyRXZlbnQoXCJDaGFuZ2VcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBjbG9zZSgpIHtcblx0XHRzZWxmLmlzT3BlbiA9IGZhbHNlO1xuXG5cdFx0aWYgKCFzZWxmLmlzTW9iaWxlKSB7XG5cdFx0XHRzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xuXHRcdFx0KHNlbGYuYWx0SW5wdXQgfHwgc2VsZi5pbnB1dCkuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcblx0XHR9XG5cblx0XHR0cmlnZ2VyRXZlbnQoXCJDbG9zZVwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koaW5zdGFuY2UpIHtcblx0XHRpbnN0YW5jZSA9IGluc3RhbmNlIHx8IHNlbGY7XG5cdFx0aW5zdGFuY2UuY2xlYXIoZmFsc2UpO1xuXG5cdFx0d2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5RG93bik7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaW5zdGFuY2UuZGVib3VuY2VkUmVzaXplKTtcblxuXHRcdHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZG9jdW1lbnRDbGljayk7XG5cdFx0d2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGRvY3VtZW50Q2xpY2spO1xuXHRcdHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCBkb2N1bWVudENsaWNrKTtcblxuXHRcdGlmIChpbnN0YW5jZS50aW1lQ29udGFpbmVyKSBpbnN0YW5jZS50aW1lQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIHBvc2l0aW9uQ2FsZW5kYXIpO1xuXG5cdFx0aWYgKGluc3RhbmNlLm1vYmlsZUlucHV0KSB7XG5cdFx0XHRpZiAoaW5zdGFuY2UubW9iaWxlSW5wdXQucGFyZW50Tm9kZSkgaW5zdGFuY2UubW9iaWxlSW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnN0YW5jZS5tb2JpbGVJbnB1dCk7XG5cdFx0XHRkZWxldGUgaW5zdGFuY2UubW9iaWxlSW5wdXQ7XG5cdFx0fSBlbHNlIGlmIChpbnN0YW5jZS5jYWxlbmRhckNvbnRhaW5lciAmJiBpbnN0YW5jZS5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlKSBpbnN0YW5jZS5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGluc3RhbmNlLmNhbGVuZGFyQ29udGFpbmVyKTtcblxuXHRcdGlmIChpbnN0YW5jZS5hbHRJbnB1dCkge1xuXHRcdFx0aW5zdGFuY2UuaW5wdXQudHlwZSA9IFwidGV4dFwiO1xuXHRcdFx0aWYgKGluc3RhbmNlLmFsdElucHV0LnBhcmVudE5vZGUpIGluc3RhbmNlLmFsdElucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaW5zdGFuY2UuYWx0SW5wdXQpO1xuXHRcdFx0ZGVsZXRlIGluc3RhbmNlLmFsdElucHV0O1xuXHRcdH1cblxuXHRcdGluc3RhbmNlLmlucHV0LnR5cGUgPSBpbnN0YW5jZS5pbnB1dC5fdHlwZTtcblx0XHRpbnN0YW5jZS5pbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiZmxhdHBpY2tyLWlucHV0XCIpO1xuXHRcdGluc3RhbmNlLmlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBvcGVuKTtcblx0XHRpbnN0YW5jZS5pbnB1dC5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkb25seVwiKTtcblxuXHRcdGRlbGV0ZSBpbnN0YW5jZS5pbnB1dC5fZmxhdHBpY2tyO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNDYWxlbmRhckVsZW0oZWxlbSkge1xuXHRcdGlmIChzZWxmLmNvbmZpZy5hcHBlbmRUbyAmJiBzZWxmLmNvbmZpZy5hcHBlbmRUby5jb250YWlucyhlbGVtKSkgcmV0dXJuIHRydWU7XG5cblx0XHRyZXR1cm4gc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jb250YWlucyhlbGVtKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRvY3VtZW50Q2xpY2soZSkge1xuXHRcdHZhciBpc0lucHV0ID0gc2VsZi5lbGVtZW50LmNvbnRhaW5zKGUudGFyZ2V0KSB8fCBlLnRhcmdldCA9PT0gc2VsZi5pbnB1dCB8fCBlLnRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dCB8fFxuXHRcdC8vIHdlYiBjb21wb25lbnRzXG5cdFx0ZS5wYXRoICYmIGUucGF0aC5pbmRleE9mICYmICh+ZS5wYXRoLmluZGV4T2Yoc2VsZi5pbnB1dCkgfHwgfmUucGF0aC5pbmRleE9mKHNlbGYuYWx0SW5wdXQpKTtcblxuXHRcdGlmIChzZWxmLmlzT3BlbiAmJiAhc2VsZi5jb25maWcuaW5saW5lICYmICFpc0NhbGVuZGFyRWxlbShlLnRhcmdldCkgJiYgIWlzSW5wdXQpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHNlbGYuY2xvc2UoKTtcblxuXHRcdFx0aWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIiAmJiBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdHNlbGYuY2xlYXIoKTtcblx0XHRcdFx0c2VsZi5yZWRyYXcoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXREYXRlKGZybXQsIGRhdGVPYmopIHtcblx0XHRpZiAoc2VsZi5jb25maWcuZm9ybWF0RGF0ZSkgcmV0dXJuIHNlbGYuY29uZmlnLmZvcm1hdERhdGUoZnJtdCwgZGF0ZU9iaik7XG5cblx0XHR2YXIgY2hhcnMgPSBmcm10LnNwbGl0KFwiXCIpO1xuXHRcdHJldHVybiBjaGFycy5tYXAoZnVuY3Rpb24gKGMsIGkpIHtcblx0XHRcdHJldHVybiBzZWxmLmZvcm1hdHNbY10gJiYgY2hhcnNbaSAtIDFdICE9PSBcIlxcXFxcIiA/IHNlbGYuZm9ybWF0c1tjXShkYXRlT2JqKSA6IGMgIT09IFwiXFxcXFwiID8gYyA6IFwiXCI7XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoYW5nZVllYXIobmV3WWVhcikge1xuXHRcdGlmICghbmV3WWVhciB8fCBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5taW4gJiYgbmV3WWVhciA8IHNlbGYuY3VycmVudFllYXJFbGVtZW50Lm1pbiB8fCBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5tYXggJiYgbmV3WWVhciA+IHNlbGYuY3VycmVudFllYXJFbGVtZW50Lm1heCkgcmV0dXJuO1xuXG5cdFx0dmFyIG5ld1llYXJOdW0gPSBwYXJzZUludChuZXdZZWFyLCAxMCksXG5cdFx0ICAgIGlzTmV3WWVhciA9IHNlbGYuY3VycmVudFllYXIgIT09IG5ld1llYXJOdW07XG5cblx0XHRzZWxmLmN1cnJlbnRZZWFyID0gbmV3WWVhck51bSB8fCBzZWxmLmN1cnJlbnRZZWFyO1xuXG5cdFx0aWYgKHNlbGYuY29uZmlnLm1heERhdGUgJiYgc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpKSB7XG5cdFx0XHRzZWxmLmN1cnJlbnRNb250aCA9IE1hdGgubWluKHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSwgc2VsZi5jdXJyZW50TW9udGgpO1xuXHRcdH0gZWxzZSBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAmJiBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkpIHtcblx0XHRcdHNlbGYuY3VycmVudE1vbnRoID0gTWF0aC5tYXgoc2VsZi5jb25maWcubWluRGF0ZS5nZXRNb250aCgpLCBzZWxmLmN1cnJlbnRNb250aCk7XG5cdFx0fVxuXG5cdFx0aWYgKGlzTmV3WWVhcikge1xuXHRcdFx0c2VsZi5yZWRyYXcoKTtcblx0XHRcdHRyaWdnZXJFdmVudChcIlllYXJDaGFuZ2VcIik7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gaXNFbmFibGVkKGRhdGUsIHRpbWVsZXNzKSB7XG5cdFx0dmFyIGx0bWluID0gY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuY29uZmlnLm1pbkRhdGUsIHR5cGVvZiB0aW1lbGVzcyAhPT0gXCJ1bmRlZmluZWRcIiA/IHRpbWVsZXNzIDogIXNlbGYubWluRGF0ZUhhc1RpbWUpIDwgMDtcblx0XHR2YXIgZ3RtYXggPSBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5jb25maWcubWF4RGF0ZSwgdHlwZW9mIHRpbWVsZXNzICE9PSBcInVuZGVmaW5lZFwiID8gdGltZWxlc3MgOiAhc2VsZi5tYXhEYXRlSGFzVGltZSkgPiAwO1xuXG5cdFx0aWYgKGx0bWluIHx8IGd0bWF4KSByZXR1cm4gZmFsc2U7XG5cblx0XHRpZiAoIXNlbGYuY29uZmlnLmVuYWJsZS5sZW5ndGggJiYgIXNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoKSByZXR1cm4gdHJ1ZTtcblxuXHRcdHZhciBkYXRlVG9DaGVjayA9IHNlbGYucGFyc2VEYXRlKGRhdGUsIHRydWUpOyAvLyB0aW1lbGVzc1xuXG5cdFx0dmFyIGJvb2wgPSBzZWxmLmNvbmZpZy5lbmFibGUubGVuZ3RoID4gMCxcblx0XHQgICAgYXJyYXkgPSBib29sID8gc2VsZi5jb25maWcuZW5hYmxlIDogc2VsZi5jb25maWcuZGlzYWJsZTtcblxuXHRcdGZvciAodmFyIGkgPSAwLCBkOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcblx0XHRcdGQgPSBhcnJheVtpXTtcblxuXHRcdFx0aWYgKGQgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBkKGRhdGVUb0NoZWNrKSkgLy8gZGlzYWJsZWQgYnkgZnVuY3Rpb25cblx0XHRcdFx0cmV0dXJuIGJvb2w7ZWxzZSBpZiAoZCBpbnN0YW5jZW9mIERhdGUgJiYgZC5nZXRUaW1lKCkgPT09IGRhdGVUb0NoZWNrLmdldFRpbWUoKSlcblx0XHRcdFx0Ly8gZGlzYWJsZWQgYnkgZGF0ZVxuXHRcdFx0XHRyZXR1cm4gYm9vbDtlbHNlIGlmICh0eXBlb2YgZCA9PT0gXCJzdHJpbmdcIiAmJiBzZWxmLnBhcnNlRGF0ZShkLCB0cnVlKS5nZXRUaW1lKCkgPT09IGRhdGVUb0NoZWNrLmdldFRpbWUoKSlcblx0XHRcdFx0Ly8gZGlzYWJsZWQgYnkgZGF0ZSBzdHJpbmdcblx0XHRcdFx0cmV0dXJuIGJvb2w7ZWxzZSBpZiAoIC8vIGRpc2FibGVkIGJ5IHJhbmdlXG5cdFx0XHQodHlwZW9mIGQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkKSkgPT09IFwib2JqZWN0XCIgJiYgZC5mcm9tICYmIGQudG8gJiYgZGF0ZVRvQ2hlY2sgPj0gZC5mcm9tICYmIGRhdGVUb0NoZWNrIDw9IGQudG8pIHJldHVybiBib29sO1xuXHRcdH1cblxuXHRcdHJldHVybiAhYm9vbDtcblx0fVxuXG5cdGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG5cdFx0aWYgKGUudGFyZ2V0ID09PSAoc2VsZi5hbHRJbnB1dCB8fCBzZWxmLmlucHV0KSAmJiBlLndoaWNoID09PSAxMykgc2VsZWN0RGF0ZShlKTtlbHNlIGlmIChzZWxmLmlzT3BlbiAmJiBpc0NhbGVuZGFyRWxlbShlLnRhcmdldCkpIHtcblx0XHRcdHN3aXRjaCAoZS53aGljaCkge1xuXHRcdFx0XHRjYXNlIDEzOlxuXHRcdFx0XHRcdGlmIChzZWxmLnRpbWVDb250YWluZXIgJiYgc2VsZi50aW1lQ29udGFpbmVyLmNvbnRhaW5zKGUudGFyZ2V0KSkgdXBkYXRlVmFsdWUoKTtlbHNlIHNlbGVjdERhdGUoZSk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRcdC8vIGVzY2FwZVxuXHRcdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDM3OlxuXHRcdFx0XHRcdGlmIChlLnRhcmdldCAhPT0gc2VsZi5pbnB1dCAmIGUudGFyZ2V0ICE9PSBzZWxmLmFsdElucHV0KSB7XG5cdFx0XHRcdFx0XHRjaGFuZ2VNb250aCgtMSk7XG5cdFx0XHRcdFx0XHRzZWxmLmN1cnJlbnRNb250aEVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRpZiAoIXNlbGYudGltZUNvbnRhaW5lciB8fCAhc2VsZi50aW1lQ29udGFpbmVyLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0c2VsZi5jdXJyZW50WWVhcisrO1xuXHRcdFx0XHRcdFx0c2VsZi5yZWRyYXcoKTtcblx0XHRcdFx0XHR9IGVsc2UgdXBkYXRlVGltZShlKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMzk6XG5cdFx0XHRcdFx0aWYgKGUudGFyZ2V0ICE9PSBzZWxmLmlucHV0ICYgZS50YXJnZXQgIT09IHNlbGYuYWx0SW5wdXQpIHtcblx0XHRcdFx0XHRcdGNoYW5nZU1vbnRoKDEpO1xuXHRcdFx0XHRcdFx0c2VsZi5jdXJyZW50TW9udGhFbGVtZW50LmZvY3VzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdFx0aWYgKCFzZWxmLnRpbWVDb250YWluZXIgfHwgIXNlbGYudGltZUNvbnRhaW5lci5jb250YWlucyhlLnRhcmdldCkpIHtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHNlbGYuY3VycmVudFllYXItLTtcblx0XHRcdFx0XHRcdHNlbGYucmVkcmF3KCk7XG5cdFx0XHRcdFx0fSBlbHNlIHVwZGF0ZVRpbWUoZSk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gb25Nb3VzZU92ZXIoZSkge1xuXHRcdGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoICE9PSAxIHx8ICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJmbGF0cGlja3ItZGF5XCIpKSByZXR1cm47XG5cblx0XHR2YXIgaG92ZXJEYXRlID0gZS50YXJnZXQuZGF0ZU9iaixcblx0XHQgICAgaW5pdGlhbERhdGUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHRydWUpLFxuXHRcdCAgICByYW5nZVN0YXJ0RGF0ZSA9IE1hdGgubWluKGhvdmVyRGF0ZS5nZXRUaW1lKCksIHNlbGYuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkpLFxuXHRcdCAgICByYW5nZUVuZERhdGUgPSBNYXRoLm1heChob3ZlckRhdGUuZ2V0VGltZSgpLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpKSxcblx0XHQgICAgY29udGFpbnNEaXNhYmxlZCA9IGZhbHNlO1xuXG5cdFx0Zm9yICh2YXIgdCA9IHJhbmdlU3RhcnREYXRlOyB0IDwgcmFuZ2VFbmREYXRlOyB0ICs9IHNlbGYudXRpbHMuZHVyYXRpb24uREFZKSB7XG5cdFx0XHRpZiAoIWlzRW5hYmxlZChuZXcgRGF0ZSh0KSkpIHtcblx0XHRcdFx0Y29udGFpbnNEaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKHRpbWVzdGFtcCwgaSkge1xuXHRcdFx0dmFyIG91dE9mUmFuZ2UgPSB0aW1lc3RhbXAgPCBzZWxmLm1pblJhbmdlRGF0ZS5nZXRUaW1lKCkgfHwgdGltZXN0YW1wID4gc2VsZi5tYXhSYW5nZURhdGUuZ2V0VGltZSgpO1xuXG5cdFx0XHRpZiAob3V0T2ZSYW5nZSkge1xuXHRcdFx0XHRzZWxmLmRheXMuY2hpbGROb2Rlc1tpXS5jbGFzc0xpc3QuYWRkKFwibm90QWxsb3dlZFwiKTtcblx0XHRcdFx0W1wiaW5SYW5nZVwiLCBcInN0YXJ0UmFuZ2VcIiwgXCJlbmRSYW5nZVwiXS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG5cdFx0XHRcdFx0c2VsZi5kYXlzLmNoaWxkTm9kZXNbaV0uY2xhc3NMaXN0LnJlbW92ZShjKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBcImNvbnRpbnVlXCI7XG5cdFx0XHR9IGVsc2UgaWYgKGNvbnRhaW5zRGlzYWJsZWQgJiYgIW91dE9mUmFuZ2UpIHJldHVybiBcImNvbnRpbnVlXCI7XG5cblx0XHRcdFtcInN0YXJ0UmFuZ2VcIiwgXCJpblJhbmdlXCIsIFwiZW5kUmFuZ2VcIiwgXCJub3RBbGxvd2VkXCJdLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcblx0XHRcdFx0c2VsZi5kYXlzLmNoaWxkTm9kZXNbaV0uY2xhc3NMaXN0LnJlbW92ZShjKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgbWluUmFuZ2VEYXRlID0gTWF0aC5tYXgoc2VsZi5taW5SYW5nZURhdGUuZ2V0VGltZSgpLCByYW5nZVN0YXJ0RGF0ZSksXG5cdFx0XHQgICAgbWF4UmFuZ2VEYXRlID0gTWF0aC5taW4oc2VsZi5tYXhSYW5nZURhdGUuZ2V0VGltZSgpLCByYW5nZUVuZERhdGUpO1xuXG5cdFx0XHRlLnRhcmdldC5jbGFzc0xpc3QuYWRkKGhvdmVyRGF0ZSA8IHNlbGYuc2VsZWN0ZWREYXRlc1swXSA/IFwic3RhcnRSYW5nZVwiIDogXCJlbmRSYW5nZVwiKTtcblxuXHRcdFx0aWYgKGluaXRpYWxEYXRlID4gaG92ZXJEYXRlICYmIHRpbWVzdGFtcCA9PT0gaW5pdGlhbERhdGUuZ2V0VGltZSgpKSBzZWxmLmRheXMuY2hpbGROb2Rlc1tpXS5jbGFzc0xpc3QuYWRkKFwiZW5kUmFuZ2VcIik7ZWxzZSBpZiAoaW5pdGlhbERhdGUgPCBob3ZlckRhdGUgJiYgdGltZXN0YW1wID09PSBpbml0aWFsRGF0ZS5nZXRUaW1lKCkpIHNlbGYuZGF5cy5jaGlsZE5vZGVzW2ldLmNsYXNzTGlzdC5hZGQoXCJzdGFydFJhbmdlXCIpO2Vsc2UgaWYgKHRpbWVzdGFtcCA+IG1pblJhbmdlRGF0ZSAmJiB0aW1lc3RhbXAgPCBtYXhSYW5nZURhdGUpIHNlbGYuZGF5cy5jaGlsZE5vZGVzW2ldLmNsYXNzTGlzdC5hZGQoXCJpblJhbmdlXCIpO1xuXHRcdH07XG5cblx0XHRmb3IgKHZhciB0aW1lc3RhbXAgPSBzZWxmLmRheXMuY2hpbGROb2Rlc1swXS5kYXRlT2JqLmdldFRpbWUoKSwgaSA9IDA7IGkgPCA0MjsgaSsrLCB0aW1lc3RhbXAgKz0gc2VsZi51dGlscy5kdXJhdGlvbi5EQVkpIHtcblx0XHRcdHZhciBfcmV0ID0gX2xvb3AodGltZXN0YW1wLCBpKTtcblxuXHRcdFx0aWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gb25SZXNpemUoKSB7XG5cdFx0aWYgKHNlbGYuaXNPcGVuICYmICFzZWxmLmNvbmZpZy5zdGF0aWMgJiYgIXNlbGYuY29uZmlnLmlubGluZSkgcG9zaXRpb25DYWxlbmRhcigpO1xuXHR9XG5cblx0ZnVuY3Rpb24gb3BlbihlKSB7XG5cdFx0aWYgKHNlbGYuaXNNb2JpbGUpIHtcblx0XHRcdGlmIChlKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0ZS50YXJnZXQuYmx1cigpO1xuXHRcdFx0fVxuXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5tb2JpbGVJbnB1dC5jbGljaygpO1xuXHRcdFx0fSwgMCk7XG5cblx0XHRcdHRyaWdnZXJFdmVudChcIk9wZW5cIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fSBlbHNlIGlmIChzZWxmLmlzT3BlbiB8fCAoc2VsZi5hbHRJbnB1dCB8fCBzZWxmLmlucHV0KS5kaXNhYmxlZCB8fCBzZWxmLmNvbmZpZy5pbmxpbmUpIHJldHVybjtcblxuXHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XG5cblx0XHRpZiAoIXNlbGYuY29uZmlnLnN0YXRpYyAmJiAhc2VsZi5jb25maWcuaW5saW5lKSBwb3NpdGlvbkNhbGVuZGFyKCk7XG5cblx0XHRzZWxmLmlzT3BlbiA9IHRydWU7XG5cblx0XHRpZiAoIXNlbGYuY29uZmlnLmFsbG93SW5wdXQpIHtcblx0XHRcdChzZWxmLmFsdElucHV0IHx8IHNlbGYuaW5wdXQpLmJsdXIoKTtcblx0XHRcdChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID8gc2VsZi50aW1lQ29udGFpbmVyIDogc2VsZi5zZWxlY3RlZERhdGVFbGVtID8gc2VsZi5zZWxlY3RlZERhdGVFbGVtIDogc2VsZi5kYXlzKS5mb2N1cygpO1xuXHRcdH1cblxuXHRcdChzZWxmLmFsdElucHV0IHx8IHNlbGYuaW5wdXQpLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG5cdFx0dHJpZ2dlckV2ZW50KFwiT3BlblwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG1pbk1heERhdGVTZXR0ZXIodHlwZSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoZGF0ZSkge1xuXHRcdFx0dmFyIGRhdGVPYmogPSBzZWxmLmNvbmZpZ1tcIl9cIiArIHR5cGUgKyBcIkRhdGVcIl0gPSBzZWxmLnBhcnNlRGF0ZShkYXRlKTtcblx0XHRcdHZhciBpbnZlcnNlRGF0ZU9iaiA9IHNlbGYuY29uZmlnW1wiX1wiICsgKHR5cGUgPT09IFwibWluXCIgPyBcIm1heFwiIDogXCJtaW5cIikgKyBcIkRhdGVcIl07XG5cdFx0XHR2YXIgaXNWYWxpZERhdGUgPSBkYXRlICYmIGRhdGVPYmogaW5zdGFuY2VvZiBEYXRlO1xuXG5cdFx0XHRpZiAoc2VsZi5zZWxlY3RlZERhdGVzKSB7XG5cdFx0XHRcdHNlbGYuc2VsZWN0ZWREYXRlcyA9IHNlbGYuc2VsZWN0ZWREYXRlcy5maWx0ZXIoaXNFbmFibGVkKTtcblx0XHRcdFx0dXBkYXRlVmFsdWUoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlbGYuZGF5cykgcmVkcmF3KCk7XG5cblx0XHRcdGlmIChpc1ZhbGlkRGF0ZSkge1xuXHRcdFx0XHRzZWxmW3R5cGUgKyBcIkRhdGVIYXNUaW1lXCJdID0gZGF0ZU9iai5nZXRIb3VycygpIHx8IGRhdGVPYmouZ2V0TWludXRlcygpIHx8IGRhdGVPYmouZ2V0U2Vjb25kcygpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZi5jdXJyZW50WWVhckVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKGlzVmFsaWREYXRlKSBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudFt0eXBlXSA9IGRhdGVPYmouZ2V0RnVsbFllYXIoKTtlbHNlIHNlbGYuY3VycmVudFllYXJFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0eXBlKTtcblxuXHRcdFx0XHRzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5kaXNhYmxlZCA9IGludmVyc2VEYXRlT2JqICYmIGRhdGVPYmogJiYgaW52ZXJzZURhdGVPYmouZ2V0RnVsbFllYXIoKSA9PT0gZGF0ZU9iai5nZXRGdWxsWWVhcigpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZUNvbmZpZygpIHtcblx0XHR2YXIgYm9vbE9wdHMgPSBbXCJ1dGNcIiwgXCJ3cmFwXCIsIFwid2Vla051bWJlcnNcIiwgXCJhbGxvd0lucHV0XCIsIFwiY2xpY2tPcGVuc1wiLCBcInRpbWVfMjRoclwiLCBcImVuYWJsZVRpbWVcIiwgXCJub0NhbGVuZGFyXCIsIFwiYWx0SW5wdXRcIiwgXCJzaG9ydGhhbmRDdXJyZW50TW9udGhcIiwgXCJpbmxpbmVcIiwgXCJzdGF0aWNcIiwgXCJlbmFibGVTZWNvbmRzXCIsIFwiZGlzYWJsZU1vYmlsZVwiXTtcblxuXHRcdHZhciBob29rcyA9IFtcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRGF5Q3JlYXRlXCIsIFwib25Nb250aENoYW5nZVwiLCBcIm9uT3BlblwiLCBcIm9uUmVhZHlcIiwgXCJvblZhbHVlVXBkYXRlXCIsIFwib25ZZWFyQ2hhbmdlXCJdO1xuXG5cdFx0c2VsZi5jb25maWcgPSBPYmplY3QuY3JlYXRlKEZsYXRwaWNrci5kZWZhdWx0Q29uZmlnKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtaW5EYXRlXCIsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fbWluRGF0ZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IG1pbk1heERhdGVTZXR0ZXIoXCJtaW5cIilcblx0XHR9KTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtYXhEYXRlXCIsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fbWF4RGF0ZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IG1pbk1heERhdGVTZXR0ZXIoXCJtYXhcIilcblx0XHR9KTtcblxuXHRcdHZhciB1c2VyQ29uZmlnID0gX2V4dGVuZHMoe30sIHNlbGYuaW5zdGFuY2VDb25maWcsIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VsZi5lbGVtZW50LmRhdGFzZXQgfHwge30pKSk7XG5cblx0XHRzZWxmLmNvbmZpZy5wYXJzZURhdGUgPSB1c2VyQ29uZmlnLnBhcnNlRGF0ZTtcblx0XHRzZWxmLmNvbmZpZy5mb3JtYXREYXRlID0gdXNlckNvbmZpZy5mb3JtYXREYXRlO1xuXG5cdFx0X2V4dGVuZHMoc2VsZi5jb25maWcsIHVzZXJDb25maWcpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBib29sT3B0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0c2VsZi5jb25maWdbYm9vbE9wdHNbaV1dID0gc2VsZi5jb25maWdbYm9vbE9wdHNbaV1dID09PSB0cnVlIHx8IHNlbGYuY29uZmlnW2Jvb2xPcHRzW2ldXSA9PT0gXCJ0cnVlXCI7XG5cdFx0fWZvciAodmFyIF9pID0gMDsgX2kgPCBob29rcy5sZW5ndGg7IF9pKyspIHtcblx0XHRcdHNlbGYuY29uZmlnW2hvb2tzW19pXV0gPSBhcnJheWlmeShzZWxmLmNvbmZpZ1tob29rc1tfaV1dIHx8IFtdKTtcblx0XHR9XG5cblx0XHRpZiAoIXVzZXJDb25maWcuZGF0ZUZvcm1hdCAmJiB1c2VyQ29uZmlnLmVuYWJsZVRpbWUpIHtcblx0XHRcdHNlbGYuY29uZmlnLmRhdGVGb3JtYXQgPSBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID8gXCJIOmlcIiArIChzZWxmLmNvbmZpZy5lbmFibGVTZWNvbmRzID8gXCI6U1wiIDogXCJcIikgOiBGbGF0cGlja3IuZGVmYXVsdENvbmZpZy5kYXRlRm9ybWF0ICsgXCIgSDppXCIgKyAoc2VsZi5jb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlNcIiA6IFwiXCIpO1xuXHRcdH1cblxuXHRcdGlmICh1c2VyQ29uZmlnLmFsdElucHV0ICYmIHVzZXJDb25maWcuZW5hYmxlVGltZSAmJiAhdXNlckNvbmZpZy5hbHRGb3JtYXQpIHtcblx0XHRcdHNlbGYuY29uZmlnLmFsdEZvcm1hdCA9IHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPyBcImg6aVwiICsgKHNlbGYuY29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTIEtcIiA6IFwiIEtcIikgOiBGbGF0cGlja3IuZGVmYXVsdENvbmZpZy5hbHRGb3JtYXQgKyAoXCIgaDppXCIgKyAoc2VsZi5jb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlNcIiA6IFwiXCIpICsgXCIgS1wiKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzZWxmLmNvbmZpZy5wbHVnaW5zLmxlbmd0aDsgX2kyKyspIHtcblx0XHRcdHZhciBwbHVnaW5Db25mID0gc2VsZi5jb25maWcucGx1Z2luc1tfaTJdKHNlbGYpIHx8IHt9O1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIHBsdWdpbkNvbmYpIHtcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoc2VsZi5jb25maWdba2V5XSkpIHNlbGYuY29uZmlnW2tleV0gPSBhcnJheWlmeShwbHVnaW5Db25mW2tleV0pLmNvbmNhdChzZWxmLmNvbmZpZ1trZXldKTtlbHNlIGlmICh1c2VyQ29uZmlnW2tleV0gIT09IHVuZGVmaW5lZCkgc2VsZi5jb25maWdba2V5XSA9IHBsdWdpbkNvbmZba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBzZXR1cExvY2FsZSgpIHtcblx0XHRpZiAoX3R5cGVvZihzZWxmLmNvbmZpZy5sb2NhbGUpICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBGbGF0cGlja3IubDEwbnNbc2VsZi5jb25maWcubG9jYWxlXSA9PT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKFwiZmxhdHBpY2tyOiBpbnZhbGlkIGxvY2FsZSBcIiArIHNlbGYuY29uZmlnLmxvY2FsZSk7XG5cblx0XHRzZWxmLmwxMG4gPSBfZXh0ZW5kcyhPYmplY3QuY3JlYXRlKEZsYXRwaWNrci5sMTBucy5kZWZhdWx0KSwgX3R5cGVvZihzZWxmLmNvbmZpZy5sb2NhbGUpID09PSBcIm9iamVjdFwiID8gc2VsZi5jb25maWcubG9jYWxlIDogc2VsZi5jb25maWcubG9jYWxlICE9PSBcImRlZmF1bHRcIiA/IEZsYXRwaWNrci5sMTBuc1tzZWxmLmNvbmZpZy5sb2NhbGVdIHx8IHt9IDoge30pO1xuXHR9XG5cblx0ZnVuY3Rpb24gcG9zaXRpb25DYWxlbmRhcihlKSB7XG5cdFx0aWYgKGUgJiYgZS50YXJnZXQgIT09IHNlbGYudGltZUNvbnRhaW5lcikgcmV0dXJuO1xuXG5cdFx0dmFyIGNhbGVuZGFySGVpZ2h0ID0gc2VsZi5jYWxlbmRhckNvbnRhaW5lci5vZmZzZXRIZWlnaHQsXG5cdFx0ICAgIGNhbGVuZGFyV2lkdGggPSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLm9mZnNldFdpZHRoLFxuXHRcdCAgICBpbnB1dCA9IHNlbGYuYWx0SW5wdXQgfHwgc2VsZi5pbnB1dCxcblx0XHQgICAgaW5wdXRCb3VuZHMgPSBpbnB1dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcblx0XHQgICAgZGlzdGFuY2VGcm9tQm90dG9tID0gd2luZG93LmlubmVySGVpZ2h0IC0gaW5wdXRCb3VuZHMuYm90dG9tICsgaW5wdXQub2Zmc2V0SGVpZ2h0LFxuXHRcdCAgICBib3R0b21DYWxlbmRhciA9IGRpc3RhbmNlRnJvbUJvdHRvbSA8IGNhbGVuZGFySGVpZ2h0ICsgNjA7XG5cblx0XHR2YXIgdG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgaW5wdXRCb3VuZHMudG9wICsgKCFib3R0b21DYWxlbmRhciA/IGlucHV0Lm9mZnNldEhlaWdodCArIDIgOiAtY2FsZW5kYXJIZWlnaHQgLSAyKTtcblxuXHRcdHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dUb3BcIiwgIWJvdHRvbUNhbGVuZGFyKTtcblx0XHR0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFycm93Qm90dG9tXCIsIGJvdHRvbUNhbGVuZGFyKTtcblxuXHRcdGlmIChzZWxmLmNvbmZpZy5pbmxpbmUpIHJldHVybjtcblxuXHRcdHZhciBsZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0ICsgaW5wdXRCb3VuZHMubGVmdDtcblx0XHR2YXIgcmlnaHQgPSB3aW5kb3cuZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIGlucHV0Qm91bmRzLnJpZ2h0O1xuXHRcdHZhciByaWdodE1vc3QgPSBsZWZ0ICsgY2FsZW5kYXJXaWR0aCA+IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuXG5cdFx0dG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJyaWdodE1vc3RcIiwgcmlnaHRNb3N0KTtcblxuXHRcdGlmIChzZWxmLmNvbmZpZy5zdGF0aWMpIHJldHVybjtcblxuXHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUudG9wID0gdG9wICsgXCJweFwiO1xuXG5cdFx0aWYgKCFyaWdodE1vc3QpIHtcblx0XHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG5cdFx0XHRzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gXCJhdXRvXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IFwiYXV0b1wiO1xuXHRcdFx0c2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IHJpZ2h0ICsgXCJweFwiO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZHJhdygpIHtcblx0XHRpZiAoc2VsZi5jb25maWcubm9DYWxlbmRhciB8fCBzZWxmLmlzTW9iaWxlKSByZXR1cm47XG5cblx0XHRidWlsZFdlZWtkYXlzKCk7XG5cdFx0dXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpO1xuXHRcdGJ1aWxkRGF5cygpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VsZWN0RGF0ZShlKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRpZiAoc2VsZi5jb25maWcuYWxsb3dJbnB1dCAmJiBlLndoaWNoID09PSAxMyAmJiBlLnRhcmdldCA9PT0gKHNlbGYuYWx0SW5wdXQgfHwgc2VsZi5pbnB1dCkpIHJldHVybiBzZWxmLnNldERhdGUoKHNlbGYuYWx0SW5wdXQgfHwgc2VsZi5pbnB1dCkudmFsdWUpLCBlLnRhcmdldC5ibHVyKCk7XG5cblx0XHRpZiAoIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kYXlcIikgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm90QWxsb3dlZFwiKSkgcmV0dXJuO1xuXG5cdFx0dmFyIHNlbGVjdGVkRGF0ZSA9IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gbmV3IERhdGUoZS50YXJnZXQuZGF0ZU9iai5nZXRUaW1lKCkpO1xuXG5cdFx0c2VsZi5zZWxlY3RlZERhdGVFbGVtID0gZS50YXJnZXQ7XG5cblx0XHRpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJzaW5nbGVcIikgc2VsZi5zZWxlY3RlZERhdGVzID0gW3NlbGVjdGVkRGF0ZV07ZWxzZSBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG5cdFx0XHR2YXIgc2VsZWN0ZWRJbmRleCA9IGlzRGF0ZVNlbGVjdGVkKHNlbGVjdGVkRGF0ZSk7XG5cdFx0XHRpZiAoc2VsZWN0ZWRJbmRleCkgc2VsZi5zZWxlY3RlZERhdGVzLnNwbGljZShzZWxlY3RlZEluZGV4LCAxKTtlbHNlIHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7XG5cdFx0fSBlbHNlIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcblx0XHRcdGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAyKSBzZWxmLmNsZWFyKCk7XG5cblx0XHRcdHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7XG5cblx0XHRcdC8vIHVubGVzcyBzZWxlY3Rpbmcgc2FtZSBkYXRlIHR3aWNlLCBzb3J0IGFzY2VuZGluZ2x5XG5cdFx0XHRpZiAoY29tcGFyZURhdGVzKHNlbGVjdGVkRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB0cnVlKSAhPT0gMCkgc2VsZi5zZWxlY3RlZERhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0cmV0dXJuIGEuZ2V0VGltZSgpIC0gYi5nZXRUaW1lKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcblxuXHRcdGlmIChzZWxlY3RlZERhdGUuZ2V0TW9udGgoKSAhPT0gc2VsZi5jdXJyZW50TW9udGggJiYgc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiKSB7XG5cdFx0XHR2YXIgaXNOZXdZZWFyID0gc2VsZi5jdXJyZW50WWVhciAhPT0gc2VsZWN0ZWREYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0XHRzZWxmLmN1cnJlbnRZZWFyID0gc2VsZWN0ZWREYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0XHRzZWxmLmN1cnJlbnRNb250aCA9IHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpO1xuXG5cdFx0XHRpZiAoaXNOZXdZZWFyKSB0cmlnZ2VyRXZlbnQoXCJZZWFyQ2hhbmdlXCIpO1xuXG5cdFx0XHR0cmlnZ2VyRXZlbnQoXCJNb250aENoYW5nZVwiKTtcblx0XHR9XG5cblx0XHRidWlsZERheXMoKTtcblxuXHRcdGlmIChzZWxmLm1pbkRhdGVIYXNUaW1lICYmIHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgJiYgY29tcGFyZURhdGVzKHNlbGVjdGVkRGF0ZSwgc2VsZi5jb25maWcubWluRGF0ZSkgPT09IDApIHNldEhvdXJzRnJvbURhdGUoc2VsZi5jb25maWcubWluRGF0ZSk7XG5cblx0XHR1cGRhdGVWYWx1ZSgpO1xuXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5kYXRlSXNQaWNrZWQgPSB0cnVlO1xuXHRcdH0sIDUwKTtcblxuXHRcdGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcblx0XHRcdGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdG9uTW91c2VPdmVyKGUpO1xuXG5cdFx0XHRcdHNlbGYuX2hpZGVQcmV2TW9udGhBcnJvdyA9IHNlbGYuX2hpZGVQcmV2TW9udGhBcnJvdyB8fCBzZWxmLm1pblJhbmdlRGF0ZSA+IHNlbGYuZGF5cy5jaGlsZE5vZGVzWzBdLmRhdGVPYmo7XG5cblx0XHRcdFx0c2VsZi5faGlkZU5leHRNb250aEFycm93ID0gc2VsZi5faGlkZU5leHRNb250aEFycm93IHx8IHNlbGYubWF4UmFuZ2VEYXRlIDwgc2VsZi5kYXlzLmNoaWxkTm9kZXNbNDFdLmRhdGVPYmo7XG5cdFx0XHR9IGVsc2UgdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpO1xuXHRcdH1cblxuXHRcdGlmIChlLndoaWNoID09PSAxMyAmJiBzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBzZWxmLmhvdXJFbGVtZW50LmZvY3VzKCk7XG5cdFx0fSwgNDUxKTtcblxuXHRcdGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiICYmICFzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSBzZWxmLmNsb3NlKCk7XG5cblx0XHR0cmlnZ2VyRXZlbnQoXCJDaGFuZ2VcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXQob3B0aW9uLCB2YWx1ZSkge1xuXHRcdHNlbGYuY29uZmlnW29wdGlvbl0gPSB2YWx1ZTtcblx0XHRzZWxmLnJlZHJhdygpO1xuXHRcdGp1bXBUb0RhdGUoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldFNlbGVjdGVkRGF0ZShpbnB1dERhdGUpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dERhdGUpKSBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBpbnB1dERhdGUubWFwKHNlbGYucGFyc2VEYXRlKTtlbHNlIGlmIChpbnB1dERhdGUgaW5zdGFuY2VvZiBEYXRlIHx8ICFpc05hTihpbnB1dERhdGUpKSBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbc2VsZi5wYXJzZURhdGUoaW5wdXREYXRlKV07ZWxzZSBpZiAoaW5wdXREYXRlICYmIGlucHV0RGF0ZS5zdWJzdHJpbmcpIHtcblx0XHRcdHN3aXRjaCAoc2VsZi5jb25maWcubW9kZSkge1xuXHRcdFx0XHRjYXNlIFwic2luZ2xlXCI6XG5cdFx0XHRcdFx0c2VsZi5zZWxlY3RlZERhdGVzID0gW3NlbGYucGFyc2VEYXRlKGlucHV0RGF0ZSldO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJtdWx0aXBsZVwiOlxuXHRcdFx0XHRcdHNlbGYuc2VsZWN0ZWREYXRlcyA9IGlucHV0RGF0ZS5zcGxpdChcIjsgXCIpLm1hcChzZWxmLnBhcnNlRGF0ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcInJhbmdlXCI6XG5cdFx0XHRcdFx0c2VsZi5zZWxlY3RlZERhdGVzID0gaW5wdXREYXRlLnNwbGl0KHNlbGYubDEwbi5yYW5nZVNlcGFyYXRvcikubWFwKHNlbGYucGFyc2VEYXRlKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0c2VsZi5zZWxlY3RlZERhdGVzID0gc2VsZi5zZWxlY3RlZERhdGVzLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuXHRcdFx0cmV0dXJuIGQgaW5zdGFuY2VvZiBEYXRlICYmIGQuZ2V0VGltZSgpICYmIGlzRW5hYmxlZChkLCBmYWxzZSk7XG5cdFx0fSk7XG5cblx0XHRzZWxmLnNlbGVjdGVkRGF0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuXHRcdFx0cmV0dXJuIGEuZ2V0VGltZSgpIC0gYi5nZXRUaW1lKCk7XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXREYXRlKGRhdGUsIHRyaWdnZXJDaGFuZ2UpIHtcblx0XHRpZiAoIWRhdGUpIHJldHVybiBzZWxmLmNsZWFyKCk7XG5cblx0XHRzZXRTZWxlY3RlZERhdGUoZGF0ZSk7XG5cblx0XHRpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdHNlbGYuZGF0ZUlzUGlja2VkID0gdHJ1ZTtcblx0XHRcdHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gc2VsZi5zZWxlY3RlZERhdGVzWzBdO1xuXHRcdH0gZWxzZSBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IG51bGw7XG5cblx0XHRzZWxmLnJlZHJhdygpO1xuXHRcdGp1bXBUb0RhdGUoKTtcblxuXHRcdHNldEhvdXJzRnJvbURhdGUoKTtcblx0XHR1cGRhdGVWYWx1ZSgpO1xuXG5cdFx0aWYgKHRyaWdnZXJDaGFuZ2UgIT09IGZhbHNlKSB0cmlnZ2VyRXZlbnQoXCJDaGFuZ2VcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXR1cERhdGVzKCkge1xuXHRcdGZ1bmN0aW9uIHBhcnNlRGF0ZVJ1bGVzKGFycikge1xuXHRcdFx0Zm9yICh2YXIgaSA9IGFyci5sZW5ndGg7IGktLTspIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBhcnJbaV0gPT09IFwic3RyaW5nXCIgfHwgK2FycltpXSkgYXJyW2ldID0gc2VsZi5wYXJzZURhdGUoYXJyW2ldLCB0cnVlKTtlbHNlIGlmIChhcnJbaV0gJiYgYXJyW2ldLmZyb20gJiYgYXJyW2ldLnRvKSB7XG5cdFx0XHRcdFx0YXJyW2ldLmZyb20gPSBzZWxmLnBhcnNlRGF0ZShhcnJbaV0uZnJvbSk7XG5cdFx0XHRcdFx0YXJyW2ldLnRvID0gc2VsZi5wYXJzZURhdGUoYXJyW2ldLnRvKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuXHRcdFx0XHRyZXR1cm4geDtcblx0XHRcdH0pOyAvLyByZW1vdmUgZmFsc3kgdmFsdWVzXG5cdFx0fVxuXG5cdFx0c2VsZi5zZWxlY3RlZERhdGVzID0gW107XG5cdFx0c2VsZi5ub3cgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0aWYgKHNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoKSBzZWxmLmNvbmZpZy5kaXNhYmxlID0gcGFyc2VEYXRlUnVsZXMoc2VsZi5jb25maWcuZGlzYWJsZSk7XG5cblx0XHRpZiAoc2VsZi5jb25maWcuZW5hYmxlLmxlbmd0aCkgc2VsZi5jb25maWcuZW5hYmxlID0gcGFyc2VEYXRlUnVsZXMoc2VsZi5jb25maWcuZW5hYmxlKTtcblxuXHRcdHNldFNlbGVjdGVkRGF0ZShzZWxmLmNvbmZpZy5kZWZhdWx0RGF0ZSB8fCBzZWxmLmlucHV0LnZhbHVlKTtcblxuXHRcdHZhciBpbml0aWFsRGF0ZSA9IHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPyBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0gOiBzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0VGltZSgpID4gc2VsZi5ub3cgPyBzZWxmLmNvbmZpZy5taW5EYXRlIDogc2VsZi5jb25maWcubWF4RGF0ZSAmJiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldFRpbWUoKSA8IHNlbGYubm93ID8gc2VsZi5jb25maWcubWF4RGF0ZSA6IHNlbGYubm93O1xuXG5cdFx0c2VsZi5jdXJyZW50WWVhciA9IGluaXRpYWxEYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0c2VsZi5jdXJyZW50TW9udGggPSBpbml0aWFsRGF0ZS5nZXRNb250aCgpO1xuXG5cdFx0aWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGgpIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gc2VsZi5zZWxlY3RlZERhdGVzWzBdO1xuXG5cdFx0c2VsZi5taW5EYXRlSGFzVGltZSA9IHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgKHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKSB8fCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1pbnV0ZXMoKSB8fCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldFNlY29uZHMoKSk7XG5cblx0XHRzZWxmLm1heERhdGVIYXNUaW1lID0gc2VsZi5jb25maWcubWF4RGF0ZSAmJiAoc2VsZi5jb25maWcubWF4RGF0ZS5nZXRIb3VycygpIHx8IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TWludXRlcygpIHx8IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0U2Vjb25kcygpKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcImxhdGVzdFNlbGVjdGVkRGF0ZU9ialwiLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIHNlbGYuX3NlbGVjdGVkRGF0ZU9iaiB8fCBzZWxmLnNlbGVjdGVkRGF0ZXNbc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCAtIDFdIHx8IG51bGw7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZGF0ZSkge1xuXHRcdFx0XHRzZWxmLl9zZWxlY3RlZERhdGVPYmogPSBkYXRlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBIZWxwZXJGdW5jdGlvbnMoKSB7XG5cdFx0c2VsZi51dGlscyA9IHtcblx0XHRcdGR1cmF0aW9uOiB7XG5cdFx0XHRcdERBWTogODY0MDAwMDBcblx0XHRcdH0sXG5cdFx0XHRnZXREYXlzaW5Nb250aDogZnVuY3Rpb24gZ2V0RGF5c2luTW9udGgobW9udGgsIHlyKSB7XG5cdFx0XHRcdG1vbnRoID0gdHlwZW9mIG1vbnRoID09PSBcInVuZGVmaW5lZFwiID8gc2VsZi5jdXJyZW50TW9udGggOiBtb250aDtcblxuXHRcdFx0XHR5ciA9IHR5cGVvZiB5ciA9PT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYuY3VycmVudFllYXIgOiB5cjtcblxuXHRcdFx0XHRpZiAobW9udGggPT09IDEgJiYgKHlyICUgNCA9PT0gMCAmJiB5ciAlIDEwMCAhPT0gMCB8fCB5ciAlIDQwMCA9PT0gMCkpIHJldHVybiAyOTtcblxuXHRcdFx0XHRyZXR1cm4gc2VsZi5sMTBuLmRheXNJbk1vbnRoW21vbnRoXTtcblx0XHRcdH0sXG5cdFx0XHRtb250aFRvU3RyOiBmdW5jdGlvbiBtb250aFRvU3RyKG1vbnRoTnVtYmVyLCBzaG9ydGhhbmQpIHtcblx0XHRcdFx0c2hvcnRoYW5kID0gdHlwZW9mIHNob3J0aGFuZCA9PT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYuY29uZmlnLnNob3J0aGFuZEN1cnJlbnRNb250aCA6IHNob3J0aGFuZDtcblxuXHRcdFx0XHRyZXR1cm4gc2VsZi5sMTBuLm1vbnRoc1soc2hvcnRoYW5kID8gXCJzaG9ydFwiIDogXCJsb25nXCIpICsgXCJoYW5kXCJdW21vbnRoTnVtYmVyXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ZnVuY3Rpb24gc2V0dXBGb3JtYXRzKCkge1xuXHRcdHNlbGYuZm9ybWF0cyA9IHtcblx0XHRcdC8vIGdldCB0aGUgZGF0ZSBpbiBVVENcblx0XHRcdFo6IGZ1bmN0aW9uIFooZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gd2Vla2RheSBuYW1lLCBzaG9ydCwgZS5nLiBUaHVcblx0XHRcdEQ6IGZ1bmN0aW9uIEQoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gc2VsZi5sMTBuLndlZWtkYXlzLnNob3J0aGFuZFtzZWxmLmZvcm1hdHMudyhkYXRlKV07XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBmdWxsIG1vbnRoIG5hbWUgZS5nLiBKYW51YXJ5XG5cdFx0XHRGOiBmdW5jdGlvbiBGKGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIHNlbGYudXRpbHMubW9udGhUb1N0cihzZWxmLmZvcm1hdHMubihkYXRlKSAtIDEsIGZhbHNlKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIGhvdXJzIHdpdGggbGVhZGluZyB6ZXJvIGUuZy4gMDNcblx0XHRcdEg6IGZ1bmN0aW9uIEgoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gRmxhdHBpY2tyLnByb3RvdHlwZS5wYWQoZGF0ZS5nZXRIb3VycygpKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIGRheSAoMS0zMCkgd2l0aCBvcmRpbmFsIHN1ZmZpeCBlLmcuIDFzdCwgMm5kXG5cdFx0XHRKOiBmdW5jdGlvbiBKKGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGUuZ2V0RGF0ZSgpICsgc2VsZi5sMTBuLm9yZGluYWwoZGF0ZS5nZXREYXRlKCkpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQU0vUE1cblx0XHRcdEs6IGZ1bmN0aW9uIEsoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gZGF0ZS5nZXRIb3VycygpID4gMTEgPyBcIlBNXCIgOiBcIkFNXCI7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBzaG9ydGhhbmQgbW9udGggZS5nLiBKYW4sIFNlcCwgT2N0LCBldGNcblx0XHRcdE06IGZ1bmN0aW9uIE0oZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gc2VsZi51dGlscy5tb250aFRvU3RyKGRhdGUuZ2V0TW9udGgoKSwgdHJ1ZSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBzZWNvbmRzIDAwLTU5XG5cdFx0XHRTOiBmdW5jdGlvbiBTKGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIEZsYXRwaWNrci5wcm90b3R5cGUucGFkKGRhdGUuZ2V0U2Vjb25kcygpKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIHVuaXggdGltZXN0YW1wXG5cdFx0XHRVOiBmdW5jdGlvbiBVKGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGUuZ2V0VGltZSgpIC8gMTAwMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIGZ1bGwgeWVhciBlLmcuIDIwMTZcblx0XHRcdFk6IGZ1bmN0aW9uIFkoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gZGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMwKVxuXHRcdFx0ZDogZnVuY3Rpb24gZChkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBGbGF0cGlja3IucHJvdG90eXBlLnBhZChzZWxmLmZvcm1hdHMuaihkYXRlKSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBob3VyIGZyb20gMS0xMiAoYW0vcG0pXG5cdFx0XHRoOiBmdW5jdGlvbiBoKGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGUuZ2V0SG91cnMoKSAlIDEyID8gZGF0ZS5nZXRIb3VycygpICUgMTIgOiAxMjtcblx0XHRcdH0sXG5cblx0XHRcdC8vIG1pbnV0ZXMsIHBhZGRlZCB3aXRoIGxlYWRpbmcgemVybyBlLmcuIDA5XG5cdFx0XHRpOiBmdW5jdGlvbiBpKGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIEZsYXRwaWNrci5wcm90b3R5cGUucGFkKGRhdGUuZ2V0TWludXRlcygpKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIGRheSBpbiBtb250aCAoMS0zMClcblx0XHRcdGo6IGZ1bmN0aW9uIGooZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gZGF0ZS5nZXREYXRlKCk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyB3ZWVrZGF5IG5hbWUsIGZ1bGwsIGUuZy4gVGh1cnNkYXlcblx0XHRcdGw6IGZ1bmN0aW9uIGwoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gc2VsZi5sMTBuLndlZWtkYXlzLmxvbmdoYW5kW3NlbGYuZm9ybWF0cy53KGRhdGUpXTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIHBhZGRlZCBtb250aCBudW1iZXIgKDAxLTEyKVxuXHRcdFx0bTogZnVuY3Rpb24gbShkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBGbGF0cGlja3IucHJvdG90eXBlLnBhZChzZWxmLmZvcm1hdHMubihkYXRlKSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyB0aGUgbW9udGggbnVtYmVyICgxLTEyKVxuXHRcdFx0bjogZnVuY3Rpb24gbihkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBkYXRlLmdldE1vbnRoKCkgKyAxO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gc2Vjb25kcyAwLTU5XG5cdFx0XHRzOiBmdW5jdGlvbiBzKGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gbnVtYmVyIG9mIHRoZSBkYXkgb2YgdGhlIHdlZWtcblx0XHRcdHc6IGZ1bmN0aW9uIHcoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gZGF0ZS5nZXREYXkoKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIGxhc3QgdHdvIGRpZ2l0cyBvZiB5ZWFyIGUuZy4gMTYgZm9yIDIwMTZcblx0XHRcdHk6IGZ1bmN0aW9uIHkoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gU3RyaW5nKHNlbGYuZm9ybWF0cy5ZKGRhdGUpKS5zdWJzdHJpbmcoMik7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwSW5wdXRzKCkge1xuXHRcdHNlbGYuaW5wdXQgPSBzZWxmLmNvbmZpZy53cmFwID8gc2VsZi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1pbnB1dF1cIikgOiBzZWxmLmVsZW1lbnQ7XG5cblx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdGlmICghc2VsZi5pbnB1dCkgcmV0dXJuIGNvbnNvbGUud2FybihcIkVycm9yOiBpbnZhbGlkIGlucHV0IGVsZW1lbnQgc3BlY2lmaWVkXCIsIHNlbGYuaW5wdXQpO1xuXG5cdFx0c2VsZi5pbnB1dC5fdHlwZSA9IHNlbGYuaW5wdXQudHlwZTtcblx0XHRzZWxmLmlucHV0LnR5cGUgPSBcInRleHRcIjtcblx0XHRzZWxmLmlucHV0LmNsYXNzTGlzdC5hZGQoXCJmbGF0cGlja3ItaW5wdXRcIik7XG5cblx0XHRpZiAoc2VsZi5jb25maWcuYWx0SW5wdXQpIHtcblx0XHRcdC8vIHJlcGxpY2F0ZSBzZWxmLmVsZW1lbnRcblx0XHRcdHNlbGYuYWx0SW5wdXQgPSBjcmVhdGVFbGVtZW50KHNlbGYuaW5wdXQubm9kZU5hbWUsIHNlbGYuaW5wdXQuY2xhc3NOYW1lICsgXCIgXCIgKyBzZWxmLmNvbmZpZy5hbHRJbnB1dENsYXNzKTtcblx0XHRcdHNlbGYuYWx0SW5wdXQucGxhY2Vob2xkZXIgPSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyO1xuXHRcdFx0c2VsZi5hbHRJbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG5cblx0XHRcdHNlbGYuaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG5cdFx0XHRpZiAoc2VsZi5pbnB1dC5wYXJlbnROb2RlKSBzZWxmLmlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYuYWx0SW5wdXQsIHNlbGYuaW5wdXQubmV4dFNpYmxpbmcpO1xuXHRcdH1cblxuXHRcdGlmICghc2VsZi5jb25maWcuYWxsb3dJbnB1dCkgKHNlbGYuYWx0SW5wdXQgfHwgc2VsZi5pbnB1dCkuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwgXCJyZWFkb25seVwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTW9iaWxlKCkge1xuXHRcdHZhciBpbnB1dFR5cGUgPSBzZWxmLmNvbmZpZy5lbmFibGVUaW1lID8gc2VsZi5jb25maWcubm9DYWxlbmRhciA/IFwidGltZVwiIDogXCJkYXRldGltZS1sb2NhbFwiIDogXCJkYXRlXCI7XG5cblx0XHRzZWxmLm1vYmlsZUlucHV0ID0gY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHNlbGYuaW5wdXQuY2xhc3NOYW1lICsgXCIgZmxhdHBpY2tyLW1vYmlsZVwiKTtcblx0XHRzZWxmLm1vYmlsZUlucHV0LnN0ZXAgPSBcImFueVwiO1xuXHRcdHNlbGYubW9iaWxlSW5wdXQudGFiSW5kZXggPSAxO1xuXHRcdHNlbGYubW9iaWxlSW5wdXQudHlwZSA9IGlucHV0VHlwZTtcblx0XHRzZWxmLm1vYmlsZUlucHV0LmRpc2FibGVkID0gc2VsZi5pbnB1dC5kaXNhYmxlZDtcblx0XHRzZWxmLm1vYmlsZUlucHV0LnBsYWNlaG9sZGVyID0gc2VsZi5pbnB1dC5wbGFjZWhvbGRlcjtcblxuXHRcdHNlbGYubW9iaWxlRm9ybWF0U3RyID0gaW5wdXRUeXBlID09PSBcImRhdGV0aW1lLWxvY2FsXCIgPyBcIlktbS1kXFxcXFRIOmk6U1wiIDogaW5wdXRUeXBlID09PSBcImRhdGVcIiA/IFwiWS1tLWRcIiA6IFwiSDppOlNcIjtcblxuXHRcdGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XG5cdFx0XHRzZWxmLm1vYmlsZUlucHV0LmRlZmF1bHRWYWx1ZSA9IHNlbGYubW9iaWxlSW5wdXQudmFsdWUgPSBmb3JtYXREYXRlKHNlbGYubW9iaWxlRm9ybWF0U3RyLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0pO1xuXHRcdH1cblxuXHRcdGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKSBzZWxmLm1vYmlsZUlucHV0Lm1pbiA9IGZvcm1hdERhdGUoXCJZLW0tZFwiLCBzZWxmLmNvbmZpZy5taW5EYXRlKTtcblxuXHRcdGlmIChzZWxmLmNvbmZpZy5tYXhEYXRlKSBzZWxmLm1vYmlsZUlucHV0Lm1heCA9IGZvcm1hdERhdGUoXCJZLW0tZFwiLCBzZWxmLmNvbmZpZy5tYXhEYXRlKTtcblxuXHRcdHNlbGYuaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG5cdFx0aWYgKHNlbGYuY29uZmlnLmFsdElucHV0KSBzZWxmLmFsdElucHV0LnR5cGUgPSBcImhpZGRlblwiO1xuXG5cdFx0dHJ5IHtcblx0XHRcdHNlbGYuaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5tb2JpbGVJbnB1dCwgc2VsZi5pbnB1dC5uZXh0U2libGluZyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly9cblx0XHR9XG5cblx0XHRzZWxmLm1vYmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcblx0XHRcdHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gc2VsZi5wYXJzZURhdGUoZS50YXJnZXQudmFsdWUpO1xuXHRcdFx0c2VsZi5zZXREYXRlKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqKTtcblx0XHRcdHRyaWdnZXJFdmVudChcIkNoYW5nZVwiKTtcblx0XHRcdHRyaWdnZXJFdmVudChcIkNsb3NlXCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gdG9nZ2xlKCkge1xuXHRcdGlmIChzZWxmLmlzT3Blbikgc2VsZi5jbG9zZSgpO2Vsc2Ugc2VsZi5vcGVuKCk7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoZXZlbnQsIGRhdGEpIHtcblx0XHR2YXIgaG9va3MgPSBzZWxmLmNvbmZpZ1tcIm9uXCIgKyBldmVudF07XG5cblx0XHRpZiAoaG9va3MpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aG9va3NbaV0oc2VsZi5zZWxlY3RlZERhdGVzLCBzZWxmLmlucHV0LnZhbHVlLCBzZWxmLCBkYXRhKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZXZlbnQgPT09IFwiQ2hhbmdlXCIpIHtcblx0XHRcdGlmICh0eXBlb2YgRXZlbnQgPT09IFwiZnVuY3Rpb25cIiAmJiBFdmVudC5jb25zdHJ1Y3Rvcikge1xuXHRcdFx0XHRzZWxmLmlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiY2hhbmdlXCIsIHsgXCJidWJibGVzXCI6IHRydWUgfSkpO1xuXG5cdFx0XHRcdC8vIG1hbnkgZnJvbnQtZW5kIGZyYW1ld29ya3MgYmluZCB0byB0aGUgaW5wdXQgZXZlbnRcblx0XHRcdFx0c2VsZi5pbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHsgXCJidWJibGVzXCI6IHRydWUgfSkpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gc2VsZi5pbnB1dC5kaXNwYXRjaEV2ZW50KHNlbGYuY2hhbmdlRXZlbnQpO1xuXG5cdFx0XHRcdFx0c2VsZi5pbnB1dC5maXJlRXZlbnQoXCJvbmNoYW5nZVwiKTtcblx0XHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGlzRGF0ZVNlbGVjdGVkKGRhdGUpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKGNvbXBhcmVEYXRlcyhzZWxmLnNlbGVjdGVkRGF0ZXNbaV0sIGRhdGUpID09PSAwKSByZXR1cm4gXCJcIiArIGk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNEYXRlSW5SYW5nZShkYXRlKSB7XG5cdFx0aWYgKHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIiB8fCBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIDwgMikgcmV0dXJuIGZhbHNlO1xuXHRcdHJldHVybiBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdKSA+PSAwICYmIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMV0pIDw9IDA7XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCkge1xuXHRcdGlmIChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyIHx8IHNlbGYuaXNNb2JpbGUgfHwgIXNlbGYubW9udGhOYXYpIHJldHVybjtcblxuXHRcdHNlbGYuY3VycmVudE1vbnRoRWxlbWVudC50ZXh0Q29udGVudCA9IHNlbGYudXRpbHMubW9udGhUb1N0cihzZWxmLmN1cnJlbnRNb250aCkgKyBcIiBcIjtcblx0XHRzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC52YWx1ZSA9IHNlbGYuY3VycmVudFllYXI7XG5cblx0XHRzZWxmLl9oaWRlUHJldk1vbnRoQXJyb3cgPSBzZWxmLmNvbmZpZy5taW5EYXRlICYmIChzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkgPyBzZWxmLmN1cnJlbnRNb250aCA8PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1vbnRoKCkgOiBzZWxmLmN1cnJlbnRZZWFyIDwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpKTtcblxuXHRcdHNlbGYuX2hpZGVOZXh0TW9udGhBcnJvdyA9IHNlbGYuY29uZmlnLm1heERhdGUgJiYgKHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSA/IHNlbGYuY3VycmVudE1vbnRoICsgMSA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSA6IHNlbGYuY3VycmVudFllYXIgPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVmFsdWUoKSB7XG5cdFx0aWYgKCFzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSByZXR1cm4gc2VsZi5jbGVhcigpO1xuXG5cdFx0aWYgKHNlbGYuaXNNb2JpbGUpIHtcblx0XHRcdHNlbGYubW9iaWxlSW5wdXQudmFsdWUgPSBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID8gZm9ybWF0RGF0ZShzZWxmLm1vYmlsZUZvcm1hdFN0ciwgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmopIDogXCJcIjtcblx0XHR9XG5cblx0XHR2YXIgam9pbkNoYXIgPSBzZWxmLmNvbmZpZy5tb2RlICE9PSBcInJhbmdlXCIgPyBcIjsgXCIgOiBzZWxmLmwxMG4ucmFuZ2VTZXBhcmF0b3I7XG5cblx0XHRzZWxmLmlucHV0LnZhbHVlID0gc2VsZi5zZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZE9iaikge1xuXHRcdFx0cmV0dXJuIGZvcm1hdERhdGUoc2VsZi5jb25maWcuZGF0ZUZvcm1hdCwgZE9iaik7XG5cdFx0fSkuam9pbihqb2luQ2hhcik7XG5cblx0XHRpZiAoc2VsZi5jb25maWcuYWx0SW5wdXQpIHtcblx0XHRcdHNlbGYuYWx0SW5wdXQudmFsdWUgPSBzZWxmLnNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uIChkT2JqKSB7XG5cdFx0XHRcdHJldHVybiBmb3JtYXREYXRlKHNlbGYuY29uZmlnLmFsdEZvcm1hdCwgZE9iaik7XG5cdFx0XHR9KS5qb2luKGpvaW5DaGFyKTtcblx0XHR9XG5cblx0XHR0cmlnZ2VyRXZlbnQoXCJWYWx1ZVVwZGF0ZVwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHllYXJTY3JvbGwoZSkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHZhciBkZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCBlLndoZWVsRGVsdGEgfHwgLWUuZGVsdGFZKSksXG5cdFx0ICAgIG5ld1llYXIgPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApICsgZGVsdGE7XG5cblx0XHRjaGFuZ2VZZWFyKG5ld1llYXIpO1xuXHRcdGUudGFyZ2V0LnZhbHVlID0gc2VsZi5jdXJyZW50WWVhcjtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc05hbWUsIGNvbnRlbnQpIHtcblx0XHR2YXIgZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG5cdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8IFwiXCI7XG5cdFx0Y29udGVudCA9IGNvbnRlbnQgfHwgXCJcIjtcblxuXHRcdGUuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuXG5cdFx0aWYgKGNvbnRlbnQpIGUudGV4dENvbnRlbnQgPSBjb250ZW50O1xuXG5cdFx0cmV0dXJuIGU7XG5cdH1cblxuXHRmdW5jdGlvbiBhcnJheWlmeShvYmopIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShvYmopKSByZXR1cm4gb2JqO1xuXHRcdHJldHVybiBbb2JqXTtcblx0fVxuXG5cdGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW0sIGNsYXNzTmFtZSwgYm9vbCkge1xuXHRcdGlmIChib29sKSByZXR1cm4gZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG5cdFx0ZWxlbS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG5cdH1cblxuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcblx0XHR2YXIgdGltZW91dCA9IHZvaWQgMDtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdFx0Zm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0XHRcdFx0YXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNvbnRleHQgPSB0aGlzO1xuXHRcdFx0dmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG5cdFx0XHRcdHRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHRpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0XHRcdH07XG5cblx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHRcdHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcblx0XHRcdGlmIChpbW1lZGlhdGUgJiYgIXRpbWVvdXQpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyhkYXRlMSwgZGF0ZTIsIHRpbWVsZXNzKSB7XG5cdFx0aWYgKCEoZGF0ZTEgaW5zdGFuY2VvZiBEYXRlKSB8fCAhKGRhdGUyIGluc3RhbmNlb2YgRGF0ZSkpIHJldHVybiBmYWxzZTtcblxuXHRcdGlmICh0aW1lbGVzcyAhPT0gZmFsc2UpIHtcblx0XHRcdHJldHVybiBuZXcgRGF0ZShkYXRlMS5nZXRUaW1lKCkpLnNldEhvdXJzKDAsIDAsIDAsIDApIC0gbmV3IERhdGUoZGF0ZTIuZ2V0VGltZSgpKS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0ZTEuZ2V0VGltZSgpIC0gZGF0ZTIuZ2V0VGltZSgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdGltZVdyYXBwZXIoZSkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHZhciBpc0tleURvd24gPSBlLnR5cGUgPT09IFwia2V5ZG93blwiLFxuXHRcdCAgICBpc1doZWVsID0gZS50eXBlID09PSBcIndoZWVsXCI7XG5cblx0XHRpZiAoZS50eXBlICE9PSBcImlucHV0XCIgJiYgIWlzS2V5RG93biAmJiAoZS50YXJnZXQudmFsdWUgfHwgZS50YXJnZXQudGV4dENvbnRlbnQpLmxlbmd0aCA+PSAyIC8vIHR5cGVkIHR3byBkaWdpdHNcblx0XHQpIHtcblx0XHRcdFx0ZS50YXJnZXQuZm9jdXMoKTtcblx0XHRcdFx0ZS50YXJnZXQuYmx1cigpO1xuXHRcdFx0fVxuXG5cdFx0aWYgKHNlbGYuYW1QTSAmJiBlLnRhcmdldCA9PT0gc2VsZi5hbVBNKSByZXR1cm4gZS50YXJnZXQudGV4dENvbnRlbnQgPSBbXCJBTVwiLCBcIlBNXCJdW2UudGFyZ2V0LnRleHRDb250ZW50ID09PSBcIkFNXCIgfCAwXTtcblxuXHRcdHZhciBtaW4gPSBOdW1iZXIoZS50YXJnZXQubWluKSxcblx0XHQgICAgbWF4ID0gTnVtYmVyKGUudGFyZ2V0Lm1heCksXG5cdFx0ICAgIHN0ZXAgPSBOdW1iZXIoZS50YXJnZXQuc3RlcCksXG5cdFx0ICAgIGN1clZhbHVlID0gcGFyc2VJbnQoZS50YXJnZXQudmFsdWUsIDEwKSxcblx0XHQgICAgZGVsdGEgPSAhaXNLZXlEb3duID8gTWF0aC5tYXgoLTEsIE1hdGgubWluKDEsIGUud2hlZWxEZWx0YSB8fCAtZS5kZWx0YVkpKSB8fCAwIDogZS53aGljaCA9PT0gMzggPyAxIDogLTE7XG5cblx0XHR2YXIgbmV3VmFsdWUgPSBjdXJWYWx1ZSArIChpc1doZWVsIHx8IGlzS2V5RG93bikgKiBzdGVwICogZGVsdGE7XG5cblx0XHRpZiAoZS50YXJnZXQudmFsdWUubGVuZ3RoID09PSAyKSB7XG5cdFx0XHR2YXIgaXNIb3VyRWxlbSA9IGUudGFyZ2V0ID09PSBzZWxmLmhvdXJFbGVtZW50O1xuXG5cdFx0XHRpZiAobmV3VmFsdWUgPCBtaW4pIHtcblx0XHRcdFx0bmV3VmFsdWUgPSBtYXggKyBuZXdWYWx1ZSArICFpc0hvdXJFbGVtICsgKGlzSG91ckVsZW0gJiYgIXNlbGYuYW1QTSk7XG5cdFx0XHR9IGVsc2UgaWYgKG5ld1ZhbHVlID4gbWF4KSB7XG5cdFx0XHRcdG5ld1ZhbHVlID0gZS50YXJnZXQgPT09IHNlbGYuaG91ckVsZW1lbnQgPyBuZXdWYWx1ZSAtIG1heCAtICFzZWxmLmFtUE0gOiBtaW47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzZWxmLmFtUE0gJiYgaXNIb3VyRWxlbSAmJiAoc3RlcCA9PT0gMSA/IG5ld1ZhbHVlICsgY3VyVmFsdWUgPT09IDIzIDogTWF0aC5hYnMobmV3VmFsdWUgLSBjdXJWYWx1ZSkgPiBzdGVwKSkgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5hbVBNLnRleHRDb250ZW50ID09PSBcIlBNXCIgPyBcIkFNXCIgOiBcIlBNXCI7XG5cblx0XHRcdGUudGFyZ2V0LnZhbHVlID0gc2VsZi5wYWQobmV3VmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdGluaXQoKTtcblx0cmV0dXJuIHNlbGY7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5GbGF0cGlja3IuZGVmYXVsdENvbmZpZyA9IHtcblxuXHRtb2RlOiBcInNpbmdsZVwiLFxuXG5cdC8qIGlmIHRydWUsIGRhdGVzIHdpbGwgYmUgcGFyc2VkLCBmb3JtYXR0ZWQsIGFuZCBkaXNwbGF5ZWQgaW4gVVRDLlxuIHByZWxvYWRpbmcgZGF0ZSBzdHJpbmdzIHcvIHRpbWV6b25lcyBpcyByZWNvbW1lbmRlZCBidXQgbm90IG5lY2Vzc2FyeSAqL1xuXHR1dGM6IGZhbHNlLFxuXG5cdC8vIHdyYXA6IHNlZSBodHRwczovL2NobWxuLmdpdGh1Yi5pby9mbGF0cGlja3IvI3N0cmFwXG5cdHdyYXA6IGZhbHNlLFxuXG5cdC8vIGVuYWJsZXMgd2VlayBudW1iZXJzXG5cdHdlZWtOdW1iZXJzOiBmYWxzZSxcblxuXHQvLyBhbGxvdyBtYW51YWwgZGF0ZXRpbWUgaW5wdXRcblx0YWxsb3dJbnB1dDogZmFsc2UsXG5cblx0LypcbiBcdGNsaWNraW5nIG9uIGlucHV0IG9wZW5zIHRoZSBkYXRlKHRpbWUpcGlja2VyLlxuIFx0ZGlzYWJsZSBpZiB5b3Ugd2lzaCB0byBvcGVuIHRoZSBjYWxlbmRhciBtYW51YWxseSB3aXRoIC5vcGVuKClcbiAqL1xuXHRjbGlja09wZW5zOiB0cnVlLFxuXG5cdC8vIGRpc3BsYXkgdGltZSBwaWNrZXIgaW4gMjQgaG91ciBtb2RlXG5cdHRpbWVfMjRocjogZmFsc2UsXG5cblx0Ly8gZW5hYmxlcyB0aGUgdGltZSBwaWNrZXIgZnVuY3Rpb25hbGl0eVxuXHRlbmFibGVUaW1lOiBmYWxzZSxcblxuXHQvLyBub0NhbGVuZGFyOiB0cnVlIHdpbGwgaGlkZSB0aGUgY2FsZW5kYXIuIHVzZSBmb3IgYSB0aW1lIHBpY2tlciBhbG9uZyB3LyBlbmFibGVUaW1lXG5cdG5vQ2FsZW5kYXI6IGZhbHNlLFxuXG5cdC8vIG1vcmUgZGF0ZSBmb3JtYXQgY2hhcnMgYXQgaHR0cHM6Ly9jaG1sbi5naXRodWIuaW8vZmxhdHBpY2tyLyNkYXRlZm9ybWF0XG5cdGRhdGVGb3JtYXQ6IFwiWS1tLWRcIixcblxuXHQvLyBhbHRJbnB1dCAtIHNlZSBodHRwczovL2NobWxuLmdpdGh1Yi5pby9mbGF0cGlja3IvI2FsdGlucHV0XG5cdGFsdElucHV0OiBmYWxzZSxcblxuXHQvLyB0aGUgY3JlYXRlZCBhbHRJbnB1dCBlbGVtZW50IHdpbGwgaGF2ZSB0aGlzIGNsYXNzLlxuXHRhbHRJbnB1dENsYXNzOiBcImZsYXRwaWNrci1pbnB1dCBmb3JtLWNvbnRyb2wgaW5wdXRcIixcblxuXHQvLyBzYW1lIGFzIGRhdGVGb3JtYXQsIGJ1dCBmb3IgYWx0SW5wdXRcblx0YWx0Rm9ybWF0OiBcIkYgaiwgWVwiLCAvLyBkZWZhdWx0cyB0byBlLmcuIEp1bmUgMTAsIDIwMTZcblxuXHQvLyBkZWZhdWx0RGF0ZSAtIGVpdGhlciBhIGRhdGVzdHJpbmcgb3IgYSBkYXRlIG9iamVjdC4gdXNlZCBmb3IgZGF0ZXRpbWVwaWNrZXJcInMgaW5pdGlhbCB2YWx1ZVxuXHRkZWZhdWx0RGF0ZTogbnVsbCxcblxuXHQvLyB0aGUgbWluaW11bSBkYXRlIHRoYXQgdXNlciBjYW4gcGljayAoaW5jbHVzaXZlKVxuXHRtaW5EYXRlOiBudWxsLFxuXG5cdC8vIHRoZSBtYXhpbXVtIGRhdGUgdGhhdCB1c2VyIGNhbiBwaWNrIChpbmNsdXNpdmUpXG5cdG1heERhdGU6IG51bGwsXG5cblx0Ly8gZGF0ZXBhcnNlciB0aGF0IHRyYW5zZm9ybXMgYSBnaXZlbiBzdHJpbmcgdG8gYSBkYXRlIG9iamVjdFxuXHRwYXJzZURhdGU6IG51bGwsXG5cblx0Ly8gZGF0ZWZvcm1hdHRlciB0aGF0IHRyYW5zZm9ybXMgYSBnaXZlbiBkYXRlIG9iamVjdCB0byBhIHN0cmluZywgYWNjb3JkaW5nIHRvIHBhc3NlZCBmb3JtYXRcblx0Zm9ybWF0RGF0ZTogbnVsbCxcblxuXHRnZXRXZWVrOiBmdW5jdGlvbiBnZXRXZWVrKGdpdmVuRGF0ZSkge1xuXHRcdHZhciBkYXRlID0gbmV3IERhdGUoZ2l2ZW5EYXRlLmdldFRpbWUoKSk7XG5cdFx0ZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuXHRcdC8vIFRodXJzZGF5IGluIGN1cnJlbnQgd2VlayBkZWNpZGVzIHRoZSB5ZWFyLlxuXHRcdGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDMgLSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNyk7XG5cdFx0Ly8gSmFudWFyeSA0IGlzIGFsd2F5cyBpbiB3ZWVrIDEuXG5cdFx0dmFyIHdlZWsxID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCA0KTtcblx0XHQvLyBBZGp1c3QgdG8gVGh1cnNkYXkgaW4gd2VlayAxIGFuZCBjb3VudCBudW1iZXIgb2Ygd2Vla3MgZnJvbSBkYXRlIHRvIHdlZWsxLlxuXHRcdHJldHVybiAxICsgTWF0aC5yb3VuZCgoKGRhdGUuZ2V0VGltZSgpIC0gd2VlazEuZ2V0VGltZSgpKSAvIDg2NDAwMDAwIC0gMyArICh3ZWVrMS5nZXREYXkoKSArIDYpICUgNykgLyA3KTtcblx0fSxcblxuXHQvLyBzZWUgaHR0cHM6Ly9jaG1sbi5naXRodWIuaW8vZmxhdHBpY2tyLyNkaXNhYmxlXG5cdGVuYWJsZTogW10sXG5cblx0Ly8gc2VlIGh0dHBzOi8vY2htbG4uZ2l0aHViLmlvL2ZsYXRwaWNrci8jZGlzYWJsZVxuXHRkaXNhYmxlOiBbXSxcblxuXHQvLyBkaXNwbGF5IHRoZSBzaG9ydCB2ZXJzaW9uIG9mIG1vbnRoIG5hbWVzIC0gZS5nLiBTZXAgaW5zdGVhZCBvZiBTZXB0ZW1iZXJcblx0c2hvcnRoYW5kQ3VycmVudE1vbnRoOiBmYWxzZSxcblxuXHQvLyBkaXNwbGF5cyBjYWxlbmRhciBpbmxpbmUuIHNlZSBodHRwczovL2NobWxuLmdpdGh1Yi5pby9mbGF0cGlja3IvI2lubGluZS1jYWxlbmRhclxuXHRpbmxpbmU6IGZhbHNlLFxuXG5cdC8vIHBvc2l0aW9uIGNhbGVuZGFyIGluc2lkZSB3cmFwcGVyIGFuZCBuZXh0IHRvIHRoZSBpbnB1dCBlbGVtZW50XG5cdC8vIGxlYXZlIGF0IGZhbHNlIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdVwicmUgZG9pbmdcblx0c3RhdGljOiBmYWxzZSxcblxuXHQvLyBET00gbm9kZSB0byBhcHBlbmQgdGhlIGNhbGVuZGFyIHRvIGluICpzdGF0aWMqIG1vZGVcblx0YXBwZW5kVG86IG51bGwsXG5cblx0Ly8gY29kZSBmb3IgcHJldmlvdXMvbmV4dCBpY29ucy4gdGhpcyBpcyB3aGVyZSB5b3UgcHV0IHlvdXIgY3VzdG9tIGljb24gY29kZSBlLmcuIGZvbnRhd2Vzb21lXG5cdHByZXZBcnJvdzogXCI8c3ZnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgdmlld0JveD0nMCAwIDE3IDE3Jz48Zz48L2c+PHBhdGggZD0nTTUuMjA3IDguNDcxbDcuMTQ2IDcuMTQ3LTAuNzA3IDAuNzA3LTcuODUzLTcuODU0IDcuODU0LTcuODUzIDAuNzA3IDAuNzA3LTcuMTQ3IDcuMTQ2eicgLz48L3N2Zz5cIixcblx0bmV4dEFycm93OiBcIjxzdmcgdmVyc2lvbj0nMS4xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB2aWV3Qm94PScwIDAgMTcgMTcnPjxnPjwvZz48cGF0aCBkPSdNMTMuMjA3IDguNDcybC03Ljg1NCA3Ljg1NC0wLjcwNy0wLjcwNyA3LjE0Ni03LjE0Ni03LjE0Ni03LjE0OCAwLjcwNy0wLjcwNyA3Ljg1NCA3Ljg1NHonIC8+PC9zdmc+XCIsXG5cblx0Ly8gZW5hYmxlcyBzZWNvbmRzIGluIHRoZSB0aW1lIHBpY2tlclxuXHRlbmFibGVTZWNvbmRzOiBmYWxzZSxcblxuXHQvLyBzdGVwIHNpemUgdXNlZCB3aGVuIHNjcm9sbGluZy9pbmNyZW1lbnRpbmcgdGhlIGhvdXIgZWxlbWVudFxuXHRob3VySW5jcmVtZW50OiAxLFxuXG5cdC8vIHN0ZXAgc2l6ZSB1c2VkIHdoZW4gc2Nyb2xsaW5nL2luY3JlbWVudGluZyB0aGUgbWludXRlIGVsZW1lbnRcblx0bWludXRlSW5jcmVtZW50OiA1LFxuXG5cdC8vIGluaXRpYWwgdmFsdWUgaW4gdGhlIGhvdXIgZWxlbWVudFxuXHRkZWZhdWx0SG91cjogMTIsXG5cblx0Ly8gaW5pdGlhbCB2YWx1ZSBpbiB0aGUgbWludXRlIGVsZW1lbnRcblx0ZGVmYXVsdE1pbnV0ZTogMCxcblxuXHQvLyBkaXNhYmxlIG5hdGl2ZSBtb2JpbGUgZGF0ZXRpbWUgaW5wdXQgc3VwcG9ydFxuXHRkaXNhYmxlTW9iaWxlOiBmYWxzZSxcblxuXHQvLyBkZWZhdWx0IGxvY2FsZVxuXHRsb2NhbGU6IFwiZGVmYXVsdFwiLFxuXG5cdHBsdWdpbnM6IFtdLFxuXG5cdC8vIG9uQ2hhbmdlIGNhbGxiYWNrIHdoZW4gdXNlciBzZWxlY3RzIGEgZGF0ZSBvciB0aW1lXG5cdG9uQ2hhbmdlOiBbXSwgLy8gZnVuY3Rpb24gKGRhdGVPYmosIGRhdGVTdHIpIHt9XG5cblx0Ly8gY2FsbGVkIGV2ZXJ5IHRpbWUgY2FsZW5kYXIgaXMgb3BlbmVkXG5cdG9uT3BlbjogW10sIC8vIGZ1bmN0aW9uIChkYXRlT2JqLCBkYXRlU3RyKSB7fVxuXG5cdC8vIGNhbGxlZCBldmVyeSB0aW1lIGNhbGVuZGFyIGlzIGNsb3NlZFxuXHRvbkNsb3NlOiBbXSwgLy8gZnVuY3Rpb24gKGRhdGVPYmosIGRhdGVTdHIpIHt9XG5cblx0Ly8gY2FsbGVkIGFmdGVyIGNhbGVuZGFyIGlzIHJlYWR5XG5cdG9uUmVhZHk6IFtdLCAvLyBmdW5jdGlvbiAoZGF0ZU9iaiwgZGF0ZVN0cikge31cblxuXHRvblZhbHVlVXBkYXRlOiBbXSxcblxuXHRvbkRheUNyZWF0ZTogW10sXG5cblx0b25Nb250aENoYW5nZTogW10sXG5cblx0b25ZZWFyQ2hhbmdlOiBbXVxufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbkZsYXRwaWNrci5sMTBucyA9IHtcblx0ZW46IHtcblx0XHR3ZWVrZGF5czoge1xuXHRcdFx0c2hvcnRoYW5kOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG5cdFx0XHRsb25naGFuZDogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl1cblx0XHR9LFxuXHRcdG1vbnRoczoge1xuXHRcdFx0c2hvcnRoYW5kOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl0sXG5cdFx0XHRsb25naGFuZDogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl1cblx0XHR9LFxuXHRcdGRheXNJbk1vbnRoOiBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0sXG5cdFx0Zmlyc3REYXlPZldlZWs6IDAsXG5cdFx0b3JkaW5hbDogZnVuY3Rpb24gb3JkaW5hbChudGgpIHtcblx0XHRcdHZhciBzID0gbnRoICUgMTAwO1xuXHRcdFx0aWYgKHMgPiAzICYmIHMgPCAyMSkgcmV0dXJuIFwidGhcIjtcblx0XHRcdHN3aXRjaCAocyAlIDEwKSB7XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRyZXR1cm4gXCJzdFwiO1xuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0cmV0dXJuIFwibmRcIjtcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdHJldHVybiBcInJkXCI7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIFwidGhcIjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJhbmdlU2VwYXJhdG9yOiBcIiB0byBcIixcblx0XHR3ZWVrQWJicmV2aWF0aW9uOiBcIldrXCIsXG5cdFx0c2Nyb2xsVGl0bGU6IFwiU2Nyb2xsIHRvIGluY3JlbWVudFwiLFxuXHRcdHRvZ2dsZVRpdGxlOiBcIkNsaWNrIHRvIHRvZ2dsZVwiXG5cdH1cbn07XG5cbkZsYXRwaWNrci5sMTBucy5kZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZShGbGF0cGlja3IubDEwbnMuZW4pO1xuRmxhdHBpY2tyLmxvY2FsaXplID0gZnVuY3Rpb24gKGwxMG4pIHtcblx0cmV0dXJuIF9leHRlbmRzKEZsYXRwaWNrci5sMTBucy5kZWZhdWx0LCBsMTBuIHx8IHt9KTtcbn07XG5GbGF0cGlja3Iuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdHJldHVybiBfZXh0ZW5kcyhGbGF0cGlja3IuZGVmYXVsdENvbmZpZywgY29uZmlnIHx8IHt9KTtcbn07XG5cbkZsYXRwaWNrci5wcm90b3R5cGUgPSB7XG5cdHBhZDogZnVuY3Rpb24gcGFkKG51bWJlcikge1xuXHRcdHJldHVybiAoXCIwXCIgKyBudW1iZXIpLnNsaWNlKC0yKTtcblx0fSxcblx0cGFyc2VEYXRlOiBmdW5jdGlvbiBwYXJzZURhdGUoZGF0ZSwgdGltZWxlc3MpIHtcblx0XHRpZiAoIWRhdGUpIHJldHVybiBudWxsO1xuXG5cdFx0dmFyIGRhdGVUaW1lUmVnZXggPSAvKFxcZCspL2csXG5cdFx0ICAgIHRpbWVSZWdleCA9IC9eKFxcZHsxLDJ9KVs6XFxzXShcXGRcXGQpP1s6XFxzXT8oXFxkXFxkKT9cXHM/KGF8cHxBfFApPy9pLFxuXHRcdCAgICB0aW1lc3RhbXAgPSAvXihcXGQrKSQvZyxcblx0XHQgICAgZGF0ZV9vcmlnID0gZGF0ZTtcblxuXHRcdGlmIChkYXRlLnRvRml4ZWQgfHwgdGltZXN0YW1wLnRlc3QoZGF0ZSkpIC8vIHRpbWVzdGFtcFxuXHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO2Vsc2UgaWYgKHR5cGVvZiBkYXRlID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRkYXRlID0gZGF0ZS50cmltKCk7XG5cblx0XHRcdGlmIChkYXRlID09PSBcInRvZGF5XCIpIHtcblx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdHRpbWVsZXNzID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcucGFyc2VEYXRlKSBkYXRlID0gdGhpcy5jb25maWcucGFyc2VEYXRlKGRhdGUpO2Vsc2UgaWYgKHRpbWVSZWdleC50ZXN0KGRhdGUpKSB7XG5cdFx0XHRcdC8vIHRpbWUgcGlja2VyXG5cdFx0XHRcdHZhciBtID0gZGF0ZS5tYXRjaCh0aW1lUmVnZXgpLFxuXHRcdFx0XHQgICAgaG91cnMgPSAhbVs0XSA/IG1bMV0gLy8gbWlsaXRhcnkgdGltZSwgbm8gY29udmVyc2lvbiBuZWVkZWRcblx0XHRcdFx0OiBtWzFdICUgMTIgKyAobVs0XS50b0xvd2VyQ2FzZSgpID09PSBcInBcIiA/IDEyIDogMCk7IC8vIGFtL3BtXG5cblx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdGRhdGUuc2V0SG91cnMoaG91cnMsIG1bMl0gfHwgMCwgbVszXSB8fCAwKTtcblx0XHRcdH0gZWxzZSBpZiAoL1okLy50ZXN0KGRhdGUpIHx8IC9HTVQkLy50ZXN0KGRhdGUpKSAvLyBkYXRlc3RyaW5ncyB3LyB0aW1lem9uZVxuXHRcdFx0XHRkYXRlID0gbmV3IERhdGUoZGF0ZSk7ZWxzZSBpZiAoZGF0ZVRpbWVSZWdleC50ZXN0KGRhdGUpICYmIC9eWzAtOV0vLnRlc3QoZGF0ZSkpIHtcblx0XHRcdFx0dmFyIGQgPSBkYXRlLm1hdGNoKGRhdGVUaW1lUmVnZXgpLFxuXHRcdFx0XHQgICAgaXNBTSA9IC8oYW18QU0pJC8udGVzdChkYXRlKSxcblx0XHRcdFx0ICAgIGlzUE0gPSAvKHBtfFBNKSQvLnRlc3QoZGF0ZSk7XG5cblx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKGRbMF0gKyBcIi9cIiArIChkWzFdIHx8IDEpICsgXCIvXCIgKyAoZFsyXSB8fCAxKSArIFwiIFwiICsgKGRbM10gfHwgMCkgKyBcIjpcIiArIChkWzRdIHx8IDApICsgXCI6XCIgKyAoZFs1XSB8fCAwKSk7XG5cblx0XHRcdFx0aWYgKGlzQU0gfHwgaXNQTSkgZGF0ZS5zZXRIb3VycyhkYXRlLmdldEhvdXJzKCkgJSAxMiArIDEyICogaXNQTSk7XG5cdFx0XHR9IGVsc2UgLy8gZmFsbGJhY2tcblx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuXHRcdH0gZWxzZSBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7IC8vIGNyZWF0ZSBhIGNvcHlcblxuXHRcdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdFx0aWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJmbGF0cGlja3I6IGludmFsaWQgZGF0ZSBcIiArIGRhdGVfb3JpZyk7XG5cdFx0XHRjb25zb2xlLmluZm8odGhpcy5lbGVtZW50KTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy51dGMgJiYgIWRhdGUuZnBfaXNVVEMpIGRhdGUgPSBkYXRlLmZwX3RvVVRDKCk7XG5cblx0XHRpZiAodGltZWxlc3MgPT09IHRydWUpIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG5cblx0XHRyZXR1cm4gZGF0ZTtcblx0fVxufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIF9mbGF0cGlja3Iobm9kZUxpc3QsIGNvbmZpZykge1xuXHR2YXIgbm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2RlTGlzdCk7IC8vIHN0YXRpYyBsaXN0XG5cdHZhciBpbnN0YW5jZXMgPSBbXTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdHRyeSB7XG5cdFx0XHRub2Rlc1tpXS5fZmxhdHBpY2tyID0gbmV3IEZsYXRwaWNrcihub2Rlc1tpXSwgY29uZmlnIHx8IHt9KTtcblx0XHRcdGluc3RhbmNlcy5wdXNoKG5vZGVzW2ldLl9mbGF0cGlja3IpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUud2FybihlLCBlLnN0YWNrKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gaW5zdGFuY2VzLmxlbmd0aCA9PT0gMSA/IGluc3RhbmNlc1swXSA6IGluc3RhbmNlcztcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0Ly8gYnJvd3NlciBlbnZcblx0SFRNTENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXRwaWNrciA9IE5vZGVMaXN0LnByb3RvdHlwZS5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdFx0cmV0dXJuIF9mbGF0cGlja3IodGhpcywgY29uZmlnKTtcblx0fTtcblxuXHRIVE1MRWxlbWVudC5wcm90b3R5cGUuZmxhdHBpY2tyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuXHRcdHJldHVybiBfZmxhdHBpY2tyKFt0aGlzXSwgY29uZmlnKTtcblx0fTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGZsYXRwaWNrcihzZWxlY3RvciwgY29uZmlnKSB7XG5cdHJldHVybiBfZmxhdHBpY2tyKHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSwgY29uZmlnKTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmICh0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdGpRdWVyeS5mbi5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdFx0cmV0dXJuIF9mbGF0cGlja3IodGhpcywgY29uZmlnKTtcblx0fTtcbn1cblxuRGF0ZS5wcm90b3R5cGUuZnBfaW5jciA9IGZ1bmN0aW9uIChkYXlzKSB7XG5cdHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSwgdGhpcy5nZXREYXRlKCkgKyBwYXJzZUludChkYXlzLCAxMCkpO1xufTtcblxuRGF0ZS5wcm90b3R5cGUuZnBfaXNVVEMgPSBmYWxzZTtcbkRhdGUucHJvdG90eXBlLmZwX3RvVVRDID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZ2V0VVRDRnVsbFllYXIoKSwgdGhpcy5nZXRVVENNb250aCgpLCB0aGlzLmdldFVUQ0RhdGUoKSwgdGhpcy5nZXRVVENIb3VycygpLCB0aGlzLmdldFVUQ01pbnV0ZXMoKSwgdGhpcy5nZXRVVENTZWNvbmRzKCkpO1xuXG5cdG5ld0RhdGUuZnBfaXNVVEMgPSB0cnVlO1xuXHRyZXR1cm4gbmV3RGF0ZTtcbn07XG5cbi8vIElFOSBjbGFzc0xpc3QgcG9seWZpbGxcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoIXdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0ICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiB0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KEhUTUxFbGVtZW50LnByb3RvdHlwZSwgXCJjbGFzc0xpc3RcIiwge1xuXHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0ZnVuY3Rpb24gdXBkYXRlKGZuKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgY2xhc3NlcyA9IHNlbGYuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyksXG5cdFx0XHRcdFx0ICAgIGluZGV4ID0gY2xhc3Nlcy5pbmRleE9mKHZhbHVlKTtcblxuXHRcdFx0XHRcdGZuKGNsYXNzZXMsIGluZGV4LCB2YWx1ZSk7XG5cdFx0XHRcdFx0c2VsZi5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oXCIgXCIpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcmV0ID0ge1xuXHRcdFx0XHRhZGQ6IHVwZGF0ZShmdW5jdGlvbiAoY2xhc3NlcywgaW5kZXgsIHZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKCF+aW5kZXgpIGNsYXNzZXMucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdHJlbW92ZTogdXBkYXRlKGZ1bmN0aW9uIChjbGFzc2VzLCBpbmRleCkge1xuXHRcdFx0XHRcdGlmICh+aW5kZXgpIGNsYXNzZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0fSksXG5cblx0XHRcdFx0dG9nZ2xlOiB1cGRhdGUoZnVuY3Rpb24gKGNsYXNzZXMsIGluZGV4LCB2YWx1ZSkge1xuXHRcdFx0XHRcdGlmICh+aW5kZXgpIGNsYXNzZXMuc3BsaWNlKGluZGV4LCAxKTtlbHNlIGNsYXNzZXMucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdH0pLFxuXG5cdFx0XHRcdGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucyh2YWx1ZSkge1xuXHRcdFx0XHRcdHJldHVybiAhIX5zZWxmLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmluZGV4T2YodmFsdWUpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGl0ZW06IGZ1bmN0aW9uIGl0ZW0oaSkge1xuXHRcdFx0XHRcdHJldHVybiBzZWxmLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pW2ldIHx8IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXQsIFwibGVuZ3RoXCIsIHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNlbGYuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH0pO1xufVxuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIikgbW9kdWxlLmV4cG9ydHMgPSBGbGF0cGlja3I7XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMS4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDktMjJUMjI6MzBaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjEuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0XHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdH1cblxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0XHRyZXNvbHZlLmNhbGwoIHVuZGVmaW5lZCwgdmFsdWUgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuY2FsbCggdW5kZWZpbmVkLCB2YWx1ZSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0ICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGksXG5cdFx0dmFsID0gMDtcblxuXHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdGkgPSA0O1xuXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0fSBlbHNlIHtcblx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbCxcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRpZiAoIGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0dmFsID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVsgbmFtZSBdO1xuXHR9XG5cblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblxuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgdGltZXJJZCxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiByYWYoKSB7XG5cdGlmICggdGltZXJJZCApIHtcblx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByYWYgKTtcblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1lcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZiBvciBpZiBkb2N1bWVudCBpcyBoaWRkZW5cblx0aWYgKCBqUXVlcnkuZngub2ZmIHx8IGRvY3VtZW50LmhpZGRlbiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0aWYgKCB0aW1lcigpICkge1xuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgP1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggcmFmICkgOlxuXHRcdFx0d2luZG93LnNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGlmICggd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSggdGltZXJJZCApO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdH1cblxuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbiwgcmVjdCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSBlbGVtZW50IGlzIG5vdCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpXG5cdFx0aWYgKCByZWN0LndpZHRoIHx8IHJlY3QuaGVpZ2h0ICkge1xuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcblx0XHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdHJldHVybiByZWN0O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi4xLjEwXG4gKiAoYykgMjAxNC0yMDE3IEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbC5WdWUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbi8qICAqL1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiBfdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiB0eXBlb2YgdmFsID09PSAnb2JqZWN0J1xuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSQxIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZVxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvKFteLV0pKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQsIGZhc3RlciB0aGFuIG5hdGl2ZVxuICovXG5mdW5jdGlvbiBiaW5kJDEgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgZm4gbGVuZ3RoXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgT0JKRUNUX1NUUklORyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IE9CSkVDVF9TVFJJTkdcbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKCkge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7XG4gICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcbiAgfSwgW10pLmpvaW4oJywnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhKSA9PT0gSlNPTi5zdHJpbmdpZnkoYilcbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyogICovXG5cbnZhciBjb25maWcgPSB7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGFzc2V0IHR5cGVzIHRoYXQgYSBjb21wb25lbnQgY2FuIG93bi5cbiAgICovXG4gIF9hc3NldFR5cGVzOiBbXG4gICAgJ2NvbXBvbmVudCcsXG4gICAgJ2RpcmVjdGl2ZScsXG4gICAgJ2ZpbHRlcidcbiAgXSxcblxuICAvKipcbiAgICogTGlzdCBvZiBsaWZlY3ljbGUgaG9va3MuXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IFtcbiAgICAnYmVmb3JlQ3JlYXRlJyxcbiAgICAnY3JlYXRlZCcsXG4gICAgJ2JlZm9yZU1vdW50JyxcbiAgICAnbW91bnRlZCcsXG4gICAgJ2JlZm9yZVVwZGF0ZScsXG4gICAgJ3VwZGF0ZWQnLFxuICAgICdiZWZvcmVEZXN0cm95JyxcbiAgICAnZGVzdHJveWVkJyxcbiAgICAnYWN0aXZhdGVkJyxcbiAgICAnZGVhY3RpdmF0ZWQnXG4gIF0sXG5cbiAgLyoqXG4gICAqIE1heCBjaXJjdWxhciB1cGRhdGVzIGFsbG93ZWQgaW4gYSBzY2hlZHVsZXIgZmx1c2ggY3ljbGUuXG4gICAqL1xuICBfbWF4VXBkYXRlQ291bnQ6IDEwMFxufTtcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfSBlbHNlIHtcbiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE11dGF0aW9uT2JzZXJ2ZXIgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMDtcbnZhciBpc0lPUyA9IFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSk7XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbi8qKlxuICogRGVmZXIgYSB0YXNrIHRvIGV4ZWN1dGUgaXQgYXN5bmNocm9ub3VzbHkuXG4gKi9cbnZhciBuZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsYmFja3MgPSBbXTtcbiAgdmFyIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIHRpbWVyRnVuYztcblxuICBmdW5jdGlvbiBuZXh0VGlja0hhbmRsZXIgKCkge1xuICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb3BpZXNbaV0oKTtcbiAgICB9XG4gIH1cblxuICAvLyB0aGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuICAvLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbiAgLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4gIC8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4gIC8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbiAgLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgdmFyIGxvZ0Vycm9yID0gZnVuY3Rpb24gKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IH07XG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgcC50aGVuKG5leHRUaWNrSGFuZGxlcikuY2F0Y2gobG9nRXJyb3IpO1xuICAgICAgLy8gaW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4gICkpIHtcbiAgICAvLyB1c2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAgIC8vIGUuZy4gUGhhbnRvbUpTIElFMTEsIGlPUzcsIEFuZHJvaWQgNC40XG4gICAgdmFyIGNvdW50ZXIgPSAxO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG5leHRUaWNrSGFuZGxlcik7XG4gICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgfSk7XG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrIHRvIHNldFRpbWVvdXRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQobmV4dFRpY2tIYW5kbGVyLCAwKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHF1ZXVlTmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNiKSB7IGNiLmNhbGwoY3R4KTsgfVxuICAgICAgaWYgKF9yZXNvbHZlKSB7IF9yZXNvbHZlKGN0eCk7IH1cbiAgICB9KTtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgICAgdGltZXJGdW5jKCk7XG4gICAgfVxuICAgIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pKCk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxudmFyIHdhcm4gPSBub29wO1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWU7XG5cbntcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIltWdWUgd2Fybl06IFwiICsgbXNnICsgXCIgXCIgKyAoXG4gICAgICAgIHZtID8gZm9ybWF0TG9jYXRpb24oZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICdyb290IGluc3RhbmNlJ1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IHZtLl9pc1Z1ZVxuICAgICAgPyB2bS4kb3B0aW9ucy5uYW1lIHx8IHZtLiRvcHRpb25zLl9jb21wb25lbnRUYWdcbiAgICAgIDogdm0ubmFtZTtcbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCJjb21wb25lbnQgPFwiICsgbmFtZSArIFwiPlwiKSA6IFwiYW5vbnltb3VzIGNvbXBvbmVudFwiKSArXG4gICAgICAodm0uX2lzVnVlICYmIHZtLiRvcHRpb25zLl9fZmlsZSA/IChcIiBhdCBcIiArICh2bS4kb3B0aW9ucy5fX2ZpbGUpKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgZm9ybWF0TG9jYXRpb24gPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKHN0ciA9PT0gJ2Fub255bW91cyBjb21wb25lbnQnKSB7XG4gICAgICBzdHIgKz0gXCIgLSB1c2UgdGhlIFxcXCJuYW1lXFxcIiBvcHRpb24gZm9yIGJldHRlciBkZWJ1Z2dpbmcgbWVzc2FnZXMuXCI7XG4gICAgfVxuICAgIHJldHVybiAoXCJcXG4oZm91bmQgaW4gXCIgKyBzdHIgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cblxudmFyIHVpZCQxID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkJDErKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSQxKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFibGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyB0aGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG9ubHkgb25lXG4vLyB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZCBhdCBhbnkgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKF90YXJnZXQpIHtcbiAgaWYgKERlcC50YXJnZXQpIHsgdGFyZ2V0U3RhY2sucHVzaChEZXAudGFyZ2V0KTsgfVxuICBEZXAudGFyZ2V0ID0gX3RhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrLnBvcCgpO1xufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1tcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl1cbi5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICAvLyBhdm9pZCBsZWFraW5nIGFyZ3VtZW50czpcbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9jbG9zdXJlLXdpdGgtYXJndW1lbnRzXG4gICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGkpO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHMkMVtpXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCB3aGVuIGEgcmVhY3RpdmUgcHJvcGVydHkgaXMgc2V0LCB0aGUgbmV3IHZhbHVlIGlzXG4gKiBhbHNvIGNvbnZlcnRlZCB0byBiZWNvbWUgcmVhY3RpdmUuIEhvd2V2ZXIgd2hlbiBwYXNzaW5nIGRvd24gcHJvcHMsXG4gKiB3ZSBkb24ndCB3YW50IHRvIGZvcmNlIGNvbnZlcnNpb24gYmVjYXVzZSB0aGUgdmFsdWUgbWF5IGJlIGEgbmVzdGVkIHZhbHVlXG4gKiB1bmRlciBhIGZyb3plbiBkYXRhIHN0cnVjdHVyZS4gQ29udmVydGluZyBpdCB3b3VsZCBkZWZlYXQgdGhlIG9wdGltaXphdGlvbi5cbiAqL1xudmFyIG9ic2VydmVyU3RhdGUgPSB7XG4gIHNob3VsZENvbnZlcnQ6IHRydWUsXG4gIGlzU2V0dGluZ1Byb3BzOiBmYWxzZVxufTtcblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGFyZSBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2hlcyB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciBhdWdtZW50ID0gaGFzUHJvdG9cbiAgICAgID8gcHJvdG9BdWdtZW50XG4gICAgICA6IGNvcHlBdWdtZW50O1xuICAgIGF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggZWFjaCBwcm9wZXJ0eSBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldLCBvYmpba2V5c1tpXV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlclxuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcblxuICB2YXIgY2hpbGRPYiA9IG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCQxIChvYmosIGtleSwgdmFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBvYmoubGVuZ3RoID0gTWF0aC5tYXgob2JqLmxlbmd0aCwga2V5KTtcbiAgICBvYmouc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGhhc093bihvYmosIGtleSkpIHtcbiAgICBvYmpba2V5XSA9IHZhbDtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSBvYmouX19vYl9fO1xuICBpZiAob2JqLl9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghb2IpIHtcbiAgICBvYmpba2V5XSA9IHZhbDtcbiAgICByZXR1cm5cbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKG9iaiwga2V5KSB7XG4gIHZhciBvYiA9IG9iai5fX29iX187XG4gIGlmIChvYmouX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24ob2JqLCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIG9ialtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xue1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyb20pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQkMSh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodG9WYWwpICYmIGlzUGxhaW5PYmplY3QoZnJvbVZhbCkpIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICBjaGlsZFZhbC5jYWxsKHRoaXMpLFxuICAgICAgICBwYXJlbnRWYWwuY2FsbCh0aGlzKVxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJlbnRWYWwgfHwgY2hpbGRWYWwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwYXJhbSBhdHRyaWJ1dGVzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5jb25maWcuX2xpZmVjeWNsZUhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgICA6IHJlc1xufVxuXG5jb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gcGFyZW50VmFsIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5XTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5XSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIHBhcmVudFZhbCB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBleHRlbmQocmV0LCBjaGlsZFZhbCk7XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhciBsb3dlciA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChpc0J1aWx0SW5UYWcobG93ZXIpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKGxvd2VyKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAgICdpZDogJyArIGtleVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmLCB1cGRhdGU6IGRlZiB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQpO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcbiAgdmFyIGV4dGVuZHNGcm9tID0gY2hpbGQuZXh0ZW5kcztcbiAgaWYgKGV4dGVuZHNGcm9tKSB7XG4gICAgcGFyZW50ID0gdHlwZW9mIGV4dGVuZHNGcm9tID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLm9wdGlvbnMsIHZtKVxuICAgICAgOiBtZXJnZU9wdGlvbnMocGFyZW50LCBleHRlbmRzRnJvbSwgdm0pO1xuICB9XG4gIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBtaXhpbiA9IGNoaWxkLm1peGluc1tpXTtcbiAgICAgIGlmIChtaXhpbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBWdWUkMykge1xuICAgICAgICBtaXhpbiA9IG1peGluLm9wdGlvbnM7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBtaXhpbiwgdm0pO1xuICAgIH1cbiAgfVxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gaGFuZGxlIGJvb2xlYW4gcHJvcHNcbiAgaWYgKGlzVHlwZShCb29sZWFuLCBwcm9wLnR5cGUpKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICghaXNUeXBlKFN0cmluZywgcHJvcC50eXBlKSAmJiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkpIHtcbiAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRDb252ZXJ0ID0gb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0O1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gcHJldlNob3VsZENvbnZlcnQ7XG4gIH1cbiAge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAoaXNPYmplY3QoZGVmKSkge1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm1ba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHZtW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wLnR5cGUgIT09IEZ1bmN0aW9uXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicgK1xuICAgICAgJyBFeHBlY3RlZCAnICsgZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSArXG4gICAgICAnLCBnb3QgJyArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpICsgJy4nLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhlIHR5cGUgb2YgYSB2YWx1ZVxuICovXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSAnU3RyaW5nJykge1xuICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ3N0cmluZycpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICB2YWxpZCA9IHR5cGVvZiB2YWx1ZSA9PT0gKGV4cGVjdGVkVHlwZSA9ICdudW1iZXInKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdCb29sZWFuJykge1xuICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAoZXhwZWN0ZWRUeXBlID0gJ2Jvb2xlYW4nKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdGdW5jdGlvbicpIHtcbiAgICB2YWxpZCA9IHR5cGVvZiB2YWx1ZSA9PT0gKGV4cGVjdGVkVHlwZSA9ICdmdW5jdGlvbicpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV1cbn1cblxuZnVuY3Rpb24gaXNUeXBlICh0eXBlLCBmbikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZm4pKSB7XG4gICAgcmV0dXJuIGdldFR5cGUoZm4pID09PSBnZXRUeXBlKHR5cGUpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGdldFR5cGUoZm5baV0pID09PSBnZXRUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuXG5cbnZhciB1dGlsID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMSxcblx0X3RvU3RyaW5nOiBfdG9TdHJpbmcsXG5cdHRvTnVtYmVyOiB0b051bWJlcixcblx0bWFrZU1hcDogbWFrZU1hcCxcblx0aXNCdWlsdEluVGFnOiBpc0J1aWx0SW5UYWcsXG5cdHJlbW92ZTogcmVtb3ZlJDEsXG5cdGhhc093bjogaGFzT3duLFxuXHRpc1ByaW1pdGl2ZTogaXNQcmltaXRpdmUsXG5cdGNhY2hlZDogY2FjaGVkLFxuXHRjYW1lbGl6ZTogY2FtZWxpemUsXG5cdGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG5cdGh5cGhlbmF0ZTogaHlwaGVuYXRlLFxuXHRiaW5kOiBiaW5kJDEsXG5cdHRvQXJyYXk6IHRvQXJyYXksXG5cdGV4dGVuZDogZXh0ZW5kLFxuXHRpc09iamVjdDogaXNPYmplY3QsXG5cdGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG5cdHRvT2JqZWN0OiB0b09iamVjdCxcblx0bm9vcDogbm9vcCxcblx0bm86IG5vLFxuXHRpZGVudGl0eTogaWRlbnRpdHksXG5cdGdlblN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMsXG5cdGxvb3NlRXF1YWw6IGxvb3NlRXF1YWwsXG5cdGxvb3NlSW5kZXhPZjogbG9vc2VJbmRleE9mLFxuXHRpc1Jlc2VydmVkOiBpc1Jlc2VydmVkLFxuXHRkZWY6IGRlZixcblx0cGFyc2VQYXRoOiBwYXJzZVBhdGgsXG5cdGhhc1Byb3RvOiBoYXNQcm90byxcblx0aW5Ccm93c2VyOiBpbkJyb3dzZXIsXG5cdFVBOiBVQSxcblx0aXNJRTogaXNJRSxcblx0aXNJRTk6IGlzSUU5LFxuXHRpc0VkZ2U6IGlzRWRnZSxcblx0aXNBbmRyb2lkOiBpc0FuZHJvaWQsXG5cdGlzSU9TOiBpc0lPUyxcblx0aXNTZXJ2ZXJSZW5kZXJpbmc6IGlzU2VydmVyUmVuZGVyaW5nLFxuXHRkZXZ0b29sczogZGV2dG9vbHMsXG5cdG5leHRUaWNrOiBuZXh0VGljayxcblx0Z2V0IF9TZXQgKCkgeyByZXR1cm4gX1NldDsgfSxcblx0bWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG5cdHJlc29sdmVBc3NldDogcmVzb2x2ZUFzc2V0LFxuXHRnZXQgd2FybiAoKSB7IHJldHVybiB3YXJuOyB9LFxuXHRnZXQgZm9ybWF0Q29tcG9uZW50TmFtZSAoKSB7IHJldHVybiBmb3JtYXRDb21wb25lbnROYW1lOyB9LFxuXHR2YWxpZGF0ZVByb3A6IHZhbGlkYXRlUHJvcFxufSk7XG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG57XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgXCJyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0byBkZWNsYXJlIHJlYWN0aXZlIGRhdGEgXCIgK1xuICAgICAgXCJwcm9wZXJ0aWVzIGluIHRoZSBkYXRhIG9wdGlvbi5cIixcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgUHJveHkudG9TdHJpbmcoKS5tYXRjaCgvbmF0aXZlIGNvZGUvKTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhJyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fCBrZXkuY2hhckF0KDApID09PSAnXyc7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnNcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mdW5jdGlvbmFsQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7fSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gJyc7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIHZub2RlLmNoaWxkcmVuLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9uc1xuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuZnVuY3Rpb24gY2xvbmVWTm9kZXMgKHZub2Rlcykge1xuICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHJlc1tpXSA9IGNsb25lVk5vZGUodm5vZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgaG9va3MgPSB7IGluaXQ6IGluaXQsIHByZXBhdGNoOiBwcmVwYXRjaCwgaW5zZXJ0OiBpbnNlcnQsIGRlc3Ryb3k6IGRlc3Ryb3kkMSB9O1xudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmICghQ3Rvcikge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICBpZiAoIUN0b3IuY2lkKSB7XG4gICAgaWYgKEN0b3IucmVzb2x2ZWQpIHtcbiAgICAgIEN0b3IgPSBDdG9yLnJlc29sdmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KEN0b3IsIGJhc2VDdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGl0J3Mgb2sgdG8gcXVldWUgdGhpcyBvbiBldmVyeSByZW5kZXIgYmVjYXVzZVxuICAgICAgICAvLyAkZm9yY2VVcGRhdGUgaXMgYnVmZmVyZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAgICAgICAgY29udGV4dC4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFDdG9yKSB7XG4gICAgICAgIC8vIHJldHVybiBub3RoaW5nIGlmIHRoaXMgaXMgaW5kZWVkIGFuIGFzeW5jIGNvbXBvbmVudFxuICAgICAgICAvLyB3YWl0IGZvciB0aGUgY2FsbGJhY2sgdG8gdHJpZ2dlciBwYXJlbnQgdXBkYXRlLlxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wcyhkYXRhLCBDdG9yKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChDdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVyc1xuICAgIGRhdGEgPSB7fTtcbiAgfVxuXG4gIC8vIG1lcmdlIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgbWVyZ2VIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9XG4gICk7XG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChwcm9wT3B0aW9ucykge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEpO1xuICAgIH1cbiAgfVxuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIF9jb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShjb250ZXh0KTtcbiAgdmFyIGggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChfY29udGV4dCwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG4gIHZhciB2bm9kZSA9IEN0b3Iub3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCBoLCB7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgcGFyZW50OiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBzbG90czogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBjb250ZXh0KTsgfVxuICB9KTtcbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICB2bm9kZS5mdW5jdGlvbmFsQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgaWYgKGRhdGEuc2xvdCkge1xuICAgICAgKHZub2RlLmRhdGEgfHwgKHZub2RlLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgfVxuICB9XG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgcHJvcHNEYXRhOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhLFxuICAgIF9jb21wb25lbnRUYWc6IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWcsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBfcGFyZW50TGlzdGVuZXJzOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzLFxuICAgIF9yZW5kZXJDaGlsZHJlbjogdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuLFxuICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuICAgIF9yZWZFbG06IHJlZkVsbSB8fCBudWxsXG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGVDb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5pdCAoXG4gIHZub2RlLFxuICBoeWRyYXRpbmcsXG4gIHBhcmVudEVsbSxcbiAgcmVmRWxtXG4pIHtcbiAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICB2bm9kZSxcbiAgICAgIGFjdGl2ZUluc3RhbmNlLFxuICAgICAgcGFyZW50RWxtLFxuICAgICAgcmVmRWxtXG4gICAgKTtcbiAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICB9IGVsc2UgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICBwcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhdGNoIChcbiAgb2xkVm5vZGUsXG4gIHZub2RlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICBjaGlsZC5fdXBkYXRlRnJvbVBhcmVudChcbiAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgKTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICBpZiAoIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgfVxuICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kkMSAodm5vZGUpIHtcbiAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faW5hY3RpdmUgPSB0cnVlO1xuICAgICAgY2FsbEhvb2sodm5vZGUuY29tcG9uZW50SW5zdGFuY2UsICdkZWFjdGl2YXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY2Jcbikge1xuICBpZiAoZmFjdG9yeS5yZXF1ZXN0ZWQpIHtcbiAgICAvLyBwb29sIGNhbGxiYWNrc1xuICAgIGZhY3RvcnkucGVuZGluZ0NhbGxiYWNrcy5wdXNoKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBmYWN0b3J5LnJlcXVlc3RlZCA9IHRydWU7XG4gICAgdmFyIGNicyA9IGZhY3RvcnkucGVuZGluZ0NhbGxiYWNrcyA9IFtjYl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuXG4gICAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiAocmVzKSB7XG4gICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgICByZXMgPSBiYXNlQ3Rvci5leHRlbmQocmVzKTtcbiAgICAgIH1cbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gcmVzO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY2JzW2ldKHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgIH07XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgLy8gaGFuZGxlIHByb21pc2VcbiAgICBpZiAocmVzICYmIHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhZmFjdG9yeS5yZXNvbHZlZCkge1xuICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzIChkYXRhLCBDdG9yKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BPcHRpb25zKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICB2YXIgZG9tUHJvcHMgPSBkYXRhLmRvbVByb3BzO1xuICBpZiAoYXR0cnMgfHwgcHJvcHMgfHwgZG9tUHJvcHMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGRvbVByb3BzLCBrZXksIGFsdEtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaGFzaCkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9va3MgKGRhdGEpIHtcbiAgaWYgKCFkYXRhLmhvb2spIHtcbiAgICBkYXRhLmhvb2sgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGZyb21QYXJlbnQgPSBkYXRhLmhvb2tba2V5XTtcbiAgICB2YXIgb3VycyA9IGhvb2tzW2tleV07XG4gICAgZGF0YS5ob29rW2tleV0gPSBmcm9tUGFyZW50ID8gbWVyZ2VIb29rJDEob3VycywgZnJvbVBhcmVudCkgOiBvdXJzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICBvbmUoYSwgYiwgYywgZCk7XG4gICAgdHdvKGEsIGIsIGMsIGQpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rLCBrZXkpIHtcbiAga2V5ID0ga2V5ICsgaG9va0tleTtcbiAgdmFyIGluamVjdGVkSGFzaCA9IGRlZi5fX2luamVjdGVkIHx8IChkZWYuX19pbmplY3RlZCA9IHt9KTtcbiAgaWYgKCFpbmplY3RlZEhhc2hba2V5XSkge1xuICAgIGluamVjdGVkSGFzaFtrZXldID0gdHJ1ZTtcbiAgICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcbiAgICBpZiAob2xkSG9vaykge1xuICAgICAgZGVmW2hvb2tLZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRIb29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZltob29rS2V5XSA9IGhvb2s7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIG9uY2UgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UsXG4gICAgY2FwdHVyZTogY2FwdHVyZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGUgKGZuKSB7XG4gIHZhciBoYW5kbGUgPSB7XG4gICAgZm46IGZuLFxuICAgIGludm9rZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgICAgdmFyIGZuID0gaGFuZGxlLmZuO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm4pKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmbltpXS5hcHBseShudWxsLCBhcmd1bWVudHMkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGFuZGxlXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoIWN1cikge1xuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIW9sZCkge1xuICAgICAgaWYgKCFjdXIuaW52b2tlcikge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUV2ZW50SGFuZGxlKGN1cik7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLmludm9rZXIsIGV2ZW50Lm9uY2UsIGV2ZW50LmNhcHR1cmUpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbiA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoIW9uW25hbWVdKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLmludm9rZXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vbXJhbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RyY3V0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoYyA9PSBudWxsIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3QgPSByZXNbcmVzLmxlbmd0aCAtIDFdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSkpO1xuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChsYXN0ICYmIGxhc3QudGV4dCkge1xuICAgICAgICBsYXN0LnRleHQgKz0gU3RyaW5nKGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYy50ZXh0ICYmIGxhc3QgJiYgbGFzdC50ZXh0KSB7XG4gICAgICAgIHJlc1tyZXMubGVuZ3RoIC0gMV0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChjLnRhZyAmJiBjLmtleSA9PSBudWxsICYmIG5lc3RlZEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIHJldHVybiBjaGlsZHJlbiAmJiBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgJiYgYy5jb21wb25lbnRPcHRpb25zOyB9KVswXVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoYWx3YXlzTm9ybWFsaXplKSB7IG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTsgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoZGF0YSAmJiBkYXRhLl9fb2JfXykge1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAodm5vZGUpIHtcbiAgICBpZiAobnMpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucykge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm5vZGUuY2hpbGRyZW4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2hpbGQudGFnICYmICFjaGlsZC5ucykge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS4kdm5vZGUgPSBudWxsOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IHt9O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG59XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIC8vIGNsb25lIHNsb3Qgbm9kZXMgb24gcmUtcmVuZGVyc1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICB2bS4kc2xvdHNba2V5XSA9IGNsb25lVk5vZGVzKHZtLiRzbG90c1trZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX3BhcmVudFZub2RlICYmIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGljUmVuZGVyRm5zICYmICF2bS5fc3RhdGljVHJlZXMpIHtcbiAgICAgIHZtLl9zdGF0aWNUcmVlcyA9IFtdO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgICAgICBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZSwgdm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAge1xuICAgICAgICAgIHdhcm4oKFwiRXJyb3Igd2hlbiByZW5kZXJpbmcgXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCI6XCIpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlXG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xuXG4gIC8vIHRvU3RyaW5nIGZvciBtdXN0YWNoZXNcbiAgVnVlLnByb3RvdHlwZS5fcyA9IF90b1N0cmluZztcbiAgLy8gY29udmVydCB0ZXh0IHRvIHZub2RlXG4gIFZ1ZS5wcm90b3R5cGUuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIC8vIG51bWJlciBjb252ZXJzaW9uXG4gIFZ1ZS5wcm90b3R5cGUuX24gPSB0b051bWJlcjtcbiAgLy8gZW1wdHkgdm5vZGVcbiAgVnVlLnByb3RvdHlwZS5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIC8vIGxvb3NlIGVxdWFsXG4gIFZ1ZS5wcm90b3R5cGUuX3EgPSBsb29zZUVxdWFsO1xuICAvLyBsb29zZSBpbmRleE9mXG4gIFZ1ZS5wcm90b3R5cGUuX2kgPSBsb29zZUluZGV4T2Y7XG5cbiAgLy8gcmVuZGVyIHN0YXRpYyB0cmVlIGJ5IGluZGV4XG4gIFZ1ZS5wcm90b3R5cGUuX20gPSBmdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICAgIGluZGV4LFxuICAgIGlzSW5Gb3JcbiAgKSB7XG4gICAgdmFyIHRyZWUgPSB0aGlzLl9zdGF0aWNUcmVlc1tpbmRleF07XG4gICAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gICAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUgYnkgZG9pbmcgYSBzaGFsbG93IGNsb25lLlxuICAgIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0cmVlKVxuICAgICAgICA/IGNsb25lVk5vZGVzKHRyZWUpXG4gICAgICAgIDogY2xvbmVWTm9kZSh0cmVlKVxuICAgIH1cbiAgICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gICAgdHJlZSA9IHRoaXMuX3N0YXRpY1RyZWVzW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5KTtcbiAgICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICAgIHJldHVybiB0cmVlXG4gIH07XG5cbiAgLy8gbWFyayBub2RlIGFzIHN0YXRpYyAodi1vbmNlKVxuICBWdWUucHJvdG90eXBlLl9vID0gZnVuY3Rpb24gbWFya09uY2UgKFxuICAgIHRyZWUsXG4gICAgaW5kZXgsXG4gICAga2V5XG4gICkge1xuICAgIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICAgIHJldHVybiB0cmVlXG4gIH07XG5cbiAgZnVuY3Rpb24gbWFya1N0YXRpYyAodHJlZSwga2V5LCBpc09uY2UpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgICBub2RlLmtleSA9IGtleTtcbiAgICBub2RlLmlzT25jZSA9IGlzT25jZTtcbiAgfVxuXG4gIC8vIGZpbHRlciByZXNvbHV0aW9uIGhlbHBlclxuICBWdWUucHJvdG90eXBlLl9mID0gZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG4gIH07XG5cbiAgLy8gcmVuZGVyIHYtZm9yXG4gIFZ1ZS5wcm90b3R5cGUuX2wgPSBmdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgICB2YWwsXG4gICAgcmVuZGVyXG4gICkge1xuICAgIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9O1xuXG4gIC8vIHJlbmRlclNsb3RcbiAgVnVlLnByb3RvdHlwZS5fdCA9IGZ1bmN0aW9uIChcbiAgICBuYW1lLFxuICAgIGZhbGxiYWNrLFxuICAgIHByb3BzLFxuICAgIGJpbmRPYmplY3RcbiAgKSB7XG4gICAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICAgIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgICBleHRlbmQocHJvcHMsIGJpbmRPYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2tcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNsb3ROb2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdO1xuICAgICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgICAgaWYgKHNsb3ROb2RlcyAmJiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzbG90Tm9kZXMuX3JlbmRlcmVkICYmIHdhcm4oXG4gICAgICAgICAgXCJEdXBsaWNhdGUgcHJlc2VuY2Ugb2Ygc2xvdCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGZvdW5kIGluIHRoZSBzYW1lIHJlbmRlciB0cmVlIFwiICtcbiAgICAgICAgICBcIi0gdGhpcyB3aWxsIGxpa2VseSBjYXVzZSByZW5kZXIgZXJyb3JzLlwiLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2xvdE5vZGVzIHx8IGZhbGxiYWNrXG4gICAgfVxuICB9O1xuXG4gIC8vIGFwcGx5IHYtYmluZCBvYmplY3RcbiAgVnVlLnByb3RvdHlwZS5fYiA9IGZ1bmN0aW9uIGJpbmRQcm9wcyAoXG4gICAgZGF0YSxcbiAgICB0YWcsXG4gICAgdmFsdWUsXG4gICAgYXNQcm9wXG4gICkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgICAgdmFyIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfTtcblxuICAvLyBjaGVjayB2LW9uIGtleUNvZGVzXG4gIFZ1ZS5wcm90b3R5cGUuX2sgPSBmdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgICBldmVudEtleUNvZGUsXG4gICAga2V5LFxuICAgIGJ1aWx0SW5BbGlhc1xuICApIHtcbiAgICB2YXIga2V5Q29kZXMgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluQWxpYXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Q29kZXMpKSB7XG4gICAgICByZXR1cm4ga2V5Q29kZXMuaW5kZXhPZihldmVudEtleUNvZGUpID09PSAtMVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ga2V5Q29kZXMgIT09IGV2ZW50S2V5Q29kZVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICB2YXIgc2xvdHMgPSB7fTtcbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHJldHVybiBzbG90c1xuICB9XG4gIHZhciBkZWZhdWx0U2xvdCA9IFtdO1xuICB2YXIgbmFtZSwgY2hpbGQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZ1bmN0aW9uYWxDb250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgICBjaGlsZC5kYXRhICYmIChuYW1lID0gY2hpbGQuZGF0YS5zbG90KSkge1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmF1bHRTbG90LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2luZ2xlIHdoaXRlc3BhY2VcbiAgaWYgKGRlZmF1bHRTbG90Lmxlbmd0aCAmJiAhKFxuICAgIGRlZmF1bHRTbG90Lmxlbmd0aCA9PT0gMSAmJlxuICAgIChkZWZhdWx0U2xvdFswXS50ZXh0ID09PSAnICcgfHwgZGVmYXVsdFNsb3RbMF0uaXNDb21tZW50KVxuICApKSB7XG4gICAgc2xvdHMuZGVmYXVsdCA9IGRlZmF1bHRTbG90O1xuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCQxIChldmVudCwgZm4sIG9uY2UpIHtcbiAgaWYgKG9uY2UpIHtcbiAgICB0YXJnZXQuJG9uY2UoZXZlbnQsIGZuKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQkMSwgcmVtb3ZlJDIsIHZtKTtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7KHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX21vdW50ID0gZnVuY3Rpb24gKFxuICAgIGVsLFxuICAgIGh5ZHJhdGluZ1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLiRlbCA9IGVsO1xuICAgIGlmICghdm0uJG9wdGlvbnMucmVuZGVyKSB7XG4gICAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgICAge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAgICdvcHRpb24gaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG4gICAgdm0uX3dhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50ICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH0sIG5vb3ApO1xuICAgIGh5ZHJhdGluZyA9IGZhbHNlO1xuICAgIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gICAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzTW91bnRlZCkge1xuICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICB9XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKFxuICAgICAgICB2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8sXG4gICAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0sXG4gICAgICAgIHZtLiRvcHRpb25zLl9yZWZFbG1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl91cGRhdGVGcm9tUGFyZW50ID0gZnVuY3Rpb24gKFxuICAgIHByb3BzRGF0YSxcbiAgICBsaXN0ZW5lcnMsXG4gICAgcGFyZW50Vm5vZGUsXG4gICAgcmVuZGVyQ2hpbGRyZW5cbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgaGFzQ2hpbGRyZW4gPSAhISh2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgcmVuZGVyQ2hpbGRyZW4pO1xuICAgIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICAgIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG4gICAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICAgIH1cbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcbiAgICAvLyB1cGRhdGUgcHJvcHNcbiAgICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBmYWxzZTtcbiAgICAgIHtcbiAgICAgICAgb2JzZXJ2ZXJTdGF0ZS5pc1NldHRpbmdQcm9wcyA9IHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgICAgdm1ba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHZtLiRvcHRpb25zLnByb3BzLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAgIH1cbiAgICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG4gICAgICB7XG4gICAgICAgIG9ic2VydmVyU3RhdGUuaXNTZXR0aW5nUHJvcHMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgICB9XG4gICAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuICAgIH1cbiAgICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICAgIGlmIChoYXNDaGlsZHJlbikge1xuICAgICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUkMShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuXG52YXIgcXVldWUgPSBbXTtcbnZhciBoYXMkMSA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIHF1ZXVlLmxlbmd0aCA9IDA7XG4gIGhhcyQxID0ge307XG4gIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQsIHZtO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhcyQxW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhcyQxW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBjb25maWcuX21heFVwZGF0ZUNvdW50KSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGNhbGwgdXBkYXRlZCBob29rc1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXMkMVtpZF0gPT0gbnVsbCkge1xuICAgIGhhcyQxW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID49IDAgJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShNYXRoLm1heChpLCBpbmRleCkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBleHBPckZuLnRvU3RyaW5nKCk7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodGhpcy52bSwgdGhpcy52bSk7XG4gIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgaWYgKHRoaXMuZGVlcCkge1xuICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbiAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZSwgdGhpcy52bSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICAgICAgIChcIkVycm9yIGluIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIiksXG4gICAgICAgICAgICAgIHRoaXMudm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aHJvdyBlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcyQxLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSQxKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWwpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2gpIHsgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTsgfVxufVxuXG52YXIgaXNSZXNlcnZlZFByb3AgPSB7IGtleTogMSwgcmVmOiAxLCBzbG90OiAxIH07XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBpc1Jvb3Q7XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAge1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wW2tleV0pIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgdmFsaWRhdGVQcm9wKGtleSwgcHJvcHMsIHByb3BzRGF0YSwgdm0pLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFvYnNlcnZlclN0YXRlLmlzU2V0dGluZ1Byb3BzKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgbG9vcCggaSApO1xuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZGF0YS5jYWxsKHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5c1tpXSkpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsgKGtleXNbaV0pICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJveHkodm0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG52YXIgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uID0ge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogbm9vcCxcbiAgc2V0OiBub29wXG59O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYga2V5IGluIHZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImV4aXN0aW5nIGluc3RhbmNlIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3aWxsIGJlIFwiICtcbiAgICAgICAgXCJvdmVyd3JpdHRlbiBieSBhIGNvbXB1dGVkIHByb3BlcnR5IHdpdGggdGhlIHNhbWUgbmFtZS5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5nZXQgPSBtYWtlQ29tcHV0ZWRHZXR0ZXIodXNlckRlZiwgdm0pO1xuICAgICAgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgICA/IHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgICAgPyBtYWtlQ29tcHV0ZWRHZXR0ZXIodXNlckRlZi5nZXQsIHZtKVxuICAgICAgICAgIDogYmluZCQxKHVzZXJEZWYuZ2V0LCB2bSlcbiAgICAgICAgOiBub29wO1xuICAgICAgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0XG4gICAgICAgID8gYmluZCQxKHVzZXJEZWYuc2V0LCB2bSlcbiAgICAgICAgOiBub29wO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodm0sIGtleSwgY29tcHV0ZWRTaGFyZWREZWZpbml0aW9uKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQ29tcHV0ZWRHZXR0ZXIgKGdldHRlciwgb3duZXIpIHtcbiAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcihvd25lciwgZ2V0dGVyLCBub29wLCB7XG4gICAgbGF6eTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgIH1cbiAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICB2bVtrZXldID0gbWV0aG9kc1trZXldID09IG51bGwgPyBub29wIDogYmluZCQxKG1ldGhvZHNba2V5XSwgdm0pO1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBtZXRob2RzW2tleV0gPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbiB1bmRlZmluZWQgdmFsdWUgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKHZtLCBrZXksIGhhbmRsZXIpIHtcbiAgdmFyIG9wdGlvbnM7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHZtLiR3YXRjaChrZXksIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhXG4gIH07XG4gIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uIChuZXdEYXRhKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldCQxO1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwcm94eSAodm0sIGtleSkge1xuICBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bSwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgICAgIHJldHVybiB2bS5fZGF0YVtrZXldXG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgICAgIHZtLl9kYXRhW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCsrO1xuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMucHJvcHNEYXRhID0gb3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSBvcHRpb25zLl9yZW5kZXJDaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICBvcHRzLl9wYXJlbnRFbG0gPSBvcHRpb25zLl9wYXJlbnRFbG07XG4gIG9wdHMuX3JlZkVsbSA9IG9wdGlvbnMuX3JlZkVsbTtcbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXIub3B0aW9ucztcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgdmFyIGV4dGVuZE9wdGlvbnMgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZFxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICBleHRlbmRPcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgICAgZXh0ZW5kT3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgICAgIGV4dGVuZE9wdGlvbnMuX3Njb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIGV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIFZ1ZSQzIChvcHRpb25zKSB7XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSQzKSkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlJDMpO1xuc3RhdGVNaXhpbihWdWUkMyk7XG5ldmVudHNNaXhpbihWdWUkMyk7XG5saWZlY3ljbGVNaXhpbihWdWUkMyk7XG5yZW5kZXJNaXhpbihWdWUkMyk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocGx1Z2luLmluc3RhbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIHBsdWdpbi5pbnN0YWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIHtcbiAgICAgIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAgICAgJ2FuZCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAge1xuICAgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBjb25maWcuaXNSZXNlcnZlZFRhZyhpZCkpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgICAgICAgICAnaWQ6ICcgKyBpZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwXTtcblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoY2FjaGUsIGZpbHRlcikge1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGVkTm9kZSk7XG4gICAgICAgIGNhY2hlW2tleV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKHZub2RlKSB7XG4gIGlmICh2bm9kZSkge1xuICAgIGlmICghdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2luYWN0aXZlKSB7XG4gICAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ2RlYWN0aXZhdGVkJyk7XG4gICAgfVxuICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbn1cblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXNcbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMkMS5jYWNoZVtrZXldKTtcbiAgICB9XG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBpbmNsdWRlOiBmdW5jdGlvbiBpbmNsdWRlICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcy5jYWNoZSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSxcbiAgICBleGNsdWRlOiBmdW5jdGlvbiBleGNsdWRlICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcy5jYWNoZSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCh0aGlzLiRzbG90cy5kZWZhdWx0KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmIChcbiAgICAgICAgKHRoaXMuaW5jbHVkZSAmJiAhbWF0Y2hlcyh0aGlzLmluY2x1ZGUsIG5hbWUpKSB8fFxuICAgICAgICAodGhpcy5leGNsdWRlICYmIG1hdGNoZXModGhpcy5leGNsdWRlLCBuYW1lKSlcbiAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAodGhpcy5jYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gdGhpcy5jYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICB9XG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuICBWdWUudXRpbCA9IHV0aWw7XG4gIFZ1ZS5zZXQgPSBzZXQkMTtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlJDMpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlJDMucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuVnVlJDMudmVyc2lvbiA9ICcyLjEuMTAnO1xuXG4vKiAgKi9cblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCcpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBnZW5DbGFzc0Zyb21EYXRhKGRhdGEpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogY2hpbGQuY2xhc3NcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkNsYXNzRnJvbURhdGEgKGRhdGEpIHtcbiAgdmFyIGR5bmFtaWNDbGFzcyA9IGRhdGEuY2xhc3M7XG4gIHZhciBzdGF0aWNDbGFzcyA9IGRhdGEuc3RhdGljQ2xhc3M7XG4gIGlmIChzdGF0aWNDbGFzcyB8fCBkeW5hbWljQ2xhc3MpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiByZXNcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciBzdHJpbmdpZmllZDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldKSB7XG4gICAgICAgIGlmICgoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpKSB7XG4gICAgICAgICAgcmVzICs9IHN0cmluZ2lmaWVkICsgJyAnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlW2tleV0pIHsgcmVzICs9IGtleSArICcgJzsgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlJ1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLCcgK1xuICAnZm9udC1mYWNlLGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNQcmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiB0YWcgPT09ICdwcmUnOyB9O1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBlbDtcbiAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghZWwpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgc2VsZWN0b3JcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVsXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiAnbXVsdGlwbGUnIGluIHZub2RlLmRhdGEuYXR0cnMpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlIChub2RlLCBrZXksIHZhbCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7XG59XG5cblxudmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0Y3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuXHRjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuXHRpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcblx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG5cdHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG5cdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0dGFnTmFtZTogdGFnTmFtZSxcblx0c2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXHRzZXRBdHRyaWJ1dGU6IHNldEF0dHJpYnV0ZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWtleSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUkMShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSAmJiByZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuXG4vKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzJDEgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gaXNVbmRlZiAocykge1xuICByZXR1cm4gcyA9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmIChzKSB7XG4gIHJldHVybiBzICE9IG51bGxcbn1cblxuZnVuY3Rpb24gc2FtZVZub2RlICh2bm9kZTEsIHZub2RlMikge1xuICByZXR1cm4gKFxuICAgIHZub2RlMS5rZXkgPT09IHZub2RlMi5rZXkgJiZcbiAgICB2bm9kZTEudGFnID09PSB2bm9kZTIudGFnICYmXG4gICAgdm5vZGUxLmlzQ29tbWVudCA9PT0gdm5vZGUyLmlzQ29tbWVudCAmJlxuICAgICF2bm9kZTEuZGF0YSA9PT0gIXZub2RlMi5kYXRhXG4gIClcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcyQxLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzJDFbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChtb2R1bGVzW2pdW2hvb2tzJDFbaV1dICE9PSB1bmRlZmluZWQpIHsgY2JzW2hvb2tzJDFbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rcyQxW2ldXSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5QcmUgPSAwO1xuICBmdW5jdGlvbiBjcmVhdGVFbG0gKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBuZXN0ZWQpIHtcbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGluUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICFpblByZSAmJlxuICAgICAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgICAgICEoY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiYgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5pbmRleE9mKHRhZykgPiAtMSkgJiZcbiAgICAgICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh0YWcpXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgaW5QcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZub2RlLmlzQ29tbWVudCkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzUmVhY3RpdmF0ZWQpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYpIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpLmNyZWF0ZSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGkuaW5zZXJ0KSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0QXR0cmlidXRlKHZub2RlLmVsbSwgaSwgJycpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRBdHRyaWJ1dGUodm5vZGUuZWxtLCBpLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKHJtIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKCFybSkge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCBlbG1Ub01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSkgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV0gOiBudWxsO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxtVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAhZWxtVG9Nb3ZlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAnSXQgc2VlbXMgdGhlcmUgYXJlIGR1cGxpY2F0ZSBrZXlzIHRoYXQgaXMgY2F1c2luZyBhbiB1cGRhdGUgZXJyb3IuICcgK1xuICAgICAgICAgICAgICAnTWFrZSBzdXJlIGVhY2ggdi1mb3IgaXRlbSBoYXMgYSB1bmlxdWUga2V5LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzYW1lVm5vZGUoZWxtVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgbmV3U3RhcnRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKHZub2RlLmlzU3RhdGljICYmXG4gICAgICAgIG9sZFZub2RlLmlzU3RhdGljICYmXG4gICAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAgICh2bm9kZS5pc0Nsb25lZCB8fCB2bm9kZS5pc09uY2UpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgaGFzRGF0YSA9IGlzRGVmKGRhdGEpO1xuICAgIGlmIChoYXNEYXRhICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChoYXNEYXRhICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaGFzRGF0YSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaW5pdGlhbCAmJiB2bm9kZS5wYXJlbnQpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgYmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsc3R5bGUsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IGVsbTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWJhaWxlZCkge1xuICAgICAgICAgICAgICBiYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHxcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICBpZiAoIXZub2RlKSB7XG4gICAgICBpZiAob2xkVm5vZGUpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoIW9sZFZub2RlKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoJ3NlcnZlci1yZW5kZXJlZCcpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3NlcnZlci1yZW5kZXJlZCcpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGh5ZHJhdGluZykge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtJDEgPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh2bm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICAvLyBjb21wb25lbnQgcm9vdCBlbGVtZW50IHJlcGxhY2VkLlxuICAgICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpXShlbXB0eU5vZGUsIHZub2RlLnBhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmVudEVsbSQxICE9PSBudWxsKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSQxLCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUuZGF0YS5ob29rIHx8ICh2bm9kZS5kYXRhLmhvb2sgPSB7fSksICdpbnNlcnQnLCBjYWxsSW5zZXJ0LCAnZGlyLWluc2VydCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9vayB8fCAodm5vZGUuZGF0YS5ob29rID0ge30pLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSwgJ2Rpci1wb3N0cGF0Y2gnKTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKCFvbGRWbm9kZS5kYXRhLmF0dHJzICYmICF2bm9kZS5kYXRhLmF0dHJzKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoYXR0cnMuX19vYl9fKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRTkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChhdHRyc1trZXldID09IG51bGwpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwga2V5KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZScgPyAnZmFsc2UnIDogJ3RydWUnKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoIWRhdGEuc3RhdGljQ2xhc3MgJiYgIWRhdGEuY2xhc3MgJiZcbiAgICAgICghb2xkRGF0YSB8fCAoIW9sZERhdGEuc3RhdGljQ2xhc3MgJiYgIW9sZERhdGEuY2xhc3MpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKHRyYW5zaXRpb25DbGFzcykge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGFkZCQyIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIG9uY2UsXG4gIGNhcHR1cmVcbikge1xuICBpZiAob25jZSkge1xuICAgIHZhciBvbGRIYW5kbGVyID0gaGFuZGxlcjtcbiAgICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICAgIGhhbmRsZXIgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIHJlbW92ZSQzKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgPyBvbGRIYW5kbGVyKGV2KVxuICAgICAgICA6IG9sZEhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMyAoXG4gIGV2ZW50LFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEub24gJiYgIXZub2RlLmRhdGEub24pIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDIsIHJlbW92ZSQzLCB2bm9kZS5jb250ZXh0KTtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEuZG9tUHJvcHMgJiYgIXZub2RlLmRhdGEuZG9tUHJvcHMpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAocHJvcHMuX19vYl9fKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmIChwcm9wc1trZXldID09IG51bGwpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBjdXIgPT0gbnVsbCA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCB2bm9kZSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoXG4gIGVsbSxcbiAgdm5vZGUsXG4gIGNoZWNrVmFsXG4pIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgdm5vZGUudGFnID09PSAnb3B0aW9uJyB8fFxuICAgIGlzRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0lucHV0Q2hhbmdlZCh2bm9kZSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpcyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbSAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzSW5wdXRDaGFuZ2VkICh2bm9kZSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IHZub2RlLmVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IHZub2RlLmVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmICgobW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXIpIHx8IHZub2RlLmVsbS50eXBlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgfVxuICBpZiAobW9kaWZpZXJzICYmIG1vZGlmaWVycy50cmltKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGNoaWxkTm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKSkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIGVsLnN0eWxlW25vcm1hbGl6ZShuYW1lKV0gPSB2YWw7XG4gIH1cbn07XG5cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgdGVzdEVsO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICB0ZXN0RWwgPSB0ZXN0RWwgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIHRlc3RFbC5zdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciB1cHBlciA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeGVkID0gcHJlZml4ZXNbaV0gKyB1cHBlcjtcbiAgICBpZiAocHJlZml4ZWQgaW4gdGVzdEVsLnN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZWRcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmICghZGF0YS5zdGF0aWNTdHlsZSAmJiAhZGF0YS5zdHlsZSAmJlxuICAgICAgIW9sZERhdGEuc3RhdGljU3R5bGUgJiYgIW9sZERhdGEuc3R5bGUpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkVm5vZGUuZGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZFZub2RlLmRhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICB2bm9kZS5kYXRhLnN0eWxlID0gc3R5bGUuX19vYl9fID8gZXh0ZW5kKHt9LCBzdHlsZSkgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKG5ld1N0eWxlW25hbWVdID09IG51bGwpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIWNscy50cmltKCkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gJyAnICsgZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpICsgJyAnO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICFjbHMudHJpbSgpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9ICcgJyArIGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSArICcgJztcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1ci50cmltKCkpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICA6IHNldFRpbWVvdXQ7XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKSkucHVzaChjbHMpO1xuICBhZGRDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUkMShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIHRyYW5zaXRpb25lRGVsYXlzID0gc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10uc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbmVEZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGVsLl9sZWF2ZUNiKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZWwuX2VudGVyQ2IgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgPyBhcHBlYXJDbGFzcyA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyID8gYXBwZWFyQWN0aXZlQ2xhc3MgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcztcbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcikgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcikgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXIgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcikgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXIgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKSA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID1cbiAgICBlbnRlckhvb2sgJiZcbiAgICAvLyBlbnRlckhvb2sgbWF5IGJlIGEgYm91bmQgbWV0aG9kIHdoaWNoIGV4cG9zZXNcbiAgICAvLyB0aGUgbGVuZ3RoIG9mIG9yaWdpbmFsIGZuIGFzIF9sZW5ndGhcbiAgICAoZW50ZXJIb29rLl9sZW5ndGggfHwgZW50ZXJIb29rLmxlbmd0aCkgPiAxO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9vayB8fCAodm5vZGUuZGF0YS5ob29rID0ge30pLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IpIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSwgJ3RyYW5zaXRpb24taW5zZXJ0Jyk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoZWwuX2VudGVyQ2IpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsLl9sZWF2ZUNiIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID1cbiAgICBsZWF2ZSAmJlxuICAgIC8vIGxlYXZlIGhvb2sgbWF5IGJlIGEgYm91bmQgbWV0aG9kIHdoaWNoIGV4cG9zZXNcbiAgICAvLyB0aGUgbGVuZ3RoIG9mIG9yaWdpbmFsIGZuIGFzIF9sZW5ndGhcbiAgICAobGVhdmUuX2xlbmd0aCB8fCBsZWF2ZS5sZW5ndGgpID4gMTtcblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVt2bm9kZS5rZXldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGFwcGVhckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgYXBwZWFyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKSxcbiAgICBhcHBlYXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIilcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCQxID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbnZhciBtb2RlbGFibGVUYWdSRSA9IC9eaW5wdXR8c2VsZWN0fHRleHRhcmVhfHZ1ZS1jb21wb25lbnQtWzAtOV0rKC1bMC05YS16QS1aXy1dKik/JC87XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgbW9kZWwgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAge1xuICAgICAgaWYgKCFtb2RlbGFibGVUYWdSRS50ZXN0KHZub2RlLnRhZykpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiBlbGVtZW50IHR5cGU6IDxcIiArICh2bm9kZS50YWcpICsgXCI+LiBcIiArXG4gICAgICAgICAgJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcgK1xuICAgICAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9O1xuICAgICAgY2IoKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY2IsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGVsLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBpZiAoIWlzQW5kcm9pZCkge1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgZWwub3B0aW9ucyk7IH0pXG4gICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGVsLm9wdGlvbnMpO1xuICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gb3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb25zW2ldKSwgdmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24gJiYgIWlzSUU5KSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodmFsdWUgPT09IG9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uICYmICFpc0lFOSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogbW9kZWwsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuLy8gc3VwcG9ydHMgdHJhbnNpdGlvbiBtb2RlIChvdXQtaW4gLyBpbi1vdXQpXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdLmZuO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICByZXR1cm4gL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpXG4gICAgPyBoKCdrZWVwLWFsaXZlJylcbiAgICA6IG51bGxcbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZzsgfSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJykge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgdmFyIGtleSA9IGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG9sZENoaWxkICYmIG9sZENoaWxkLmRhdGEgJiYgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkpIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZCAmJiAob2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0sIGtleSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlLCBrZXkpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUsIGtleSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7XG4gICAgICAgICAgZGVsYXllZExlYXZlID0gbGVhdmU7XG4gICAgICAgIH0sIGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGxpc3QgaXRlbXMuXG4vLyBzdXBwb3J0cyBtb3ZlIHRyYW5zaXRpb25zIHVzaW5nIHRoZSBGTElQIHRlY2huaXF1ZS5cblxuLy8gQmVjYXVzZSB0aGUgdmRvbSdzIGNoaWxkcmVuIHVwZGF0ZSBhbGdvcml0aG0gaXMgXCJ1bnN0YWJsZVwiIC0gaS5lLlxuLy8gaXQgZG9lc24ndCBndWFyYW50ZWUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHJlbW92ZWQgZWxlbWVudHMsXG4vLyB3ZSBmb3JjZSB0cmFuc2l0aW9uLWdyb3VwIHRvIHVwZGF0ZSBpdHMgY2hpbGRyZW4gaW50byB0d28gcGFzc2VzOlxuLy8gaW4gdGhlIGZpcnN0IHBhc3MsIHdlIHJlbW92ZSBhbGwgbm9kZXMgdGhhdCBuZWVkIHRvIGJlIHJlbW92ZWQsXG4vLyB0cmlnZ2VyaW5nIHRoZWlyIGxlYXZpbmcgdHJhbnNpdGlvbjsgaW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBpbnNlcnQvbW92ZVxuLy8gaW50byB0aGUgZmluYWwgZGlzaXJlZCBzdGF0ZS4gVGhpcyB3YXkgaW4gdGhlIHNlY29uZCBwYXNzIHJlbW92ZWRcbi8vIG5vZGVzIHdpbGwgcmVtYWluIHdoZXJlIHRoZXkgc2hvdWxkIGJlLlxuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzXG4gICAgICAgICAgICA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxuICAgICAgICAgICAgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24gYmVmb3JlVXBkYXRlICgpIHtcbiAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgdGhpcy5fX3BhdGNoX18oXG4gICAgICB0aGlzLl92bm9kZSxcbiAgICAgIHRoaXMua2VwdCxcbiAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICk7XG4gICAgdGhpcy5fdm5vZGUgPSB0aGlzLmtlcHQ7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIHZhciBmID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5faGFzTW92ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGVsKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZSQzLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblZ1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZSQzLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUkMy5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlJDMub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlJDMucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoJDEgOiBub29wO1xuXG4vLyB3cmFwIG1vdW50XG5WdWUkMy5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiB0aGlzLl9tb3VudChlbCwgaHlkcmF0aW5nKVxufTtcblxuaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaW5Ccm93c2VyICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICApO1xufVxuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlJDMpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgaW5Ccm93c2VyICYmICFpc0VkZ2UgJiYgL0Nocm9tZVxcL1xcZCsvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICk7XG4gICAgfVxuICB9XG59LCAwKTtcblxuLyogICovXG5cbi8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG5mdW5jdGlvbiBzaG91bGREZWNvZGUgKGNvbnRlbnQsIGVuY29kZWQpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gXCI8ZGl2IGE9XFxcIlwiICsgY29udGVudCArIFwiXFxcIj5cIjtcbiAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZihlbmNvZGVkKSA+IDBcbn1cblxuLy8gIzM2NjNcbi8vIElFIGVuY29kZXMgbmV3bGluZXMgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXMgd2hpbGUgb3RoZXIgYnJvd3NlcnMgZG9uJ3RcbnZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IGluQnJvd3NlciA/IHNob3VsZERlY29kZSgnXFxuJywgJyYjMTA7JykgOiBmYWxzZTtcblxuLyogICovXG5cbnZhciBkZWNvZGVyO1xuXG5mdW5jdGlvbiBkZWNvZGUgKGh0bWwpIHtcbiAgZGVjb2RlciA9IGRlY29kZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRlY29kZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnRcbn1cblxuLyogICovXG5cbnZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcChcbiAgJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLCcgK1xuICAnbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInLFxuICB0cnVlXG4pO1xuXG4vLyBFbGVtZW50cyB0aGF0IHlvdSBjYW4sIGludGVudGlvbmFsbHksIGxlYXZlIG9wZW5cbi8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbnZhciBjYW5CZUxlZnRPcGVuVGFnID0gbWFrZU1hcChcbiAgJ2NvbGdyb3VwLGRkLGR0LGxpLG9wdGlvbnMscCx0ZCx0Zm9vdCx0aCx0aGVhZCx0cixzb3VyY2UnLFxuICB0cnVlXG4pO1xuXG4vLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG4vLyBQaHJhc2luZyBDb250ZW50IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI3BocmFzaW5nLWNvbnRlbnRcbnZhciBpc05vblBocmFzaW5nVGFnID0gbWFrZU1hcChcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSwnICtcbiAgJ2gxLGgyLGgzLGg0LGg1LGg2LGhlYWQsaGVhZGVyLGhncm91cCxocixodG1sLGxlZ2VuZCxsaSxtZW51aXRlbSxtZXRhLCcgK1xuICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAndGl0bGUsdHIsdHJhY2snLFxuICB0cnVlXG4pO1xuXG4vKipcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGl0J3MgbW9zdGx5IHZlbmRvciBjb2RlLlxuICovXG5cbi8qIVxuICogSFRNTCBQYXJzZXIgQnkgSm9obiBSZXNpZyAoZWpvaG4ub3JnKVxuICogTW9kaWZpZWQgYnkgSnVyaXkgXCJrYW5nYXhcIiBaYXl0c2V2XG4gKiBPcmlnaW5hbCBjb2RlIGJ5IEVyaWsgQXJ2aWRzc29uLCBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlXG4gKiBodHRwOi8vZXJpay5lYWUubmV0L3NpbXBsZWh0bWxwYXJzZXIvc2ltcGxlaHRtbHBhcnNlci5qc1xuICovXG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xudmFyIHNpbmdsZUF0dHJJZGVudGlmaWVyID0gLyhbXlxcc1wiJzw+Lz1dKykvO1xudmFyIHNpbmdsZUF0dHJBc3NpZ24gPSAvKD86PSkvO1xudmFyIHNpbmdsZUF0dHJWYWx1ZXMgPSBbXG4gIC8vIGF0dHIgdmFsdWUgZG91YmxlIHF1b3Rlc1xuICAvXCIoW15cIl0qKVwiKy8uc291cmNlLFxuICAvLyBhdHRyIHZhbHVlLCBzaW5nbGUgcXVvdGVzXG4gIC8nKFteJ10qKScrLy5zb3VyY2UsXG4gIC8vIGF0dHIgdmFsdWUsIG5vIHF1b3Rlc1xuICAvKFteXFxzXCInPTw+YF0rKS8uc291cmNlXG5dO1xudmFyIGF0dHJpYnV0ZSA9IG5ldyBSZWdFeHAoXG4gICdeXFxcXHMqJyArIHNpbmdsZUF0dHJJZGVudGlmaWVyLnNvdXJjZSArXG4gICcoPzpcXFxccyooJyArIHNpbmdsZUF0dHJBc3NpZ24uc291cmNlICsgJyknICtcbiAgJ1xcXFxzKig/OicgKyBzaW5nbGVBdHRyVmFsdWVzLmpvaW4oJ3wnKSArICcpKT8nXG4pO1xuXG4vLyBjb3VsZCB1c2UgaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvUkVDLXhtbC1uYW1lcy0xOTk5MDExNC8jTlQtUU5hbWVcbi8vIGJ1dCBmb3IgVnVlIHRlbXBsYXRlcyB3ZSBjYW4gZW5mb3JjZSBhIHNpbXBsZSBjaGFyc2V0XG52YXIgbmNuYW1lID0gJ1thLXpBLVpfXVtcXFxcd1xcXFwtXFxcXC5dKic7XG52YXIgcW5hbWVDYXB0dXJlID0gJygoPzonICsgbmNuYW1lICsgJ1xcXFw6KT8nICsgbmNuYW1lICsgJyknO1xudmFyIHN0YXJ0VGFnT3BlbiA9IG5ldyBSZWdFeHAoJ148JyArIHFuYW1lQ2FwdHVyZSk7XG52YXIgc3RhcnRUYWdDbG9zZSA9IC9eXFxzKihcXC8/KT4vO1xudmFyIGVuZFRhZyA9IG5ldyBSZWdFeHAoJ148XFxcXC8nICsgcW5hbWVDYXB0dXJlICsgJ1tePl0qPicpO1xudmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbnZhciBjb21tZW50ID0gL148IS0tLztcbnZhciBjb25kaXRpb25hbENvbW1lbnQgPSAvXjwhXFxbLztcblxudmFyIElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gPSBmYWxzZTtcbid4Jy5yZXBsYWNlKC94KC4pPy9nLCBmdW5jdGlvbiAobSwgZykge1xuICBJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOID0gZyA9PT0gJyc7XG59KTtcblxuLy8gU3BlY2lhbCBFbGVtZW50cyAoY2FuIGNvbnRhaW4gYW55dGhpbmcpXG52YXIgaXNTY3JpcHRPclN0eWxlID0gbWFrZU1hcCgnc2NyaXB0LHN0eWxlJywgdHJ1ZSk7XG52YXIgcmVDYWNoZSA9IHt9O1xuXG52YXIgbHRSRSA9IC8mbHQ7L2c7XG52YXIgZ3RSRSA9IC8mZ3Q7L2c7XG52YXIgbmxSRSA9IC8mIzEwOy9nO1xudmFyIGFtcFJFID0gLyZhbXA7L2c7XG52YXIgcXVvdGVSRSA9IC8mcXVvdDsvZztcblxuZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gIGlmIChzaG91bGREZWNvZGVOZXdsaW5lcykge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShubFJFLCAnXFxuJyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG4gICAgLnJlcGxhY2UobHRSRSwgJzwnKVxuICAgIC5yZXBsYWNlKGd0UkUsICc+JylcbiAgICAucmVwbGFjZShhbXBSRSwgJyYnKVxuICAgIC5yZXBsYWNlKHF1b3RlUkUsICdcIicpXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG4gIHZhciBpc1VuYXJ5VGFnJCQxID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdCwgbGFzdFRhZztcbiAgd2hpbGUgKGh0bWwpIHtcbiAgICBsYXN0ID0gaHRtbDtcbiAgICAvLyBNYWtlIHN1cmUgd2UncmUgbm90IGluIGEgc2NyaXB0IG9yIHN0eWxlIGVsZW1lbnRcbiAgICBpZiAoIWxhc3RUYWcgfHwgIWlzU2NyaXB0T3JTdHlsZShsYXN0VGFnKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbmRpdGlvbmFsRW5kICsgMik7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvY3R5cGU6XG4gICAgICAgIHZhciBkb2N0eXBlTWF0Y2ggPSBodG1sLm1hdGNoKGRvY3R5cGUpO1xuICAgICAgICBpZiAoZG9jdHlwZU1hdGNoKSB7XG4gICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5kIHRhZzpcbiAgICAgICAgdmFyIGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDtcbiAgICAgICAgICBhZHZhbmNlKGVuZFRhZ01hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgcGFyc2VFbmRUYWcoZW5kVGFnTWF0Y2hbMV0sIGN1ckluZGV4LCBpbmRleCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IHRhZzpcbiAgICAgICAgdmFyIHN0YXJ0VGFnTWF0Y2ggPSBwYXJzZVN0YXJ0VGFnKCk7XG4gICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7XG4gICAgICAgICAgaGFuZGxlU3RhcnRUYWcoc3RhcnRUYWdNYXRjaCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdGV4dCA9ICh2b2lkIDApLCByZXN0JDEgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgaWYgKHRleHRFbmQgPiAwKSB7XG4gICAgICAgIHJlc3QkMSA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICAhZW5kVGFnLnRlc3QocmVzdCQxKSAmJlxuICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0JDEpICYmXG4gICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0JDEpICYmXG4gICAgICAgICAgIWNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KHJlc3QkMSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICBuZXh0ID0gcmVzdCQxLmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcbiAgICAgICAgICByZXN0JDEgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB9XG4gICAgICAgIHRleHQgPSBodG1sLnN1YnN0cmluZygwLCB0ZXh0RW5kKTtcbiAgICAgICAgYWR2YW5jZSh0ZXh0RW5kKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHRFbmQgPCAwKSB7XG4gICAgICAgIHRleHQgPSBodG1sO1xuICAgICAgICBodG1sID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIHZhciByZXN0ID0gaHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZywgZnVuY3Rpb24gKGFsbCwgdGV4dCwgZW5kVGFnKSB7XG4gICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgIGlmIChzdGFja2VkVGFnICE9PSAnc2NyaXB0JyAmJiBzdGFja2VkVGFnICE9PSAnc3R5bGUnICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhLS0oW1xcc1xcU10qPyktLT4vZywgJyQxJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csICckMScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0pO1xuICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0Lmxlbmd0aDtcbiAgICAgIGh0bWwgPSByZXN0O1xuICAgICAgcGFyc2VFbmRUYWcoc3RhY2tlZFRhZywgaW5kZXggLSBlbmRUYWdMZW5ndGgsIGluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAoaHRtbCA9PT0gbGFzdCAmJiBvcHRpb25zLmNoYXJzKSB7XG4gICAgICBvcHRpb25zLmNoYXJzKGh0bWwpO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3NcbiAgcGFyc2VFbmRUYWcoKTtcblxuICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgaW5kZXggKz0gbjtcbiAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHtcbiAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICBhdHRyczogW10sXG4gICAgICAgIHN0YXJ0OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgIHZhciBlbmQsIGF0dHI7XG4gICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goYXR0cmlidXRlKSkpIHtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG1hdGNoLnRhZ05hbWU7XG4gICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCB0YWdOYW1lID09PSAnaHRtbCcgJiYgbGFzdFRhZyA9PT0gJ2hlYWQnIHx8ICEhdW5hcnlTbGFzaDtcblxuICAgIHZhciBsID0gbWF0Y2guYXR0cnMubGVuZ3RoO1xuICAgIHZhciBhdHRycyA9IG5ldyBBcnJheShsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFyZ3MgPSBtYXRjaC5hdHRyc1tpXTtcbiAgICAgIC8vIGhhY2tpc2ggd29yayBhcm91bmQgRkYgYnVnIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTM2OTc3OFxuICAgICAgaWYgKElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gJiYgYXJnc1swXS5pbmRleE9mKCdcIlwiJykgPT09IC0xKSB7XG4gICAgICAgIGlmIChhcmdzWzNdID09PSAnJykgeyBkZWxldGUgYXJnc1szXTsgfVxuICAgICAgICBpZiAoYXJnc1s0XSA9PT0gJycpIHsgZGVsZXRlIGFyZ3NbNF07IH1cbiAgICAgICAgaWYgKGFyZ3NbNV0gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzVdOyB9XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmdzWzNdIHx8IGFyZ3NbNF0gfHwgYXJnc1s1XSB8fCAnJztcbiAgICAgIGF0dHJzW2ldID0ge1xuICAgICAgICBuYW1lOiBhcmdzWzFdLFxuICAgICAgICB2YWx1ZTogZGVjb2RlQXR0cihcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzXG4gICAgICAgIClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCF1bmFyeSkge1xuICAgICAgc3RhY2sucHVzaCh7IHRhZzogdGFnTmFtZSwgbG93ZXJDYXNlZFRhZzogdGFnTmFtZS50b0xvd2VyQ2FzZSgpLCBhdHRyczogYXR0cnMgfSk7XG4gICAgICBsYXN0VGFnID0gdGFnTmFtZTtcbiAgICAgIHVuYXJ5U2xhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBhdHRycywgdW5hcnksIG1hdGNoLnN0YXJ0LCBtYXRjaC5lbmQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRW5kVGFnICh0YWdOYW1lLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHBvcywgbG93ZXJDYXNlZFRhZ05hbWU7XG4gICAgaWYgKHN0YXJ0ID09IG51bGwpIHsgc3RhcnQgPSBpbmRleDsgfVxuICAgIGlmIChlbmQgPT0gbnVsbCkgeyBlbmQgPSBpbmRleDsgfVxuXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgb3BlbmVkIHRhZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7XG4gICAgICAgIGlmIChzdGFja1twb3NdLmxvd2VyQ2FzZWRUYWcgPT09IGxvd2VyQ2FzZWRUYWdOYW1lKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcFxuICAgICAgcG9zID0gMDtcbiAgICB9XG5cbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG4gICAgICBmb3IgKHZhciBpID0gc3RhY2subGVuZ3RoIC0gMTsgaSA+PSBwb3M7IGktLSkge1xuICAgICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgICBvcHRpb25zLmVuZChzdGFja1tpXS50YWcsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgb3BlbiBlbGVtZW50cyBmcm9tIHRoZSBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoID0gcG9zO1xuICAgICAgbGFzdFRhZyA9IHBvcyAmJiBzdGFja1twb3MgLSAxXS50YWc7XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ2JyJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgdHJ1ZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ3AnKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCBmYWxzZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgb3B0aW9ucy5lbmQodGFnTmFtZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgdmFyIGluRG91YmxlID0gZmFsc2U7XG4gIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG4gIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gIHZhciBjdXJseSA9IDA7XG4gIHZhciBzcXVhcmUgPSAwO1xuICB2YXIgcGFyZW4gPSAwO1xuICB2YXIgbGFzdEZpbHRlckluZGV4ID0gMDtcbiAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgIHByZXYgPSBjO1xuICAgIGMgPSBleHAuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5Eb3VibGUpIHtcbiAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgeyBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG4gICAgICBleHAuY2hhckNvZGVBdChpIC0gMSkgIT09IDB4N0MgJiZcbiAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICkge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMHgyMjogaW5Eb3VibGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vIFwiXG4gICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoXG4gICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICB2YXIgaiA9IGkgLSAxO1xuICAgICAgICB2YXIgcCA9ICh2b2lkIDApO1xuICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTtcbiAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXAgfHwgIS9bXFx3JF0vLnRlc3QocCkpIHtcbiAgICAgICAgICBpblJlZ2V4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgfSBlbHNlIGlmIChsYXN0RmlsdGVySW5kZXggIT09IDApIHtcbiAgICBwdXNoRmlsdGVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoRmlsdGVyICgpIHtcbiAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICB9XG5cbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiA9IHdyYXBGaWx0ZXIoZXhwcmVzc2lvbiwgZmlsdGVyc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4cHJlc3Npb25cbn1cblxuZnVuY3Rpb24gd3JhcEZpbHRlciAoZXhwLCBmaWx0ZXIpIHtcbiAgdmFyIGkgPSBmaWx0ZXIuaW5kZXhPZignKCcpO1xuICBpZiAoaSA8IDApIHtcbiAgICAvLyBfZjogcmVzb2x2ZUZpbHRlclxuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBmaWx0ZXIgKyBcIlxcXCIpKFwiICsgZXhwICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgdmFyIG5hbWUgPSBmaWx0ZXIuc2xpY2UoMCwgaSk7XG4gICAgdmFyIGFyZ3MgPSBmaWx0ZXIuc2xpY2UoaSArIDEpO1xuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBuYW1lICsgXCJcXFwiKShcIiArIGV4cCArIFwiLFwiICsgYXJncylcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXG4pKz8pXFx9XFx9L2c7XG52YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbnZhciBidWlsZFJlZ2V4ID0gY2FjaGVkKGZ1bmN0aW9uIChkZWxpbWl0ZXJzKSB7XG4gIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAob3BlbiArICcoKD86LnxcXFxcbikrPyknICsgY2xvc2UsICdnJylcbn0pO1xuXG5mdW5jdGlvbiBwYXJzZVRleHQgKFxuICB0ZXh0LFxuICBkZWxpbWl0ZXJzXG4pIHtcbiAgdmFyIHRhZ1JFID0gZGVsaW1pdGVycyA/IGJ1aWxkUmVnZXgoZGVsaW1pdGVycykgOiBkZWZhdWx0VGFnUkU7XG4gIGlmICghdGFnUkUudGVzdCh0ZXh0KSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIGxhc3RJbmRleCA9IHRhZ1JFLmxhc3RJbmRleCA9IDA7XG4gIHZhciBtYXRjaCwgaW5kZXg7XG4gIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgIGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gcHVzaCB0ZXh0IHRva2VuXG4gICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKSk7XG4gICAgfVxuICAgIC8vIHRhZyB0b2tlblxuICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTtcbiAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gIH1cbiAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodGV4dC5zbGljZShsYXN0SW5kZXgpKSk7XG4gIH1cbiAgcmV0dXJuIHRva2Vucy5qb2luKCcrJylcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJhc2VXYXJuIChtc2cpIHtcbiAgY29uc29sZS5lcnJvcigoXCJbVnVlIHBhcnNlcl06IFwiICsgbXNnKSk7XG59XG5cbmZ1bmN0aW9uIHBsdWNrTW9kdWxlRnVuY3Rpb24gKFxuICBtb2R1bGVzLFxuICBrZXlcbikge1xuICByZXR1cm4gbW9kdWxlc1xuICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KVxuICAgIDogW11cbn1cblxuZnVuY3Rpb24gYWRkUHJvcCAoZWwsIG5hbWUsIHZhbHVlKSB7XG4gIChlbC5wcm9wcyB8fCAoZWwucHJvcHMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSkge1xuICAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKS5wdXNoKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0pO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCByYXdOYW1lOiByYXdOYW1lLCB2YWx1ZTogdmFsdWUsIGFyZzogYXJnLCBtb2RpZmllcnM6IG1vZGlmaWVycyB9KTtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlciAoXG4gIGVsLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzLFxuICBpbXBvcnRhbnRcbikge1xuICAvLyBjaGVjayBjYXB0dXJlIG1vZGlmaWVyXG4gIGlmIChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLmNhcHR1cmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7XG4gICAgbmFtZSA9ICchJyArIG5hbWU7IC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG4gIH1cbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMub25jZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICBuYW1lID0gJ34nICsgbmFtZTsgLy8gbWFyayB0aGUgZXZlbnQgYXMgb25jZVxuICB9XG4gIHZhciBldmVudHM7XG4gIGlmIChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMubmF0aXZlO1xuICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50cyA9IGVsLmV2ZW50cyB8fCAoZWwuZXZlbnRzID0ge30pO1xuICB9XG4gIHZhciBuZXdIYW5kbGVyID0geyB2YWx1ZTogdmFsdWUsIG1vZGlmaWVyczogbW9kaWZpZXJzIH07XG4gIHZhciBoYW5kbGVycyA9IGV2ZW50c1tuYW1lXTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgIGltcG9ydGFudCA/IGhhbmRsZXJzLnVuc2hpZnQobmV3SGFuZGxlcikgOiBoYW5kbGVycy5wdXNoKG5ld0hhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7XG4gICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICBnZXRTdGF0aWNcbikge1xuICB2YXIgZHluYW1pY1ZhbHVlID1cbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWJpbmQ6JyArIG5hbWUpO1xuICBpZiAoZHluYW1pY1ZhbHVlICE9IG51bGwpIHtcbiAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgfSBlbHNlIGlmIChnZXRTdGF0aWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHN0YXRpY1ZhbHVlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgbmFtZSk7XG4gICAgaWYgKHN0YXRpY1ZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGF0aWNWYWx1ZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ciAoZWwsIG5hbWUpIHtcbiAgdmFyIHZhbDtcbiAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWxcbn1cblxudmFyIGxlbjtcbnZhciBzdHI7XG52YXIgY2hyO1xudmFyIGluZGV4JDE7XG52YXIgZXhwcmVzc2lvblBvcztcbnZhciBleHByZXNzaW9uRW5kUG9zO1xuXG4vKipcbiAqIHBhcnNlIGRpcmVjdGl2ZSBtb2RlbCB0byBkbyB0aGUgYXJyYXkgdXBkYXRlIHRyYW5zZm9ybS4gYVtpZHhdID0gdmFsID0+ICQkYS5zcGxpY2UoJCRpZHgsIDEsIHZhbClcbiAqXG4gKiBmb3IgbG9vcCBwb3NzaWJsZSBjYXNlczpcbiAqXG4gKiAtIHRlc3RcbiAqIC0gdGVzdFtpZHhdXG4gKiAtIHRlc3RbdGVzdDFbaWR4XV1cbiAqIC0gdGVzdFtcImFcIl1baWR4XVxuICogLSB4eHgudGVzdFthW2FdLnRlc3QxW2lkeF1dXG4gKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFbaWR4XV1cbiAqXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VNb2RlbCAodmFsKSB7XG4gIHN0ciA9IHZhbDtcbiAgbGVuID0gc3RyLmxlbmd0aDtcbiAgaW5kZXgkMSA9IGV4cHJlc3Npb25Qb3MgPSBleHByZXNzaW9uRW5kUG9zID0gMDtcblxuICBpZiAodmFsLmluZGV4T2YoJ1snKSA8IDAgfHwgdmFsLmxhc3RJbmRleE9mKCddJykgPCBsZW4gLSAxKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cDogdmFsLFxuICAgICAgaWR4OiBudWxsXG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cDogdmFsLnN1YnN0cmluZygwLCBleHByZXNzaW9uUG9zKSxcbiAgICBpZHg6IHZhbC5zdWJzdHJpbmcoZXhwcmVzc2lvblBvcyArIDEsIGV4cHJlc3Npb25FbmRQb3MpXG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dCAoKSB7XG4gIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpXG59XG5cbmZ1bmN0aW9uIGVvZiAoKSB7XG4gIHJldHVybiBpbmRleCQxID49IGxlblxufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1N0YXJ0IChjaHIpIHtcbiAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4Mjdcbn1cblxuZnVuY3Rpb24gcGFyc2VCcmFja2V0IChjaHIpIHtcbiAgdmFyIGluQnJhY2tldCA9IDE7XG4gIGV4cHJlc3Npb25Qb3MgPSBpbmRleCQxO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoY2hyID09PSAweDVCKSB7IGluQnJhY2tldCsrOyB9XG4gICAgaWYgKGNociA9PT0gMHg1RCkgeyBpbkJyYWNrZXQtLTsgfVxuICAgIGlmIChpbkJyYWNrZXQgPT09IDApIHtcbiAgICAgIGV4cHJlc3Npb25FbmRQb3MgPSBpbmRleCQxO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VTdHJpbmcgKGNocikge1xuICB2YXIgc3RyaW5nUXVvdGUgPSBjaHI7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGNociA9PT0gc3RyaW5nUXVvdGUpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyUkUgPSAvXnYtfF5AfF46LztcbnZhciBmb3JBbGlhc1JFID0gLyguKj8pXFxzKyg/OmlufG9mKVxccysoLiopLztcbnZhciBmb3JJdGVyYXRvclJFID0gL1xcKChcXHtbXn1dKlxcfXxbXixdKiksKFteLF0qKSg/OiwoW14sXSopKT9cXCkvO1xudmFyIGJpbmRSRSA9IC9eOnxedi1iaW5kOi87XG52YXIgb25SRSA9IC9eQHxedi1vbjovO1xudmFyIGFyZ1JFID0gLzooLiopJC87XG52YXIgbW9kaWZpZXJSRSA9IC9cXC5bXi5dKy9nO1xuXG52YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChkZWNvZGUpO1xuXG4vLyBjb25maWd1cmFibGUgc3RhdGVcbnZhciB3YXJuJDE7XG52YXIgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2U7XG52YXIgcGxhdGZvcm1NdXN0VXNlUHJvcDtcbnZhciBwbGF0Zm9ybUlzUHJlVGFnO1xudmFyIHByZVRyYW5zZm9ybXM7XG52YXIgdHJhbnNmb3JtcztcbnZhciBwb3N0VHJhbnNmb3JtcztcbnZhciBkZWxpbWl0ZXJzO1xuXG4vKipcbiAqIENvbnZlcnQgSFRNTCBzdHJpbmcgdG8gQVNULlxuICovXG5mdW5jdGlvbiBwYXJzZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgd2FybiQxID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICBwbGF0Zm9ybU11c3RVc2VQcm9wID0gb3B0aW9ucy5tdXN0VXNlUHJvcCB8fCBubztcbiAgcGxhdGZvcm1Jc1ByZVRhZyA9IG9wdGlvbnMuaXNQcmVUYWcgfHwgbm87XG4gIHByZVRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3ByZVRyYW5zZm9ybU5vZGUnKTtcbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwb3N0VHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncG9zdFRyYW5zZm9ybU5vZGUnKTtcbiAgZGVsaW1pdGVycyA9IG9wdGlvbnMuZGVsaW1pdGVycztcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciByb290O1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmFyIGluVlByZSA9IGZhbHNlO1xuICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICBleHBlY3RIVE1MOiBvcHRpb25zLmV4cGVjdEhUTUwsXG4gICAgaXNVbmFyeVRhZzogb3B0aW9ucy5pc1VuYXJ5VGFnLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCAodGFnLCBhdHRycywgdW5hcnkpIHtcbiAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cbiAgICAgIC8vIGluaGVyaXQgcGFyZW50IG5zIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgdmFyIG5zID0gKGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5ucykgfHwgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UodGFnKTtcblxuICAgICAgLy8gaGFuZGxlIElFIHN2ZyBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiYgbnMgPT09ICdzdmcnKSB7XG4gICAgICAgIGF0dHJzID0gZ3VhcmRJRVNWR0J1ZyhhdHRycyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0ge1xuICAgICAgICB0eXBlOiAxLFxuICAgICAgICB0YWc6IHRhZyxcbiAgICAgICAgYXR0cnNMaXN0OiBhdHRycyxcbiAgICAgICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgICAgIHBhcmVudDogY3VycmVudFBhcmVudCxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9O1xuICAgICAgaWYgKG5zKSB7XG4gICAgICAgIGVsZW1lbnQubnMgPSBucztcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yYmlkZGVuID0gdHJ1ZTtcbiAgICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQxKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByZVRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3NGb3IoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NJZihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc09uY2UoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NLZXkoZWxlbWVudCk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgYWZ0ZXJcbiAgICAgICAgLy8gcmVtb3Zpbmcgc3RydWN0dXJhbCBhdHRyaWJ1dGVzXG4gICAgICAgIGVsZW1lbnQucGxhaW4gPSAhZWxlbWVudC5rZXkgJiYgIWF0dHJzLmxlbmd0aDtcblxuICAgICAgICBwcm9jZXNzUmVmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzU2xvdChlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgdHJhbnNmb3Jtc1tpJDFdKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NBdHRycyhlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2hlY2tSb290Q29uc3RyYWludHMgKGVsKSB7XG4gICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkKSB7XG4gICAgICAgICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJDYW5ub3QgdXNlIDxcIiArIChlbC50YWcpICsgXCI+IGFzIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSBpdCBtYXkgXCIgK1xuICAgICAgICAgICAgICAnY29udGFpbiBtdWx0aXBsZSBub2RlczpcXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50czpcXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhlbGVtZW50KTtcbiAgICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkKSB7XG4gICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkNvbXBvbmVudCB0ZW1wbGF0ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSByb290IGVsZW1lbnQ6XCIgK1xuICAgICAgICAgICAgXCJcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuICAgICAgICAgICAgXCJ1c2Ugdi1lbHNlLWlmIHRvIGNoYWluIHRoZW0gaW5zdGVhZC5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UGFyZW50ICYmICFlbGVtZW50LmZvcmJpZGRlbikge1xuICAgICAgICBpZiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSB7XG4gICAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnNsb3RTY29wZSkgeyAvLyBzY29wZWQgc2xvdFxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQucGxhaW4gPSBmYWxzZTtcbiAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQuc2xvdFRhcmdldCB8fCAnZGVmYXVsdCc7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBjdXJyZW50UGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICAgIGN1cnJlbnRQYXJlbnQgPSBlbGVtZW50O1xuICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgLy8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zXG4gICAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkkMisrKSB7XG4gICAgICAgIHBvc3RUcmFuc2Zvcm1zW2kkMl0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGVuZDogZnVuY3Rpb24gZW5kICgpIHtcbiAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICB2YXIgZWxlbWVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIGxhc3ROb2RlID0gZWxlbWVudC5jaGlsZHJlbltlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhc3ROb2RlICYmIGxhc3ROb2RlLnR5cGUgPT09IDMgJiYgbGFzdE5vZGUudGV4dCA9PT0gJyAnKSB7XG4gICAgICAgIGVsZW1lbnQuY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgICAvLyBwb3Agc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCAtPSAxO1xuICAgICAgY3VycmVudFBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgLy8gY2hlY2sgcHJlIHN0YXRlXG4gICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2hhcnM6IGZ1bmN0aW9uIGNoYXJzICh0ZXh0KSB7XG4gICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWQgJiYgdGV4dCA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICdDb21wb25lbnQgdGVtcGxhdGUgcmVxdWlyZXMgYSByb290IGVsZW1lbnQsIHJhdGhlciB0aGFuIGp1c3QgdGV4dDpcXG5cXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gSUUgdGV4dGFyZWEgcGxhY2Vob2xkZXIgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmXG4gICAgICAgICAgY3VycmVudFBhcmVudC50YWcgPT09ICd0ZXh0YXJlYScgJiZcbiAgICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuID0gY3VycmVudFBhcmVudC5jaGlsZHJlbjtcbiAgICAgIHRleHQgPSBpblByZSB8fCB0ZXh0LnRyaW0oKVxuICAgICAgICA/IGRlY29kZUhUTUxDYWNoZWQodGV4dClcbiAgICAgICAgLy8gb25seSBwcmVzZXJ2ZSB3aGl0ZXNwYWNlIGlmIGl0cyBub3QgcmlnaHQgYWZ0ZXIgYSBzdGFydGluZyB0YWdcbiAgICAgICAgOiBwcmVzZXJ2ZVdoaXRlc3BhY2UgJiYgY2hpbGRyZW4ubGVuZ3RoID8gJyAnIDogJyc7XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbjtcbiAgICAgICAgaWYgKCFpblZQcmUgJiYgdGV4dCAhPT0gJyAnICYmIChleHByZXNzaW9uID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogMixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IGV4cHJlc3Npb24sXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGV4dCAhPT0gJyAnIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGwgPSBlbC5hdHRyc0xpc3QubGVuZ3RoO1xuICBpZiAobCkge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogZWwuYXR0cnNMaXN0W2ldLm5hbWUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShlbC5hdHRyc0xpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm4kMShcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICB2YXIgcmVmID0gZ2V0QmluZGluZ0F0dHIoZWwsICdyZWYnKTtcbiAgaWYgKHJlZikge1xuICAgIGVsLnJlZiA9IHJlZjtcbiAgICBlbC5yZWZJbkZvciA9IGNoZWNrSW5Gb3IoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG4gIHZhciBleHA7XG4gIGlmICgoZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZm9yJykpKSB7XG4gICAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gICAgaWYgKCFpbk1hdGNoKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDEoXG4gICAgICAgIChcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIgKyBleHApXG4gICAgICApO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGVsLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICAgIHZhciBhbGlhcyA9IGluTWF0Y2hbMV0udHJpbSgpO1xuICAgIHZhciBpdGVyYXRvck1hdGNoID0gYWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICAgIGVsLmFsaWFzID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgICBlbC5pdGVyYXRvcjEgPSBpdGVyYXRvck1hdGNoWzJdLnRyaW0oKTtcbiAgICAgIGlmIChpdGVyYXRvck1hdGNoWzNdKSB7XG4gICAgICAgIGVsLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbM10udHJpbSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5hbGlhcyA9IGFsaWFzO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWYgKGVsKSB7XG4gIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicpO1xuICBpZiAoZXhwKSB7XG4gICAgZWwuaWYgPSBleHA7XG4gICAgYWRkSWZDb25kaXRpb24oZWwsIHtcbiAgICAgIGV4cDogZXhwLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnKSAhPSBudWxsKSB7XG4gICAgICBlbC5lbHNlID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGVsc2VpZiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnKTtcbiAgICBpZiAoZWxzZWlmKSB7XG4gICAgICBlbC5lbHNlaWYgPSBlbHNlaWY7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZkNvbmRpdGlvbnMgKGVsLCBwYXJlbnQpIHtcbiAgdmFyIHByZXYgPSBmaW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtcbiAgaWYgKHByZXYgJiYgcHJldi5pZikge1xuICAgIGFkZElmQ29uZGl0aW9uKHByZXYsIHtcbiAgICAgIGV4cDogZWwuZWxzZWlmLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgd2FybiQxKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICB2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5baV1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NTbG90IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC5rZXkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiICtcbiAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gICAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnXCJcIicgPyAnXCJkZWZhdWx0XCInIDogc2xvdFRhcmdldDtcbiAgICB9XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgZWwuc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIHZhciBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIG1vZGlmaWVycywgaXNQcm9wO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUpO1xuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kUkUudGVzdChuYW1lKSkgeyAvLyB2LWJpbmRcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZpbHRlcnModmFsdWUpO1xuICAgICAgICBpc1Byb3AgPSBmYWxzZTtcbiAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgIGlmIChtb2RpZmllcnMucHJvcCkge1xuICAgICAgICAgICAgaXNQcm9wID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCkge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9wIHx8IHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKSkge1xuICAgICAgICAgIGFkZFByb3AoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShkaXJSRSwgJycpO1xuICAgICAgICAvLyBwYXJzZSBhcmdcbiAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgIGlmIChhcmdNYXRjaCAmJiAoYXJnID0gYXJnTWF0Y2hbMV0pKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLShhcmcubGVuZ3RoICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgbW9kaWZpZXJzKTtcbiAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsaXRlcmFsIGF0dHJpYnV0ZVxuICAgICAge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dCh2YWx1ZSwgZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChleHByZXNzaW9uKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZGRBdHRyKGVsLCBuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0luRm9yIChlbCkge1xuICB2YXIgcGFyZW50ID0gZWw7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LmZvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwYXJzZU1vZGlmaWVycyAobmFtZSkge1xuICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgbWF0Y2guZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUF0dHJzTWFwIChhdHRycykge1xuICB2YXIgbWFwID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSkge1xuICAgICAgd2FybiQxKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSk7XG4gICAgfVxuICAgIG1hcFthdHRyc1tpXS5uYW1lXSA9IGF0dHJzW2ldLnZhbHVlO1xuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1N0YXRpY0tleTtcbnZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWc7XG5cbnZhciBnZW5TdGF0aWNLZXlzQ2FjaGVkID0gY2FjaGVkKGdlblN0YXRpY0tleXMkMSk7XG5cbi8qKlxuICogR29hbCBvZiB0aGUgb3B0aW1pemVyOiB3YWxrIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgQVNUIHRyZWVcbiAqIGFuZCBkZXRlY3Qgc3ViLXRyZWVzIHRoYXQgYXJlIHB1cmVseSBzdGF0aWMsIGkuZS4gcGFydHMgb2ZcbiAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG4gKlxuICogT25jZSB3ZSBkZXRlY3QgdGhlc2Ugc3ViLXRyZWVzLCB3ZSBjYW46XG4gKlxuICogMS4gSG9pc3QgdGhlbSBpbnRvIGNvbnN0YW50cywgc28gdGhhdCB3ZSBubyBsb25nZXIgbmVlZCB0b1xuICogICAgY3JlYXRlIGZyZXNoIG5vZGVzIGZvciB0aGVtIG9uIGVhY2ggcmUtcmVuZGVyO1xuICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIG9wdGltaXplIChyb290LCBvcHRpb25zKSB7XG4gIGlmICghcm9vdCkgeyByZXR1cm4gfVxuICBpc1N0YXRpY0tleSA9IGdlblN0YXRpY0tleXNDYWNoZWQob3B0aW9ucy5zdGF0aWNLZXlzIHx8ICcnKTtcbiAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICAvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuICBtYXJrU3RhdGljKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycycgK1xuICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuICApXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgbWFya1N0YXRpYyhjaGlsZCk7XG4gICAgICBpZiAoIWNoaWxkLnN0YXRpYykge1xuICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuICAgIH1cbiAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG4gICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICkpIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIHdhbGtUaHJvdWdoQ29uZGl0aW9uc0Jsb2Nrcyhub2RlLmlmQ29uZGl0aW9ucywgaXNJbkZvcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHdhbGtUaHJvdWdoQ29uZGl0aW9uc0Jsb2NrcyAoY29uZGl0aW9uQmxvY2tzLCBpc0luRm9yKSB7XG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBjb25kaXRpb25CbG9ja3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBtYXJrU3RhdGljUm9vdHMoY29uZGl0aW9uQmxvY2tzW2ldLmJsb2NrLCBpc0luRm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0YXRpYyAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICFub2RlLmlmICYmICFub2RlLmZvciAmJiAvLyBub3Qgdi1pZiBvciB2LWZvciBvciB2LWVsc2VcbiAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgIWlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yKG5vZGUpICYmXG4gICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxudmFyIGZuRXhwUkUgPSAvXlxccyooW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqXFwoLztcbnZhciBzaW1wbGVQYXRoUkUgPSAvXlxccypbQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWycuKj8nXXxcXFtcIi4qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKlxccyokLztcblxuLy8ga2V5Q29kZSBhbGlhc2VzXG52YXIga2V5Q29kZXMgPSB7XG4gIGVzYzogMjcsXG4gIHRhYjogOSxcbiAgZW50ZXI6IDEzLFxuICBzcGFjZTogMzIsXG4gIHVwOiAzOCxcbiAgbGVmdDogMzcsXG4gIHJpZ2h0OiAzOSxcbiAgZG93bjogNDAsXG4gICdkZWxldGUnOiBbOCwgNDZdXG59O1xuXG52YXIgbW9kaWZpZXJDb2RlID0ge1xuICBzdG9wOiAnJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOycsXG4gIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuICBzZWxmOiAnaWYoJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXQpcmV0dXJuOycsXG4gIGN0cmw6ICdpZighJGV2ZW50LmN0cmxLZXkpcmV0dXJuOycsXG4gIHNoaWZ0OiAnaWYoISRldmVudC5zaGlmdEtleSlyZXR1cm47JyxcbiAgYWx0OiAnaWYoISRldmVudC5hbHRLZXkpcmV0dXJuOycsXG4gIG1ldGE6ICdpZighJGV2ZW50Lm1ldGFLZXkpcmV0dXJuOydcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChldmVudHMsIG5hdGl2ZSkge1xuICB2YXIgcmVzID0gbmF0aXZlID8gJ25hdGl2ZU9uOnsnIDogJ29uOnsnO1xuICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgIHJlcyArPSBcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCI6XCIgKyAoZ2VuSGFuZGxlcihuYW1lLCBldmVudHNbbmFtZV0pKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ30nXG59XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXIgKFxuICBuYW1lLFxuICBoYW5kbGVyXG4pIHtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIobmFtZSwgaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgfSBlbHNlIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICByZXR1cm4gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpIHx8IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpXG4gICAgICA/IGhhbmRsZXIudmFsdWVcbiAgICAgIDogKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIChoYW5kbGVyLnZhbHVlKSArIFwifVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICAgIGlmIChtb2RpZmllckNvZGVba2V5XSkge1xuICAgICAgICBjb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgY29kZSA9IGdlbktleUZpbHRlcihrZXlzKSArIGNvZGU7XG4gICAgfVxuICAgIHZhciBoYW5kbGVyQ29kZSA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpXG4gICAgICA/IGhhbmRsZXIudmFsdWUgKyAnKCRldmVudCknXG4gICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgcmV0dXJuICdmdW5jdGlvbigkZXZlbnQpeycgKyBjb2RlICsgaGFuZGxlckNvZGUgKyAnfSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcImlmKFwiICsgKGtleXMubWFwKGdlbkZpbHRlckNvZGUpLmpvaW4oJyYmJykpICsgXCIpcmV0dXJuO1wiKVxufVxuXG5mdW5jdGlvbiBnZW5GaWx0ZXJDb2RlIChrZXkpIHtcbiAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICBpZiAoa2V5VmFsKSB7XG4gICAgcmV0dXJuIChcIiRldmVudC5rZXlDb2RlIT09XCIgKyBrZXlWYWwpXG4gIH1cbiAgdmFyIGFsaWFzID0ga2V5Q29kZXNba2V5XTtcbiAgcmV0dXJuIChcIl9rKCRldmVudC5rZXlDb2RlLFwiICsgKEpTT04uc3RyaW5naWZ5KGtleSkpICsgKGFsaWFzID8gJywnICsgSlNPTi5zdHJpbmdpZnkoYWxpYXMpIDogJycpICsgXCIpXCIpXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDIgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoXCJfYihcIiArIGNvZGUgKyBcIiwnXCIgKyAoZWwudGFnKSArIFwiJyxcIiArIChkaXIudmFsdWUpICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGJhc2VEaXJlY3RpdmVzID0ge1xuICBiaW5kOiBiaW5kJDIsXG4gIGNsb2FrOiBub29wXG59O1xuXG4vKiAgKi9cblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG52YXIgd2FybiQyO1xudmFyIHRyYW5zZm9ybXMkMTtcbnZhciBkYXRhR2VuRm5zO1xudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyQxO1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyQxO1xudmFyIHN0YXRpY1JlbmRlckZucztcbnZhciBvbmNlQ291bnQ7XG52YXIgY3VycmVudE9wdGlvbnM7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgLy8gc2F2ZSBwcmV2aW91cyBzdGF0aWNSZW5kZXJGbnMgc28gZ2VuZXJhdGUgY2FsbHMgY2FuIGJlIG5lc3RlZFxuICB2YXIgcHJldlN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcbiAgdmFyIGN1cnJlbnRTdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnMgPSBbXTtcbiAgdmFyIHByZXZPbmNlQ291bnQgPSBvbmNlQ291bnQ7XG4gIG9uY2VDb3VudCA9IDA7XG4gIGN1cnJlbnRPcHRpb25zID0gb3B0aW9ucztcbiAgd2FybiQyID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB0cmFuc2Zvcm1zJDEgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybUNvZGUnKTtcbiAgZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICBwbGF0Zm9ybURpcmVjdGl2ZXMkMSA9IG9wdGlvbnMuZGlyZWN0aXZlcyB8fCB7fTtcbiAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDEgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIHZhciBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QpIDogJ19jKFwiZGl2XCIpJztcbiAgc3RhdGljUmVuZGVyRm5zID0gcHJldlN0YXRpY1JlbmRlckZucztcbiAgb25jZUNvdW50ID0gcHJldk9uY2VDb3VudDtcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IGN1cnJlbnRTdGF0aWNSZW5kZXJGbnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5FbGVtZW50IChlbCkge1xuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbClcbiAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbk9uY2UoZWwpXG4gIH0gZWxzZSBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbClcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQpIHtcbiAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwpIHx8ICd2b2lkIDAnXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICByZXR1cm4gZ2VuU2xvdChlbClcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIHZhciBjb2RlO1xuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkYXRhID0gZWwucGxhaW4gPyB1bmRlZmluZWQgOiBnZW5EYXRhKGVsKTtcblxuICAgICAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHRydWUpO1xuICAgICAgY29kZSA9IFwiX2MoJ1wiICsgKGVsLnRhZykgKyBcIidcIiArIChkYXRhID8gKFwiLFwiICsgZGF0YSkgOiAnJykgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMkMS5sZW5ndGg7IGkrKykge1xuICAgICAgY29kZSA9IHRyYW5zZm9ybXMkMVtpXShlbCwgY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlXG4gIH1cbn1cblxuLy8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcbmZ1bmN0aW9uIGdlblN0YXRpYyAoZWwpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCkpICsgXCJ9XCIpKTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCkge1xuICBlbC5vbmNlUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbClcbiAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuICAgIHZhciBrZXkgPSAnJztcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZm9yKSB7XG4gICAgICAgIGtleSA9IHBhcmVudC5rZXk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICBpZiAoIWtleSkge1xuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQyKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIlxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsKVxuICAgIH1cbiAgICByZXR1cm4gKFwiX28oXCIgKyAoZ2VuRWxlbWVudChlbCkpICsgXCIsXCIgKyAob25jZUNvdW50KyspICsgKGtleSA/IChcIixcIiArIGtleSkgOiBcIlwiKSArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSWYgKGVsKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCkpXG59XG5cbmZ1bmN0aW9uIGdlbklmQ29uZGl0aW9ucyAoY29uZGl0aW9ucykge1xuICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICdfZSgpJ1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgaWYgKGNvbmRpdGlvbi5leHApIHtcbiAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucykpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBlbC5vbmNlID8gZ2VuT25jZShlbCkgOiBnZW5FbGVtZW50KGVsKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoZWwpIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIFwiX2woKFwiICsgZXhwICsgXCIpLFwiICtcbiAgICBcImZ1bmN0aW9uKFwiICsgYWxpYXMgKyBpdGVyYXRvcjEgKyBpdGVyYXRvcjIgKyBcIil7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEgKGVsKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCk7XG4gIGlmIChkaXJzKSB7IGRhdGEgKz0gZGlycyArICcsJzsgfVxuXG4gIC8vIGtleVxuICBpZiAoZWwua2V5KSB7XG4gICAgZGF0YSArPSBcImtleTpcIiArIChlbC5rZXkpICsgXCIsXCI7XG4gIH1cbiAgLy8gcmVmXG4gIGlmIChlbC5yZWYpIHtcbiAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwucmVmSW5Gb3IpIHtcbiAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcbiAgfVxuICAvLyBwcmVcbiAgaWYgKGVsLnByZSkge1xuICAgIGRhdGEgKz0gXCJwcmU6dHJ1ZSxcIjtcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZGF0YSArPSBcInRhZzpcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIjtcbiAgfVxuICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHtcbiAgICBkYXRhICs9IGRhdGFHZW5GbnNbaV0oZWwpO1xuICB9XG4gIC8vIGF0dHJpYnV0ZXNcbiAgaWYgKGVsLmF0dHJzKSB7XG4gICAgZGF0YSArPSBcImF0dHJzOntcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCJ9LFwiO1xuICB9XG4gIC8vIERPTSBwcm9wc1xuICBpZiAoZWwucHJvcHMpIHtcbiAgICBkYXRhICs9IFwiZG9tUHJvcHM6e1wiICsgKGdlblByb3BzKGVsLnByb3BzKSkgKyBcIn0sXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cykpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLm5hdGl2ZUV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2xvdCB0YXJnZXRcbiAgaWYgKGVsLnNsb3RUYXJnZXQpIHtcbiAgICBkYXRhICs9IFwic2xvdDpcIiArIChlbC5zbG90VGFyZ2V0KSArIFwiLFwiO1xuICB9XG4gIC8vIHNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICBkYXRhICs9IChnZW5TY29wZWRTbG90cyhlbC5zY29wZWRTbG90cykpICsgXCIsXCI7XG4gIH1cbiAgLy8gaW5saW5lLXRlbXBsYXRlXG4gIGlmIChlbC5pbmxpbmVUZW1wbGF0ZSkge1xuICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsKSB7XG4gIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlcztcbiAgaWYgKCFkaXJzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSAnZGlyZWN0aXZlczpbJztcbiAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTtcbiAgdmFyIGksIGwsIGRpciwgbmVlZFJ1bnRpbWU7XG4gIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgbmVlZFJ1bnRpbWUgPSB0cnVlO1xuICAgIHZhciBnZW4gPSBwbGF0Zm9ybURpcmVjdGl2ZXMkMVtkaXIubmFtZV0gfHwgYmFzZURpcmVjdGl2ZXNbZGlyLm5hbWVdO1xuICAgIGlmIChnZW4pIHtcbiAgICAgIC8vIGNvbXBpbGUtdGltZSBkaXJlY3RpdmUgdGhhdCBtYW5pcHVsYXRlcyBBU1QuXG4gICAgICAvLyByZXR1cm5zIHRydWUgaWYgaXQgYWxzbyBuZWVkcyBhIHJ1bnRpbWUgY291bnRlcnBhcnQuXG4gICAgICBuZWVkUnVudGltZSA9ICEhZ2VuKGVsLCBkaXIsIHdhcm4kMik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/IChcIixtb2RpZmllcnM6XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycykpKSA6ICcnKSArIFwifSxcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1J1bnRpbWUpIHtcbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJ1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklubGluZVRlbXBsYXRlIChlbCkge1xuICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAoXG4gICAgZWwuY2hpbGRyZW4ubGVuZ3RoID4gMSB8fCBhc3QudHlwZSAhPT0gMVxuICApKSB7XG4gICAgd2FybiQyKCdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nKTtcbiAgfVxuICBpZiAoYXN0LnR5cGUgPT09IDEpIHtcbiAgICB2YXIgaW5saW5lUmVuZGVyRm5zID0gZ2VuZXJhdGUoYXN0LCBjdXJyZW50T3B0aW9ucyk7XG4gICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoc2xvdHMpIHtcbiAgcmV0dXJuIChcInNjb3BlZFNsb3RzOntcIiArIChPYmplY3Qua2V5cyhzbG90cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGdlblNjb3BlZFNsb3Qoa2V5LCBzbG90c1trZXldKTsgfSkuam9pbignLCcpKSArIFwifVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChrZXksIGVsKSB7XG4gIHJldHVybiBrZXkgKyBcIjpmdW5jdGlvbihcIiArIChTdHJpbmcoZWwuYXR0cnNNYXAuc2NvcGUpKSArIFwiKXtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICA/IGdlbkNoaWxkcmVuKGVsKSB8fCAndm9pZCAwJ1xuICAgICAgOiBnZW5FbGVtZW50KGVsKSkgKyBcIn1cIlxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoZWwsIGNoZWNrU2tpcCkge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBlbCQxLmZvciAmJlxuICAgICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnKSB7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCQxKVxuICAgIH1cbiAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbik7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZ2VuTm9kZSkuam9pbignLCcpKSArIFwiXVwiICsgKGNoZWNrU2tpcFxuICAgICAgICA/IG5vcm1hbGl6YXRpb25UeXBlID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUpIDogJydcbiAgICAgICAgOiAnJykpXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChjaGlsZHJlbikge1xuICB2YXIgcmVzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbWF5YmVDb21wb25lbnQoYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG4gIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gbWF5YmVDb21wb25lbnQgKGVsKSB7XG4gIHJldHVybiAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDEoZWwudGFnKVxufVxuXG5mdW5jdGlvbiBnZW5Ob2RlIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCkge1xuICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCk7XG4gIHZhciByZXMgPSBcIl90KFwiICsgc2xvdE5hbWUgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJyk7XG4gIHZhciBhdHRycyA9IGVsLmF0dHJzICYmIChcIntcIiArIChlbC5hdHRycy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuICgoY2FtZWxpemUoYS5uYW1lKSkgKyBcIjpcIiArIChhLnZhbHVlKSk7IH0pLmpvaW4oJywnKSkgKyBcIn1cIik7XG4gIHZhciBiaW5kJCQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICBpZiAoKGF0dHJzIHx8IGJpbmQkJDEpICYmICFjaGlsZHJlbikge1xuICAgIHJlcyArPSBcIixudWxsXCI7XG4gIH1cbiAgaWYgKGF0dHJzKSB7XG4gICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gIH1cbiAgaWYgKGJpbmQkJDEpIHtcbiAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZCQkMTtcbiAgfVxuICByZXR1cm4gcmVzICsgJyknXG59XG5cbi8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbmZ1bmN0aW9uIGdlbkNvbXBvbmVudCAoY29tcG9uZW50TmFtZSwgZWwpIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHRydWUpO1xuICByZXR1cm4gKFwiX2MoXCIgKyBjb21wb25lbnROYW1lICsgXCIsXCIgKyAoZ2VuRGF0YShlbCkpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblByb3BzIChwcm9wcykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHJlcyArPSBcIlxcXCJcIiArIChwcm9wLm5hbWUpICsgXCJcXFwiOlwiICsgKHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKSkgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKVxufVxuXG4vLyAjMzg5NSwgIzQyNjhcbmZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkge1xuICByZXR1cm4gdGV4dFxuICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKVxuICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBDb21waWxlIGEgdGVtcGxhdGUuXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUkMSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gb3BlcmF0b3JzIGxpa2UgdHlwZW9mLCBpbnN0YW5jZW9mIGFuZCBpbiBhcmUgYWxsb3dlZFxudmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xuICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbikuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG4vLyBjaGVjayB2YWxpZCBpZGVudGlmaWVyIGZvciB2LWZvclxudmFyIGlkZW50UkUgPSAvW0EtWmEtel8kXVtcXHckXSovO1xuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0KSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgaWYgKGFzdCkge1xuICAgIGNoZWNrTm9kZShhc3QsIGVycm9ycyk7XG4gIH1cbiAgcmV0dXJuIGVycm9yc1xufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIGVycm9ycykge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmF0dHJzTWFwW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIGVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgZXJyb3JzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgZXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCBlcnJvcnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCBlcnJvcnMpIHtcbiAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZm9yIHx8ICcnLCB0ZXh0LCBlcnJvcnMpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywgJ3YtZm9yIGFsaWFzJywgdGV4dCwgZXJyb3JzKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCBlcnJvcnMpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjIsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIGVycm9ycyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSWRlbnRpZmllciAoaWRlbnQsIHR5cGUsIHRleHQsIGVycm9ycykge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJyAmJiAhaWRlbnRSRS50ZXN0KGlkZW50KSkge1xuICAgIGVycm9ycy5wdXNoKChcIi0gaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArIHRleHQpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgZXJyb3JzKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKChcInJldHVybiBcIiArIGV4cCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGtleXdvcmRNYXRjaCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICBlcnJvcnMucHVzaChcbiAgICAgICAgXCItIGF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbiBcIiArIHRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9ycy5wdXNoKChcIi0gaW52YWxpZCBleHByZXNzaW9uOiBcIiArIHRleHQpKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTtcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgaWYgKGV4cHJlc3Npb24pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiY2xhc3M9XFxcIlwiICsgc3RhdGljQ2xhc3MgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRpY0NsYXNzKSB7XG4gICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gIH1cbiAgdmFyIGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgZWwuY2xhc3NCaW5kaW5nID0gY2xhc3NCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY0NsYXNzKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5jbGFzc0JpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBrbGFzcyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNTdHlsZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzdHlsZScpO1xuICBpZiAoc3RhdGljU3R5bGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICB7XG4gICAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dChzdGF0aWNTdHlsZSwgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICAgIGlmIChleHByZXNzaW9uKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJzdHlsZT1cXFwiXCIgKyBzdGF0aWNTdHlsZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgc3R5bGU9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpzdHlsZT1cInZhbFwiPi4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLnN0YXRpY1N0eWxlID0gSlNPTi5zdHJpbmdpZnkocGFyc2VTdHlsZVRleHQoc3RhdGljU3R5bGUpKTtcbiAgfVxuXG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDIgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOihcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIpLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQyXG59O1xuXG52YXIgbW9kdWxlcyQxID0gW1xuICBrbGFzcyQxLFxuICBzdHlsZSQxXG5dO1xuXG4vKiAgKi9cblxudmFyIHdhcm4kMztcblxuZnVuY3Rpb24gbW9kZWwkMSAoXG4gIGVsLFxuICBkaXIsXG4gIF93YXJuXG4pIHtcbiAgd2FybiQzID0gX3dhcm47XG4gIHZhciB2YWx1ZSA9IGRpci52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnM7XG4gIHZhciB0YWcgPSBlbC50YWc7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcbiAge1xuICAgIHZhciBkeW5hbWljVHlwZSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dHlwZSddIHx8IGVsLmF0dHJzTWFwWyc6dHlwZSddO1xuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgZHluYW1pY1R5cGUpIHtcbiAgICAgIHdhcm4kMyhcbiAgICAgICAgXCI8aW5wdXQgOnR5cGU9XFxcIlwiICsgZHluYW1pY1R5cGUgKyBcIlxcXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46XFxuXCIgK1xuICAgICAgICBcInYtbW9kZWwgZG9lcyBub3Qgc3VwcG9ydCBkeW5hbWljIGlucHV0IHR5cGVzLiBVc2Ugdi1pZiBicmFuY2hlcyBpbnN0ZWFkLlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2Uge1xuICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH1cbiAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGVsLmF0dHJzTWFwLmNoZWNrZWQgIT0gbnVsbCkge1xuICAgIHdhcm4kMyhcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGNoZWNrZWQ+OlxcblwiICtcbiAgICAgIFwiaW5saW5lIGNoZWNrZWQgYXR0cmlidXRlcyB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiBcIiArXG4gICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICApO1xuICB9XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhciB0cnVlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0cnVlLXZhbHVlJykgfHwgJ3RydWUnO1xuICB2YXIgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgIFwiQXJyYXkuaXNBcnJheShcIiArIHZhbHVlICsgXCIpXCIgK1xuICAgICAgXCI/X2koXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpPi0xXCIgKyAoXG4gICAgICAgIHRydWVWYWx1ZUJpbmRpbmcgPT09ICd0cnVlJ1xuICAgICAgICAgID8gKFwiOihcIiArIHZhbHVlICsgXCIpXCIpXG4gICAgICAgICAgOiAoXCI6X3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKVwiKVxuICAgICAgKVxuICApO1xuICBhZGRIYW5kbGVyKGVsLCAnY2xpY2snLFxuICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAnJCRlbD0kZXZlbnQudGFyZ2V0LCcgK1xuICAgICAgICBcIiQkYz0kJGVsLmNoZWNrZWQ/KFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKTooXCIgKyBmYWxzZVZhbHVlQmluZGluZyArIFwiKTtcIiArXG4gICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICBcInZhciAkJHY9XCIgKyAobnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmcpICsgXCIsXCIgK1xuICAgICAgICAgICckJGk9X2koJCRhLCQkdik7JyArXG4gICAgICBcImlmKCQkYyl7JCRpPDAmJihcIiArIHZhbHVlICsgXCI9JCRhLmNvbmNhdCgkJHYpKX1cIiArXG4gICAgICBcImVsc2V7JCRpPi0xJiYoXCIgKyB2YWx1ZSArIFwiPSQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKX1cIiArXG4gICAgXCJ9ZWxzZXtcIiArIHZhbHVlICsgXCI9JCRjfVwiLFxuICAgIG51bGwsIHRydWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuUmFkaW9Nb2RlbCAoXG4gICAgZWwsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4pIHtcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgZWwuYXR0cnNNYXAuY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgd2FybiQzKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY2hlY2tlZD46XFxuXCIgK1xuICAgICAgXCJpbmxpbmUgY2hlY2tlZCBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuIFwiICtcbiAgICAgICdEZWNsYXJlIGluaXRpYWwgdmFsdWVzIGluIHRoZSBjb21wb25lbnRcXCdzIGRhdGEgb3B0aW9uIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFsdWVCaW5kaW5nID0gbnVtYmVyID8gKFwiX24oXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikgOiB2YWx1ZUJpbmRpbmc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NsaWNrJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHtcbiAgICBpZiAoZWwudGFnID09PSAnaW5wdXQnICYmIGVsLmF0dHJzTWFwLnZhbHVlKSB7XG4gICAgICB3YXJuJDMoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHZhbHVlPVxcXCJcIiArIChlbC5hdHRyc01hcC52YWx1ZSkgKyBcIlxcXCI+OlxcblwiICtcbiAgICAgICAgJ2lubGluZSB2YWx1ZSBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuICAgICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbC50YWcgPT09ICd0ZXh0YXJlYScgJiYgZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB3YXJuJDMoXG4gICAgICAgIFwiPHRleHRhcmVhIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OlxcblwiICtcbiAgICAgICAgJ2lubGluZSBjb250ZW50IGluc2lkZSA8dGV4dGFyZWE+IHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuICAgICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbGF6eSA9IHJlZi5sYXp5O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgdmFyIGV2ZW50ID0gbGF6eSB8fCAoaXNJRSAmJiB0eXBlID09PSAncmFuZ2UnKSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgdmFyIG5lZWRDb21wb3NpdGlvbkd1YXJkID0gIWxhenkgJiYgdHlwZSAhPT0gJ3JhbmdlJztcbiAgdmFyIGlzTmF0aXZlID0gZWwudGFnID09PSAnaW5wdXQnIHx8IGVsLnRhZyA9PT0gJ3RleHRhcmVhJztcblxuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gaXNOYXRpdmVcbiAgICA/IChcIiRldmVudC50YXJnZXQudmFsdWVcIiArICh0cmltID8gJy50cmltKCknIDogJycpKVxuICAgIDogdHJpbSA/IFwiKHR5cGVvZiAkZXZlbnQgPT09ICdzdHJpbmcnID8gJGV2ZW50LnRyaW0oKSA6ICRldmVudClcIiA6IFwiJGV2ZW50XCI7XG4gIHZhbHVlRXhwcmVzc2lvbiA9IG51bWJlciB8fCB0eXBlID09PSAnbnVtYmVyJ1xuICAgID8gKFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIilcbiAgICA6IHZhbHVlRXhwcmVzc2lvbjtcblxuICB2YXIgY29kZSA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuICBpZiAoaXNOYXRpdmUgJiYgbmVlZENvbXBvc2l0aW9uR3VhcmQpIHtcbiAgICBjb2RlID0gXCJpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47XCIgKyBjb2RlO1xuICB9XG5cbiAgLy8gaW5wdXRzIHdpdGggdHlwZT1cImZpbGVcIiBhcmUgcmVhZCBvbmx5IGFuZCBzZXR0aW5nIHRoZSBpbnB1dCdzXG4gIC8vIHZhbHVlIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgd2FybiQzKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgdHlwZT1cXFwiZmlsZVxcXCI+OlxcblwiICtcbiAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cblxuICBhZGRQcm9wKGVsLCAndmFsdWUnLCBpc05hdGl2ZSA/IChcIl9zKFwiICsgdmFsdWUgKyBcIilcIikgOiAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyIHx8IHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TZWxlY3QgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuKSB7XG4gIHtcbiAgICBlbC5jaGlsZHJlbi5zb21lKGNoZWNrT3B0aW9uV2FybmluZyk7XG4gIH1cblxuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciBhc3NpZ25tZW50ID0gXCJBcnJheS5wcm90b3R5cGUuZmlsdGVyXCIgK1xuICAgIFwiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSlcIiArXG4gICAgXCIubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcXFwiX3ZhbHVlXFxcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO1wiICtcbiAgICBcInJldHVybiBcIiArIChudW1iZXIgPyAnX24odmFsKScgOiAndmFsJykgKyBcIn0pXCIgK1xuICAgIChlbC5hdHRyc01hcC5tdWx0aXBsZSA9PSBudWxsID8gJ1swXScgOiAnJyk7XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tPcHRpb25XYXJuaW5nIChvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi50eXBlID09PSAxICYmXG4gICAgb3B0aW9uLnRhZyA9PT0gJ29wdGlvbicgJiZcbiAgICBvcHRpb24uYXR0cnNNYXAuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgIHdhcm4kMyhcbiAgICAgIFwiPHNlbGVjdCB2LW1vZGVsPVxcXCJcIiArIChvcHRpb24ucGFyZW50LmF0dHJzTWFwWyd2LW1vZGVsJ10pICsgXCJcXFwiPjpcXG5cIiArXG4gICAgICAnaW5saW5lIHNlbGVjdGVkIGF0dHJpYnV0ZXMgb24gPG9wdGlvbj4gd2lsbCBiZSBpZ25vcmVkIHdoZW4gdXNpbmcgdi1tb2RlbC4gJyArXG4gICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICApO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlICh2YWx1ZSwgYXNzaWdubWVudCkge1xuICB2YXIgbW9kZWxScyA9IHBhcnNlTW9kZWwodmFsdWUpO1xuICBpZiAobW9kZWxScy5pZHggPT09IG51bGwpIHtcbiAgICByZXR1cm4gKHZhbHVlICsgXCI9XCIgKyBhc3NpZ25tZW50KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInZhciAkJGV4cCA9IFwiICsgKG1vZGVsUnMuZXhwKSArIFwiLCAkJGlkeCA9IFwiICsgKG1vZGVsUnMuaWR4KSArIFwiO1wiICtcbiAgICAgIFwiaWYgKCFBcnJheS5pc0FycmF5KCQkZXhwKSl7XCIgK1xuICAgICAgICB2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudCArIFwifVwiICtcbiAgICAgIFwiZWxzZXskJGV4cC5zcGxpY2UoJCRpZHgsIDEsIFwiICsgYXNzaWdubWVudCArIFwiKX1cIlxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0ZXh0IChlbCwgZGlyKSB7XG4gIGlmIChkaXIudmFsdWUpIHtcbiAgICBhZGRQcm9wKGVsLCAndGV4dENvbnRlbnQnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIikpO1xuICB9XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbCQxLFxuICB0ZXh0OiB0ZXh0LFxuICBodG1sOiBodG1sXG59O1xuXG4vKiAgKi9cblxudmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxudmFyIGJhc2VPcHRpb25zID0ge1xuICBleHBlY3RIVE1MOiB0cnVlLFxuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKSxcbiAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyQxLFxuICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBpc1ByZVRhZzogaXNQcmVUYWdcbn07XG5cbmZ1bmN0aW9uIGNvbXBpbGUkJDEgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zXG4gICAgPyBleHRlbmQoZXh0ZW5kKHt9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpXG4gICAgOiBiYXNlT3B0aW9ucztcbiAgcmV0dXJuIGNvbXBpbGUkMSh0ZW1wbGF0ZSwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnMsXG4gIHZtXG4pIHtcbiAgdmFyIF93YXJuID0gKG9wdGlvbnMgJiYgb3B0aW9ucy53YXJuKSB8fCB3YXJuO1xuICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGdW5jdGlvbigncmV0dXJuIDEnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuICAgICAgICBfd2FybihcbiAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgJ2Vudmlyb25tZW50IHdpdGggQ29udGVudCBTZWN1cml0eSBQb2xpY3kgdGhhdCBwcm9oaWJpdHMgdW5zYWZlLWV2YWwuICcgK1xuICAgICAgICAgICdUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJyArXG4gICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICd0ZW1wbGF0ZXMgaW50byByZW5kZXIgZnVuY3Rpb25zLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIGtleSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXJzXG4gICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgOiB0ZW1wbGF0ZTtcbiAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICByZXR1cm4gY2FjaGVba2V5XVxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGNvbXBpbGVkID0gY29tcGlsZSQkMSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG4gIHJlcy5yZW5kZXIgPSBtYWtlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyKTtcbiAgdmFyIGwgPSBjb21waWxlZC5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoO1xuICByZXMuc3RhdGljUmVuZGVyRm5zID0gbmV3IEFycmF5KGwpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHJlcy5zdGF0aWNSZW5kZXJGbnNbaV0gPSBtYWtlRnVuY3Rpb24oY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zW2ldKTtcbiAgfVxuICB7XG4gICAgaWYgKHJlcy5yZW5kZXIgPT09IG5vb3AgfHwgcmVzLnN0YXRpY1JlbmRlckZucy5zb21lKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4gPT09IG5vb3A7IH0pKSB7XG4gICAgICBfd2FybihcbiAgICAgICAgXCJmYWlsZWQgdG8gY29tcGlsZSB0ZW1wbGF0ZTpcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QpLmpvaW4oJ1xcbicpICtcbiAgICAgICAgJ1xcblxcbicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG59XG5cbmZ1bmN0aW9uIG1ha2VGdW5jdGlvbiAoY29kZSkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBub29wXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpZFRvVGVtcGxhdGUgPSBjYWNoZWQoZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBlbCA9IHF1ZXJ5KGlkKTtcbiAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxufSk7XG5cbnZhciBtb3VudCA9IFZ1ZSQzLnByb3RvdHlwZS4kbW91bnQ7XG5WdWUkMy5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gIC8vIHJlc29sdmUgdGVtcGxhdGUvZWwgYW5kIGNvbnZlcnQgdG8gcmVuZGVyIGZ1bmN0aW9uXG4gIGlmICghb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlO1xuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgICAgdGVtcGxhdGUgPSBpZFRvVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIChcIlRlbXBsYXRlIGVsZW1lbnQgbm90IGZvdW5kIG9yIGlzIGVtcHR5OiBcIiArIChvcHRpb25zLnRlbXBsYXRlKSksXG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRlbXBsYXRlLm5vZGVUeXBlKSB7XG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAge1xuICAgICAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicgKyB0ZW1wbGF0ZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsKSB7XG4gICAgICB0ZW1wbGF0ZSA9IGdldE91dGVySFRNTChlbCk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgdmFyIHJlZiA9IGNvbXBpbGVUb0Z1bmN0aW9ucyh0ZW1wbGF0ZSwge1xuICAgICAgICB3YXJuOiB3YXJuLFxuICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lczogc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgICAgIGRlbGltaXRlcnM6IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgfSwgdGhpcyk7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vdW50LmNhbGwodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8qKlxuICogR2V0IG91dGVySFRNTCBvZiBlbGVtZW50cywgdGFraW5nIGNhcmVcbiAqIG9mIFNWRyBlbGVtZW50cyBpbiBJRSBhcyB3ZWxsLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwgKGVsKSB7XG4gIGlmIChlbC5vdXRlckhUTUwpIHtcbiAgICByZXR1cm4gZWwub3V0ZXJIVE1MXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MXG4gIH1cbn1cblxuVnVlJDMuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblxucmV0dXJuIFZ1ZSQzO1xuXG59KSkpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICAgICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgICAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgICAgICAoZ2xvYmFsLlZlZVZhbGlkYXRlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGEgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIC9eW2EtekEtWl0qJC8udGVzdCh2YWx1ZSk7IH07XG5cbnZhciBhbHBoYV9kYXNoID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAvXlthLXpBLVowLTlfLV0qJC8udGVzdCh2YWx1ZSk7IH07XG5cbnZhciBhbHBoYV9udW0gPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIC9eW2EtekEtWjAtOV0qJC8udGVzdCh2YWx1ZSk7IH07XG5cbnZhciBhbHBoYV9zcGFjZXMgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIC9eW2EtekEtWlxcc10qJC8udGVzdCh2YWx1ZSk7IH07XG5cbnZhciBiZXR3ZWVuID0gZnVuY3Rpb24gKHZhbHVlLCByZWYpIHtcblx0dmFyIG1pbiA9IHJlZlswXTtcblx0dmFyIG1heCA9IHJlZlsxXTtcblxuXHRyZXR1cm4gTnVtYmVyKG1pbikgPD0gdmFsdWUgJiYgTnVtYmVyKG1heCkgPj0gdmFsdWU7XG59O1xuXG52YXIgY29uZmlybWVkID0gZnVuY3Rpb24gKHZhbHVlLCByZWYsIHZhbGlkYXRpbmdGaWVsZCkge1xuICB2YXIgY29uZmlybWVkRmllbGQgPSByZWZbMF07XG5cbiAgdmFyIGZpZWxkID0gY29uZmlybWVkRmllbGRcbiAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoKFwiaW5wdXRbbmFtZT0nXCIgKyBjb25maXJtZWRGaWVsZCArIFwiJ11cIikpXG4gICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKChcImlucHV0W25hbWU9J1wiICsgdmFsaWRhdGluZ0ZpZWxkICsgXCJfY29uZmlybWF0aW9uJ11cIikpO1xuXG4gIHJldHVybiAhISAoZmllbGQgJiYgU3RyaW5nKHZhbHVlKSA9PT0gZmllbGQudmFsdWUpO1xufTtcblxuZnVuY3Rpb24gdW53cmFwRXhwb3J0cyAoeCkge1xuXHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgPyB4WydkZWZhdWx0J10gOiB4O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIGFzc2VydFN0cmluZ18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXNzZXJ0U3RyaW5nO1xuZnVuY3Rpb24gYXNzZXJ0U3RyaW5nKGlucHV0KSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhpcyBsaWJyYXJ5ICh2YWxpZGF0b3IuanMpIHZhbGlkYXRlcyBzdHJpbmdzIG9ubHknKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIGlzQ3JlZGl0Q2FyZF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNDcmVkaXRDYXJkO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IGFzc2VydFN0cmluZ18xO1xuXG52YXIgX2Fzc2VydFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlcnRTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG52YXIgY3JlZGl0Q2FyZCA9IC9eKD86NFswLTldezEyfSg/OlswLTldezN9KT98NVsxLTVdWzAtOV17MTR9fCgyMjJbMS05XXwyMlszLTldWzAtOV18MlszLTZdWzAtOV17Mn18MjdbMDFdWzAtOV18MjcyMClbMC05XXsxMn18Nig/OjAxMXw1WzAtOV1bMC05XSlbMC05XXsxMn18M1s0N11bMC05XXsxM318Myg/OjBbMC01XXxbNjhdWzAtOV0pWzAtOV17MTF9fCg/OjIxMzF8MTgwMHwzNVxcZHszfSlcXGR7MTF9KXw2MlswLTldezE0fSQvO1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbmZ1bmN0aW9uIGlzQ3JlZGl0Q2FyZChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcyLmRlZmF1bHQpKHN0cik7XG4gIHZhciBzYW5pdGl6ZWQgPSBzdHIucmVwbGFjZSgvW14wLTldKy9nLCAnJyk7XG4gIGlmICghY3JlZGl0Q2FyZC50ZXN0KHNhbml0aXplZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHN1bSA9IDA7XG4gIHZhciBkaWdpdCA9IHZvaWQgMDtcbiAgdmFyIHRtcE51bSA9IHZvaWQgMDtcbiAgdmFyIHNob3VsZERvdWJsZSA9IHZvaWQgMDtcbiAgZm9yICh2YXIgaSA9IHNhbml0aXplZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGRpZ2l0ID0gc2FuaXRpemVkLnN1YnN0cmluZyhpLCBpICsgMSk7XG4gICAgdG1wTnVtID0gcGFyc2VJbnQoZGlnaXQsIDEwKTtcbiAgICBpZiAoc2hvdWxkRG91YmxlKSB7XG4gICAgICB0bXBOdW0gKj0gMjtcbiAgICAgIGlmICh0bXBOdW0gPj0gMTApIHtcbiAgICAgICAgc3VtICs9IHRtcE51bSAlIDEwICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1bSArPSB0bXBOdW07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1bSArPSB0bXBOdW07XG4gICAgfVxuICAgIHNob3VsZERvdWJsZSA9ICFzaG91bGREb3VibGU7XG4gIH1cbiAgcmV0dXJuICEhKHN1bSAlIDEwID09PSAwID8gc2FuaXRpemVkIDogZmFsc2UpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIGlzQ3JlZGl0Q2FyZCA9IHVud3JhcEV4cG9ydHMoaXNDcmVkaXRDYXJkXzEpO1xuXG52YXIgY3JlZGl0X2NhcmQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGlzQ3JlZGl0Q2FyZChTdHJpbmcodmFsdWUpKTsgfTtcblxudmFyIGRlY2ltYWwgPSBmdW5jdGlvbiAodmFsdWUsIHBhcmFtcykge1xuICB2YXIgZGVjaW1hbHMgPSBBcnJheS5pc0FycmF5KHBhcmFtcykgPyAocGFyYW1zWzBdIHx8ICcqJykgOiAnKic7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAnJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgICAvLyBpZiBpcyAwLlxuICBpZiAoTnVtYmVyKGRlY2ltYWxzKSA9PT0gMCkge1xuICAgIHJldHVybiAvXi0/XFxkKiQvLnRlc3QodmFsdWUpO1xuICB9XG5cbiAgdmFyIHJlZ2V4UGFydCA9IGRlY2ltYWxzID09PSAnKicgPyAnKycgOiAoXCJ7MSxcIiArIGRlY2ltYWxzICsgXCJ9XCIpO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKChcIl4tP1xcXFxkKihcXFxcLlxcXFxkXCIgKyByZWdleFBhcnQgKyBcIik/JFwiKSk7XG5cbiAgaWYgKCEgcmVnZXgudGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcGFyc2VkVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHJldHVybiBwYXJzZWRWYWx1ZSA9PT0gcGFyc2VkVmFsdWU7XG59O1xuXG52YXIgZGlnaXRzID0gZnVuY3Rpb24gKHZhbHVlLCByZWYpIHtcbiAgdmFyIGxlbmd0aCA9IHJlZlswXTtcblxuICB2YXIgc3RyVmFsID0gU3RyaW5nKHZhbHVlKTtcblxuICByZXR1cm4gL15bMC05XSokLy50ZXN0KHN0clZhbCkgJiYgc3RyVmFsLmxlbmd0aCA9PT0gTnVtYmVyKGxlbmd0aCk7XG59O1xuXG52YXIgdmFsaWRhdGVJbWFnZSA9IGZ1bmN0aW9uIChmaWxlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIHZhciBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHsgdmFsaWQ6IGZhbHNlIH0pOyB9O1xuICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUoe1xuICAgICAgdmFsaWQ6IGltYWdlLndpZHRoID09PSBOdW1iZXIod2lkdGgpICYmIGltYWdlLmhlaWdodCA9PT0gTnVtYmVyKGhlaWdodClcbiAgICB9KTsgfTtcblxuICAgIGltYWdlLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XG4gIH0pO1xufTtcblxudmFyIGRpbWVuc2lvbnMgPSBmdW5jdGlvbiAoZmlsZXMsIHJlZikge1xuICB2YXIgd2lkdGggPSByZWZbMF07XG4gIHZhciBoZWlnaHQgPSByZWZbMV07XG5cbiAgdmFyIGxpc3QgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBpZiBmaWxlIGlzIG5vdCBhbiBpbWFnZSwgcmVqZWN0LlxuICAgIGlmICghIC9cXC4oanBnfHN2Z3xqcGVnfHBuZ3xibXB8Z2lmKSQvaS50ZXN0KGZpbGVzW2ldLm5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGlzdC5wdXNoKGZpbGVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLmFsbChsaXN0Lm1hcChmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gdmFsaWRhdGVJbWFnZShmaWxlLCB3aWR0aCwgaGVpZ2h0KTsgfSkpO1xufTtcblxudmFyIG1lcmdlXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBtZXJnZTtcbmZ1bmN0aW9uIG1lcmdlKCkge1xuICB2YXIgb2JqID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGRlZmF1bHRzID0gYXJndW1lbnRzWzFdO1xuXG4gIGZvciAodmFyIGtleSBpbiBkZWZhdWx0cykge1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvYmpba2V5XSA9IGRlZmF1bHRzW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pO1xuXG52YXIgaXNCeXRlTGVuZ3RoXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gaXNCeXRlTGVuZ3RoO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IGFzc2VydFN0cmluZ18xO1xuXG52YXIgX2Fzc2VydFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlcnRTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbmZ1bmN0aW9uIGlzQnl0ZUxlbmd0aChzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcyLmRlZmF1bHQpKHN0cik7XG4gIHZhciBtaW4gPSB2b2lkIDA7XG4gIHZhciBtYXggPSB2b2lkIDA7XG4gIGlmICgodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdGlvbnMpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBtaW4gPSBvcHRpb25zLm1pbiB8fCAwO1xuICAgIG1heCA9IG9wdGlvbnMubWF4O1xuICB9IGVsc2Uge1xuICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBpc0J5dGVMZW5ndGgoc3RyLCBtaW4gWywgbWF4XSlcbiAgICBtaW4gPSBhcmd1bWVudHNbMV07XG4gICAgbWF4ID0gYXJndW1lbnRzWzJdO1xuICB9XG4gIHZhciBsZW4gPSBlbmNvZGVVUkkoc3RyKS5zcGxpdCgvJS4ufC4vKS5sZW5ndGggLSAxO1xuICByZXR1cm4gbGVuID49IG1pbiAmJiAodHlwZW9mIG1heCA9PT0gJ3VuZGVmaW5lZCcgfHwgbGVuIDw9IG1heCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pO1xuXG52YXIgaXNGUUROID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNGRFFOO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IGFzc2VydFN0cmluZ18xO1xuXG52YXIgX2Fzc2VydFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlcnRTdHJpbmcpO1xuXG52YXIgX21lcmdlID0gbWVyZ2VfMTtcblxudmFyIF9tZXJnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBkZWZhdWx0X2ZxZG5fb3B0aW9ucyA9IHtcbiAgcmVxdWlyZV90bGQ6IHRydWUsXG4gIGFsbG93X3VuZGVyc2NvcmVzOiBmYWxzZSxcbiAgYWxsb3dfdHJhaWxpbmdfZG90OiBmYWxzZVxufTtcblxuZnVuY3Rpb24gaXNGRFFOKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZzIuZGVmYXVsdCkoc3RyKTtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UyLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRfZnFkbl9vcHRpb25zKTtcblxuICAvKiBSZW1vdmUgdGhlIG9wdGlvbmFsIHRyYWlsaW5nIGRvdCBiZWZvcmUgY2hlY2tpbmcgdmFsaWRpdHkgKi9cbiAgaWYgKG9wdGlvbnMuYWxsb3dfdHJhaWxpbmdfZG90ICYmIHN0cltzdHIubGVuZ3RoIC0gMV0gPT09ICcuJykge1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xuICB9XG4gIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgnLicpO1xuICBpZiAob3B0aW9ucy5yZXF1aXJlX3RsZCkge1xuICAgIHZhciB0bGQgPSBwYXJ0cy5wb3AoKTtcbiAgICBpZiAoIXBhcnRzLmxlbmd0aCB8fCAhL14oW2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9fHhuW2EtejAtOS1dezIsfSkkL2kudGVzdCh0bGQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIHBhcnQsIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgaWYgKG9wdGlvbnMuYWxsb3dfdW5kZXJzY29yZXMpIHtcbiAgICAgIHBhcnQgPSBwYXJ0LnJlcGxhY2UoL18vZywgJycpO1xuICAgIH1cbiAgICBpZiAoIS9eW2EtelxcdTAwYTEtXFx1ZmZmZjAtOS1dKyQvaS50ZXN0KHBhcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICgvW1xcdWZmMDEtXFx1ZmY1ZV0vLnRlc3QocGFydCkpIHtcbiAgICAgIC8vIGRpc2FsbG93IGZ1bGwtd2lkdGggY2hhcnNcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBhcnRbMF0gPT09ICctJyB8fCBwYXJ0W3BhcnQubGVuZ3RoIC0gMV0gPT09ICctJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBpc0VtYWlsXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0VtYWlsO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IGFzc2VydFN0cmluZ18xO1xuXG52YXIgX2Fzc2VydFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlcnRTdHJpbmcpO1xuXG52YXIgX21lcmdlID0gbWVyZ2VfMTtcblxudmFyIF9tZXJnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZSk7XG5cbnZhciBfaXNCeXRlTGVuZ3RoID0gaXNCeXRlTGVuZ3RoXzE7XG5cbnZhciBfaXNCeXRlTGVuZ3RoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQnl0ZUxlbmd0aCk7XG5cbnZhciBfaXNGUUROID0gaXNGUUROO1xuXG52YXIgX2lzRlFETjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0ZRRE4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdF9lbWFpbF9vcHRpb25zID0ge1xuICBhbGxvd19kaXNwbGF5X25hbWU6IGZhbHNlLFxuICBhbGxvd191dGY4X2xvY2FsX3BhcnQ6IHRydWUsXG4gIHJlcXVpcmVfdGxkOiB0cnVlXG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb250cm9sLXJlZ2V4ICovXG52YXIgZGlzcGxheU5hbWUgPSAvXlthLXpcXGQhI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9flxcLlxcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0rW2EtelxcZCEjXFwkJSYnXFwqXFwrXFwtXFwvPVxcP1xcXl9ge1xcfH1+XFwuXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXFxzXSo8KC4rKT4kL2k7XG52YXIgZW1haWxVc2VyUGFydCA9IC9eW2EtelxcZCEjXFwkJSYnXFwqXFwrXFwtXFwvPVxcP1xcXl9ge1xcfH1+XSskL2k7XG52YXIgcXVvdGVkRW1haWxVc2VyID0gL14oW1xcc1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZcXHgyMVxceDIzLVxceDViXFx4NWQtXFx4N2VdfChcXFxcW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXSkpKiQvaTtcbnZhciBlbWFpbFVzZXJVdGY4UGFydCA9IC9eW2EtelxcZCEjXFwkJSYnXFwqXFwrXFwtXFwvPVxcP1xcXl9ge1xcfH1+XFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSskL2k7XG52YXIgcXVvdGVkRW1haWxVc2VyVXRmOCA9IC9eKFtcXHNcXHgwMS1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZlxceDdmXFx4MjFcXHgyMy1cXHg1YlxceDVkLVxceDdlXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXXwoXFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZC1cXHg3ZlxcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSokL2k7XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbi8qIGVzbGludC1lbmFibGUgbm8tY29udHJvbC1yZWdleCAqL1xuXG5mdW5jdGlvbiBpc0VtYWlsKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZzIuZGVmYXVsdCkoc3RyKTtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UyLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRfZW1haWxfb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMuYWxsb3dfZGlzcGxheV9uYW1lKSB7XG4gICAgdmFyIGRpc3BsYXlfZW1haWwgPSBzdHIubWF0Y2goZGlzcGxheU5hbWUpO1xuICAgIGlmIChkaXNwbGF5X2VtYWlsKSB7XG4gICAgICBzdHIgPSBkaXNwbGF5X2VtYWlsWzFdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgnQCcpO1xuICB2YXIgZG9tYWluID0gcGFydHMucG9wKCk7XG4gIHZhciB1c2VyID0gcGFydHMuam9pbignQCcpO1xuXG4gIHZhciBsb3dlcl9kb21haW4gPSBkb21haW4udG9Mb3dlckNhc2UoKTtcbiAgaWYgKGxvd2VyX2RvbWFpbiA9PT0gJ2dtYWlsLmNvbScgfHwgbG93ZXJfZG9tYWluID09PSAnZ29vZ2xlbWFpbC5jb20nKSB7XG4gICAgdXNlciA9IHVzZXIucmVwbGFjZSgvXFwuL2csICcnKS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgaWYgKCEoMCwgX2lzQnl0ZUxlbmd0aDIuZGVmYXVsdCkodXNlciwgeyBtYXg6IDY0IH0pIHx8ICEoMCwgX2lzQnl0ZUxlbmd0aDIuZGVmYXVsdCkoZG9tYWluLCB7IG1heDogMjU2IH0pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCEoMCwgX2lzRlFETjIuZGVmYXVsdCkoZG9tYWluLCB7IHJlcXVpcmVfdGxkOiBvcHRpb25zLnJlcXVpcmVfdGxkIH0pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHVzZXJbMF0gPT09ICdcIicpIHtcbiAgICB1c2VyID0gdXNlci5zbGljZSgxLCB1c2VyLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBvcHRpb25zLmFsbG93X3V0ZjhfbG9jYWxfcGFydCA/IHF1b3RlZEVtYWlsVXNlclV0ZjgudGVzdCh1c2VyKSA6IHF1b3RlZEVtYWlsVXNlci50ZXN0KHVzZXIpO1xuICB9XG5cbiAgdmFyIHBhdHRlcm4gPSBvcHRpb25zLmFsbG93X3V0ZjhfbG9jYWxfcGFydCA/IGVtYWlsVXNlclV0ZjhQYXJ0IDogZW1haWxVc2VyUGFydDtcblxuICB2YXIgdXNlcl9wYXJ0cyA9IHVzZXIuc3BsaXQoJy4nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1c2VyX3BhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFwYXR0ZXJuLnRlc3QodXNlcl9wYXJ0c1tpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBpc0VtYWlsID0gdW53cmFwRXhwb3J0cyhpc0VtYWlsXzEpO1xuXG52YXIgZW1haWwgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGlzRW1haWwoU3RyaW5nKHZhbHVlKSk7IH07XG5cbnZhciBleHQgPSBmdW5jdGlvbiAoZmlsZXMsIGV4dGVuc2lvbnMpIHtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgoXCIuKFwiICsgKGV4dGVuc2lvbnMuam9pbignfCcpKSArIFwiKSRcIiksICdpJyk7XG5cbiAgcmV0dXJuIGZpbGVzLmV2ZXJ5KGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiByZWdleC50ZXN0KGZpbGUubmFtZSk7IH0pO1xufTtcblxudmFyIGltYWdlID0gZnVuY3Rpb24gKGZpbGVzKSB7IHJldHVybiBmaWxlcy5ldmVyeShmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gL1xcLihqcGd8c3ZnfGpwZWd8cG5nfGJtcHxnaWYpJC9pLnRlc3QoZmlsZS5uYW1lKTsgfVxuKTsgfTtcblxudmFyIEluID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7IHJldHVybiAhISBvcHRpb25zLmZpbHRlcihmdW5jdGlvbiAob3B0aW9uKSB7IHJldHVybiBvcHRpb24gPT0gdmFsdWU7IH0pLmxlbmd0aDsgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG52YXIgaXNJUF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJUDtcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBhc3NlcnRTdHJpbmdfMTtcblxudmFyIF9hc3NlcnRTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzZXJ0U3RyaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlwdjRNYXliZSA9IC9eKFxcZHsxLDN9KVxcLihcXGR7MSwzfSlcXC4oXFxkezEsM30pXFwuKFxcZHsxLDN9KSQvO1xudmFyIGlwdjZCbG9jayA9IC9eWzAtOUEtRl17MSw0fSQvaTtcblxuZnVuY3Rpb24gaXNJUChzdHIpIHtcbiAgdmFyIHZlcnNpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gICgwLCBfYXNzZXJ0U3RyaW5nMi5kZWZhdWx0KShzdHIpO1xuICB2ZXJzaW9uID0gU3RyaW5nKHZlcnNpb24pO1xuICBpZiAoIXZlcnNpb24pIHtcbiAgICByZXR1cm4gaXNJUChzdHIsIDQpIHx8IGlzSVAoc3RyLCA2KTtcbiAgfSBlbHNlIGlmICh2ZXJzaW9uID09PSAnNCcpIHtcbiAgICBpZiAoIWlwdjRNYXliZS50ZXN0KHN0cikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCcuJykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJ0c1szXSA8PSAyNTU7XG4gIH0gZWxzZSBpZiAodmVyc2lvbiA9PT0gJzYnKSB7XG4gICAgdmFyIGJsb2NrcyA9IHN0ci5zcGxpdCgnOicpO1xuICAgIHZhciBmb3VuZE9taXNzaW9uQmxvY2sgPSBmYWxzZTsgLy8gbWFya2VyIHRvIGluZGljYXRlIDo6XG5cbiAgICAvLyBBdCBsZWFzdCBzb21lIE9TIGFjY2VwdCB0aGUgbGFzdCAzMiBiaXRzIG9mIGFuIElQdjYgYWRkcmVzc1xuICAgIC8vIChpLmUuIDIgb2YgdGhlIGJsb2NrcykgaW4gSVB2NCBub3RhdGlvbiwgYW5kIFJGQyAzNDkzIHNheXNcbiAgICAvLyB0aGF0ICc6OmZmZmY6YS5iLmMuZCcgaXMgdmFsaWQgZm9yIElQdjQtbWFwcGVkIElQdjYgYWRkcmVzc2VzLFxuICAgIC8vIGFuZCAnOjphLmIuYy5kJyBpcyBkZXByZWNhdGVkLCBidXQgYWxzbyB2YWxpZC5cbiAgICB2YXIgZm91bmRJUHY0VHJhbnNpdGlvbkJsb2NrID0gaXNJUChibG9ja3NbYmxvY2tzLmxlbmd0aCAtIDFdLCA0KTtcbiAgICB2YXIgZXhwZWN0ZWROdW1iZXJPZkJsb2NrcyA9IGZvdW5kSVB2NFRyYW5zaXRpb25CbG9jayA/IDcgOiA4O1xuXG4gICAgaWYgKGJsb2Nrcy5sZW5ndGggPiBleHBlY3RlZE51bWJlck9mQmxvY2tzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIGluaXRpYWwgb3IgZmluYWwgOjpcbiAgICBpZiAoc3RyID09PSAnOjonKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHN0ci5zdWJzdHIoMCwgMikgPT09ICc6OicpIHtcbiAgICAgIGJsb2Nrcy5zaGlmdCgpO1xuICAgICAgYmxvY2tzLnNoaWZ0KCk7XG4gICAgICBmb3VuZE9taXNzaW9uQmxvY2sgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc3RyLnN1YnN0cihzdHIubGVuZ3RoIC0gMikgPT09ICc6OicpIHtcbiAgICAgIGJsb2Nrcy5wb3AoKTtcbiAgICAgIGJsb2Nrcy5wb3AoKTtcbiAgICAgIGZvdW5kT21pc3Npb25CbG9jayA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgIC8vIHRlc3QgZm9yIGEgOjogd2hpY2ggY2FuIG5vdCBiZSBhdCB0aGUgc3RyaW5nIHN0YXJ0L2VuZFxuICAgICAgLy8gc2luY2UgdGhvc2UgY2FzZXMgaGF2ZSBiZWVuIGhhbmRsZWQgYWJvdmVcbiAgICAgIGlmIChibG9ja3NbaV0gPT09ICcnICYmIGkgPiAwICYmIGkgPCBibG9ja3MubGVuZ3RoIC0gMSkge1xuICAgICAgICBpZiAoZm91bmRPbWlzc2lvbkJsb2NrKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBtdWx0aXBsZSA6OiBpbiBhZGRyZXNzXG4gICAgICAgIH1cbiAgICAgICAgZm91bmRPbWlzc2lvbkJsb2NrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZm91bmRJUHY0VHJhbnNpdGlvbkJsb2NrICYmIGkgPT09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vIGl0IGhhcyBiZWVuIGNoZWNrZWQgYmVmb3JlIHRoYXQgdGhlIGxhc3RcbiAgICAgICAgLy8gYmxvY2sgaXMgYSB2YWxpZCBJUHY0IGFkZHJlc3NcbiAgICAgIH0gZWxzZSBpZiAoIWlwdjZCbG9jay50ZXN0KGJsb2Nrc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZm91bmRPbWlzc2lvbkJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2tzLmxlbmd0aCA+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gYmxvY2tzLmxlbmd0aCA9PT0gZXhwZWN0ZWROdW1iZXJPZkJsb2NrcztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pO1xuXG52YXIgaXNJUCA9IHVud3JhcEV4cG9ydHMoaXNJUF8xKTtcblxudmFyIGlwID0gZnVuY3Rpb24gKHZhbHVlLCByZWYpIHtcblx0aWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IFs0XTtcblx0dmFyIHZlcnNpb24gPSByZWZbMF07XG5cblx0cmV0dXJuIGlzSVAodmFsdWUsIHZlcnNpb24pO1xufTtcblxudmFyIG1heCA9IGZ1bmN0aW9uICh2YWx1ZSwgcmVmKSB7XG4gIHZhciBsZW5ndGggPSByZWZbMF07XG5cbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbGVuZ3RoID49IDA7XG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5sZW5ndGggPD0gbGVuZ3RoO1xufTtcblxudmFyIG1heF92YWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgcmVmKSB7XG4gIHZhciBtYXggPSByZWZbMF07XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIE51bWJlcih2YWx1ZSkgPD0gbWF4O1xufTtcblxudmFyIG1pbWVzID0gZnVuY3Rpb24gKGZpbGVzLCBtaW1lcykge1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCgobWltZXMuam9pbignfCcpLnJlcGxhY2UoJyonLCAnLisnKSkgKyBcIiRcIiksICdpJyk7XG5cbiAgcmV0dXJuIGZpbGVzLmV2ZXJ5KGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiByZWdleC50ZXN0KGZpbGUudHlwZSk7IH0pO1xufTtcblxudmFyIG1pbiA9IGZ1bmN0aW9uICh2YWx1ZSwgcmVmKSB7XG4gIHZhciBsZW5ndGggPSByZWZbMF07XG5cbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIFN0cmluZyh2YWx1ZSkubGVuZ3RoID49IGxlbmd0aDtcbn07XG5cbnZhciBtaW5fdmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIHJlZikge1xuICB2YXIgbWluID0gcmVmWzBdO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBOdW1iZXIodmFsdWUpID49IG1pbjtcbn07XG5cbnZhciBub3RfaW4gPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHsgcmV0dXJuICEgb3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKG9wdGlvbikgeyByZXR1cm4gb3B0aW9uID09IHZhbHVlOyB9KS5sZW5ndGg7IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxudmFyIGlzTnVtZXJpY18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNOdW1lcmljO1xuXG52YXIgX2Fzc2VydFN0cmluZyA9IGFzc2VydFN0cmluZ18xO1xuXG52YXIgX2Fzc2VydFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NlcnRTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbnVtZXJpYyA9IC9eWy0rXT9bMC05XSskLztcblxuZnVuY3Rpb24gaXNOdW1lcmljKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZzIuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIG51bWVyaWMudGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIGlzTnVtZXJpYyA9IHVud3JhcEV4cG9ydHMoaXNOdW1lcmljXzEpO1xuXG52YXIgbnVtZXJpYyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gaXNOdW1lcmljKFN0cmluZyh2YWx1ZSkpOyB9O1xuXG52YXIgcmVnZXggPSBmdW5jdGlvbiAodmFsdWUsIHJlZikge1xuICB2YXIgcmVnZXggPSByZWZbMF07XG4gIHZhciBmbGFncyA9IHJlZi5zbGljZSgxKTtcblxuICBpZiAocmVnZXggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXgudGVzdCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCwgZmxhZ3MpLnRlc3QoU3RyaW5nKHZhbHVlKSk7XG59O1xuXG52YXIgcmVxdWlyZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuICEhIHZhbHVlLmxlbmd0aDtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICEhIFN0cmluZyh2YWx1ZSkudHJpbSgpLmxlbmd0aDtcbn07XG5cbnZhciBzaXplID0gZnVuY3Rpb24gKGZpbGVzLCByZWYpIHtcbiAgdmFyIHNpemUgPSByZWZbMF07XG5cbiAgaWYgKGlzTmFOKHNpemUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIG5TaXplID0gTnVtYmVyKHNpemUpICogMTAyNDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChmaWxlc1tpXS5zaXplID4gblNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBpc1VSTF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNVUkw7XG5cbnZhciBfYXNzZXJ0U3RyaW5nID0gYXNzZXJ0U3RyaW5nXzE7XG5cbnZhciBfYXNzZXJ0U3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2VydFN0cmluZyk7XG5cbnZhciBfaXNGUUROID0gaXNGUUROO1xuXG52YXIgX2lzRlFETjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0ZRRE4pO1xuXG52YXIgX2lzSVAgPSBpc0lQXzE7XG5cbnZhciBfaXNJUDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0lQKTtcblxudmFyIF9tZXJnZSA9IG1lcmdlXzE7XG5cbnZhciBfbWVyZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVyZ2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdF91cmxfb3B0aW9ucyA9IHtcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZnRwJ10sXG4gIHJlcXVpcmVfdGxkOiB0cnVlLFxuICByZXF1aXJlX3Byb3RvY29sOiBmYWxzZSxcbiAgcmVxdWlyZV9ob3N0OiB0cnVlLFxuICByZXF1aXJlX3ZhbGlkX3Byb3RvY29sOiB0cnVlLFxuICBhbGxvd191bmRlcnNjb3JlczogZmFsc2UsXG4gIGFsbG93X3RyYWlsaW5nX2RvdDogZmFsc2UsXG4gIGFsbG93X3Byb3RvY29sX3JlbGF0aXZlX3VybHM6IGZhbHNlXG59O1xuXG52YXIgd3JhcHBlZF9pcHY2ID0gL15cXFsoW15cXF1dKylcXF0oPzo6KFswLTldKykpPyQvO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuZnVuY3Rpb24gY2hlY2tIb3N0KGhvc3QsIG1hdGNoZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoID0gbWF0Y2hlc1tpXTtcbiAgICBpZiAoaG9zdCA9PT0gbWF0Y2ggfHwgaXNSZWdFeHAobWF0Y2gpICYmIG1hdGNoLnRlc3QoaG9zdCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVVJMKHVybCwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZzIuZGVmYXVsdCkodXJsKTtcbiAgaWYgKCF1cmwgfHwgdXJsLmxlbmd0aCA+PSAyMDgzIHx8IC9cXHMvLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodXJsLmluZGV4T2YoJ21haWx0bzonKSA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBvcHRpb25zID0gKDAsIF9tZXJnZTIuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdF91cmxfb3B0aW9ucyk7XG4gIHZhciBwcm90b2NvbCA9IHZvaWQgMCxcbiAgICAgIGF1dGggPSB2b2lkIDAsXG4gICAgICBob3N0ID0gdm9pZCAwLFxuICAgICAgaG9zdG5hbWUgPSB2b2lkIDAsXG4gICAgICBwb3J0ID0gdm9pZCAwLFxuICAgICAgcG9ydF9zdHIgPSB2b2lkIDAsXG4gICAgICBzcGxpdCA9IHZvaWQgMCxcbiAgICAgIGlwdjYgPSB2b2lkIDA7XG5cbiAgc3BsaXQgPSB1cmwuc3BsaXQoJyMnKTtcbiAgdXJsID0gc3BsaXQuc2hpZnQoKTtcblxuICBzcGxpdCA9IHVybC5zcGxpdCgnPycpO1xuICB1cmwgPSBzcGxpdC5zaGlmdCgpO1xuXG4gIHNwbGl0ID0gdXJsLnNwbGl0KCc6Ly8nKTtcbiAgaWYgKHNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICBwcm90b2NvbCA9IHNwbGl0LnNoaWZ0KCk7XG4gICAgaWYgKG9wdGlvbnMucmVxdWlyZV92YWxpZF9wcm90b2NvbCAmJiBvcHRpb25zLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5yZXF1aXJlX3Byb3RvY29sKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuYWxsb3dfcHJvdG9jb2xfcmVsYXRpdmVfdXJscyAmJiB1cmwuc3Vic3RyKDAsIDIpID09PSAnLy8nKSB7XG4gICAgc3BsaXRbMF0gPSB1cmwuc3Vic3RyKDIpO1xuICB9XG4gIHVybCA9IHNwbGl0LmpvaW4oJzovLycpO1xuXG4gIHNwbGl0ID0gdXJsLnNwbGl0KCcvJyk7XG4gIHVybCA9IHNwbGl0LnNoaWZ0KCk7XG5cbiAgaWYgKHVybCA9PT0gJycgJiYgIW9wdGlvbnMucmVxdWlyZV9ob3N0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzcGxpdCA9IHVybC5zcGxpdCgnQCcpO1xuICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgIGF1dGggPSBzcGxpdC5zaGlmdCgpO1xuICAgIGlmIChhdXRoLmluZGV4T2YoJzonKSA+PSAwICYmIGF1dGguc3BsaXQoJzonKS5sZW5ndGggPiAyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGhvc3RuYW1lID0gc3BsaXQuam9pbignQCcpO1xuXG4gIHBvcnRfc3RyID0gaXB2NiA9IG51bGw7XG4gIHZhciBpcHY2X21hdGNoID0gaG9zdG5hbWUubWF0Y2god3JhcHBlZF9pcHY2KTtcbiAgaWYgKGlwdjZfbWF0Y2gpIHtcbiAgICBob3N0ID0gJyc7XG4gICAgaXB2NiA9IGlwdjZfbWF0Y2hbMV07XG4gICAgcG9ydF9zdHIgPSBpcHY2X21hdGNoWzJdIHx8IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgc3BsaXQgPSBob3N0bmFtZS5zcGxpdCgnOicpO1xuICAgIGhvc3QgPSBzcGxpdC5zaGlmdCgpO1xuICAgIGlmIChzcGxpdC5sZW5ndGgpIHtcbiAgICAgIHBvcnRfc3RyID0gc3BsaXQuam9pbignOicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwb3J0X3N0ciAhPT0gbnVsbCkge1xuICAgIHBvcnQgPSBwYXJzZUludChwb3J0X3N0ciwgMTApO1xuICAgIGlmICghL15bMC05XSskLy50ZXN0KHBvcnRfc3RyKSB8fCBwb3J0IDw9IDAgfHwgcG9ydCA+IDY1NTM1KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKCEoMCwgX2lzSVAyLmRlZmF1bHQpKGhvc3QpICYmICEoMCwgX2lzRlFETjIuZGVmYXVsdCkoaG9zdCwgb3B0aW9ucykgJiYgKCFpcHY2IHx8ICEoMCwgX2lzSVAyLmRlZmF1bHQpKGlwdjYsIDYpKSAmJiBob3N0ICE9PSAnbG9jYWxob3N0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhvc3QgPSBob3N0IHx8IGlwdjY7XG5cbiAgaWYgKG9wdGlvbnMuaG9zdF93aGl0ZWxpc3QgJiYgIWNoZWNrSG9zdChob3N0LCBvcHRpb25zLmhvc3Rfd2hpdGVsaXN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAob3B0aW9ucy5ob3N0X2JsYWNrbGlzdCAmJiBjaGVja0hvc3QoaG9zdCwgb3B0aW9ucy5ob3N0X2JsYWNrbGlzdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBpc1VSTCA9IHVud3JhcEV4cG9ydHMoaXNVUkxfMSk7XG5cbnZhciB1cmwgPSBmdW5jdGlvbiAodmFsdWUsIHJlZikge1xuICAgICAgICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0gW3RydWVdO1xuICAgICAgICB2YXIgcmVxdWlyZVByb3RvY29sID0gcmVmWzBdO1xuXG4gICAgICAgIHJldHVybiBpc1VSTCh2YWx1ZSwgeyByZXF1aXJlX3Byb3RvY29sOiAhISByZXF1aXJlUHJvdG9jb2wgfSk7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbnZhciBSdWxlcyA9IHtcbiAgYWxwaGFfZGFzaDogYWxwaGFfZGFzaCxcbiAgYWxwaGFfbnVtOiBhbHBoYV9udW0sXG4gIGFscGhhX3NwYWNlczogYWxwaGFfc3BhY2VzLFxuICBhbHBoYTogYWxwaGEsXG4gIGJldHdlZW46IGJldHdlZW4sXG4gIGNvbmZpcm1lZDogY29uZmlybWVkLFxuICBjcmVkaXRfY2FyZDogY3JlZGl0X2NhcmQsXG4gIGRlY2ltYWw6IGRlY2ltYWwsXG4gIGRpZ2l0czogZGlnaXRzLFxuICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICBlbWFpbDogZW1haWwsXG4gIGV4dDogZXh0LFxuICBpbWFnZTogaW1hZ2UsXG4gIGluOiBJbixcbiAgaXA6IGlwLFxuICBtYXg6IG1heCxcbiAgbWF4X3ZhbHVlOiBtYXhfdmFsdWUsXG4gIG1pbWVzOiBtaW1lcyxcbiAgbWluOiBtaW4sXG4gIG1pbl92YWx1ZTogbWluX3ZhbHVlLFxuICBub3RfaW46IG5vdF9pbixcbiAgbnVtZXJpYzogbnVtZXJpYyxcbiAgcmVnZXg6IHJlZ2V4LFxuICByZXF1aXJlZDogcmVxdWlyZWQsXG4gIHNpemU6IHNpemUsXG4gIHVybDogdXJsXG59O1xuXG52YXIgRXJyb3JCYWcgPSBmdW5jdGlvbiBFcnJvckJhZygpIHtcbiAgdGhpcy5lcnJvcnMgPSBbXTtcbn07XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gZXJyb3IgdG8gdGhlIGludGVybmFsIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIGZpZWxkIG5hbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtc2cgVGhlIGVycm9yIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBydWxlIFRoZSBydWxlIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBlcnJvci5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNjb3BlIFRoZSBTY29wZSBuYW1lLCBvcHRpb25hbC5cbiAgICovXG5FcnJvckJhZy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChmaWVsZCwgbXNnLCBydWxlLCBzY29wZSkge1xuICAgIGlmICggc2NvcGUgPT09IHZvaWQgMCApIHNjb3BlID0gJ19fZ2xvYmFsX18nO1xuXG4gIHRoaXMuZXJyb3JzLnB1c2goeyBmaWVsZDogZmllbGQsIG1zZzogbXNnLCBydWxlOiBydWxlLCBzY29wZTogc2NvcGUgfSk7XG59O1xuXG4gIC8qKlxuICAgKiBHZXRzIGFsbCBlcnJvciBtZXNzYWdlcyBmcm9tIHRoZSBpbnRlcm5hbCBhcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNjb3BlIFRoZSBTY29wZSBuYW1lLCBvcHRpb25hbC5cbiAgICogQHJldHVybiB7QXJyYXl9IGVycm9ycyBBcnJheSBvZiBhbGwgZXJyb3IgbWVzc2FnZXMuXG4gICAqL1xuRXJyb3JCYWcucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uIGFsbCAoc2NvcGUpIHtcbiAgaWYgKCEgc2NvcGUpIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm1zZzsgfSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lcnJvcnMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnNjb3BlID09PSBzY29wZTsgfSkubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm1zZzsgfSk7XG59O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlcmUgYXJlIGFueSBlcnJvcnMgaW4gdGhlIGludGVybmFsIGFycmF5LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2NvcGUgVGhlIFNjb3BlIG5hbWUsIG9wdGlvbmFsLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSByZXN1bHQgVHJ1ZSBpZiB0aGVyZSB3YXMgYXQgbGVhc3Qgb25lIGVycm9yLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuRXJyb3JCYWcucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uIGFueSAoc2NvcGUpIHtcbiAgaWYgKCEgc2NvcGUpIHtcbiAgICByZXR1cm4gISEgdGhpcy5lcnJvcnMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuICEhIHRoaXMuZXJyb3JzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5zY29wZSA9PT0gc2NvcGU7IH0pLmxlbmd0aDtcbn07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGl0ZW1zIGZyb20gdGhlIGludGVybmFsIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2NvcGUgVGhlIFNjb3BlIG5hbWUsIG9wdGlvbmFsLlxuICAgKi9cbkVycm9yQmFnLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyIChzY29wZSkge1xuICBpZiAoISBzY29wZSkge1xuICAgIHNjb3BlID0gJ19fZ2xvYmFsX18nO1xuICB9XG5cbiAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuc2NvcGUgIT09IHNjb3BlOyB9KTtcbn07XG5cbiAgLyoqXG4gICAqIENvbGxlY3RzIGVycm9ycyBpbnRvIGdyb3VwcyBvciBmb3IgYSBzcGVjaWZpYyBmaWVsZC5cbiAgICpcbiAgICogQHBhcmFte3N0cmluZ30gZmllbGQgVGhlIGZpZWxkIG5hbWUuXG4gICAqIEBwYXJhbXtzdHJpbmd9IHNjb3BlIFRoZSBzY29wZSBuYW1lLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1hcCBJZiBpdCBzaG91bGQgbWFwIHRoZSBlcnJvcnMgdG8gc3RyaW5ncyBpbnN0ZWFkIG9mIG9iamVjdHMuXG4gICAqIEByZXR1cm4ge0FycmF5fSBlcnJvcnMgVGhlIGVycm9ycyBmb3IgdGhlIHNwZWNpZmllZCBmaWVsZC5cbiAgICovXG5FcnJvckJhZy5wcm90b3R5cGUuY29sbGVjdCA9IGZ1bmN0aW9uIGNvbGxlY3QgKGZpZWxkLCBzY29wZSwgbWFwKSB7XG4gICAgaWYgKCBtYXAgPT09IHZvaWQgMCApIG1hcCA9IHRydWU7XG5cbiAgaWYgKCEgZmllbGQpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IHt9O1xuICAgIHRoaXMuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghIGNvbGxlY3Rpb25bZS5maWVsZF0pIHtcbiAgICAgICAgY29sbGVjdGlvbltlLmZpZWxkXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBjb2xsZWN0aW9uW2UuZmllbGRdLnB1c2gobWFwID8gZS5tc2cgOiBlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9XG5cbiAgaWYgKHNjb3BlKSB7XG4gICAgcmV0dXJuIHRoaXMuZXJyb3JzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5maWVsZCA9PT0gZmllbGQgJiYgZS5zY29wZSA9PT0gc2NvcGU7IH0pXG4gICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAobWFwID8gZS5tc2cgOiBlKTsgfSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lcnJvcnMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmZpZWxkID09PSBmaWVsZCAmJiBlLnNjb3BlID09PSAnX19nbG9iYWxfXyc7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAobWFwID8gZS5tc2cgOiBlKTsgfSk7XG59O1xuICAvKipcbiAgICogR2V0cyB0aGUgaW50ZXJuYWwgYXJyYXkgbGVuZ3RoLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGxlbmd0aCBUaGUgaW50ZXJuYWwgYXJyYXkgbGVuZ3RoLlxuICAgKi9cbkVycm9yQmFnLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uIGNvdW50ICgpIHtcbiAgcmV0dXJuIHRoaXMuZXJyb3JzLmxlbmd0aDtcbn07XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGZpcnN0IGVycm9yIG1lc3NhZ2UgZm9yIGEgc3BlY2lmaWMgZmllbGQuXG4gICAqXG4gICAqIEBwYXJhbXtzdHJpbmd9IGZpZWxkIFRoZSBmaWVsZCBuYW1lLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH0gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAgICovXG5FcnJvckJhZy5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiBmaXJzdCAoZmllbGQsIHNjb3BlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBzY29wZSA9PT0gdm9pZCAwICkgc2NvcGUgPSAnX19nbG9iYWxfXyc7XG5cbiAgdmFyIHNlbGVjdG9yID0gdGhpcy5fc2VsZWN0b3IoZmllbGQpO1xuICB2YXIgc2NvcGVkID0gdGhpcy5fc2NvcGUoZmllbGQpO1xuXG4gIGlmIChzY29wZWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5maXJzdChzY29wZWQubmFtZSwgc2NvcGVkLnNjb3BlKTtcbiAgICAvLyBpZiBzdWNoIHJlc3VsdCBleGlzdCwgcmV0dXJuIGl0LiBvdGhlcndpc2UgaXQgY291bGQgYmUgYSBmaWVsZC5cbiAgICAvLyB3aXRoIGRvdCBpbiBpdHMgbmFtZS5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmZpcnN0QnlSdWxlKHNlbGVjdG9yLm5hbWUsIHNlbGVjdG9yLnJ1bGUsIHNjb3BlKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5lcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcyQxLmVycm9yc1tpXS5maWVsZCA9PT0gZmllbGQgJiYgKHRoaXMkMS5lcnJvcnNbaV0uc2NvcGUgPT09IHNjb3BlKSkge1xuICAgICAgcmV0dXJuIHRoaXMkMS5lcnJvcnNbaV0ubXNnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgZXJyb3IgcnVsZSBmb3IgdGhlIHNwZWNpZmllZCBmaWVsZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIHNwZWNpZmllZCBmaWVsZC5cbiAgICogQHJldHVybiB7c3RyaW5nfG51bGx9IEZpcnN0IGVycm9yIHJ1bGUgb24gdGhlIHNwZWNpZmllZCBmaWVsZCBpZiBvbmUgaXMgZm91bmQsIG90aGVyd2lzZSBudWxsXG4gICAqL1xuRXJyb3JCYWcucHJvdG90eXBlLmZpcnN0UnVsZSA9IGZ1bmN0aW9uIGZpcnN0UnVsZSAoZmllbGQsIHNjb3BlKSB7XG4gIHZhciBlcnJvcnMgPSB0aGlzLmNvbGxlY3QoZmllbGQsIHNjb3BlLCBmYWxzZSk7XG5cbiAgcmV0dXJuIChlcnJvcnMubGVuZ3RoICYmIGVycm9yc1swXS5ydWxlKSB8fCBudWxsO1xufTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBpbnRlcm5hbCBhcnJheSBoYXMgYXQgbGVhc3Qgb25lIGVycm9yIGZvciB0aGUgc3BlY2lmaWVkIGZpZWxkLlxuICAgKlxuICAgKiBAcGFyYW17c3RyaW5nfSBmaWVsZCBUaGUgc3BlY2lmaWVkIGZpZWxkLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZXJyb3IgaXMgZm91bmQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG5FcnJvckJhZy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChmaWVsZCwgc2NvcGUpIHtcbiAgICBpZiAoIHNjb3BlID09PSB2b2lkIDAgKSBzY29wZSA9ICdfX2dsb2JhbF9fJztcblxuICByZXR1cm4gISEgdGhpcy5maXJzdChmaWVsZCwgc2NvcGUpO1xufTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgZmlyc3QgZXJyb3IgbWVzc2FnZSBmb3IgYSBzcGVjaWZpYyBmaWVsZCBhbmQgYSBydWxlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZmllbGQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBydWxlIFRoZSBuYW1lIG9mIHRoZSBydWxlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2NvcGUgVGhlIG5hbWUgb2YgdGhlIHNjb3BlIChvcHRpb25hbCkuXG4gICAqL1xuRXJyb3JCYWcucHJvdG90eXBlLmZpcnN0QnlSdWxlID0gZnVuY3Rpb24gZmlyc3RCeVJ1bGUgKG5hbWUsIHJ1bGUsIHNjb3BlKSB7XG4gIHZhciBlcnJvciA9IHRoaXMuY29sbGVjdChuYW1lLCBzY29wZSwgZmFsc2UpLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ydWxlID09PSBydWxlOyB9KVswXTtcblxuICByZXR1cm4gKGVycm9yICYmIGVycm9yLm1zZykgfHwgbnVsbDtcbn07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGVycm9yIG1lc3NhZ2VzIGFzc29jaWF0ZWQgd2l0aCBhIHNwZWNpZmljIGZpZWxkLlxuICAgKlxuICAgKiBAcGFyYW17c3RyaW5nfSBmaWVsZCBUaGUgZmllbGQgd2hpY2ggbWVzc2FnZXMgYXJlIHRvIGJlIHJlbW92ZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzY29wZSBUaGUgU2NvcGUgbmFtZSwgb3B0aW9uYWwuXG4gICAqL1xuRXJyb3JCYWcucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoZmllbGQsIHNjb3BlKSB7XG4gIGlmIChzY29wZSkge1xuICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmZpZWxkICE9PSBmaWVsZCB8fCBlLnNjb3BlICE9PSBzY29wZTsgfSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5maWVsZCAhPT0gZmllbGQgJiYgZS5zY29wZSA9PT0gJ19fZ2xvYmFsX18nOyB9KTtcbn07XG5cblxuICAvKipcbiAgICogR2V0IHRoZSBmaWVsZCBhdHRyaWJ1dGVzIGlmIHRoZXJlJ3MgYSBydWxlIHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW17c3RyaW5nfSBmaWVsZCBUaGUgc3BlY2lmaWVkIGZpZWxkLlxuICAgKiBAcmV0dXJuIHtPYmplY3R8bnVsbH1cbiAgICovXG5FcnJvckJhZy5wcm90b3R5cGUuX3NlbGVjdG9yID0gZnVuY3Rpb24gX3NlbGVjdG9yIChmaWVsZCkge1xuICBpZiAoZmllbGQuaW5kZXhPZignOicpID4gLTEpIHtcbiAgICB2YXIgcmVmID0gZmllbGQuc3BsaXQoJzonKTtcbiAgICAgIHZhciBuYW1lID0gcmVmWzBdO1xuICAgICAgdmFyIHJ1bGUgPSByZWZbMV07XG5cbiAgICByZXR1cm4geyBuYW1lOiBuYW1lLCBydWxlOiBydWxlIH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmllbGQgc2NvcGUgaWYgc3BlY2lmaWVkIHVzaW5nIGRvdCBub3RhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIHRoZSBzcGVjaWZpZSBmaWVsZC5cbiAgICogQHJldHVybiB7T2JqZWN0fG51bGx9XG4gICAqL1xuRXJyb3JCYWcucHJvdG90eXBlLl9zY29wZSA9IGZ1bmN0aW9uIF9zY29wZSAoZmllbGQpIHtcbiAgaWYgKGZpZWxkLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgdmFyIHJlZiA9IGZpZWxkLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgc2NvcGUgPSByZWZbMF07XG4gICAgICB2YXIgbmFtZSA9IHJlZlsxXTtcblxuICAgIHJldHVybiB7IG5hbWU6IG5hbWUsIHNjb3BlOiBzY29wZSB9O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgVmFsaWRhdG9yRXhjZXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gYW5vbnltb3VzKG1zZykge1xuICAgIHRoaXMubXNnID0gXCJbdmVlLXZhbGlkYXRlXTogXCIgKyBtc2c7XG4gIH1cblxuICBhbm9ueW1vdXMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLm1zZztcbiAgfTtcblxuICByZXR1cm4gYW5vbnltb3VzO1xufSgpKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGF0dHJpYnV0ZS4gdGhlIG5hbWUgbXVzdCBiZSBrZWJhYi1jYXNlLlxuICovXG52YXIgZ2V0RGF0YUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChlbCwgbmFtZSkgeyByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKChcImRhdGEtdnYtXCIgKyBuYW1lKSk7IH07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgaW5wdXQgZmllbGQgc2NvcGUuXG4gKi9cbnZhciBnZXRTY29wZSA9IGZ1bmN0aW9uIChlbCkge1xuICB2YXIgc2NvcGUgPSBnZXREYXRhQXR0cmlidXRlKGVsLCAnc2NvcGUnKTtcbiAgaWYgKCEgc2NvcGUgJiYgZWwuZm9ybSkge1xuICAgIHNjb3BlID0gZ2V0RGF0YUF0dHJpYnV0ZShlbC5mb3JtLCAnc2NvcGUnKTtcbiAgfVxuXG4gIHJldHVybiBzY29wZTtcbn07XG5cbi8qKlxuICogRGVib3VuY2VzIGEgZnVuY3Rpb24uXG4gKi9cbnZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIGlmICggd2FpdCA9PT0gdm9pZCAwICkgd2FpdCA9IDA7XG5cbiAgdmFyIHRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoIWltbWVkaWF0ZSkgeyBjYWxsYmFjay5hcHBseSh2b2lkIDAsIGFyZ3MpOyB9XG4gICAgfTtcbiAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgIGlmIChjYWxsTm93KSB7IGNhbGxiYWNrKGFyZ3MpOyB9XG4gIH07XG59O1xuXG4vKipcbiAqIEVtaXRzIGEgd2FybmluZyB0byB0aGUgY29uc29sZS5cbiAqL1xudmFyIHdhcm4gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICBpZiAoISBjb25zb2xlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgICBjb25zb2xlLndhcm4oKFwiW3ZlZS12YWxpZGF0ZV06IFwiICsgbWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdmFsdWUgaXMgYW4gb2JqZWN0LlxuICovXG4gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmICEgQXJyYXkuaXNBcnJheShvYmplY3QpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBmdW5jdGlvbiBpcyBjYWxsYWJsZS5cbiAqL1xudmFyIGlzQ2FsbGFibGUgPSBmdW5jdGlvbiAoZnVuYykgeyByZXR1cm4gdHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbic7IH07XG5cbi8qKlxuICogQ2hlY2sgaWYgZWxlbWVudCBoYXMgdGhlIGNzcyBjbGFzcyBvbiBpdC5cbiAqL1xudmFyIGhhc0NsYXNzID0gZnVuY3Rpb24gKGVsLCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgfVxuXG4gIHJldHVybiAhIWVsLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKChcIihcXFxcc3xeKVwiICsgY2xhc3NOYW1lICsgXCIoXFxcXHN8JClcIikpKTtcbn07XG5cbi8qKlxuICogQWRkcyB0aGUgcHJvdmlkZWQgY3NzIGNsYXNzTmFtZSB0byB0aGUgZWxlbWVudC5cbiAqL1xudmFyIGFkZENsYXNzID0gZnVuY3Rpb24gKGVsLCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICghaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkpIHtcbiAgICBlbC5jbGFzc05hbWUgKz0gXCIgXCIgKyBjbGFzc05hbWU7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBwcm92aWRlZCBjc3MgY2xhc3NOYW1lIGZyb20gdGhlIGVsZW1lbnQuXG4gKi9cbnZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChlbCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkpIHtcbiAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgoXCIoXFxcXHN8XilcIiArIGNsYXNzTmFtZSArIFwiKFxcXFxzfCQpXCIpKTtcbiAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShyZWcsICcgJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYXJyYXkuXG4gKiBTaW1wbGUgcG9seWZpbGwgZm9yIEFycmF5LmZyb21cbiAqL1xudmFyIHRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXlMaWtlKSB7XG4gIGlmIChBcnJheS5mcm9tKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYXJyYXlMaWtlKTtcbiAgfVxuXG4gIHZhciBhcnJheSA9IFtdO1xuICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFycmF5LnB1c2goYXJyYXlMaWtlW2ldKTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn07XG5cbi8qKlxuICogQXNzaWduIHBvbHlmaWxsIGZyb20gdGhlIG1kbi5cbiAqL1xudmFyIGFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdmFyIG90aGVycyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBvdGhlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgaWYgKE9iamVjdC5hc3NpZ24pIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbi5hcHBseShPYmplY3QsIFsgdGFyZ2V0IF0uY29uY2F0KCBvdGhlcnMgKSk7XG4gIH1cblxuICBpZiAodGFyZ2V0ID09IG51bGwpIHsgLy8gVHlwZUVycm9yIGlmIHVuZGVmaW5lZCBvciBudWxsXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcbiAgb3RoZXJzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChhcmcgIT0gbnVsbCkgeyAvLyBTa2lwIG92ZXIgaWYgdW5kZWZpbmVkIG9yIG51bGxcbiAgICAgIE9iamVjdC5rZXlzKGFyZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRvW2tleV0gPSBhcmdba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRvO1xufTtcblxuLyoqXG4gKiBwb2x5ZmlsbHMgYXJyYXkuZmluZFxuICogQHBhcmFtIHtBcnJheX0gYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICovXG52YXIgZmluZCA9IGZ1bmN0aW9uIChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGlmIChhcnJheS5maW5kKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbmQocHJlZGljYXRlKTtcbiAgfVxuXG4gIHZhciByZXN1bHQ7XG4gIGFycmF5LnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAocHJlZGljYXRlKGl0ZW0pKSB7XG4gICAgICByZXN1bHQgPSBpdGVtO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIGdldFJ1bGVzID0gZnVuY3Rpb24gKGV4cHJlc3Npb24sIHZhbHVlLCBlbCkge1xuICAvLyBUT0RPOiBEZXByZWNhdGUgdGhpcy5cbiAgaWYgKCEgZXhwcmVzc2lvbikge1xuICAgIHJldHVybiBnZXREYXRhQXR0cmlidXRlKGVsLCAncnVsZXMnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlLnJ1bGVzKSA/IHZhbHVlLnJ1bGVzIDogdmFsdWU7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbnZhciBEaWN0aW9uYXJ5ID0gZnVuY3Rpb24gRGljdGlvbmFyeShkaWN0aW9uYXJ5KSB7XG4gIGlmICggZGljdGlvbmFyeSA9PT0gdm9pZCAwICkgZGljdGlvbmFyeSA9IHt9O1xuXG4gIHRoaXMuZGljdGlvbmFyeSA9IHt9O1xuICB0aGlzLm1lcmdlKGRpY3Rpb25hcnkpO1xufTtcblxuRGljdGlvbmFyeS5wcm90b3R5cGUuaGFzTG9jYWxlID0gZnVuY3Rpb24gaGFzTG9jYWxlIChsb2NhbGUpIHtcbiAgcmV0dXJuICEhIHRoaXMuZGljdGlvbmFyeVtsb2NhbGVdO1xufTtcblxuRGljdGlvbmFyeS5wcm90b3R5cGUuZ2V0TWVzc2FnZSA9IGZ1bmN0aW9uIGdldE1lc3NhZ2UgKGxvY2FsZSwga2V5LCBmYWxsYmFjaykge1xuICAgIGlmICggZmFsbGJhY2sgPT09IHZvaWQgMCApIGZhbGxiYWNrID0gJyc7XG5cbiAgaWYgKCEgdGhpcy5oYXNNZXNzYWdlKGxvY2FsZSwga2V5KSkge1xuICAgIHJldHVybiBmYWxsYmFjaztcbiAgfVxuXG4gIHJldHVybiB0aGlzLmRpY3Rpb25hcnlbbG9jYWxlXS5tZXNzYWdlc1trZXldO1xufTtcblxuRGljdGlvbmFyeS5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlIChsb2NhbGUsIGtleSwgZmFsbGJhY2spIHtcbiAgICBpZiAoIGZhbGxiYWNrID09PSB2b2lkIDAgKSBmYWxsYmFjayA9ICcnO1xuXG4gIGlmICghIHRoaXMuaGFzQXR0cmlidXRlKGxvY2FsZSwga2V5KSkge1xuICAgIHJldHVybiBmYWxsYmFjaztcbiAgfVxuXG4gIHJldHVybiB0aGlzLmRpY3Rpb25hcnlbbG9jYWxlXS5hdHRyaWJ1dGVzW2tleV07XG59O1xuXG5EaWN0aW9uYXJ5LnByb3RvdHlwZS5oYXNNZXNzYWdlID0gZnVuY3Rpb24gaGFzTWVzc2FnZSAobG9jYWxlLCBrZXkpIHtcbiAgcmV0dXJuICEhIChcbiAgICAgICAgICB0aGlzLmhhc0xvY2FsZShsb2NhbGUpICYmXG4gICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5W2xvY2FsZV0ubWVzc2FnZXMgJiZcbiAgICAgICAgICB0aGlzLmRpY3Rpb25hcnlbbG9jYWxlXS5tZXNzYWdlc1trZXldXG4gICAgICApO1xufTtcblxuRGljdGlvbmFyeS5wcm90b3R5cGUuaGFzQXR0cmlidXRlID0gZnVuY3Rpb24gaGFzQXR0cmlidXRlIChsb2NhbGUsIGtleSkge1xuICByZXR1cm4gISEgKFxuICAgICAgICAgIHRoaXMuaGFzTG9jYWxlKGxvY2FsZSkgJiZcbiAgICAgICAgICB0aGlzLmRpY3Rpb25hcnlbbG9jYWxlXS5hdHRyaWJ1dGVzICYmXG4gICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5W2xvY2FsZV0uYXR0cmlidXRlc1trZXldXG4gICAgICApO1xufTtcblxuRGljdGlvbmFyeS5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSAoZGljdGlvbmFyeSkge1xuICB0aGlzLl9tZXJnZSh0aGlzLmRpY3Rpb25hcnksIGRpY3Rpb25hcnkpO1xufTtcblxuRGljdGlvbmFyeS5wcm90b3R5cGUuc2V0TWVzc2FnZSA9IGZ1bmN0aW9uIHNldE1lc3NhZ2UgKGxvY2FsZSwga2V5LCBtZXNzYWdlKSB7XG4gIGlmICghIHRoaXMuaGFzTG9jYWxlKGxvY2FsZSkpIHtcbiAgICB0aGlzLmRpY3Rpb25hcnlbbG9jYWxlXSA9IHtcbiAgICAgIG1lc3NhZ2VzOiB7fSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9XG4gICAgfTtcbiAgfVxuXG4gIHRoaXMuZGljdGlvbmFyeVtsb2NhbGVdLm1lc3NhZ2VzW2tleV0gPSBtZXNzYWdlO1xufTtcblxuRGljdGlvbmFyeS5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gc2V0QXR0cmlidXRlIChsb2NhbGUsIGtleSwgYXR0cmlidXRlKSB7XG4gIGlmICghIHRoaXMuaGFzTG9jYWxlKGxvY2FsZSkpIHtcbiAgICB0aGlzLmRpY3Rpb25hcnlbbG9jYWxlXSA9IHtcbiAgICAgIG1lc3NhZ2VzOiB7fSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9XG4gICAgfTtcbiAgfVxuXG4gIHRoaXMuZGljdGlvbmFyeVtsb2NhbGVdLmF0dHJpYnV0ZXNba2V5XSA9IGF0dHJpYnV0ZTtcbn07XG5cbkRpY3Rpb25hcnkucHJvdG90eXBlLl9tZXJnZSA9IGZ1bmN0aW9uIF9tZXJnZSAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAoISAoaXNPYmplY3QodGFyZ2V0KSAmJiBpc09iamVjdChzb3VyY2UpKSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChpc09iamVjdChzb3VyY2Vba2V5XSkpIHtcbiAgICAgIGlmICghIHRhcmdldFtrZXldKSB7XG4gICAgICAgIGFzc2lnbih0YXJnZXQsICggb2JqID0ge30sIG9ialtrZXldID0ge30sIG9iaiApKTtcbiAgICAgICAgICB2YXIgb2JqO1xuICAgICAgfVxuXG4gICAgICB0aGlzJDEuX21lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXNzaWduKHRhcmdldCwgKCBvYmokMSA9IHt9LCBvYmokMVtrZXldID0gc291cmNlW2tleV0sIG9iaiQxICkpO1xuICAgICAgdmFyIG9iaiQxO1xuICB9KTtcblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbnZhciBtZXNzYWdlcyA9IHtcbiAgYWxwaGFfZGFzaDogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCJUaGUgXCIgKyBmaWVsZCArIFwiIGZpZWxkIG1heSBjb250YWluIGFscGhhLW51bWVyaWMgY2hhcmFjdGVycyBhcyB3ZWxsIGFzIGRhc2hlcyBhbmQgdW5kZXJzY29yZXMuXCIpOyB9LFxuICBhbHBoYV9udW06IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBtYXkgb25seSBjb250YWluIGFscGhhLW51bWVyaWMgY2hhcmFjdGVycy5cIik7IH0sXG4gIGFscGhhX3NwYWNlczogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCJUaGUgXCIgKyBmaWVsZCArIFwiIGZpZWxkIG1heSBvbmx5IGNvbnRhaW4gYWxwaGFiZXRpYyBjaGFyYWN0ZXJzIGFzIHdlbGwgYXMgc3BhY2VzLlwiKTsgfSxcbiAgYWxwaGE6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBtYXkgb25seSBjb250YWluIGFscGhhYmV0aWMgY2hhcmFjdGVycy5cIik7IH0sXG4gIGJldHdlZW46IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgdmFyIG1pbiA9IHJlZlswXTtcbiAgICB2YXIgbWF4ID0gcmVmWzFdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBiZXR3ZWVuIFwiICsgbWluICsgXCIgYW5kIFwiICsgbWF4ICsgXCIuXCIpO1xufSxcbiAgY29uZmlybWVkOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgY29uZmlybWF0aW9uIGRvZXMgbm90IG1hdGNoLlwiKTsgfSxcbiAgY3JlZGl0X2NhcmQ6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBpcyBpbnZhbGlkLlwiKTsgfSxcbiAgZGVjaW1hbDogZnVuY3Rpb24gKGZpZWxkLCByZWYpIHtcbiAgICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0gWycqJ107XG4gICAgdmFyIGRlY2ltYWxzID0gcmVmWzBdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBudW1lcmljIGFuZCBtYXkgY29udGFpbiBcIiArIChkZWNpbWFscyA9PT0gJyonID8gJycgOiBkZWNpbWFscykgKyBcIiBkZWNpbWFsIHBvaW50cy5cIik7XG59LFxuICBkaWdpdHM6IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgdmFyIGxlbmd0aCA9IHJlZlswXTtcblxuICAgIHJldHVybiAoXCJUaGUgXCIgKyBmaWVsZCArIFwiIGZpZWxkIG11c3QgYmUgbnVtZXJpYyBhbmQgZXhhY3RseSBjb250YWluIFwiICsgbGVuZ3RoICsgXCIgZGlnaXRzLlwiKTtcbn0sXG4gIGRpbWVuc2lvbnM6IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgdmFyIHdpZHRoID0gcmVmWzBdO1xuICAgIHZhciBoZWlnaHQgPSByZWZbMV07XG5cbiAgICByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBtdXN0IGJlIFwiICsgd2lkdGggKyBcIiBwaXhlbHMgYnkgXCIgKyBoZWlnaHQgKyBcIiBwaXhlbHMuXCIpO1xufSxcbiAgZW1haWw6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBtdXN0IGJlIGEgdmFsaWQgZW1haWwuXCIpOyB9LFxuICBleHQ6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBtdXN0IGJlIGEgdmFsaWQgZmlsZS5cIik7IH0sXG4gIGltYWdlOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBhbiBpbWFnZS5cIik7IH0sXG4gIGluOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBhIHZhbGlkIHZhbHVlLlwiKTsgfSxcbiAgaXA6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBtdXN0IGJlIGEgdmFsaWQgaXAgYWRkcmVzcy5cIik7IH0sXG4gIG1heDogZnVuY3Rpb24gKGZpZWxkLCByZWYpIHtcbiAgICB2YXIgbGVuZ3RoID0gcmVmWzBdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbWF5IG5vdCBiZSBncmVhdGVyIHRoYW4gXCIgKyBsZW5ndGggKyBcIiBjaGFyYWN0ZXJzLlwiKTtcbn0sXG4gIG1heF92YWx1ZTogZnVuY3Rpb24gKGZpZWxkLCByZWYpIHtcbiAgICB2YXIgbWF4ID0gcmVmWzBdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBcIiArIG1heCArIFwiIG9yIGxlc3MuXCIpO1xufSxcbiAgbWltZXM6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBtdXN0IGhhdmUgYSB2YWxpZCBmaWxlIHR5cGUuXCIpOyB9LFxuICBtaW46IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgdmFyIGxlbmd0aCA9IHJlZlswXTtcblxuICAgIHJldHVybiAoXCJUaGUgXCIgKyBmaWVsZCArIFwiIGZpZWxkIG11c3QgYmUgYXQgbGVhc3QgXCIgKyBsZW5ndGggKyBcIiBjaGFyYWN0ZXJzLlwiKTtcbn0sXG4gIG1pbl92YWx1ZTogZnVuY3Rpb24gKGZpZWxkLCByZWYpIHtcbiAgICB2YXIgbWluID0gcmVmWzBdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBcIiArIG1pbiArIFwiIG9yIG1vcmUuXCIpO1xufSxcbiAgbm90X2luOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBhIHZhbGlkIHZhbHVlLlwiKTsgfSxcbiAgbnVtZXJpYzogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCJUaGUgXCIgKyBmaWVsZCArIFwiIGZpZWxkIG1heSBvbmx5IGNvbnRhaW4gbnVtZXJpYyBjaGFyYWN0ZXJzLlwiKTsgfSxcbiAgcmVnZXg6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwiVGhlIFwiICsgZmllbGQgKyBcIiBmaWVsZCBmb3JtYXQgaXMgaW52YWxpZC5cIik7IH0sXG4gIHJlcXVpcmVkOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgaXMgcmVxdWlyZWQuXCIpOyB9LFxuICBzaXplOiBmdW5jdGlvbiAoZmllbGQsIHJlZikge1xuICAgIHZhciBzaXplID0gcmVmWzBdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgbXVzdCBiZSBsZXNzIHRoYW4gXCIgKyBzaXplICsgXCIgS0IuXCIpO1xufSxcbiAgdXJsOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgZmllbGQgaXMgbm90IGEgdmFsaWQgVVJMLlwiKTsgfVxufTtcblxudmFyIGFmdGVyID0gZnVuY3Rpb24gKG1vbWVudCkgeyByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCByZWYpIHtcbiAgdmFyIHRhcmdldEZpZWxkID0gcmVmWzBdO1xuICB2YXIgZm9ybWF0ID0gcmVmWzFdO1xuXG4gIHZhciBkYXRlVmFsdWUgPSBtb21lbnQodmFsdWUsIGZvcm1hdCwgdHJ1ZSk7XG4gIHZhciBmaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoKFwiaW5wdXRbbmFtZT0nXCIgKyB0YXJnZXRGaWVsZCArIFwiJ11cIikpO1xuXG4gIGlmICghIChkYXRlVmFsdWUuaXNWYWxpZCgpICYmIGZpZWxkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBvdGhlciA9IG1vbWVudChmaWVsZC52YWx1ZSwgZm9ybWF0LCB0cnVlKTtcblxuICBpZiAoISBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0ZVZhbHVlLmlzQWZ0ZXIob3RoZXIpO1xufTsgfTtcblxudmFyIGJlZm9yZSA9IGZ1bmN0aW9uIChtb21lbnQpIHsgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgcmVmKSB7XG4gIHZhciB0YXJnZXRGaWVsZCA9IHJlZlswXTtcbiAgdmFyIGZvcm1hdCA9IHJlZlsxXTtcblxuICB2YXIgZGF0ZVZhbHVlID0gbW9tZW50KHZhbHVlLCBmb3JtYXQsIHRydWUpO1xuICB2YXIgZmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKChcImlucHV0W25hbWU9J1wiICsgdGFyZ2V0RmllbGQgKyBcIiddXCIpKTtcblxuICBpZiAoISBkYXRlVmFsdWUuaXNWYWxpZCgpIHx8ICEgZmllbGQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgb3RoZXIgPSBtb21lbnQoZmllbGQudmFsdWUsIGZvcm1hdCwgdHJ1ZSk7XG5cbiAgaWYgKCEgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVWYWx1ZS5pc0JlZm9yZShvdGhlcik7XG59OyB9O1xuXG52YXIgZGF0ZV9mb3JtYXQgPSBmdW5jdGlvbiAobW9tZW50KSB7IHJldHVybiBmdW5jdGlvbiAodmFsdWUsIHJlZikge1xuXHR2YXIgZm9ybWF0ID0gcmVmWzBdO1xuXG5cdHJldHVybiBtb21lbnQodmFsdWUsIGZvcm1hdCwgdHJ1ZSkuaXNWYWxpZCgpO1xuIH1cdH07XG5cbnZhciBkYXRlX2JldHdlZW4gPSBmdW5jdGlvbiAobW9tZW50KSB7IHJldHVybiBmdW5jdGlvbiAodmFsdWUsIHJlZikge1xuICB2YXIgbWluID0gcmVmWzBdO1xuICB2YXIgbWF4ID0gcmVmWzFdO1xuICB2YXIgZm9ybWF0ID0gcmVmWzJdO1xuXG4gIHZhciBtaW5EYXRlID0gbW9tZW50KG1pbiwgZm9ybWF0LCB0cnVlKTtcbiAgdmFyIG1heERhdGUgPSBtb21lbnQobWF4LCBmb3JtYXQsIHRydWUpO1xuICB2YXIgZGF0ZVZhbCA9IG1vbWVudCh2YWx1ZSwgZm9ybWF0LCB0cnVlKTtcblxuICBpZiAoISAobWluRGF0ZS5pc1ZhbGlkKCkgJiYgbWF4RGF0ZS5pc1ZhbGlkKCkgJiYgZGF0ZVZhbC5pc1ZhbGlkKCkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVWYWwuaXNCZXR3ZWVuKG1pbkRhdGUsIG1heERhdGUpO1xufTsgfTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbnZhciBtZXNzYWdlcyQxID0ge1xuICBhZnRlcjogZnVuY3Rpb24gKGZpZWxkLCByZWYpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcmVmWzBdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgbXVzdCBiZSBhZnRlciBcIiArIHRhcmdldCArIFwiLlwiKTtcbn0sXG4gIGJlZm9yZTogZnVuY3Rpb24gKGZpZWxkLCByZWYpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcmVmWzBdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgbXVzdCBiZSBiZWZvcmUgXCIgKyB0YXJnZXQgKyBcIi5cIik7XG59LFxuICBkYXRlX2JldHdlZW46IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgdmFyIG1pbiA9IHJlZlswXTtcbiAgICB2YXIgbWF4ID0gcmVmWzFdO1xuXG4gICAgcmV0dXJuIChcIlRoZSBcIiArIGZpZWxkICsgXCIgbXVzdCBiZSBiZXR3ZWVuIFwiICsgbWluICsgXCIgYW5kIFwiICsgbWF4ICsgXCIuXCIpO1xufSxcbiAgZGF0ZV9mb3JtYXQ6IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgdmFyIGZvcm1hdCA9IHJlZlswXTtcblxuICAgIHJldHVybiAoXCJUaGUgXCIgKyBmaWVsZCArIFwiIG11c3QgYmUgaW4gdGhlIGZvcm1hdCBcIiArIGZvcm1hdCArIFwiLlwiKTtcbn1cbn07XG5cbnZhciBkYXRlID0ge1xuICBtYWtlOiBmdW5jdGlvbiAobW9tZW50KSB7IHJldHVybiAoe1xuICAgIGRhdGVfZm9ybWF0OiBkYXRlX2Zvcm1hdChtb21lbnQpLFxuICAgIGFmdGVyOiBhZnRlcihtb21lbnQpLFxuICAgIGJlZm9yZTogYmVmb3JlKG1vbWVudCksXG4gICAgZGF0ZV9iZXR3ZWVuOiBkYXRlX2JldHdlZW4obW9tZW50KVxuICB9KTsgfSxcbiAgbWVzc2FnZXM6IG1lc3NhZ2VzJDEsXG4gIGluc3RhbGxlZDogZmFsc2Vcbn07XG5cbnZhciBGaWVsZEJhZyA9IGZ1bmN0aW9uIEZpZWxkQmFnKCkge1xuICB0aGlzLmZpZWxkcyA9IHt9O1xufTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgYW5kIGFkZHMgYSBuZXcgZmllbGQgdG8gdGhlIGJhZy5cbiAgICovXG5GaWVsZEJhZy5wcm90b3R5cGUuX2FkZCA9IGZ1bmN0aW9uIF9hZGQgKG5hbWUpIHtcbiAgdGhpcy5maWVsZHNbbmFtZV0gPSB7fTtcbiAgdGhpcy5fc2V0RmxhZ3MobmFtZSwgeyBkaXJ0eTogZmFsc2UsIHZhbGlkOiBmYWxzZSwgfSwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBmaWVsZCBpZiBpdCBkb2VzIG5vdCBleGlzdC5cbiAqL1xuRmllbGRCYWcucHJvdG90eXBlLl9hZGRJZk5vdEV4aXN0cyA9IGZ1bmN0aW9uIF9hZGRJZk5vdEV4aXN0cyAobmFtZSkge1xuICBpZiAodGhpcy5maWVsZHNbbmFtZV0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9hZGQobmFtZSk7XG59O1xuXG4gIC8qKlxuICAgKiBSZW1vb3ZlcyBhIGZpZWxkIGZyb20gdGhlIGJhZy5cbiAgICovXG5GaWVsZEJhZy5wcm90b3R5cGUuX3JlbW92ZSA9IGZ1bmN0aW9uIF9yZW1vdmUgKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMuZmllbGRzW25hbWVdO1xufTtcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBmbGFncyBzdGF0ZSBmb3IgYSBzcGVjaWZpZWQgZmllbGQgb3IgYWxsIGZpZWxkcy5cbiAgICovXG5GaWVsZEJhZy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAobmFtZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICghIG5hbWUpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHRoaXMkMS5fc2V0RmxhZ3MoZmllbGQsIHsgZGlydHk6IGZhbHNlLCB2YWxpZDogZmFsc2UsIH0sIHRydWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fc2V0RmxhZ3MobmFtZSwgeyBkaXJ0eTogZmFsc2UsIHZhbGlkOiBmYWxzZSwgfSwgdHJ1ZSk7XG59O1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBmbGFncyBmb3IgYSBzcGVjaWZpZWQgZmllbGQuXG4gICAqL1xuRmllbGRCYWcucHJvdG90eXBlLl9zZXRGbGFncyA9IGZ1bmN0aW9uIF9zZXRGbGFncyAobmFtZSwgZmxhZ3MsIGluaXRpYWwpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIGluaXRpYWwgPT09IHZvaWQgMCApIGluaXRpYWwgPSBmYWxzZTtcblxuICByZXR1cm4gT2JqZWN0LmtleXMoZmxhZ3MpLmV2ZXJ5KFxuICAgICAgICAgIGZ1bmN0aW9uIChmbGFnKSB7IHJldHVybiB0aGlzJDEuX3NldEZsYWcobmFtZSwgZmxhZywgZmxhZ3NbZmxhZ10sIGluaXRpYWwpOyB9XG4gICAgICApO1xufTtcblxuICAvKipcbiAgICogU2V0cyBhIGZsYWcgZm9yIGEgc3BlY2lmaWVkIGZpZWxkLlxuICAgKi9cbkZpZWxkQmFnLnByb3RvdHlwZS5fc2V0RmxhZyA9IGZ1bmN0aW9uIF9zZXRGbGFnIChuYW1lLCBmbGFnLCB2YWx1ZSwgaW5pdGlhbCkge1xuICAgIGlmICggaW5pdGlhbCA9PT0gdm9pZCAwICkgaW5pdGlhbCA9IGZhbHNlO1xuXG4gIHZhciBtZXRob2QgPSBcInNldFwiICsgKGZsYWcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkpICsgKGZsYWcuc2xpY2UoMSkpO1xuICBpZiAodHlwZW9mIHRoaXNbbWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRoaXNbbWV0aG9kXShuYW1lLCB2YWx1ZSwgaW5pdGlhbCk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaXJ0eSBmbGFnIGFsb25nIHdpdGggZGVwZW5kYW50IGZsYWdzLlxuICAgKi9cbkZpZWxkQmFnLnByb3RvdHlwZS5zZXREaXJ0eSA9IGZ1bmN0aW9uIHNldERpcnR5IChuYW1lLCB2YWx1ZSwgaW5pdGlhbCkge1xuICAgIGlmICggaW5pdGlhbCA9PT0gdm9pZCAwICkgaW5pdGlhbCA9IGZhbHNlO1xuXG4gIHRoaXMuZmllbGRzW25hbWVdLmRpcnR5ID0gdmFsdWU7XG4gIHRoaXMuZmllbGRzW25hbWVdLmNsZWFuID0gaW5pdGlhbCB8fCAhIHZhbHVlO1xuICB0aGlzLmZpZWxkc1tuYW1lXS5wYXNzZWQgPSB0aGlzLmZpZWxkc1tuYW1lXS52YWxpZCAmJiB2YWx1ZTtcbiAgdGhpcy5maWVsZHNbbmFtZV0uZmFpbGVkID0gISB0aGlzLmZpZWxkc1tuYW1lXS52YWxpZCAmJiB2YWx1ZTtcbn07XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbGlkIGZsYWcgYWxvbmcgd2l0aCBkZXBlbmRhbnQgZmxhZ3MuXG4gICAqL1xuRmllbGRCYWcucHJvdG90eXBlLnNldFZhbGlkID0gZnVuY3Rpb24gc2V0VmFsaWQgKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuZmllbGRzW25hbWVdLnZhbGlkID0gdmFsdWU7XG4gIHRoaXMuZmllbGRzW25hbWVdLnBhc3NlZCA9IHRoaXMuZmllbGRzW25hbWVdLmRpcnR5ICYmIHZhbHVlO1xuICB0aGlzLmZpZWxkc1tuYW1lXS5mYWlsZWQgPSB0aGlzLmZpZWxkc1tuYW1lXS5kaXJ0eSAmJiAhIHZhbHVlO1xufTtcblxuICAvKipcbiAgICogR2V0cyBhIGZpZWxkIGZsYWcgdmFsdWUuXG4gICAqL1xuRmllbGRCYWcucHJvdG90eXBlLl9nZXRGaWVsZEZsYWcgPSBmdW5jdGlvbiBfZ2V0RmllbGRGbGFnIChuYW1lLCBmbGFnKSB7XG4gIGlmICh0aGlzLmZpZWxkc1tuYW1lXSkge1xuICAgIHJldHVybiB0aGlzLmZpZWxkc1tuYW1lXVtmbGFnXTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbkZpZWxkQmFnLnByb3RvdHlwZS5kaXJ0eSA9IGZ1bmN0aW9uIGRpcnR5IChuYW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKCEgbmFtZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykuc29tZShmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIHRoaXMkMS5maWVsZHNbZmllbGRdLmRpcnR5OyB9KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9nZXRGaWVsZEZsYWcobmFtZSwgJ2RpcnR5Jyk7XG59O1xuXG5GaWVsZEJhZy5wcm90b3R5cGUudmFsaWQgPSBmdW5jdGlvbiB2YWxpZCAobmFtZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICghIG5hbWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5maWVsZHMpLmV2ZXJ5KGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gdGhpcyQxLmZpZWxkc1tmaWVsZF0udmFsaWQ7IH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2dldEZpZWxkRmxhZyhuYW1lLCAndmFsaWQnKTtcbn07XG5cbkZpZWxkQmFnLnByb3RvdHlwZS5wYXNzZWQgPSBmdW5jdGlvbiBwYXNzZWQgKG5hbWUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAoISBuYW1lKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKS5ldmVyeShmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIHRoaXMkMS5maWVsZHNbZmllbGRdLnBhc3NlZDsgfSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZ2V0RmllbGRGbGFnKG5hbWUsICdwYXNzZWQnKTtcbn07XG5cbkZpZWxkQmFnLnByb3RvdHlwZS5mYWlsZWQgPSBmdW5jdGlvbiBmYWlsZWQgKG5hbWUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAoISBuYW1lKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKS5zb21lKGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gdGhpcyQxLmZpZWxkc1tmaWVsZF0uZmFpbGVkOyB9KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9nZXRGaWVsZEZsYWcobmFtZSwgJ2ZhaWxlZCcpO1xufTtcblxuRmllbGRCYWcucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24gY2xlYW4gKG5hbWUpIHtcbiAgaWYgKCEgbmFtZSkge1xuICAgIHJldHVybiAhIHRoaXMuZGlydHkoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9nZXRGaWVsZEZsYWcobmFtZSwgJ2NsZWFuJyk7XG59O1xuXG52YXIgTE9DQUxFID0gJ2VuJztcbnZhciBTVFJJQ1RfTU9ERSA9IHRydWU7XG52YXIgZGljdGlvbmFyeSA9IG5ldyBEaWN0aW9uYXJ5KHtcbiAgZW46IHtcbiAgICBtZXNzYWdlczogbWVzc2FnZXMsXG4gICAgYXR0cmlidXRlczoge31cbiAgfVxufSk7XG5cbnZhciBWYWxpZGF0b3IgPSBmdW5jdGlvbiBWYWxpZGF0b3IodmFsaWRhdGlvbnMsIG9wdGlvbnMpIHtcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0geyBpbml0OiB0cnVlIH07XG5cbiAgdGhpcy5zdHJpY3RNb2RlID0gU1RSSUNUX01PREU7XG4gIHRoaXMuJHNjb3BlcyA9IHsgX19nbG9iYWxfXzoge30gfTtcbiAgdGhpcy5maWVsZEJhZyA9IG5ldyBGaWVsZEJhZygpO1xuICB0aGlzLl9jcmVhdGVGaWVsZHModmFsaWRhdGlvbnMpO1xuICB0aGlzLmVycm9yQmFnID0gbmV3IEVycm9yQmFnKCk7XG4gIC8vIFNvbWUgZmllbGRzIHdpbGwgYmUgbGF0ZXIgZXZhbHVhdGVkLCBiZWNhdXNlIHRoZSB2bSBpc24ndCBtb3VudGVkIHlldFxuICAvLyBzbyBpdCBtYXkgcmVnaXN0ZXIgaXQgdW5kZXIgYW4gaW5hY2N1cmF0ZSBzY29wZS5cbiAgdGhpcy4kZGVmZXJyZWQgPSBbXTtcbiAgdGhpcy4kcmVhZHkgPSBmYWxzZTtcblxuICAvLyBpZiBtb21lbnRqcyBpcyBwcmVzZW50LCBpbnN0YWxsIHRoZSB2YWxpZGF0b3JzLlxuICBpZiAodHlwZW9mIG1vbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHRoaXMuaW5zdGFsbERhdGVUaW1lVmFsaWRhdG9ycyhtb21lbnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaW5pdCkge1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG59O1xuXG4gIC8qKlxuICAgKiBNZXJnZXMgYSB2YWxpZGF0b3Igb2JqZWN0IGludG8gdGhlIFJ1bGVzIGFuZCBNZXNzYWdlcy5cbiAgICpcbiAgICogQHBhcmFte3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgdmFsaWRhdG9yLlxuICAgKiBAcGFyYW17ZnVuY3Rpb258b2JqZWN0fSB2YWxpZGF0b3IgVGhlIHZhbGlkYXRvciBvYmplY3QuXG4gICAqL1xuVmFsaWRhdG9yLl9tZXJnZSA9IGZ1bmN0aW9uIF9tZXJnZSAobmFtZSwgdmFsaWRhdG9yKSB7XG4gIGlmIChpc0NhbGxhYmxlKHZhbGlkYXRvcikpIHtcbiAgICBSdWxlc1tuYW1lXSA9IHZhbGlkYXRvcjtcbiAgICBkaWN0aW9uYXJ5LnNldE1lc3NhZ2UoJ2VuJywgbmFtZSwgZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCJUaGUgXCIgKyBmaWVsZCArIFwiIHZhbHVlIGlzIG5vdCB2YWxpZC5cIik7IH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIFJ1bGVzW25hbWVdID0gdmFsaWRhdG9yLnZhbGlkYXRlO1xuXG4gIGlmICh2YWxpZGF0b3IuZ2V0TWVzc2FnZSAmJiBpc0NhbGxhYmxlKHZhbGlkYXRvci5nZXRNZXNzYWdlKSkge1xuICAgIGRpY3Rpb25hcnkuc2V0TWVzc2FnZSgnZW4nLCBuYW1lLCB2YWxpZGF0b3IuZ2V0TWVzc2FnZSk7XG4gIH1cblxuICBpZiAodmFsaWRhdG9yLm1lc3NhZ2VzKSB7XG4gICAgZGljdGlvbmFyeS5tZXJnZShcbiAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsaWRhdG9yLm1lc3NhZ2VzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGljdCA9IHByZXY7XG4gICAgICAgICAgICAgICAgZGljdFtjdXJyXSA9IHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiAoIG9iaiA9IHt9LCBvYmpbbmFtZV0gPSB2YWxpZGF0b3IubWVzc2FnZXNbY3Vycl0sIG9iaiApXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHZhciBvYmo7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGljdDtcbiAgICAgICAgICAgICAgfSwge30pXG4gICAgICAgICAgKTtcbiAgfVxufTtcblxuICAvKipcbiAgICogR3VhcmRzIGZyb20gZXh0bnNpb24gdmlvbGF0aW9ucy5cbiAgICpcbiAgICogQHBhcmFte3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gICAqIEBwYXJhbXtvYmplY3R9IHZhbGlkYXRvciBhIHZhbGlkYXRpb24gcnVsZSBvYmplY3QuXG4gICAqL1xuVmFsaWRhdG9yLl9ndWFyZEV4dGVuZCA9IGZ1bmN0aW9uIF9ndWFyZEV4dGVuZCAobmFtZSwgdmFsaWRhdG9yKSB7XG4gIGlmIChSdWxlc1tuYW1lXSkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0b3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgIChcIkV4dGVuc2lvbiBFcnJvcjogVGhlcmUgaXMgYW4gZXhpc3RpbmcgdmFsaWRhdG9yIHdpdGggdGhlIHNhbWUgbmFtZSAnXCIgKyBuYW1lICsgXCInLlwiKVxuICAgICAgICAgICk7XG4gIH1cblxuICBpZiAoaXNDYWxsYWJsZSh2YWxpZGF0b3IpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCEgaXNDYWxsYWJsZSh2YWxpZGF0b3IudmFsaWRhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgIChcIkV4dGVuc2lvbiBFcnJvcjogVGhlIHZhbGlkYXRvciAnXCIgKyBuYW1lICsgXCInIG11c3QgYmUgYSBmdW5jdGlvbiBvciBoYXZlIGEgJ3ZhbGlkYXRlJyBtZXRob2QuXCIpXG4gICAgICAgICAgKTtcbiAgfVxuXG4gIGlmICghIGlzQ2FsbGFibGUodmFsaWRhdG9yLmdldE1lc3NhZ2UpICYmICEgaXNPYmplY3QodmFsaWRhdG9yLm1lc3NhZ2VzKSkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0b3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAoXCJFeHRlbnNpb24gRXJyb3I6IFRoZSB2YWxpZGF0b3IgJ1wiICsgbmFtZSArIFwiJyBtdXN0IGhhdmUgYSAnZ2V0TWVzc2FnZScgbWV0aG9kIG9yIGhhdmUgYSAnbWVzc2FnZXMnIG9iamVjdC5cIilcbiAgICAgICAgICApO1xuICB9XG59O1xuXG4gIC8qKlxuICAgKiBTdGF0aWMgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbXtvYmplY3R9IHZhbGlkYXRpb25zIFRoZSB2YWxpZGF0aW9ucyBvYmplY3QuXG4gICAqIEByZXR1cm4ge1ZhbGlkYXRvcn0gdmFsaWRhdG9yIEEgdmFsaWRhdG9yIG9iamVjdC5cbiAgICovXG5WYWxpZGF0b3IuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlICh2YWxpZGF0aW9ucywgJHZtLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgVmFsaWRhdG9yKHZhbGlkYXRpb25zLCAkdm0sIG9wdGlvbnMpO1xufTtcblxuICAvKipcbiAgICogQWRkcyBhIGN1c3RvbSB2YWxpZGF0b3IgdG8gdGhlIGxpc3Qgb2YgdmFsaWRhdGlvbiBydWxlcy5cbiAgICpcbiAgICogQHBhcmFte3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgdmFsaWRhdG9yLlxuICAgKiBAcGFyYW17b2JqZWN0fGZ1bmN0aW9ufSB2YWxpZGF0b3IgVGhlIHZhbGlkYXRvciBvYmplY3QvZnVuY3Rpb24uXG4gICAqL1xuVmFsaWRhdG9yLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZCAobmFtZSwgdmFsaWRhdG9yKSB7XG4gIFZhbGlkYXRvci5fZ3VhcmRFeHRlbmQobmFtZSwgdmFsaWRhdG9yKTtcbiAgVmFsaWRhdG9yLl9tZXJnZShuYW1lLCB2YWxpZGF0b3IpO1xufTtcblxuICAvKipcbiAgICogSW5zdGFsbHMgdGhlIGRhdGV0aW1lIHZhbGlkYXRvcnMgYW5kIHRoZSBtZXNzYWdlcy5cbiAgICovXG5WYWxpZGF0b3IuaW5zdGFsbERhdGVUaW1lVmFsaWRhdG9ycyA9IGZ1bmN0aW9uIGluc3RhbGxEYXRlVGltZVZhbGlkYXRvcnMgKG1vbWVudCkge1xuICBpZiAodHlwZW9mIG1vbWVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHdhcm4oJ1RvIHVzZSB0aGUgZGF0ZS10aW1lIHZhbGlkYXRvcnMgeW91IG11c3QgcHJvdmlkZSBtb21lbnQgcmVmZXJlbmNlLicpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGRhdGUuaW5zdGFsbGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgdmFsaWRhdG9ycyA9IGRhdGUubWFrZShtb21lbnQpO1xuICBPYmplY3Qua2V5cyh2YWxpZGF0b3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgVmFsaWRhdG9yLmV4dGVuZChuYW1lLCB2YWxpZGF0b3JzW25hbWVdKTtcbiAgfSk7XG5cbiAgVmFsaWRhdG9yLnVwZGF0ZURpY3Rpb25hcnkoe1xuICAgIGVuOiB7XG4gICAgICBtZXNzYWdlczogZGF0ZS5tZXNzYWdlc1xuICAgIH1cbiAgfSk7XG4gIGRhdGUuaW5zdGFsbGVkID0gdHJ1ZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBydWxlIGZyb20gdGhlIGxpc3Qgb2YgdmFsaWRhdG9ycy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHZhbGlkYXRvci9ydWxlLlxuICAgKi9cblZhbGlkYXRvci5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKG5hbWUpIHtcbiAgZGVsZXRlIFJ1bGVzW25hbWVdO1xufTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgZGVmYXVsdCBsb2NhbGUgZm9yIGFsbCB2YWxpZGF0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbGFuZ3VhZ2UgVGhlIGxvY2FsZSBpZC5cbiAgICovXG5WYWxpZGF0b3Iuc2V0TG9jYWxlID0gZnVuY3Rpb24gc2V0TG9jYWxlIChsYW5ndWFnZSkge1xuICAgIGlmICggbGFuZ3VhZ2UgPT09IHZvaWQgMCApIGxhbmd1YWdlID0gJ2VuJztcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghIGRpY3Rpb25hcnkuaGFzTG9jYWxlKGxhbmd1YWdlKSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHdhcm4oJ1lvdSBhcmUgc2V0dGluZyB0aGUgdmFsaWRhdG9yIGxvY2FsZSB0byBhIGxvY2FsZSB0aGF0IGlzIG5vdCBkZWZpbmVkIGluIHRoZSBkaWNpdGlvbmFyeS4gRW5nbGlzaCBtZXNzYWdlcyBtYXkgc3RpbGwgYmUgZ2VuZXJhdGVkLicpO1xuICB9XG5cbiAgTE9DQUxFID0gbGFuZ3VhZ2U7XG59O1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBvcGVyYXRpbmcgbW9kZSBmb3IgYWxsIG5ld2x5IGNyZWF0ZWQgdmFsaWRhdG9ycy5cbiAgICogc3RyaWN0TW9kZSA9IHRydWU6IFZhbHVlcyB3aXRob3V0IGEgcnVsZSBhcmUgaW52YWxpZCBhbmQgY2F1c2UgZmFpbHVyZS5cbiAgICogc3RyaWN0TW9kZSA9IGZhbHNlOiBWYWx1ZXMgd2l0aG91dCBhIHJ1bGUgYXJlIHZhbGlkIGFuZCBhcmUgc2tpcHBlZC5cbiAgICogQHBhcmFtIHtCb29sZWFufSBzdHJpY3RNb2RlLlxuICAgKi9cblZhbGlkYXRvci5zZXRTdHJpY3RNb2RlID0gZnVuY3Rpb24gc2V0U3RyaWN0TW9kZSAoc3RyaWN0TW9kZSkge1xuICAgIGlmICggc3RyaWN0TW9kZSA9PT0gdm9pZCAwICkgc3RyaWN0TW9kZSA9IHRydWU7XG5cbiAgU1RSSUNUX01PREUgPSBzdHJpY3RNb2RlO1xufTtcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgZGljaXRpb25hcnksIG92ZXJ3cml0aW5nIGV4aXN0aW5nIHZhbHVlcyBhbmQgYWRkaW5nIG5ldyBvbmVzLlxuICAgKlxuICAgKiBAcGFyYW17b2JqZWN0fSBkYXRhIFRoZSBkaWN0aW9uYXJ5IG9iamVjdC5cbiAgICovXG5WYWxpZGF0b3IudXBkYXRlRGljdGlvbmFyeSA9IGZ1bmN0aW9uIHVwZGF0ZURpY3Rpb25hcnkgKGRhdGEpIHtcbiAgZGljdGlvbmFyeS5tZXJnZShkYXRhKTtcbn07XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRoZSBzY29wZSB2YWx1ZS4gT25seSBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgYXJlIGFsbG93ZWQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBzY29wZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX3Jlc29sdmVTY29wZSA9IGZ1bmN0aW9uIF9yZXNvbHZlU2NvcGUgKHNjb3BlKSB7XG4gIGlmICh0eXBlb2Ygc2NvcGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHNjb3BlO1xuICB9XG5cbiAgICAgIC8vIFRoZSByZXNvbHZlZCB2YWx1ZSBzaG91bGQgYmUgc3RyaW5nLlxuICBpZiAoaXNDYWxsYWJsZShzY29wZSkpIHtcbiAgICB2YXIgdmFsdWUgPSBzY29wZSgpO1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiAnX19nbG9iYWxfXyc7XG4gIH1cblxuICByZXR1cm4gJ19fZ2xvYmFsX18nO1xufTtcblxuICAvKipcbiAgICogUmVzb2x2ZXMgdGhlIGZpZWxkIHZhbHVlcyBmcm9tIHRoZSBnZXR0ZXIgZnVuY3Rpb25zLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX3Jlc29sdmVWYWx1ZXNGcm9tR2V0dGVycyA9IGZ1bmN0aW9uIF9yZXNvbHZlVmFsdWVzRnJvbUdldHRlcnMgKHNjb3BlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBzY29wZSA9PT0gdm9pZCAwICkgc2NvcGUgPSAnX19nbG9iYWxfXyc7XG5cbiAgaWYgKCEgdGhpcy4kc2NvcGVzW3Njb3BlXSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICB2YXIgdmFsdWVzID0ge307XG4gIE9iamVjdC5rZXlzKHRoaXMuJHNjb3Blc1tzY29wZV0pLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZmllbGQgPSB0aGlzJDEuJHNjb3Blc1tzY29wZV1bbmFtZV07XG4gICAgdmFyIGdldHRlciA9IGZpZWxkLmdldHRlcjtcbiAgICB2YXIgY29udGV4dCA9IGZpZWxkLmNvbnRleHQ7XG4gICAgdmFyIGZpZWxkU2NvcGUgPSB0aGlzJDEuX3Jlc29sdmVTY29wZShmaWVsZC5zY29wZSk7XG4gICAgaWYgKGdldHRlciAmJiBjb250ZXh0ICYmIChzY29wZSA9PT0gJ19fZ2xvYmFsX18nIHx8IGZpZWxkU2NvcGUgPT09IHNjb3BlKSkge1xuICAgICAgdmFsdWVzW25hbWVdID0ge1xuICAgICAgICB2YWx1ZTogZ2V0dGVyKGNvbnRleHQoKSksXG4gICAgICAgIHNjb3BlOiBmaWVsZFNjb3BlXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHZhbHVlcztcbn07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIGZpZWxkcyB0byBiZSB2YWxpZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbXtvYmplY3R9IHZhbGlkYXRpb25zXG4gICAqIEByZXR1cm4ge29iamVjdH0gTm9ybWFsaXplZCBvYmplY3QuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS5fY3JlYXRlRmllbGRzID0gZnVuY3Rpb24gX2NyZWF0ZUZpZWxkcyAodmFsaWRhdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAoISB2YWxpZGF0aW9ucykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIE9iamVjdC5rZXlzKHZhbGlkYXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHRoaXMkMS5fY3JlYXRlRmllbGQoZmllbGQsIHZhbGlkYXRpb25zW2ZpZWxkXSk7XG4gIH0pO1xufTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZpZWxkIGVudHJ5IGluIHRoZSBmaWVsZHMgb2JqZWN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZS5cbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGNoZWNrcy5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLl9jcmVhdGVGaWVsZCA9IGZ1bmN0aW9uIF9jcmVhdGVGaWVsZCAobmFtZSwgY2hlY2tzLCBzY29wZSkge1xuICAgIGlmICggc2NvcGUgPT09IHZvaWQgMCApIHNjb3BlID0gJ19fZ2xvYmFsX18nO1xuXG4gIHNjb3BlID0gdGhpcy5fcmVzb2x2ZVNjb3BlKHNjb3BlKTtcbiAgaWYgKCEgdGhpcy4kc2NvcGVzW3Njb3BlXSkge1xuICAgIHRoaXMuJHNjb3Blc1tzY29wZV0gPSB7fTtcbiAgfVxuXG4gIGlmICghIHRoaXMuJHNjb3Blc1tzY29wZV1bbmFtZV0pIHtcbiAgICB0aGlzLiRzY29wZXNbc2NvcGVdW25hbWVdID0ge307XG4gIH1cblxuICB2YXIgZmllbGQgPSB0aGlzLiRzY29wZXNbc2NvcGVdW25hbWVdO1xuICB0aGlzLmZpZWxkQmFnLl9hZGRJZk5vdEV4aXN0cyhuYW1lKTtcbiAgZmllbGQudmFsaWRhdGlvbnMgPSB0aGlzLl9ub3JtYWxpemVSdWxlcyhuYW1lLCBjaGVja3MsIHNjb3BlKTtcbiAgZmllbGQucmVxdWlyZWQgPSB0aGlzLl9pc1JlcXVpcmVkKGZpZWxkKTtcbn07XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZXMgcnVsZXMuXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLl9ub3JtYWxpemVSdWxlcyA9IGZ1bmN0aW9uIF9ub3JtYWxpemVSdWxlcyAobmFtZSwgY2hlY2tzLCBzY29wZSkge1xuICBpZiAoISBjaGVja3MpIHsgcmV0dXJuIHt9OyB9XG5cbiAgaWYgKHR5cGVvZiBjaGVja3MgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZVN0cmluZyhjaGVja3MpO1xuICB9XG5cbiAgaWYgKCEgaXNPYmplY3QoY2hlY2tzKSkge1xuICAgIHdhcm4oKFwiWW91ciBjaGVja3MgZm9yICdcIiArIHNjb3BlICsgXCIuXCIgKyBuYW1lICsgXCInIG11c3QgYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIG9iamVjdC5cIikpO1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9ub3JtYWxpemVPYmplY3QoY2hlY2tzKTtcbn07XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGZpZWxkIGhhcyBhIHJlcXVpcmVkIHJ1bGUuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS5faXNSZXF1aXJlZCA9IGZ1bmN0aW9uIF9pc1JlcXVpcmVkIChmaWVsZCkge1xuICByZXR1cm4gZmllbGQudmFsaWRhdGlvbnMgJiYgZmllbGQudmFsaWRhdGlvbnMucmVxdWlyZWQ7XG59O1xuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIGFuIG9iamVjdCBvZiBydWxlcy5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLl9ub3JtYWxpemVPYmplY3QgPSBmdW5jdGlvbiBfbm9ybWFsaXplT2JqZWN0IChydWxlcykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciB2YWxpZGF0aW9ucyA9IHt9O1xuICBPYmplY3Qua2V5cyhydWxlcykuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICBpZiAocnVsZXNbcnVsZV0gPT09IHRydWUpIHtcbiAgICAgIHBhcmFtcyA9IFtdO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShydWxlc1tydWxlXSkpIHtcbiAgICAgIHBhcmFtcyA9IHJ1bGVzW3J1bGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMgPSBbcnVsZXNbcnVsZV1dO1xuICAgIH1cblxuICAgIGlmIChydWxlc1tydWxlXSA9PT0gZmFsc2UpIHtcbiAgICAgIGRlbGV0ZSB2YWxpZGF0aW9uc1tydWxlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsaWRhdGlvbnNbcnVsZV0gPSBwYXJhbXM7XG4gICAgfVxuXG4gICAgaWYgKGRhdGUuaW5zdGFsbGVkICYmIHRoaXMkMS5faXNBRGF0ZVJ1bGUocnVsZSkpIHtcbiAgICAgIHZhbGlkYXRpb25zW3J1bGVdLnB1c2godGhpcyQxLl9nZXREYXRlRm9ybWF0KHZhbGlkYXRpb25zKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdmFsaWRhdGlvbnM7XG59O1xuXG4gIC8qKlxuICAgKiBEYXRlIHJ1bGVzIG5lZWQgdGhlIGV4aXN0YW5jZSBvZiBhIGZvcm1hdCwgc28gZGF0ZV9mb3JtYXQgbXVzdCBiZSBzdXBwbGllZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIHJ1bGUgbmFtZS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsaWRhdGlvbnMgdGhlIGZpZWxkIHZhbGlkYXRpb25zLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX2dldERhdGVGb3JtYXQgPSBmdW5jdGlvbiBfZ2V0RGF0ZUZvcm1hdCAodmFsaWRhdGlvbnMpIHtcbiAgaWYgKHZhbGlkYXRpb25zLmRhdGVfZm9ybWF0ICYmIEFycmF5LmlzQXJyYXkodmFsaWRhdGlvbnMuZGF0ZV9mb3JtYXQpKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRpb25zLmRhdGVfZm9ybWF0WzBdO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHBhc3NlZCBydWxlIGlzIGEgZGF0ZSBydWxlLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX2lzQURhdGVSdWxlID0gZnVuY3Rpb24gX2lzQURhdGVSdWxlIChydWxlKSB7XG4gIHJldHVybiAhISB+WydhZnRlcicsICdiZWZvcmUnLCAnZGF0ZV9iZXR3ZWVuJ10uaW5kZXhPZihydWxlKTtcbn07XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZXMgc3RyaW5nIHJ1bGVzLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcnVsZXMgVGhlIHJ1bGVzIHRoYXQgd2lsbCBiZSBub3JtYWxpemVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZmllbGQgVGhlIGZpZWxkIG9iamVjdCB0aGF0IGlzIGJlaW5nIG9wZXJhdGVkIG9uLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX25vcm1hbGl6ZVN0cmluZyA9IGZ1bmN0aW9uIF9ub3JtYWxpemVTdHJpbmcgKHJ1bGVzKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHZhbGlkYXRpb25zID0ge307XG4gIHJ1bGVzLnNwbGl0KCd8JykuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgIHZhciBwYXJzZWRSdWxlID0gdGhpcyQxLl9wYXJzZVJ1bGUocnVsZSk7XG4gICAgaWYgKCEgcGFyc2VkUnVsZS5uYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBhcnNlZFJ1bGUubmFtZSA9PT0gJ3JlcXVpcmVkJykge1xuICAgICAgdmFsaWRhdGlvbnMucmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhbGlkYXRpb25zW3BhcnNlZFJ1bGUubmFtZV0gPSBwYXJzZWRSdWxlLnBhcmFtcztcbiAgICBpZiAoZGF0ZS5pbnN0YWxsZWQgJiYgdGhpcyQxLl9pc0FEYXRlUnVsZShwYXJzZWRSdWxlLm5hbWUpKSB7XG4gICAgICB2YWxpZGF0aW9uc1twYXJzZWRSdWxlLm5hbWVdLnB1c2godGhpcyQxLl9nZXREYXRlRm9ybWF0KHZhbGlkYXRpb25zKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdmFsaWRhdGlvbnM7XG59O1xuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIGEgc3RyaW5nIHJ1bGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBydWxlIFRoZSBydWxlIHRvIGJlIG5vcm1hbGl6ZWQuXG4gICAqIEByZXR1cm4ge29iamVjdH0gcnVsZSBUaGUgbm9ybWFsaXplZCBydWxlLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX3BhcnNlUnVsZSA9IGZ1bmN0aW9uIF9wYXJzZVJ1bGUgKHJ1bGUpIHtcbiAgdmFyIHBhcmFtcyA9IFtdO1xuICB2YXIgbmFtZSA9IHJ1bGUuc3BsaXQoJzonKVswXTtcblxuICBpZiAofnJ1bGUuaW5kZXhPZignOicpKSB7XG4gICAgcGFyYW1zID0gcnVsZS5zcGxpdCgnOicpLnNsaWNlKDEpLmpvaW4oJzonKS5zcGxpdCgnLCcpO1xuICB9XG5cbiAgcmV0dXJuIHsgbmFtZTogbmFtZSwgcGFyYW1zOiBwYXJhbXMgfTtcbn07XG5cbiAgLyoqXG4gICAqIEZvcm1hdHMgYW4gZXJyb3IgbWVzc2FnZSBmb3IgZmllbGQgYW5kIGEgcnVsZS5cbiAgICpcbiAgICogQHBhcmFte3N0cmluZ30gZmllbGQgVGhlIGZpZWxkIG5hbWUuXG4gICAqIEBwYXJhbXtvYmplY3R9IHJ1bGUgTm9ybWFsaXplZCBydWxlIG9iamVjdC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgQWRkaXRpb25hbCBJbmZvcm1hdGlvbiBhYm91dCB0aGUgdmFsaWRhdGlvbiByZXN1bHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZSBUaGUgZmllbGQgc2NvcGUuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gbXNnIEZvcm1hdHRlZCBlcnJvciBtZXNzYWdlLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX2Zvcm1hdEVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uIF9mb3JtYXRFcnJvck1lc3NhZ2UgKGZpZWxkLCBydWxlLCBkYXRhLCBzY29wZSkge1xuICAgIGlmICggZGF0YSA9PT0gdm9pZCAwICkgZGF0YSA9IHt9O1xuICAgIGlmICggc2NvcGUgPT09IHZvaWQgMCApIHNjb3BlID0gJ19fZ2xvYmFsX18nO1xuXG4gIHZhciBuYW1lID0gdGhpcy5fZ2V0RmllbGREaXNwbGF5TmFtZShmaWVsZCwgc2NvcGUpO1xuICB2YXIgcGFyYW1zID0gdGhpcy5fZ2V0TG9jYWxpemVkUGFyYW1zKHJ1bGUsIHNjb3BlKTtcblxuICBpZiAoISBkaWN0aW9uYXJ5Lmhhc0xvY2FsZShMT0NBTEUpIHx8XG4gICAgICAgdHlwZW9mIGRpY3Rpb25hcnkuZ2V0TWVzc2FnZShMT0NBTEUsIHJ1bGUubmFtZSkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBEZWZhdWx0IHRvIGVuZ2xpc2ggbWVzc2FnZS5cbiAgICByZXR1cm4gZGljdGlvbmFyeS5nZXRNZXNzYWdlKCdlbicsIHJ1bGUubmFtZSkobmFtZSwgcGFyYW1zLCBkYXRhKTtcbiAgfVxuXG4gIHJldHVybiBkaWN0aW9uYXJ5LmdldE1lc3NhZ2UoTE9DQUxFLCBydWxlLm5hbWUpKG5hbWUsIHBhcmFtcywgZGF0YSk7XG59O1xuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIHRoZSBwYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgcnVsZSAobWFpbmx5IGZvciB0YXJnZXQgZmllbGRzKS5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLl9nZXRMb2NhbGl6ZWRQYXJhbXMgPSBmdW5jdGlvbiBfZ2V0TG9jYWxpemVkUGFyYW1zIChydWxlLCBzY29wZSkge1xuICAgIGlmICggc2NvcGUgPT09IHZvaWQgMCApIHNjb3BlID0gJ19fZ2xvYmFsX18nO1xuXG4gIGlmICh+IFsnYWZ0ZXInLCAnYmVmb3JlJywgJ2NvbmZpcm1lZCddLmluZGV4T2YocnVsZS5uYW1lKSAmJlxuICAgICAgcnVsZS5wYXJhbXMgJiYgcnVsZS5wYXJhbXNbMF0pIHtcbiAgICBpZiAodGhpcy4kc2NvcGVzW3Njb3BlXVtydWxlLnBhcmFtc1swXV0pIHsgcmV0dXJuIFt0aGlzLiRzY29wZXNbc2NvcGVdW3J1bGUucGFyYW1zWzBdXS5uYW1lXTsgfVxuICAgIHJldHVybiBbZGljdGlvbmFyeS5nZXRBdHRyaWJ1dGUoTE9DQUxFLCBydWxlLnBhcmFtc1swXSwgcnVsZS5wYXJhbXNbMF0pXTtcbiAgfVxuXG4gIHJldHVybiBydWxlLnBhcmFtcztcbn07XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGFuIGFwcHJvcGlhdGUgZGlzcGxheSBuYW1lLCBmaXJzdCBjaGVja2luZyAnZGF0YS1hcycgb3IgdGhlIHJlZ2lzdGVyZWQgJ3ByZXR0eU5hbWUnXG4gICAqIFRoZW4gdGhlIGRpY3Rpb25hcnksIHRoZW4gZmFsbHNiYWNrIHRvIGZpZWxkIG5hbWUuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gZGlzcGxheU5hbWUgVGhlIG5hbWUgdG8gYmUgdXNlZCBpbiB0aGUgZXJyb3JzLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX2dldEZpZWxkRGlzcGxheU5hbWUgPSBmdW5jdGlvbiBfZ2V0RmllbGREaXNwbGF5TmFtZSAoZmllbGQsIHNjb3BlKSB7XG4gICAgaWYgKCBzY29wZSA9PT0gdm9pZCAwICkgc2NvcGUgPSAnX19nbG9iYWxfXyc7XG5cbiAgcmV0dXJuIHRoaXMuJHNjb3Blc1tzY29wZV1bZmllbGRdLm5hbWUgfHwgZGljdGlvbmFyeS5nZXRBdHRyaWJ1dGUoTE9DQUxFLCBmaWVsZCwgZmllbGQpO1xufTtcblxuICAvKipcbiAgICogVGVzdHMgYSBzaW5nbGUgaW5wdXQgdmFsdWUgYWdhaW5zdCBhIHJ1bGUuXG4gICAqXG4gICAqIEBwYXJhbXsqfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmaWVsZC5cbiAgICogQHBhcmFteyp9IHZhbHVldGhlIHZhbHVlIG9mIHRoZSBmaWVsZC5cbiAgICogQHBhcmFte29iamVjdH0gcnVsZSB0aGUgcnVsZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7c2NvcGV9IHNjb3BlIFRoZSBmaWVsZCBzY29wZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBpdCBwYXNzZXMgdGhlIGNoZWNrLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuX3Rlc3QgPSBmdW5jdGlvbiBfdGVzdCAobmFtZSwgdmFsdWUsIHJ1bGUsIHNjb3BlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBzY29wZSA9PT0gdm9pZCAwICkgc2NvcGUgPSAnX19nbG9iYWxfXyc7XG5cbiAgdmFyIHZhbGlkYXRvciA9IFJ1bGVzW3J1bGUubmFtZV07XG4gIGlmICghIHZhbGlkYXRvciB8fCB0eXBlb2YgdmFsaWRhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRvckV4Y2VwdGlvbigoXCJObyBzdWNoIHZhbGlkYXRvciAnXCIgKyAocnVsZS5uYW1lKSArIFwiJyBleGlzdHMuXCIpKTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSB2YWxpZGF0b3IodmFsdWUsIHJ1bGUucGFyYW1zLCBuYW1lKTtcblxuICAgICAgLy8gSWYgaXQgaXMgYSBwcm9taXNlLlxuICBpZiAoaXNDYWxsYWJsZShyZXN1bHQudGhlbikpIHtcbiAgICByZXR1cm4gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgdmFyIGFsbFZhbGlkID0gdHJ1ZTtcbiAgICAgIHZhciBkYXRhID0ge307XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgIGFsbFZhbGlkID0gdmFsdWVzLmV2ZXJ5KGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnZhbGlkOyB9KTtcbiAgICAgIH0gZWxzZSB7IC8vIElzIGEgc2luZ2xlIG9iamVjdC5cbiAgICAgICAgYWxsVmFsaWQgPSB2YWx1ZXMudmFsaWQ7XG4gICAgICAgIGRhdGEgPSB2YWx1ZXMuZGF0YTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEgYWxsVmFsaWQpIHtcbiAgICAgICAgdGhpcyQxLmVycm9yQmFnLmFkZChcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5fZm9ybWF0RXJyb3JNZXNzYWdlKG5hbWUsIHJ1bGUsIGRhdGEsIHNjb3BlKSxcbiAgICAgICAgICAgICAgICAgICAgICBydWxlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgc2NvcGVcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhbGxWYWxpZDtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghIGlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICByZXN1bHQgPSB7IHZhbGlkOiByZXN1bHQsIGRhdGE6IHt9IH07XG4gIH1cblxuICBpZiAoISByZXN1bHQudmFsaWQpIHtcbiAgICB0aGlzLmVycm9yQmFnLmFkZChcbiAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgdGhpcy5fZm9ybWF0RXJyb3JNZXNzYWdlKG5hbWUsIHJ1bGUsIHJlc3VsdC5kYXRhLCBzY29wZSksXG4gICAgICAgICAgICAgIHJ1bGUubmFtZSxcbiAgICAgICAgICAgICAgc2NvcGVcbiAgICAgICAgICApO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC52YWxpZDtcbn07XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGZpZWxkIHRvIGJlIHZhbGlkYXRlZC5cbiAgICpcbiAgICogQHBhcmFte3N0cmluZ30gbmFtZSBUaGUgZmllbGQgbmFtZS5cbiAgICogQHBhcmFte1N0cmluZ3xBcnJheXxPYmplY3R9IGNoZWNrcyB2YWxpZGF0aW9ucyBleHByZXNzaW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJldHR5TmFtZSBDdXN0b20gbmFtZSB0byBiZSB1c2VkIGFzIGZpZWxkIG5hbWUgaW4gZXJyb3IgbWVzc2FnZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGdldHRlciBBIGZ1bmN0aW9uIHVzZWQgdG8gcmV0cml2ZSBhIGZyZXNoIHZhbHVlIGZvciB0aGUgZmllbGQuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2ggKG5hbWUsIGNoZWNrcywgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBhdHRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb3B0aW9ucy5zY29wZSA9IHRoaXMkMS5fcmVzb2x2ZVNjb3BlKG9wdGlvbnMuc2NvcGUpO1xuICAgIHRoaXMkMS51cGRhdGVGaWVsZChuYW1lLCBjaGVja3MsIG9wdGlvbnMpO1xuICAgIHZhciBmaWVsZCA9IHRoaXMkMS4kc2NvcGVzW29wdGlvbnMuc2NvcGVdW25hbWVdO1xuICAgIGZpZWxkLnNjb3BlID0gb3B0aW9ucy5zY29wZTtcbiAgICBmaWVsZC5uYW1lID0gb3B0aW9ucy5wcmV0dHlOYW1lO1xuICAgIGZpZWxkLmdldHRlciA9IG9wdGlvbnMuZ2V0dGVyO1xuICAgIGZpZWxkLmNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQ7XG4gICAgZmllbGQubGlzdGVuZXJzID0gb3B0aW9ucy5saXN0ZW5lcnMgfHwgeyBkZXRhY2g6IGZ1bmN0aW9uIGRldGFjaCgpIHt9IH07XG4gIH07XG5cbiAgdmFyIHNjb3BlID0gaXNDYWxsYWJsZShvcHRpb25zLnNjb3BlKSA/IG9wdGlvbnMuc2NvcGUoKSA6IG9wdGlvbnMuc2NvcGU7XG4gIGlmICghIHNjb3BlICYmICEgdGhpcy4kcmVhZHkpIHtcbiAgICB0aGlzLiRkZWZlcnJlZC5wdXNoKGF0dGFjaCk7XG4gICAgcmV0dXJuO1xuICB9XG5cblxuICBhdHRhY2goKTtcbn07XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBub24tc2NvcGVkIGZpZWxkcyBhbmQgYW55IGJvb3RzdHJhcCBsb2dpYy5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0ICgpIHtcbiAgdGhpcy4kcmVhZHkgPSB0cnVlO1xuICB0aGlzLiRkZWZlcnJlZC5mb3JFYWNoKGZ1bmN0aW9uIChhdHRhY2gpIHtcbiAgICBhdHRhY2goKTtcbiAgfSk7XG4gIHRoaXMuJGRlZmVycmVkID0gW107XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4gIC8qKlxuICAgKiBBcHBlbmQgYW5vdGhlciB2YWxpZGF0aW9uIHRvIGFuIGV4aXN0aW5nIGZpZWxkLlxuICAgKlxuICAgKiBAcGFyYW17c3RyaW5nfSBuYW1lIFRoZSBmaWVsZCBuYW1lLlxuICAgKiBAcGFyYW17c3RyaW5nfSBjaGVja3MgdmFsaWRhdGlvbnMgZXhwcmVzc2lvbi5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZCAobmFtZSwgY2hlY2tzLCBvcHRpb25zKSB7XG4gICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgb3B0aW9ucy5zY29wZSA9IHRoaXMuX3Jlc29sdmVTY29wZShvcHRpb25zLnNjb3BlKTtcbiAgICAgIC8vIE5vIHN1Y2ggZmllbGRcbiAgaWYgKCEgdGhpcy4kc2NvcGVzW29wdGlvbnMuc2NvcGVdIHx8ICEgdGhpcy4kc2NvcGVzW29wdGlvbnMuc2NvcGVdW25hbWVdKSB7XG4gICAgdGhpcy5hdHRhY2gobmFtZSwgY2hlY2tzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhciBmaWVsZCA9IHRoaXMuJHNjb3Blc1tvcHRpb25zLnNjb3BlXVtuYW1lXTtcbiAgdmFyIG5ld0NoZWNrcyA9IHRoaXMuX25vcm1hbGl6ZVJ1bGVzKG5hbWUsIGNoZWNrcywgb3B0aW9ucy5zY29wZSk7XG4gIE9iamVjdC5rZXlzKG5ld0NoZWNrcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZmllbGQudmFsaWRhdGlvbnNba2V5XSA9IG5ld0NoZWNrc1trZXldO1xuICB9KTtcbn07XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGZpZWxkIHJ1bGVzIHdpdGggbmV3IG9uZXMuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS51cGRhdGVGaWVsZCA9IGZ1bmN0aW9uIHVwZGF0ZUZpZWxkIChuYW1lLCBjaGVja3MsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICB2YXIgZmllbGQgPSAodGhpcy4kc2NvcGVzW29wdGlvbnMuc2NvcGVdICYmIHRoaXMuJHNjb3Blc1tvcHRpb25zLnNjb3BlXVtuYW1lXSkgfHwgbnVsbDtcbiAgdmFyIG9sZENoZWNrcyA9IGZpZWxkID8gSlNPTi5zdHJpbmdpZnkoZmllbGQudmFsaWRhdGlvbnMpIDogJyc7XG4gIHRoaXMuX2NyZWF0ZUZpZWxkKG5hbWUsIGNoZWNrcywgb3B0aW9ucy5zY29wZSk7XG4gIGZpZWxkID0gKHRoaXMuJHNjb3Blc1tvcHRpb25zLnNjb3BlXSAmJiB0aGlzLiRzY29wZXNbb3B0aW9ucy5zY29wZV1bbmFtZV0pIHx8IG51bGw7XG4gIHZhciBuZXdDaGVja3MgPSBmaWVsZCA/IEpTT04uc3RyaW5naWZ5KGZpZWxkLnZhbGlkYXRpb25zKSA6ICcnO1xuXG4gICAgICAvLyBjb21wYXJlIGJvdGggbmV3Q2hlY2tzIGFuZCBvbGRDaGVja3MgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHRyaWdnZXIgdW5lY2Nlc3NhcnkgZGlyZWN0aXZlXG4gICAgICAvLyB1cGRhdGUgYnkgY2hhbmdpbmcgdGhlIGVycm9yQmFnIChwcmV2ZW50cyBpbmZpbml0ZSBsb29wcykuXG4gIGlmIChuZXdDaGVja3MgIT09IG9sZENoZWNrcykge1xuICAgIHRoaXMuZXJyb3JCYWcucmVtb3ZlKG5hbWUsIG9wdGlvbnMuc2NvcGUpO1xuICB9XG59O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgZmllbGQgZnJvbSB0aGUgdmFsaWRhdG9yLlxuICAgKlxuICAgKiBAcGFyYW17U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmaWVsZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNjb3BlIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBzY29wZS5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCAobmFtZSwgc2NvcGUpIHtcbiAgICBpZiAoIHNjb3BlID09PSB2b2lkIDAgKSBzY29wZSA9ICdfX2dsb2JhbF9fJztcblxuICAvLyBObyBzdWNoIGZpZWxkLlxuICBpZiAoISB0aGlzLiRzY29wZXNbc2NvcGVdIHx8ICEgdGhpcy4kc2NvcGVzW3Njb3BlXVtuYW1lXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuJHNjb3Blc1tzY29wZV1bbmFtZV0ubGlzdGVuZXJzLmRldGFjaCgpO1xuICB0aGlzLmVycm9yQmFnLnJlbW92ZShuYW1lLCBzY29wZSk7XG4gIHRoaXMuZmllbGRCYWcuX3JlbW92ZShuYW1lKTtcbiAgZGVsZXRlIHRoaXMuJHNjb3Blc1tzY29wZV1bbmFtZV07XG59O1xuXG4gIC8qKlxuICAgKiBBZGRzIGEgY3VzdG9tIHZhbGlkYXRvciB0byB0aGUgbGlzdCBvZiB2YWxpZGF0aW9uIHJ1bGVzLlxuICAgKlxuICAgKiBAcGFyYW17c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB2YWxpZGF0b3IuXG4gICAqIEBwYXJhbXtvYmplY3R8ZnVuY3Rpb259IHZhbGlkYXRvciBUaGUgdmFsaWRhdG9yIG9iamVjdC9mdW5jdGlvbi5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZCAobmFtZSwgdmFsaWRhdG9yKSB7XG4gIFZhbGlkYXRvci5leHRlbmQobmFtZSwgdmFsaWRhdG9yKTtcbn07XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGludGVybmFsIGVycm9yQmFnIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtFcnJvckJhZ30gZXJyb3JCYWcgVGhlIGludGVybmFsIGVycm9yIGJhZyBvYmplY3QuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS5nZXRFcnJvcnMgPSBmdW5jdGlvbiBnZXRFcnJvcnMgKCkge1xuICByZXR1cm4gdGhpcy5lcnJvckJhZztcbn07XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgbG9jYWxlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IExvY2FsZSBpZGVudGlmaWVyLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuZ2V0TG9jYWxlID0gZnVuY3Rpb24gZ2V0TG9jYWxlICgpIHtcbiAgcmV0dXJuIExPQ0FMRTtcbn07XG5cbiAgLyoqXG4gICAqIEp1c3QgYW4gYWxpYXMgdG8gdGhlIHN0YXRpYyBtZXRob2QgZm9yIGNvbnZpZW5lY2UuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS5pbnN0YWxsRGF0ZVRpbWVWYWxpZGF0b3JzID0gZnVuY3Rpb24gaW5zdGFsbERhdGVUaW1lVmFsaWRhdG9ycyAobW9tZW50KSB7XG4gIFZhbGlkYXRvci5pbnN0YWxsRGF0ZVRpbWVWYWxpZGF0b3JzKG1vbWVudCk7XG59O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgcnVsZSBmcm9tIHRoZSBsaXN0IG9mIHZhbGlkYXRvcnMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB2YWxpZGF0b3IvcnVsZS5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAobmFtZSkge1xuICBWYWxpZGF0b3IucmVtb3ZlKG5hbWUpO1xufTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsaWRhdG9yIGN1cnJlbnQgbGFuZ2F1Z2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBsb2NhbGUgb3IgbGFuZ3VhZ2UgaWQuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS5zZXRMb2NhbGUgPSBmdW5jdGlvbiBzZXRMb2NhbGUgKGxhbmd1YWdlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCEgZGljdGlvbmFyeS5oYXNMb2NhbGUobGFuZ3VhZ2UpKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgd2FybignWW91IGFyZSBzZXR0aW5nIHRoZSB2YWxpZGF0b3IgbG9jYWxlIHRvIGEgbG9jYWxlIHRoYXQgaXMgbm90IGRlZmluZWQgaW4gdGhlIGRpY2l0aW9uYXJ5LiBFbmdsaXNoIG1lc3NhZ2VzIG1heSBzdGlsbCBiZSBnZW5lcmF0ZWQuJyk7XG4gIH1cblxuICBMT0NBTEUgPSBsYW5ndWFnZTtcbn07XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG9wZXJhdGluZyBtb2RlIGZvciB0aGlzIHZhbGlkYXRvci5cbiAgICogc3RyaWN0TW9kZSA9IHRydWU6IFZhbHVlcyB3aXRob3V0IGEgcnVsZSBhcmUgaW52YWxpZCBhbmQgY2F1c2UgZmFpbHVyZS5cbiAgICogc3RyaWN0TW9kZSA9IGZhbHNlOiBWYWx1ZXMgd2l0aG91dCBhIHJ1bGUgYXJlIHZhbGlkIGFuZCBhcmUgc2tpcHBlZC5cbiAgICogQHBhcmFtIHtCb29sZWFufSBzdHJpY3RNb2RlLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuc2V0U3RyaWN0TW9kZSA9IGZ1bmN0aW9uIHNldFN0cmljdE1vZGUgKHN0cmljdE1vZGUpIHtcbiAgICBpZiAoIHN0cmljdE1vZGUgPT09IHZvaWQgMCApIHN0cmljdE1vZGUgPSB0cnVlO1xuXG4gIHRoaXMuc3RyaWN0TW9kZSA9IHN0cmljdE1vZGU7XG59O1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBtZXNzYWdlcyBkaWNpdGlvbmFyeSwgb3ZlcndyaXRpbmcgZXhpc3RpbmcgdmFsdWVzIGFuZCBhZGRpbmcgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBwYXJhbXtvYmplY3R9IGRhdGEgVGhlIG1lc3NhZ2VzIG9iamVjdC5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLnVwZGF0ZURpY3Rpb25hcnkgPSBmdW5jdGlvbiB1cGRhdGVEaWN0aW9uYXJ5IChkYXRhKSB7XG4gIFZhbGlkYXRvci51cGRhdGVEaWN0aW9uYXJ5KGRhdGEpO1xufTtcblxuICAvKipcbiAgICogQWRkcyBhIHNjb3BlLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUuYWRkU2NvcGUgPSBmdW5jdGlvbiBhZGRTY29wZSAoc2NvcGUpIHtcbiAgaWYgKHNjb3BlICYmICEgdGhpcy4kc2NvcGVzW3Njb3BlXSkge1xuICAgIHRoaXMuJHNjb3Blc1tzY29wZV0gPSB7fTtcbiAgfVxufTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIGEgdmFsdWUgYWdhaW5zdCBhIHJlZ2lzdGVyZWQgZmllbGQgdmFsaWRhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbXtzdHJpbmd9IG5hbWUgdGhlIGZpZWxkIG5hbWUuXG4gICAqIEBwYXJhbXsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgdmFsaWRhdGVkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2NvcGUgVGhlIHNjb3BlIG9mIHRoZSBmaWVsZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbnxQcm9taXNlfSByZXN1bHQgcmV0dXJucyBhIGJvb2xlYW4gb3IgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHRvXG4gICAqYSBib29sZWFuLlxuICAgKi9cblZhbGlkYXRvci5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSAobmFtZSwgdmFsdWUsIHNjb3BlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBzY29wZSA9PT0gdm9pZCAwICkgc2NvcGUgPSAnX19nbG9iYWxfXyc7XG5cbiAgaWYgKG5hbWUgJiYgbmFtZS5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgIC8vIG5vIHN1Y2ggZmllbGQsIHRyeSB0aGUgc2NvcGUgZm9ybS5cbiAgICBpZiAoISB0aGlzLiRzY29wZXMuX19nbG9iYWxfX1tuYW1lXSkge1xuICAgICAgdmFyIGFzc2lnbiQkMTtcbiAgICAgICAgKGFzc2lnbiQkMSA9IG5hbWUuc3BsaXQoJy4nKSwgc2NvcGUgPSBhc3NpZ24kJDFbMF0sIG5hbWUgPSBhc3NpZ24kJDFbMV0pO1xuICAgIH1cbiAgfVxuICBpZiAoISBzY29wZSkgeyBzY29wZSA9ICdfX2dsb2JhbF9fJzsgfVxuICBpZiAoISB0aGlzLiRzY29wZXNbc2NvcGVdIHx8ICEgdGhpcy4kc2NvcGVzW3Njb3BlXVtuYW1lXSkge1xuICAgIGlmICghIHRoaXMuc3RyaWN0TW9kZSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIHZhciBmdWxsTmFtZSA9IHNjb3BlID09PSAnX19nbG9iYWxfXycgPyBuYW1lIDogKHNjb3BlICsgXCIuXCIgKyBuYW1lKTtcbiAgICB3YXJuKChcIlZhbGlkYXRpbmcgYSBub24tZXhpc3RhbnQgZmllbGQ6IFxcXCJcIiArIGZ1bGxOYW1lICsgXCJcXFwiLiBVc2UgXFxcImF0dGFjaCgpXFxcIiBmaXJzdC5cIikpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGZpZWxkID0gdGhpcy4kc2NvcGVzW3Njb3BlXVtuYW1lXTtcbiAgdGhpcy5lcnJvckJhZy5yZW1vdmUobmFtZSwgc2NvcGUpO1xuICAvLyBpZiBpdHMgbm90IHJlcXVpcmVkIGFuZCBpcyBlbXB0eSBvciBudWxsIG9yIHVuZGVmaW5lZCB0aGVuIGl0IHBhc3Nlcy5cbiAgaWYgKCEgZmllbGQucmVxdWlyZWQgJiYgfltudWxsLCB1bmRlZmluZWQsICcnXS5pbmRleE9mKHZhbHVlKSkge1xuICAgIHRoaXMuZmllbGRCYWcuX3NldEZsYWdzKG5hbWUsIHsgdmFsaWQ6IHRydWUsIGRpcnR5OiB0cnVlIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHByb21pc2VzID0gW107XG4gIHZhciB0ZXN0ID0gT2JqZWN0LmtleXMoZmllbGQudmFsaWRhdGlvbnMpLmV2ZXJ5KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMkMS5fdGVzdChcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIHsgbmFtZTogcnVsZSwgcGFyYW1zOiBmaWVsZC52YWxpZGF0aW9uc1tydWxlXSB9LFxuICAgICAgc2NvcGVcbiAgICApO1xuICAgIGlmIChpc0NhbGxhYmxlKHJlc3VsdC50aGVuKSkge1xuICAgICAgcHJvbWlzZXMucHVzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuXG4gIGlmIChwcm9taXNlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgdmFyIHZhbGlkID0gdmFsdWVzLmV2ZXJ5KGZ1bmN0aW9uICh0KSB7IHJldHVybiB0OyB9KSAmJiB0ZXN0O1xuICAgICAgdGhpcyQxLmZpZWxkQmFnLl9zZXRGbGFncyhuYW1lLCB7IHZhbGlkOiB2YWxpZCwgZGlydHk6IHRydWUgfSk7XG5cbiAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuZmllbGRCYWcuX3NldEZsYWdzKG5hbWUsIHsgdmFsaWQ6IHRlc3QsIGRpcnR5OiB0cnVlIH0pO1xuXG4gIHJldHVybiB0ZXN0O1xufTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIGVhY2ggdmFsdWUgYWdhaW5zdCB0aGUgY29ycmVzcG9uZGluZyBmaWVsZCB2YWxpZGF0aW9ucy5cbiAgICogQHBhcmFte29iamVjdH0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYmUgdmFsaWRhdGVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSB2YWxpZGF0aW9uIHJlc3VsdC5cbiAgICovXG5WYWxpZGF0b3IucHJvdG90eXBlLnZhbGlkYXRlQWxsID0gZnVuY3Rpb24gdmFsaWRhdGVBbGwgKHZhbHVlcykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBub3JtYWxpemVkVmFsdWVzO1xuICBpZiAoISB2YWx1ZXMgfHwgdHlwZW9mIHZhbHVlcyA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLmVycm9yQmFnLmNsZWFyKHZhbHVlcyk7XG4gICAgbm9ybWFsaXplZFZhbHVlcyA9IHRoaXMuX3Jlc29sdmVWYWx1ZXNGcm9tR2V0dGVycyh2YWx1ZXMpO1xuICB9IGVsc2Uge1xuICAgIG5vcm1hbGl6ZWRWYWx1ZXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgbm9ybWFsaXplZFZhbHVlc1trZXldID0ge1xuICAgICAgICB2YWx1ZTogdmFsdWVzW2tleV1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdGVzdCA9IHRydWU7XG4gIHZhciBwcm9taXNlcyA9IFtdO1xuICBPYmplY3Qua2V5cyhub3JtYWxpemVkVmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzJDEudmFsaWRhdGUoXG4gICAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgICBub3JtYWxpemVkVmFsdWVzW3Byb3BlcnR5XS52YWx1ZSxcbiAgICAgICAgICAgICAgbm9ybWFsaXplZFZhbHVlc1twcm9wZXJ0eV0uc2NvcGVcbiAgICAgICAgICApO1xuICAgIGlmIChpc0NhbGxhYmxlKHJlc3VsdC50aGVuKSkge1xuICAgICAgcHJvbWlzZXMucHVzaChyZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRlc3QgPSB0ZXN0ICYmIHJlc3VsdDtcbiAgfSk7XG5cbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uICh2YWxzKSB7XG4gICAgdmFyIHZhbGlkID0gdmFscy5ldmVyeShmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfSkgJiYgdGVzdDtcblxuICAgIGlmICghIHZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgVmFsaWRhdG9yRXhjZXB0aW9uKCdWYWxpZGF0aW9uIEZhaWxlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZDtcbiAgfSk7XG59O1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYWxsIHNjb3Blcy5cbiAgICogQHJldHVybnMge1Byb21pc2V9IEFsbCBwcm9taXNlcyByZXN1bHRlZCBmcm9tIGVhY2ggc2NvcGUuXG4gICAqL1xuVmFsaWRhdG9yLnByb3RvdHlwZS52YWxpZGF0ZVNjb3BlcyA9IGZ1bmN0aW9uIHZhbGlkYXRlU2NvcGVzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgT2JqZWN0LmtleXModGhpcy4kc2NvcGVzKS5tYXAoZnVuY3Rpb24gKHNjb3BlKSB7IHJldHVybiB0aGlzJDEudmFsaWRhdGVBbGwoc2NvcGUpOyB9KVxuICAgICAgKTtcbn07XG5cbnZhciBtYWtlTWl4aW4gPSBmdW5jdGlvbiAoVnVlLCBvcHRpb25zKSB7IHJldHVybiAoe1xuICBjb21wdXRlZDogKCBvYmogPSB7fSwgb2JqW29wdGlvbnMuZXJyb3JCYWdOYW1lXSA9IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kdmFsaWRhdG9yLmVycm9yQmFnO1xuICAgICAgfVxuICAgIH0sIG9ialtvcHRpb25zLmZpZWxkc0JhZ05hbWVdID0ge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiR2YWxpZGF0b3IuZmllbGRCYWc7XG4gICAgICB9XG4gICAgfSwgb2JqICksXG4gIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlKCkge1xuICAgIHRoaXMuJHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IobnVsbCwgeyBpbml0OiBmYWxzZSB9KTtcbiAgICBWdWUudXRpbC5kZWZpbmVSZWFjdGl2ZSh0aGlzLiR2YWxpZGF0b3IsICdlcnJvckJhZycsIHRoaXMuJHZhbGlkYXRvci5lcnJvckJhZyk7XG4gICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcy4kdmFsaWRhdG9yLCAnZmllbGRCYWcnLCB0aGlzLiR2YWxpZGF0b3IuZmllbGRCYWcpO1xuICB9LFxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHRoaXMuJHZhbGlkYXRvci5pbml0KCk7XG4gIH1cbn0pXG4gIHZhciBvYmo7IH07XG5cbnZhciBMaXN0ZW5lckdlbmVyYXRvciA9IGZ1bmN0aW9uIExpc3RlbmVyR2VuZXJhdG9yKGVsLCBiaW5kaW5nLCB2bm9kZSwgb3B0aW9ucykge1xuICB0aGlzLnVud2F0Y2ggPSB1bmRlZmluZWQ7XG4gIHRoaXMuY2FsbGJhY2tzID0gW107XG4gIHRoaXMuZWwgPSBlbDtcbiAgdGhpcy5zY29wZSA9IGlzT2JqZWN0KGJpbmRpbmcudmFsdWUpID8gYmluZGluZy52YWx1ZS5zY29wZSA6IGdldFNjb3BlKGVsKTtcbiAgdGhpcy5iaW5kaW5nID0gYmluZGluZztcbiAgdGhpcy52bSA9IHZub2RlLmNvbnRleHQ7XG4gIHRoaXMuY29tcG9uZW50ID0gdm5vZGUuY2hpbGQ7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuZmllbGROYW1lID0gdGhpcy5fcmVzb2x2ZUZpZWxkTmFtZSgpO1xuICB0aGlzLm1vZGVsID0gdGhpcy5fcmVzb2x2ZU1vZGVsKHZub2RlLmRhdGEuZGlyZWN0aXZlcyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgbm9kZSBkaXJlY3RpdmVzIGNvbnRhaW5zIGEgdi1tb2RlbC5cbiAqL1xuTGlzdGVuZXJHZW5lcmF0b3IucHJvdG90eXBlLl9yZXNvbHZlTW9kZWwgPSBmdW5jdGlvbiBfcmVzb2x2ZU1vZGVsIChkaXJlY3RpdmVzKSB7XG4gIHZhciBleHBSZWdleCA9IC9eW2Etel9dK1swLTldKihcXHcqXFwuW2Etel9dXFx3KikqJC9pO1xuICB2YXIgbW9kZWwgPSBmaW5kKGRpcmVjdGl2ZXMsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdtb2RlbCcgJiYgZXhwUmVnZXgudGVzdChkLmV4cHJlc3Npb24pOyB9KTtcblxuICByZXR1cm4gbW9kZWwgJiYgdGhpcy5faXNFeGlzdGluZ1BhdGgobW9kZWwuZXhwcmVzc2lvbikgJiYgbW9kZWwuZXhwcmVzc2lvbjtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBvYmplY3QgcGF0aCBleGlzdHMuXG4gKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5faXNFeGlzdGluZ1BhdGggPSBmdW5jdGlvbiBfaXNFeGlzdGluZ1BhdGggKHBhdGgpIHtcbiAgdmFyIG9iaiA9IHRoaXMudm07XG4gIHJldHVybiBwYXRoLnNwbGl0KCcuJykuZXZlcnkoZnVuY3Rpb24gKHByb3ApIHtcbiAgICBpZiAoISBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG9iaiA9IG9ialtwcm9wXTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn07XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRoZSBmaWVsZCBuYW1lIHRvIHRyaWdnZXIgdmFsaWRhdGlvbnMuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGZpZWxkIG5hbWUuXG4gICAqL1xuTGlzdGVuZXJHZW5lcmF0b3IucHJvdG90eXBlLl9yZXNvbHZlRmllbGROYW1lID0gZnVuY3Rpb24gX3Jlc29sdmVGaWVsZE5hbWUgKCkge1xuICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICByZXR1cm4gZ2V0RGF0YUF0dHJpYnV0ZSh0aGlzLmVsLCAnbmFtZScpIHx8IHRoaXMuY29tcG9uZW50Lm5hbWU7XG4gIH1cblxuICByZXR1cm4gZ2V0RGF0YUF0dHJpYnV0ZSh0aGlzLmVsLCAnbmFtZScpIHx8IHRoaXMuZWwubmFtZTtcbn07XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIHZhbGlkYXRpb24gcnVsZSByZXF1aXJlcyBhZGRpdGlvbmFsIGxpc3RlbmVycyBvbiB0YXJnZXQgZmllbGRzLlxuICAgKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5faGFzRmllbGREZXBlbmRlbmN5ID0gZnVuY3Rpb24gX2hhc0ZpZWxkRGVwZW5kZW5jeSAocnVsZXMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgZmllbGROYW1lID0gZmFsc2U7XG4gIGlmICghIHJ1bGVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0KHJ1bGVzKSkge1xuICAgIE9iamVjdC5rZXlzKHJ1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmICgvY29uZmlybWVkfGFmdGVyfGJlZm9yZS8udGVzdChyKSkge1xuICAgICAgICBmaWVsZE5hbWUgPSBydWxlc1tyXTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmllbGROYW1lO1xuICB9XG5cbiAgcnVsZXMuc3BsaXQoJ3wnKS5ldmVyeShmdW5jdGlvbiAocikge1xuICAgIGlmICgvXFxiKGNvbmZpcm1lZHxhZnRlcnxiZWZvcmUpOi8udGVzdChyKSkge1xuICAgICAgZmllbGROYW1lID0gci5zcGxpdCgnOicpWzFdO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICgvXFxiKGNvbmZpcm1lZCkvLnRlc3QocikpIHtcbiAgICAgIGZpZWxkTmFtZSA9ICh0aGlzJDEuZmllbGROYW1lKSArIFwiX2NvbmZpcm1hdGlvblwiO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gZmllbGROYW1lO1xufTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIGlucHV0IHZhbHVlLCB0cmlnZ2VyZWQgYnkgJ2lucHV0JyBldmVudC5cbiAgICovXG5MaXN0ZW5lckdlbmVyYXRvci5wcm90b3R5cGUuX2lucHV0TGlzdGVuZXIgPSBmdW5jdGlvbiBfaW5wdXRMaXN0ZW5lciAoKSB7XG4gIHRoaXMuX3ZhbGlkYXRlKHRoaXMuZWwudmFsdWUpO1xufTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIGZpbGVzLCB0cmlnZ2VyZWQgYnkgJ2NoYW5nZScgZXZlbnQuXG4gICAqL1xuTGlzdGVuZXJHZW5lcmF0b3IucHJvdG90eXBlLl9maWxlTGlzdGVuZXIgPSBmdW5jdGlvbiBfZmlsZUxpc3RlbmVyICgpIHtcbiAgdmFyIGlzVmFsaWQgPSB0aGlzLl92YWxpZGF0ZSh0b0FycmF5KHRoaXMuZWwuZmlsZXMpKTtcblxuICBpZiAoISBpc1ZhbGlkICYmIHRoaXMuYmluZGluZy5tb2RpZmllcnMucmVqZWN0KSB7XG4gICAgdGhpcy5lbC52YWx1ZSA9ICcnO1xuICB9XG59O1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgcmFkaW8gYnV0dG9ucywgdHJpZ2dlcmVkIGJ5ICdjaGFuZ2UnIGV2ZW50LlxuICAgKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5fcmFkaW9MaXN0ZW5lciA9IGZ1bmN0aW9uIF9yYWRpb0xpc3RlbmVyICgpIHtcbiAgdmFyIGNoZWNrZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKChcImlucHV0W25hbWU9XFxcIlwiICsgKHRoaXMuZWwubmFtZSkgKyBcIlxcXCJdOmNoZWNrZWRcIikpO1xuICB0aGlzLl92YWxpZGF0ZShjaGVja2VkID8gY2hlY2tlZC52YWx1ZSA6IG51bGwpO1xufTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIGNoZWNrYm94ZXMsIHRyaWdnZXJlZCBieSBjaGFuZ2UgZXZlbnQuXG4gICAqL1xuTGlzdGVuZXJHZW5lcmF0b3IucHJvdG90eXBlLl9jaGVja2JveExpc3RlbmVyID0gZnVuY3Rpb24gX2NoZWNrYm94TGlzdGVuZXIgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBjaGVja2VkQm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKChcImlucHV0W25hbWU9XFxcIlwiICsgKHRoaXMuZWwubmFtZSkgKyBcIlxcXCJdOmNoZWNrZWRcIikpO1xuICBpZiAoISBjaGVja2VkQm94ZXMgfHwgISBjaGVja2VkQm94ZXMubGVuZ3RoKSB7XG4gICAgdGhpcy5fdmFsaWRhdGUobnVsbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdG9BcnJheShjaGVja2VkQm94ZXMpLmZvckVhY2goZnVuY3Rpb24gKGJveCkge1xuICAgIHRoaXMkMS5fdmFsaWRhdGUoYm94LnZhbHVlKTtcbiAgfSk7XG59O1xuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSB2YWxpZGF0aW9uIGZvciBhIHNwZWNpZmljIHZhbHVlLlxuICAgKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGUgPSBmdW5jdGlvbiBfdmFsaWRhdGUgKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnZtLiR2YWxpZGF0b3IudmFsaWRhdGUodGhpcy5maWVsZE5hbWUsIHZhbHVlLCB0aGlzLnNjb3BlIHx8IGdldFNjb3BlKHRoaXMuZWwpKTtcbn07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzY29wZWQgY2FsbGJhY2ssIG9ubHkgcnVucyBpZiB0aGUgZWwgc2NvcGUgaXMgdGhlIHNhbWUgYXMgdGhlIHJlY2lldmVkIHNjb3BlXG4gICAqIEZyb20gdGhlIGV2ZW50LlxuICAgKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2V0U2NvcGVkTGlzdGVuZXIgPSBmdW5jdGlvbiBfZ2V0U2NvcGVkTGlzdGVuZXIgKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSkge1xuICAgIGlmICghIHNjb3BlIHx8IHNjb3BlID09PSB0aGlzJDEuc2NvcGUgfHwgc2NvcGUgaW5zdGFuY2VvZiBFdmVudCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG59O1xuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyB2YWxpZGF0b3IgZXZlbnQtdHJpZ2dlcmVkIHZhbGlkYXRpb24uXG4gICAqL1xuTGlzdGVuZXJHZW5lcmF0b3IucHJvdG90eXBlLl9hdHRhY2hWYWxpZGF0b3JFdmVudCA9IGZ1bmN0aW9uIF9hdHRhY2hWYWxpZGF0b3JFdmVudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGxpc3RlbmVyID0gdGhpcy5fZ2V0U2NvcGVkTGlzdGVuZXIodGhpcy5fZ2V0U3VpdGFibGVMaXN0ZW5lcigpLmxpc3RlbmVyLmJpbmQodGhpcykpO1xuICB2YXIgZmllbGROYW1lID0gdGhpcy5faGFzRmllbGREZXBlbmRlbmN5KFxuICAgICAgZ2V0UnVsZXModGhpcy5iaW5kaW5nLmV4cHJlc3Npb24sIHRoaXMuYmluZGluZy52YWx1ZSwgdGhpcy5lbClcbiAgICApO1xuICBpZiAoZmllbGROYW1lKSB7XG4gICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIHZhbGlkYXRvciByZWFkeSB0cmlnZ2VyZWQgd2hlbiB2bSBpcyBtb3VudGVkIGJlY2F1c2UgbWF5YmVcbiAgICAgICAgICAvLyB0aGUgZWxlbWVudCBpc24ndCBtb3VudGVkIHlldC5cbiAgICB0aGlzLnZtLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigoXCJpbnB1dFtuYW1lPSdcIiArIGZpZWxkTmFtZSArIFwiJ11cIikpO1xuICAgICAgaWYgKCEgdGFyZ2V0KSB7XG4gICAgICAgIHdhcm4oJ0Nhbm5vdCBmaW5kIHRhcmdldCBmaWVsZCwgbm8gYWRkaXRpb25hbCBsaXN0ZW5lcnMgd2VyZSBhdHRhY2hlZC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBsaXN0ZW5lcik7XG4gICAgICB0aGlzJDEuY2FsbGJhY2tzLnB1c2goeyBuYW1lOiAnaW5wdXQnLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGVsOiB0YXJnZXQgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgYSBzdWl0YWJsZSBsaXN0ZW5lciBmb3IgdGhlIGVsZW1lbnQuXG4gICAqL1xuTGlzdGVuZXJHZW5lcmF0b3IucHJvdG90eXBlLl9nZXRTdWl0YWJsZUxpc3RlbmVyID0gZnVuY3Rpb24gX2dldFN1aXRhYmxlTGlzdGVuZXIgKCkge1xuICB2YXIgbGlzdGVuZXI7XG5cbiAgaWYgKHRoaXMuZWwudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXM6IFsnY2hhbmdlJywgJ2JsdXInXSxcbiAgICAgIGxpc3RlbmVyOiB0aGlzLl9pbnB1dExpc3RlbmVyXG4gICAgfTtcbiAgfVxuXG4gICAgICAvLyBkZXRlcm1pbmUgdGhlIHN1aXRhYmxlIGxpc3RlbmVyIGFuZCBldmVudHMgdG8gaGFuZGxlXG4gIHN3aXRjaCAodGhpcy5lbC50eXBlKSB7XG4gIGNhc2UgJ2ZpbGUnOlxuICAgIGxpc3RlbmVyID0ge1xuICAgICAgbmFtZXM6IFsnY2hhbmdlJ10sXG4gICAgICBsaXN0ZW5lcjogdGhpcy5fZmlsZUxpc3RlbmVyXG4gICAgfTtcbiAgICBicmVhaztcblxuICBjYXNlICdyYWRpbyc6XG4gICAgbGlzdGVuZXIgPSB7XG4gICAgICBuYW1lczogWydjaGFuZ2UnXSxcbiAgICAgIGxpc3RlbmVyOiB0aGlzLl9yYWRpb0xpc3RlbmVyXG4gICAgfTtcbiAgICBicmVhaztcblxuICBjYXNlICdjaGVja2JveCc6XG4gICAgbGlzdGVuZXIgPSB7XG4gICAgICBuYW1lczogWydjaGFuZ2UnXSxcbiAgICAgIGxpc3RlbmVyOiB0aGlzLl9jaGVja2JveExpc3RlbmVyXG4gICAgfTtcbiAgICBicmVhaztcblxuICBkZWZhdWx0OlxuICAgIGxpc3RlbmVyID0ge1xuICAgICAgbmFtZXM6IFsnaW5wdXQnLCAnYmx1ciddLFxuICAgICAgbGlzdGVuZXI6IHRoaXMuX2lucHV0TGlzdGVuZXJcbiAgICB9O1xuICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gdXNlcnMgYXJlIGFibGUgdG8gc3BlY2lmeSB3aGljaCBldmVudHMgdGhleSB3YW50IHRvIHZhbGlkYXRlIG9uXG4gIC8vIHBpcGUgc2VwYXJhdGVkIGxpc3Qgb2YgaGFuZGxlciBuYW1lcyB0byB1c2VcbiAgdmFyIGV2ZW50cyA9IGdldERhdGFBdHRyaWJ1dGUodGhpcy5lbCwgJ3ZhbGlkYXRlLW9uJyk7XG4gIGlmIChldmVudHMpIHtcbiAgICBsaXN0ZW5lci5uYW1lcyA9IGV2ZW50cy5zcGxpdCgnfCcpO1xuICB9XG5cbiAgcmV0dXJuIGxpc3RlbmVyO1xufTtcblxuLyoqXG4gKiBBdHRhY2hlcyBuZWNjZXNzYXJ5IHZhbGlkYXRpb24gZXZlbnRzIGZvciB0aGUgY29tcG9uZW50LlxuICovXG5MaXN0ZW5lckdlbmVyYXRvci5wcm90b3R5cGUuX2F0dGFjaENvbXBvbmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hdHRhY2hDb21wb25lbnRMaXN0ZW5lcnMgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuY29tcG9uZW50TGlzdGVuZXIgPSBkZWJvdW5jZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzJDEuX3ZhbGlkYXRlKHZhbHVlKTtcbiAgfSwgZ2V0RGF0YUF0dHJpYnV0ZSh0aGlzLmVsLCAnZGVsYXknKSB8fCB0aGlzLm9wdGlvbnMuZGVsYXkpO1xuXG4gIHRoaXMuY29tcG9uZW50LiRvbignaW5wdXQnLCB0aGlzLmNvbXBvbmVudExpc3RlbmVyKTtcbn07XG5cbi8qKlxuICogQXR0YWNocyBhIHN1aXRhYmxlIGxpc3RlbmVyIGZvciB0aGUgaW5wdXQuXG4gKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5fYXR0YWNoRmllbGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYXR0YWNoRmllbGRMaXN0ZW5lcnMgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIElmIGl0IGlzIGEgY29tcG9uZW50LCB1c2UgdnVlIGV2ZW50cyBpbnN0ZWFkLlxuICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICB0aGlzLl9hdHRhY2hDb21wb25lbnRMaXN0ZW5lcnMoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gdGhpcy5fZ2V0U3VpdGFibGVMaXN0ZW5lcigpO1xuICB2YXIgbGlzdGVuZXIgPSBkZWJvdW5jZShcbiAgICAgICAgICBoYW5kbGVyLmxpc3RlbmVyLmJpbmQodGhpcyksXG4gICAgICAgICAgZ2V0RGF0YUF0dHJpYnV0ZSh0aGlzLmVsLCAnZGVsYXknKSB8fCB0aGlzLm9wdGlvbnMuZGVsYXlcbiAgICAgICk7XG5cbiAgaWYgKH5bJ3JhZGlvJywgJ2NoZWNrYm94J10uaW5kZXhPZih0aGlzLmVsLnR5cGUpKSB7XG4gICAgdGhpcy52bS4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVsbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKChcImlucHV0W25hbWU9XFxcIlwiICsgKHRoaXMkMS5lbC5uYW1lKSArIFwiXFxcIl1cIikpO1xuICAgICAgdG9BcnJheShlbG1zKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICBoYW5kbGVyLm5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXJOYW1lKSB7XG4gICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihoYW5kbGVyTmFtZSwgbGlzdGVuZXIpO1xuICAgICAgICAgIHRoaXMkMS5jYWxsYmFja3MucHVzaCh7IG5hbWU6IGhhbmRsZXJOYW1lLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGVsOiBpbnB1dCB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGhhbmRsZXIubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlck5hbWUpIHtcbiAgICB0aGlzJDEuZWwuYWRkRXZlbnRMaXN0ZW5lcihoYW5kbGVyTmFtZSwgbGlzdGVuZXIpO1xuICAgIHRoaXMkMS5jYWxsYmFja3MucHVzaCh7IG5hbWU6IGhhbmRsZXJOYW1lLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGVsOiB0aGlzJDEuZWwgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgY29udGV4dCwgZ2V0dGVyIGZhY3RvcnkgcGFpcnMgZm9yIGVhY2ggaW5wdXQgdHlwZS5cbiAqL1xuTGlzdGVuZXJHZW5lcmF0b3IucHJvdG90eXBlLl9yZXNvbHZlVmFsdWVHZXR0ZXIgPSBmdW5jdGlvbiBfcmVzb2x2ZVZhbHVlR2V0dGVyICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGV4dDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLmNvbXBvbmVudDsgfSxcbiAgICAgIGdldHRlcjogZnVuY3Rpb24gZ2V0dGVyKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRbZ2V0RGF0YUF0dHJpYnV0ZShjb250ZXh0LiRlbCwgJ3ZhbHVlLXBhdGgnKV0gfHwgY29udGV4dC52YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgc3dpdGNoICh0aGlzLmVsLnR5cGUpIHtcbiAgY2FzZSAnY2hlY2tib3gnOiByZXR1cm4ge1xuICAgIGNvbnRleHQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKFwiaW5wdXRbbmFtZT1cXFwiXCIgKyAodGhpcyQxLmVsLm5hbWUpICsgXCJcXFwiXTpjaGVja2VkXCIpKTsgfSxcbiAgICBnZXR0ZXI6IGZ1bmN0aW9uIGdldHRlcihjb250ZXh0KSB7XG4gICAgICBpZiAoISBjb250ZXh0IHx8ICEgY29udGV4dC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b0FycmF5KGNvbnRleHQpLm1hcChmdW5jdGlvbiAoY2hlY2tib3gpIHsgcmV0dXJuIGNoZWNrYm94LnZhbHVlOyB9KTtcbiAgICB9XG4gIH07XG4gIGNhc2UgJ3JhZGlvJzogcmV0dXJuIHtcbiAgICBjb250ZXh0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKChcImlucHV0W25hbWU9XFxcIlwiICsgKHRoaXMkMS5lbC5uYW1lKSArIFwiXFxcIl06Y2hlY2tlZFwiKSk7IH0sXG4gICAgZ2V0dGVyOiBmdW5jdGlvbiBnZXR0ZXIoY29udGV4dCkge1xuICAgICAgcmV0dXJuIGNvbnRleHQgJiYgY29udGV4dC52YWx1ZTtcbiAgICB9XG4gIH07XG4gIGNhc2UgJ2ZpbGUnOiByZXR1cm4ge1xuICAgIGNvbnRleHQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5lbDsgfSxcbiAgICBnZXR0ZXI6IGZ1bmN0aW9uIGdldHRlcihjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdG9BcnJheShjb250ZXh0LmZpbGVzKTtcbiAgICB9XG4gIH07XG5cbiAgZGVmYXVsdDogcmV0dXJuIHtcbiAgICBjb250ZXh0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuZWw7IH0sXG4gICAgZ2V0dGVyOiBmdW5jdGlvbiBnZXR0ZXIoY29udGV4dCkge1xuICAgICAgcmV0dXJuIGNvbnRleHQudmFsdWU7XG4gICAgfVxuICB9O1xuICB9XG59O1xuXG4vKlxuKiBHZXRzIHRoZSBhcmcgc3RyaW5nIHZhbHVlLCBlaXRoZXIgZnJvbSB0aGUgZGlyZWN0aXZlIG9yIHRoZSBleHByZXNzaW9uIHZhbHVlLlxuKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2V0QXJnID0gZnVuY3Rpb24gX2dldEFyZyAoKSB7XG4gIC8vIEdldCBpdCBmcm9tIHRoZSBkaXJlY3RpdmUgYXJnLlxuICBpZiAodGhpcy5iaW5kaW5nLmFyZykge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmcuYXJnO1xuICB9XG5cbiAgLy8gR2V0IGl0IGZyb20gdi1tb2RlbC5cbiAgaWYgKHRoaXMubW9kZWwpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbDtcbiAgfVxuXG4gIHJldHVybiBpc09iamVjdCh0aGlzLmJpbmRpbmcudmFsdWUpID8gdGhpcy5iaW5kaW5nLnZhbHVlLmFyZyA6IG51bGw7XG59O1xuXG4vKipcbiAqIEF0dGFjaGVzIG1vZGVsIHdhdGNoZXJzIGFuZCBleHRyYSBsaXN0ZW5lcnMuXG4gKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5fYXR0YWNoTW9kZWxXYXRjaGVyID0gZnVuY3Rpb24gX2F0dGFjaE1vZGVsV2F0Y2hlciAoYXJnKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGV2ZW50cyA9IGdldERhdGFBdHRyaWJ1dGUodGhpcy5lbCwgJ3ZhbGlkYXRlLW9uJykgfHwgJ2lucHV0fGJsdXInO1xuICB2YXIgbGlzdGVuZXIgPSBkZWJvdW5jZShcbiAgICB0aGlzLl9nZXRTdWl0YWJsZUxpc3RlbmVyKCkubGlzdGVuZXIuYmluZCh0aGlzKSxcbiAgICBnZXREYXRhQXR0cmlidXRlKHRoaXMuZWwsICdkZWxheScpIHx8IHRoaXMub3B0aW9ucy5kZWxheVxuICApO1xuICBldmVudHMuc3BsaXQoJ3wnKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKH5bJ2lucHV0JywgJ2NoYW5nZSddLmluZGV4T2YobmFtZSkpIHtcbiAgICAgIHZhciBkZWJvdW5jZWQgPSBkZWJvdW5jZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcyQxLnZtLiR2YWxpZGF0b3IudmFsaWRhdGUodGhpcyQxLmZpZWxkTmFtZSwgdmFsdWUsIHRoaXMkMS5zY29wZSB8fCBnZXRTY29wZSh0aGlzJDEuZWwpKTtcbiAgICAgIH0sIGdldERhdGFBdHRyaWJ1dGUodGhpcyQxLmVsLCAnZGVsYXknKSB8fCB0aGlzJDEub3B0aW9ucy5kZWxheSk7XG4gICAgICB0aGlzJDEudW53YXRjaCA9IHRoaXMkMS52bS4kd2F0Y2goYXJnLCBkZWJvdW5jZWQsIHsgZGVlcDogdHJ1ZSB9KTtcbiAgICAgIC8vIE5vIG5lZWQgdG8gYXR0YWNoIGl0IG9uIGVsZW1lbnQgYXMgaXQgd2lsbCB1c2UgdGhlIHZ1ZSB3YXRjaGVyLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMkMS5lbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB0aGlzJDEuY2FsbGJhY2tzLnB1c2goeyBuYW1lOiBuYW1lLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGVsOiB0aGlzJDEuZWwgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBdHRhY2hlcyB0aGUgRXZlbnQgTGlzdGVuZXJzLlxuICovXG5MaXN0ZW5lckdlbmVyYXRvci5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgcmVmID0gdGhpcy5fcmVzb2x2ZVZhbHVlR2V0dGVyKCk7XG4gICAgdmFyIGNvbnRleHQgPSByZWYuY29udGV4dDtcbiAgICB2YXIgZ2V0dGVyID0gcmVmLmdldHRlcjtcbiAgdGhpcy52bS4kdmFsaWRhdG9yLmF0dGFjaChcbiAgICB0aGlzLmZpZWxkTmFtZSxcbiAgICBnZXRSdWxlcyh0aGlzLmJpbmRpbmcuZXhwcmVzc2lvbiwgdGhpcy5iaW5kaW5nLnZhbHVlLCB0aGlzLmVsKSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBzY29wZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcyQxLnNjb3BlIHx8IGdldFNjb3BlKHRoaXMkMS5lbCk7XG4gICAgICB9LFxuICAgICAgcHJldHR5TmFtZTogZ2V0RGF0YUF0dHJpYnV0ZSh0aGlzLmVsLCAnYXMnKSxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBnZXR0ZXI6IGdldHRlcixcbiAgICAgIGxpc3RlbmVyczogdGhpc1xuICAgIH1cbiAgKTtcblxuICB0aGlzLl9hdHRhY2hWYWxpZGF0b3JFdmVudCgpO1xuICB2YXIgYXJnID0gdGhpcy5fZ2V0QXJnKCk7XG4gIGlmIChhcmcpIHtcbiAgICB0aGlzLl9hdHRhY2hNb2RlbFdhdGNoZXIoYXJnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9hdHRhY2hGaWVsZExpc3RlbmVycygpO1xufTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzLlxuICAgKi9cbkxpc3RlbmVyR2VuZXJhdG9yLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2ggKCkge1xuICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICB0aGlzLmNvbXBvbmVudC4kb2ZmKCdpbnB1dCcsIHRoaXMuY29tcG9uZW50TGlzdGVuZXIpO1xuICB9XG5cbiAgaWYgKHRoaXMudW53YXRjaCkge1xuICAgIHRoaXMudW53YXRjaCgpO1xuICB9XG5cbiAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoaCkge1xuICAgIGguZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihoLm5hbWUsIGgubGlzdGVuZXIpO1xuICB9KTtcbiAgdGhpcy5jYWxsYmFja3MgPSBbXTtcbn07XG5cbnZhciBsaXN0ZW5lcnNJbnN0YW5jZXMgPSBbXTtcblxuZnVuY3Rpb24gYWRkQ2xhc3NlcyhlbCwgZmxhZ3MsIGNsYXNzTmFtZXMpIHtcbiAgaWYgKCEgZmxhZ3MpIHsgcmV0dXJuOyB9XG5cbiAgaWYgKGZsYWdzLmRpcnR5KSB7XG4gICAgYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZXMudG91Y2hlZCk7XG4gICAgcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZXMudW50b3VjaGVkKTtcbiAgfSBlbHNlIHtcbiAgICBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lcy51bnRvdWNoZWQpO1xuICAgIHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWVzLnRvdWNoZWQpO1xuICB9XG5cbiAgaWYgKGZsYWdzLnZhbGlkIHx8IGZsYWdzLnBhc3NlZCkge1xuICAgIGFkZENsYXNzKGVsLCBjbGFzc05hbWVzLnZhbGlkKTtcbiAgICByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lcy5pbnZhbGlkKTtcbiAgfSBlbHNlIHtcbiAgICBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lcy5pbnZhbGlkKTtcbiAgICByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lcy52YWxpZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0RGlydHkoZWwsIGNsYXNzTmFtZXMpIHtcbiAgYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZXMuZGlydHkpO1xuICByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lcy5wcmlzdGluZSk7XG59XG5cbmZ1bmN0aW9uIHNldFByaXN0aW5lKGVsLCBjbGFzc05hbWVzKSB7XG4gIGFkZENsYXNzKGVsLCBjbGFzc05hbWVzLnByaXN0aW5lKTtcbiAgcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZXMuZGlydHkpO1xufVxuXG52YXIgbWFrZURpcmVjdGl2ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybiAoe1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIHZhciBsaXN0ZW5lciA9IG5ldyBMaXN0ZW5lckdlbmVyYXRvcihlbCwgYmluZGluZywgdm5vZGUsIG9wdGlvbnMpO1xuXG4gICAgbGlzdGVuZXIuYXR0YWNoKCk7XG4gICAgbGlzdGVuZXJzSW5zdGFuY2VzLnB1c2goeyB2bTogdm5vZGUuY29udGV4dCwgZWw6IGVsLCBpbnN0YW5jZTogbGlzdGVuZXIgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5lbmFibGVBdXRvQ2xhc3Nlcykge1xuICAgICAgc2V0UHJpc3RpbmUoZWwsIG9wdGlvbnMuY2xhc3NOYW1lcyk7XG4gICAgICBlbC5vbmZvY3VzID0gZnVuY3Rpb24gKCkgeyBzZXREaXJ0eShlbCwgb3B0aW9ucy5jbGFzc05hbWVzKTsgfTtcbiAgICAgIGFkZENsYXNzZXMoXG4gICAgICAgIGVsLFxuICAgICAgICB2bm9kZS5jb250ZXh0LiR2YWxpZGF0b3IuZmllbGRCYWcuZmllbGRzW2xpc3RlbmVyLmZpZWxkTmFtZV0sXG4gICAgICAgIG9wdGlvbnMuY2xhc3NOYW1lc1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGVsLCByZWYsIHJlZiQxKSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSByZWYuZXhwcmVzc2lvbjtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuICAgIHZhciBjb250ZXh0ID0gcmVmJDEuY29udGV4dDtcblxuICAgIHZhciByZWYkMiA9IGZpbmQobGlzdGVuZXJzSW5zdGFuY2VzLCBmdW5jdGlvbiAobCkgeyByZXR1cm4gbC52bSA9PT0gY29udGV4dCAmJiBsLmVsID09PSBlbDsgfSk7XG4gICAgdmFyIGluc3RhbmNlID0gcmVmJDIuaW5zdGFuY2U7XG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlQXV0b0NsYXNzZXMpIHtcbiAgICAgIGFkZENsYXNzZXMoZWwsIGNvbnRleHQuJHZhbGlkYXRvci5maWVsZEJhZy5maWVsZHNbaW5zdGFuY2UuZmllbGROYW1lXSwgb3B0aW9ucy5jbGFzc05hbWVzKTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgd2UgZG9uJ3QgZG8gdW5lY2Nlc3Nhcnkgd29yayBpZiBubyBleHByZXNzaW9uIHdhcyBwYXNzZWRcbiAgICAvLyBvciBpZiB0aGUgc3RyaW5nIHZhbHVlIGRpZCBub3QgY2hhbmdlLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGlmICghIGV4cHJlc3Npb24gfHwgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG9sZFZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSA9PT0gb2xkVmFsdWUpKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIHNjb3BlID0gaXNPYmplY3QodmFsdWUpID8gKHZhbHVlLnNjb3BlIHx8IGdldFNjb3BlKGVsKSkgOiBnZXRTY29wZShlbCk7XG4gICAgY29udGV4dC4kdmFsaWRhdG9yLnVwZGF0ZUZpZWxkKFxuICAgICAgaW5zdGFuY2UuZmllbGROYW1lLFxuICAgICAgZ2V0UnVsZXMoZXhwcmVzc2lvbiwgdmFsdWUsIGVsKSxcbiAgICAgIHsgc2NvcGU6IHNjb3BlIHx8ICdfX2dsb2JhbF9fJyB9XG4gICAgKTtcbiAgfSxcbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoZWwsIHJlZiwgcmVmJDEpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIGNvbnRleHQgPSByZWYkMS5jb250ZXh0O1xuXG4gICAgdmFyIGhvbGRlciA9IGZpbmQobGlzdGVuZXJzSW5zdGFuY2VzLCBmdW5jdGlvbiAobCkgeyByZXR1cm4gbC52bSA9PT0gY29udGV4dCAmJiBsLmVsID09PSBlbDsgfSk7XG4gICAgaWYgKHR5cGVvZiBob2xkZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNjb3BlID0gaXNPYmplY3QodmFsdWUpID8gdmFsdWUuc2NvcGUgOiAoZ2V0U2NvcGUoZWwpIHx8ICdfX2dsb2JhbF9fJyk7XG4gICAgY29udGV4dC4kdmFsaWRhdG9yLmRldGFjaChob2xkZXIuaW5zdGFuY2UuZmllbGROYW1lLCBzY29wZSk7XG4gICAgbGlzdGVuZXJzSW5zdGFuY2VzLnNwbGljZShsaXN0ZW5lcnNJbnN0YW5jZXMuaW5kZXhPZihob2xkZXIpLCAxKTtcbiAgfVxufSk7IH07XG5cbnZhciBERUZBVUxUX0NMQVNTX05BTUVTID0ge1xuICB0b3VjaGVkOiAndG91Y2hlZCcsIC8vIHRoZSBjb250cm9sIGhhcyBiZWVuIGJsdXJyZWRcbiAgdW50b3VjaGVkOiAndW50b3VjaGVkJywgLy8gdGhlIGNvbnRyb2wgaGFzbid0IGJlZW4gYmx1cnJlZFxuICB2YWxpZDogJ3ZhbGlkJywgLy8gbW9kZWwgaXMgdmFsaWRcbiAgaW52YWxpZDogJ2ludmFsaWQnLCAvLyBtb2RlbCBpcyBpbnZhbGlkXG4gIHByaXN0aW5lOiAncHJpc3RpbmUnLCAvLyBjb250cm9sIGhhcyBub3QgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAgZGlydHk6ICdkaXJ0eScgLy8gY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxudmFyIGluc3RhbGwgPSBmdW5jdGlvbiAoVnVlLCByZWYpIHtcbiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICB2YXIgbG9jYWxlID0gcmVmLmxvY2FsZTsgaWYgKCBsb2NhbGUgPT09IHZvaWQgMCApIGxvY2FsZSA9ICdlbic7XG4gIHZhciBkZWxheSA9IHJlZi5kZWxheTsgaWYgKCBkZWxheSA9PT0gdm9pZCAwICkgZGVsYXkgPSAwO1xuICB2YXIgZXJyb3JCYWdOYW1lID0gcmVmLmVycm9yQmFnTmFtZTsgaWYgKCBlcnJvckJhZ05hbWUgPT09IHZvaWQgMCApIGVycm9yQmFnTmFtZSA9ICdlcnJvcnMnO1xuICB2YXIgZGljdGlvbmFyeSA9IHJlZi5kaWN0aW9uYXJ5OyBpZiAoIGRpY3Rpb25hcnkgPT09IHZvaWQgMCApIGRpY3Rpb25hcnkgPSBudWxsO1xuICB2YXIgc3RyaWN0ID0gcmVmLnN0cmljdDsgaWYgKCBzdHJpY3QgPT09IHZvaWQgMCApIHN0cmljdCA9IHRydWU7XG4gIHZhciBmaWVsZHNCYWdOYW1lID0gcmVmLmZpZWxkc0JhZ05hbWU7IGlmICggZmllbGRzQmFnTmFtZSA9PT0gdm9pZCAwICkgZmllbGRzQmFnTmFtZSA9ICdmaWVsZHMnO1xuICB2YXIgZW5hYmxlQXV0b0NsYXNzZXMgPSByZWYuZW5hYmxlQXV0b0NsYXNzZXM7IGlmICggZW5hYmxlQXV0b0NsYXNzZXMgPT09IHZvaWQgMCApIGVuYWJsZUF1dG9DbGFzc2VzID0gZmFsc2U7XG4gIHZhciBjbGFzc05hbWVzID0gcmVmLmNsYXNzTmFtZXM7IGlmICggY2xhc3NOYW1lcyA9PT0gdm9pZCAwICkgY2xhc3NOYW1lcyA9IHt9O1xuXG4gIGlmIChkaWN0aW9uYXJ5KSB7XG4gICAgVmFsaWRhdG9yLnVwZGF0ZURpY3Rpb25hcnkoZGljdGlvbmFyeSk7XG4gIH1cblxuICBWYWxpZGF0b3Iuc2V0TG9jYWxlKGxvY2FsZSk7XG4gIFZhbGlkYXRvci5zZXRTdHJpY3RNb2RlKHN0cmljdCk7XG5cbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgZGVsYXk6IGRlbGF5LFxuICAgIGRpY3Rpb25hcnk6IGRpY3Rpb25hcnksXG4gICAgZXJyb3JCYWdOYW1lOiBlcnJvckJhZ05hbWUsXG4gICAgZmllbGRzQmFnTmFtZTogZmllbGRzQmFnTmFtZSxcbiAgICBlbmFibGVBdXRvQ2xhc3NlczogZW5hYmxlQXV0b0NsYXNzZXMsXG4gICAgY2xhc3NOYW1lczogYXNzaWduKHt9LCBERUZBVUxUX0NMQVNTX05BTUVTLCBjbGFzc05hbWVzKVxuICB9O1xuXG4gIFZ1ZS5taXhpbihtYWtlTWl4aW4oVnVlLCBvcHRpb25zKSk7XG4gIFZ1ZS5kaXJlY3RpdmUoJ3ZhbGlkYXRlJywgbWFrZURpcmVjdGl2ZShvcHRpb25zKSk7XG59O1xuXG52YXIgaW5kZXggPSB7XG4gIGluc3RhbGw6IGluc3RhbGwsXG4gIFZhbGlkYXRvcjogVmFsaWRhdG9yLFxuICBFcnJvckJhZzogRXJyb3JCYWcsXG4gIHZlcnNpb246ICcyLjAuMC1iZXRhLjIyJ1xufTtcblxucmV0dXJuIGluZGV4O1xuXG59KSkpO1xuIiwiLyohXG4qIGpxdWVyeS5pbnB1dG1hc2suYnVuZGxlLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvanF1ZXJ5LmlucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE2IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogMy4zLjRcbiovXG4hZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihkLGUpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgYj8oYS5pc1BsYWluT2JqZWN0KGQpP2U9ZDooZT1lfHx7fSxlLmFsaWFzPWQpLHRoaXMuZWw9dm9pZCAwLHRoaXMub3B0cz1hLmV4dGVuZCghMCx7fSx0aGlzLmRlZmF1bHRzLGUpLHRoaXMubWFza3NldD12b2lkIDAsdGhpcy5ub01hc2tzQ2FjaGU9ZSYmdm9pZCAwIT09ZS5kZWZpbml0aW9ucyx0aGlzLnVzZXJPcHRpb25zPWV8fHt9LHRoaXMuZXZlbnRzPXt9LHRoaXMuZGF0YUF0dHJpYnV0ZT1cImRhdGEtaW5wdXRtYXNrXCIsdGhpcy5pc1JUTD10aGlzLm9wdHMubnVtZXJpY0lucHV0LHZvaWQgYyh0aGlzLm9wdHMuYWxpYXMsZSx0aGlzLm9wdHMpKTpuZXcgYihkLGUpfWZ1bmN0aW9uIGMoYixkLGUpe3ZhciBmPWUuYWxpYXNlc1tiXTtyZXR1cm4gZj8oZi5hbGlhcyYmYyhmLmFsaWFzLHZvaWQgMCxlKSxhLmV4dGVuZCghMCxlLGYpLGEuZXh0ZW5kKCEwLGUsZCksITApOihudWxsPT09ZS5tYXNrJiYoZS5tYXNrPWIpLCExKX1mdW5jdGlvbiBkKGMsZCl7ZnVuY3Rpb24gZShjLGUsZil7aWYobnVsbCE9PWMmJlwiXCIhPT1jKXtpZigxPT09Yy5sZW5ndGgmJmYuZ3JlZWR5PT09ITEmJjAhPT1mLnJlcGVhdCYmKGYucGxhY2Vob2xkZXI9XCJcIiksZi5yZXBlYXQ+MHx8XCIqXCI9PT1mLnJlcGVhdHx8XCIrXCI9PT1mLnJlcGVhdCl7dmFyIGc9XCIqXCI9PT1mLnJlcGVhdD8wOlwiK1wiPT09Zi5yZXBlYXQ/MTpmLnJlcGVhdDtjPWYuZ3JvdXBtYXJrZXIuc3RhcnQrYytmLmdyb3VwbWFya2VyLmVuZCtmLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQrZytcIixcIitmLnJlcGVhdCtmLnF1YW50aWZpZXJtYXJrZXIuZW5kfXZhciBoO3JldHVybiB2b2lkIDA9PT1iLnByb3RvdHlwZS5tYXNrc0NhY2hlW2NdfHxkPT09ITA/KGg9e21hc2s6YyxtYXNrVG9rZW46Yi5wcm90b3R5cGUuYW5hbHlzZU1hc2soYyxmKSx2YWxpZFBvc2l0aW9uczp7fSxfYnVmZmVyOnZvaWQgMCxidWZmZXI6dm9pZCAwLHRlc3RzOnt9LG1ldGFkYXRhOmUsbWFza0xlbmd0aDp2b2lkIDB9LGQhPT0hMCYmKGIucHJvdG90eXBlLm1hc2tzQ2FjaGVbZi5udW1lcmljSW5wdXQ/Yy5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTpjXT1oLGg9YS5leHRlbmQoITAse30sYi5wcm90b3R5cGUubWFza3NDYWNoZVtmLm51bWVyaWNJbnB1dD9jLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpOmNdKSkpOmg9YS5leHRlbmQoITAse30sYi5wcm90b3R5cGUubWFza3NDYWNoZVtmLm51bWVyaWNJbnB1dD9jLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpOmNdKSxofX12YXIgZjtpZihhLmlzRnVuY3Rpb24oYy5tYXNrKSYmKGMubWFzaz1jLm1hc2soYykpLGEuaXNBcnJheShjLm1hc2spKXtpZihjLm1hc2subGVuZ3RoPjEpe2Mua2VlcFN0YXRpYz1udWxsPT09Yy5rZWVwU3RhdGljfHxjLmtlZXBTdGF0aWM7dmFyIGc9Yy5ncm91cG1hcmtlci5zdGFydDtyZXR1cm4gYS5lYWNoKGMubnVtZXJpY0lucHV0P2MubWFzay5yZXZlcnNlKCk6Yy5tYXNrLGZ1bmN0aW9uKGIsZCl7Zy5sZW5ndGg+MSYmKGcrPWMuZ3JvdXBtYXJrZXIuZW5kK2MuYWx0ZXJuYXRvcm1hcmtlcitjLmdyb3VwbWFya2VyLnN0YXJ0KSxnKz12b2lkIDA9PT1kLm1hc2t8fGEuaXNGdW5jdGlvbihkLm1hc2spP2Q6ZC5tYXNrfSksZys9Yy5ncm91cG1hcmtlci5lbmQsZShnLGMubWFzayxjKX1jLm1hc2s9Yy5tYXNrLnBvcCgpfXJldHVybiBjLm1hc2smJihmPXZvaWQgMD09PWMubWFzay5tYXNrfHxhLmlzRnVuY3Rpb24oYy5tYXNrLm1hc2spP2UoYy5tYXNrLGMubWFzayxjKTplKGMubWFzay5tYXNrLGMubWFzayxjKSksZn1mdW5jdGlvbiBlKGMsZCxmKXtmdW5jdGlvbiBrKGEsYixjKXtiPWJ8fDA7dmFyIGQsZSxnLGg9W10saT0wLGo9bigpO1M9dm9pZCAwIT09Vj9WLm1heExlbmd0aDp2b2lkIDAsUz09PS0xJiYoUz12b2lkIDApO2RvIGE9PT0hMCYmbCgpLnZhbGlkUG9zaXRpb25zW2ldPyhnPWwoKS52YWxpZFBvc2l0aW9uc1tpXSxlPWcubWF0Y2gsZD1nLmxvY2F0b3Iuc2xpY2UoKSxoLnB1c2goYz09PSEwP2cuaW5wdXQ6Yz09PSExP2UubmF0aXZlRGVmOkYoaSxlKSkpOihnPXEoaSxkLGktMSksZT1nLm1hdGNoLGQ9Zy5sb2NhdG9yLnNsaWNlKCksKGYuaml0TWFza2luZz09PSExfHxpPGp8fFwibnVtYmVyXCI9PXR5cGVvZiBmLmppdE1hc2tpbmcmJmlzRmluaXRlKGYuaml0TWFza2luZykmJmYuaml0TWFza2luZz5pKSYmaC5wdXNoKGM9PT0hMT9lLm5hdGl2ZURlZjpGKGksZSkpKSxpKys7d2hpbGUoKHZvaWQgMD09PVN8fGk8UykmJihudWxsIT09ZS5mbnx8XCJcIiE9PWUuZGVmKXx8Yj5pKTtyZXR1cm5cIlwiPT09aFtoLmxlbmd0aC0xXSYmaC5wb3AoKSxsKCkubWFza0xlbmd0aD1pKzEsaH1mdW5jdGlvbiBsKCl7cmV0dXJuIGR9ZnVuY3Rpb24gbShhKXt2YXIgYj1sKCk7Yi5idWZmZXI9dm9pZCAwLGEhPT0hMCYmKGIuX2J1ZmZlcj12b2lkIDAsYi52YWxpZFBvc2l0aW9ucz17fSxiLnA9MCl9ZnVuY3Rpb24gbihhLGIsYyl7dmFyIGQ9LTEsZT0tMSxmPWN8fGwoKS52YWxpZFBvc2l0aW9uczt2b2lkIDA9PT1hJiYoYT0tMSk7Zm9yKHZhciBnIGluIGYpe3ZhciBoPXBhcnNlSW50KGcpO2ZbaF0mJihifHxudWxsIT09ZltoXS5tYXRjaC5mbikmJihoPD1hJiYoZD1oKSxoPj1hJiYoZT1oKSl9cmV0dXJuIGQhPT0tMSYmYS1kPjF8fGU8YT9kOmV9ZnVuY3Rpb24gbyhiLGMsZCxlKXtmdW5jdGlvbiBnKGEpe3ZhciBiPWwoKS52YWxpZFBvc2l0aW9uc1thXTtpZih2b2lkIDAhPT1iJiZudWxsPT09Yi5tYXRjaC5mbil7dmFyIGM9bCgpLnZhbGlkUG9zaXRpb25zW2EtMV0sZD1sKCkudmFsaWRQb3NpdGlvbnNbYSsxXTtyZXR1cm4gdm9pZCAwIT09YyYmdm9pZCAwIT09ZH1yZXR1cm4hMX12YXIgaCxpPWIsaj1hLmV4dGVuZCghMCx7fSxsKCkudmFsaWRQb3NpdGlvbnMpLGs9ITE7Zm9yKGwoKS5wPWIsaD1jLTE7aD49aTtoLS0pdm9pZCAwIT09bCgpLnZhbGlkUG9zaXRpb25zW2hdJiYoZCE9PSEwJiYoIWwoKS52YWxpZFBvc2l0aW9uc1toXS5tYXRjaC5vcHRpb25hbGl0eSYmZyhoKXx8Zi5jYW5DbGVhclBvc2l0aW9uKGwoKSxoLG4oKSxlLGYpPT09ITEpfHxkZWxldGUgbCgpLnZhbGlkUG9zaXRpb25zW2hdKTtmb3IobSghMCksaD1pKzE7aDw9bigpOyl7Zm9yKDt2b2lkIDAhPT1sKCkudmFsaWRQb3NpdGlvbnNbaV07KWkrKztpZihoPGkmJihoPWkrMSksdm9pZCAwPT09bCgpLnZhbGlkUG9zaXRpb25zW2hdJiZBKGgpKWgrKztlbHNle3ZhciBvPXEoaCk7az09PSExJiZqW2ldJiZqW2ldLm1hdGNoLmRlZj09PW8ubWF0Y2guZGVmPyhsKCkudmFsaWRQb3NpdGlvbnNbaV09YS5leHRlbmQoITAse30saltpXSksbCgpLnZhbGlkUG9zaXRpb25zW2ldLmlucHV0PW8uaW5wdXQsZGVsZXRlIGwoKS52YWxpZFBvc2l0aW9uc1toXSxoKyspOnMoaSxvLm1hdGNoLmRlZik/eihpLG8uaW5wdXR8fEYoaCksITApIT09ITEmJihkZWxldGUgbCgpLnZhbGlkUG9zaXRpb25zW2hdLGgrKyxrPSEwKTpBKGgpfHwoaCsrLGktLSksaSsrfX1tKCEwKX1mdW5jdGlvbiBwKGEsYil7Zm9yKHZhciBjLGQ9YSxlPW4oKSxnPWwoKS52YWxpZFBvc2l0aW9uc1tlXXx8dCgwKVswXSxoPXZvaWQgMCE9PWcuYWx0ZXJuYXRpb24/Zy5sb2NhdG9yW2cuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpOltdLGk9MDtpPGQubGVuZ3RoJiYoYz1kW2ldLCEoYy5tYXRjaCYmKGYuZ3JlZWR5JiZjLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciE9PSEwfHwoYy5tYXRjaC5vcHRpb25hbGl0eT09PSExfHxjLm1hdGNoLm5ld0Jsb2NrTWFya2VyPT09ITEpJiZjLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciE9PSEwKSYmKHZvaWQgMD09PWcuYWx0ZXJuYXRpb258fGcuYWx0ZXJuYXRpb24hPT1jLmFsdGVybmF0aW9ufHx2b2lkIDAhPT1jLmxvY2F0b3JbZy5hbHRlcm5hdGlvbl0mJnkoYy5sb2NhdG9yW2cuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLGgpKSl8fGI9PT0hMCYmKG51bGwhPT1jLm1hdGNoLmZufHwvWzAtOWEtYkEtWl0vLnRlc3QoYy5tYXRjaC5kZWYpKSk7aSsrKTtyZXR1cm4gY31mdW5jdGlvbiBxKGEsYixjKXtyZXR1cm4gbCgpLnZhbGlkUG9zaXRpb25zW2FdfHxwKHQoYSxiP2Iuc2xpY2UoKTpiLGMpKX1mdW5jdGlvbiByKGEpe3JldHVybiBsKCkudmFsaWRQb3NpdGlvbnNbYV0/bCgpLnZhbGlkUG9zaXRpb25zW2FdOnQoYSlbMF19ZnVuY3Rpb24gcyhhLGIpe2Zvcih2YXIgYz0hMSxkPXQoYSksZT0wO2U8ZC5sZW5ndGg7ZSsrKWlmKGRbZV0ubWF0Y2gmJmRbZV0ubWF0Y2guZGVmPT09Yil7Yz0hMDticmVha31yZXR1cm4gY31mdW5jdGlvbiB0KGIsYyxkKXtmdW5jdGlvbiBlKGMsZCxnLGgpe2Z1bmN0aW9uIGooZyxoLG0pe2Z1bmN0aW9uIHAoYixjKXt2YXIgZD0wPT09YS5pbkFycmF5KGIsYy5tYXRjaGVzKTtyZXR1cm4gZHx8YS5lYWNoKGMubWF0Y2hlcyxmdW5jdGlvbihhLGUpe2lmKGUuaXNRdWFudGlmaWVyPT09ITAmJihkPXAoYixjLm1hdGNoZXNbYS0xXSkpKXJldHVybiExfSksZH1mdW5jdGlvbiByKGIsYyxkKXt2YXIgZSxmO3JldHVybihsKCkudGVzdHNbYl18fGwoKS52YWxpZFBvc2l0aW9uc1tiXSkmJmEuZWFjaChsKCkudGVzdHNbYl18fFtsKCkudmFsaWRQb3NpdGlvbnNbYl1dLGZ1bmN0aW9uKGEsYil7dmFyIGc9dm9pZCAwIT09ZD9kOmIuYWx0ZXJuYXRpb24saD12b2lkIDAhPT1iLmxvY2F0b3JbZ10/Yi5sb2NhdG9yW2ddLnRvU3RyaW5nKCkuaW5kZXhPZihjKTotMTsodm9pZCAwPT09Znx8aDxmKSYmaCE9PS0xJiYoZT1iLGY9aCl9KSxlP2UubG9jYXRvci5zbGljZSgodm9pZCAwIT09ZD9kOmUuYWx0ZXJuYXRpb24pKzEpOnZvaWQgMCE9PWQ/cihiLGMpOnZvaWQgMH1mdW5jdGlvbiBzKGEsYyl7cmV0dXJuIG51bGw9PT1hLm1hdGNoLmZuJiZudWxsIT09Yy5tYXRjaC5mbiYmYy5tYXRjaC5mbi50ZXN0KGEubWF0Y2guZGVmLGwoKSxiLCExLGYsITEpfWlmKGs+MWU0KXRocm93XCJJbnB1dG1hc2s6IFRoZXJlIGlzIHByb2JhYmx5IGFuIGVycm9yIGluIHlvdXIgbWFzayBkZWZpbml0aW9uIG9yIGluIHRoZSBjb2RlLiBDcmVhdGUgYW4gaXNzdWUgb24gZ2l0aHViIHdpdGggYW4gZXhhbXBsZSBvZiB0aGUgbWFzayB5b3UgYXJlIHVzaW5nLiBcIitsKCkubWFzaztpZihrPT09YiYmdm9pZCAwPT09Zy5tYXRjaGVzKXJldHVybiBuLnB1c2goe21hdGNoOmcsbG9jYXRvcjpoLnJldmVyc2UoKSxjZDpxfSksITA7aWYodm9pZCAwIT09Zy5tYXRjaGVzKXtpZihnLmlzR3JvdXAmJm0hPT1nKXtpZihnPWooYy5tYXRjaGVzW2EuaW5BcnJheShnLGMubWF0Y2hlcykrMV0saCkpcmV0dXJuITB9ZWxzZSBpZihnLmlzT3B0aW9uYWwpe3ZhciB0PWc7aWYoZz1lKGcsZCxoLG0pKXtpZihpPW5bbi5sZW5ndGgtMV0ubWF0Y2gsIXAoaSx0KSlyZXR1cm4hMDtvPSEwLGs9Yn19ZWxzZSBpZihnLmlzQWx0ZXJuYXRvcil7dmFyIHUsdj1nLHc9W10seD1uLnNsaWNlKCkseT1oLmxlbmd0aCx6PWQubGVuZ3RoPjA/ZC5zaGlmdCgpOi0xO2lmKHo9PT0tMXx8XCJzdHJpbmdcIj09dHlwZW9mIHope3ZhciBBLEI9ayxDPWQuc2xpY2UoKSxEPVtdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB6KUQ9ei5zcGxpdChcIixcIik7ZWxzZSBmb3IoQT0wO0E8di5tYXRjaGVzLmxlbmd0aDtBKyspRC5wdXNoKEEpO2Zvcih2YXIgRT0wO0U8RC5sZW5ndGg7RSsrKXtpZihBPXBhcnNlSW50KERbRV0pLG49W10sZD1yKGssQSx5KXx8Qy5zbGljZSgpLGc9aih2Lm1hdGNoZXNbQV18fGMubWF0Y2hlc1tBXSxbQV0uY29uY2F0KGgpLG0pfHxnLGchPT0hMCYmdm9pZCAwIT09ZyYmRFtELmxlbmd0aC0xXTx2Lm1hdGNoZXMubGVuZ3RoKXt2YXIgRj1hLmluQXJyYXkoZyxjLm1hdGNoZXMpKzE7Yy5tYXRjaGVzLmxlbmd0aD5GJiYoZz1qKGMubWF0Y2hlc1tGXSxbRl0uY29uY2F0KGguc2xpY2UoMSxoLmxlbmd0aCkpLG0pLGcmJihELnB1c2goRi50b1N0cmluZygpKSxhLmVhY2gobixmdW5jdGlvbihhLGIpe2IuYWx0ZXJuYXRpb249aC5sZW5ndGgtMX0pKSl9dT1uLnNsaWNlKCksaz1CLG49W107Zm9yKHZhciBHPTA7Rzx1Lmxlbmd0aDtHKyspe3ZhciBIPXVbR10sST0hMTtILmFsdGVybmF0aW9uPUguYWx0ZXJuYXRpb258fHk7Zm9yKHZhciBKPTA7Sjx3Lmxlbmd0aDtKKyspe3ZhciBLPXdbSl07aWYoKFwic3RyaW5nXCIhPXR5cGVvZiB6fHxhLmluQXJyYXkoSC5sb2NhdG9yW0guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksRCkhPT0tMSkmJihILm1hdGNoLmRlZj09PUsubWF0Y2guZGVmfHxzKEgsSykpKXtJPUgubWF0Y2gubmF0aXZlRGVmPT09Sy5tYXRjaC5uYXRpdmVEZWYsSC5hbHRlcm5hdGlvbj09Sy5hbHRlcm5hdGlvbiYmSy5sb2NhdG9yW0suYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuaW5kZXhPZihILmxvY2F0b3JbSC5hbHRlcm5hdGlvbl0pPT09LTEmJihLLmxvY2F0b3JbSy5hbHRlcm5hdGlvbl09Sy5sb2NhdG9yW0suYWx0ZXJuYXRpb25dK1wiLFwiK0gubG9jYXRvcltILmFsdGVybmF0aW9uXSxLLmFsdGVybmF0aW9uPUguYWx0ZXJuYXRpb24sbnVsbD09SC5tYXRjaC5mbiYmKEsubmE9Sy5uYXx8SC5sb2NhdG9yW0guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksSy5uYS5pbmRleE9mKEgubG9jYXRvcltILmFsdGVybmF0aW9uXSk9PT0tMSYmKEsubmE9Sy5uYStcIixcIitILmxvY2F0b3JbSC5hbHRlcm5hdGlvbl0pKSk7YnJlYWt9fUl8fHcucHVzaChIKX19XCJzdHJpbmdcIj09dHlwZW9mIHomJih3PWEubWFwKHcsZnVuY3Rpb24oYixjKXtpZihpc0Zpbml0ZShjKSl7dmFyIGQsZT1iLmFsdGVybmF0aW9uLGY9Yi5sb2NhdG9yW2VdLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO2IubG9jYXRvcltlXT12b2lkIDAsYi5hbHRlcm5hdGlvbj12b2lkIDA7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspZD1hLmluQXJyYXkoZltnXSxEKSE9PS0xLGQmJih2b2lkIDAhPT1iLmxvY2F0b3JbZV0/KGIubG9jYXRvcltlXSs9XCIsXCIsYi5sb2NhdG9yW2VdKz1mW2ddKTpiLmxvY2F0b3JbZV09cGFyc2VJbnQoZltnXSksYi5hbHRlcm5hdGlvbj1lKTtpZih2b2lkIDAhPT1iLmxvY2F0b3JbZV0pcmV0dXJuIGJ9fSkpLG49eC5jb25jYXQodyksaz1iLG89bi5sZW5ndGg+MCxkPUMuc2xpY2UoKX1lbHNlIGc9aih2Lm1hdGNoZXNbel18fGMubWF0Y2hlc1t6XSxbel0uY29uY2F0KGgpLG0pO2lmKGcpcmV0dXJuITB9ZWxzZSBpZihnLmlzUXVhbnRpZmllciYmbSE9PWMubWF0Y2hlc1thLmluQXJyYXkoZyxjLm1hdGNoZXMpLTFdKWZvcih2YXIgTD1nLE09ZC5sZW5ndGg+MD9kLnNoaWZ0KCk6MDtNPChpc05hTihMLnF1YW50aWZpZXIubWF4KT9NKzE6TC5xdWFudGlmaWVyLm1heCkmJms8PWI7TSsrKXt2YXIgTj1jLm1hdGNoZXNbYS5pbkFycmF5KEwsYy5tYXRjaGVzKS0xXTtpZihnPWooTixbTV0uY29uY2F0KGgpLE4pKXtpZihpPW5bbi5sZW5ndGgtMV0ubWF0Y2gsaS5vcHRpb25hbFF1YW50aWZpZXI9TT5MLnF1YW50aWZpZXIubWluLTEscChpLE4pKXtpZihNPkwucXVhbnRpZmllci5taW4tMSl7bz0hMCxrPWI7YnJlYWt9cmV0dXJuITB9cmV0dXJuITB9fWVsc2UgaWYoZz1lKGcsZCxoLG0pKXJldHVybiEwfWVsc2UgaysrfWZvcih2YXIgbT1kLmxlbmd0aD4wP2Quc2hpZnQoKTowO208Yy5tYXRjaGVzLmxlbmd0aDttKyspaWYoYy5tYXRjaGVzW21dLmlzUXVhbnRpZmllciE9PSEwKXt2YXIgcD1qKGMubWF0Y2hlc1ttXSxbbV0uY29uY2F0KGcpLGgpO2lmKHAmJms9PT1iKXJldHVybiBwO2lmKGs+YilicmVha319ZnVuY3Rpb24gZyhiKXt2YXIgYz1bXTtyZXR1cm4gYS5pc0FycmF5KGIpfHwoYj1bYl0pLGIubGVuZ3RoPjAmJih2b2lkIDA9PT1iWzBdLmFsdGVybmF0aW9uPyhjPXAoYi5zbGljZSgpKS5sb2NhdG9yLnNsaWNlKCksMD09PWMubGVuZ3RoJiYoYz1iWzBdLmxvY2F0b3Iuc2xpY2UoKSkpOmEuZWFjaChiLGZ1bmN0aW9uKGEsYil7aWYoXCJcIiE9PWIuZGVmKWlmKDA9PT1jLmxlbmd0aCljPWIubG9jYXRvci5zbGljZSgpO2Vsc2UgZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspYi5sb2NhdG9yW2RdJiZjW2RdLnRvU3RyaW5nKCkuaW5kZXhPZihiLmxvY2F0b3JbZF0pPT09LTEmJihjW2RdKz1cIixcIitiLmxvY2F0b3JbZF0pfSkpLGN9ZnVuY3Rpb24gaChhKXtyZXR1cm4gZi5rZWVwU3RhdGljJiZiPjAmJmEubGVuZ3RoPjErKFwiXCI9PT1hW2EubGVuZ3RoLTFdLm1hdGNoLmRlZj8xOjApJiZhWzBdLm1hdGNoLm9wdGlvbmFsaXR5IT09ITAmJmFbMF0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyIT09ITAmJm51bGw9PT1hWzBdLm1hdGNoLmZuJiYhL1swLTlhLWJBLVpdLy50ZXN0KGFbMF0ubWF0Y2guZGVmKT9bcChhKV06YX12YXIgaSxqPWwoKS5tYXNrVG9rZW4saz1jP2Q6MCxtPWM/Yy5zbGljZSgpOlswXSxuPVtdLG89ITEscT1jP2Muam9pbihcIlwiKTpcIlwiO2lmKGI+LTEpe2lmKHZvaWQgMD09PWMpe2Zvcih2YXIgcixzPWItMTt2b2lkIDA9PT0ocj1sKCkudmFsaWRQb3NpdGlvbnNbc118fGwoKS50ZXN0c1tzXSkmJnM+LTE7KXMtLTt2b2lkIDAhPT1yJiZzPi0xJiYobT1nKHIpLHE9bS5qb2luKFwiXCIpLGs9cyl9aWYobCgpLnRlc3RzW2JdJiZsKCkudGVzdHNbYl1bMF0uY2Q9PT1xKXJldHVybiBoKGwoKS50ZXN0c1tiXSk7Zm9yKHZhciB0PW0uc2hpZnQoKTt0PGoubGVuZ3RoO3QrKyl7dmFyIHU9ZShqW3RdLG0sW3RdKTtpZih1JiZrPT09Ynx8az5iKWJyZWFrfX1yZXR1cm4oMD09PW4ubGVuZ3RofHxvKSYmbi5wdXNoKHttYXRjaDp7Zm46bnVsbCxjYXJkaW5hbGl0eTowLG9wdGlvbmFsaXR5OiEwLGNhc2luZzpudWxsLGRlZjpcIlwiLHBsYWNlaG9sZGVyOlwiXCJ9LGxvY2F0b3I6W10sY2Q6cX0pLHZvaWQgMCE9PWMmJmwoKS50ZXN0c1tiXT9oKGEuZXh0ZW5kKCEwLFtdLG4pKToobCgpLnRlc3RzW2JdPWEuZXh0ZW5kKCEwLFtdLG4pLGgobCgpLnRlc3RzW2JdKSl9ZnVuY3Rpb24gdSgpe3JldHVybiB2b2lkIDA9PT1sKCkuX2J1ZmZlciYmKGwoKS5fYnVmZmVyPWsoITEsMSksdm9pZCAwPT09bCgpLmJ1ZmZlciYmbCgpLl9idWZmZXIuc2xpY2UoKSksbCgpLl9idWZmZXJ9ZnVuY3Rpb24gdihhKXtyZXR1cm4gdm9pZCAwIT09bCgpLmJ1ZmZlciYmYSE9PSEwfHwobCgpLmJ1ZmZlcj1rKCEwLG4oKSwhMCkpLGwoKS5idWZmZXJ9ZnVuY3Rpb24gdyhhLGIsYyl7dmFyIGQ7aWYoYT09PSEwKW0oKSxhPTAsYj1jLmxlbmd0aDtlbHNlIGZvcihkPWE7ZDxiO2QrKylkZWxldGUgbCgpLnZhbGlkUG9zaXRpb25zW2RdO2ZvcihkPWE7ZDxiO2QrKyltKCEwKSxjW2RdIT09Zi5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyJiZ6KGQsY1tkXSwhMCwhMCl9ZnVuY3Rpb24geChhLGMsZCl7c3dpdGNoKGYuY2FzaW5nfHxjLmNhc2luZyl7Y2FzZVwidXBwZXJcIjphPWEudG9VcHBlckNhc2UoKTticmVhaztjYXNlXCJsb3dlclwiOmE9YS50b0xvd2VyQ2FzZSgpO2JyZWFrO2Nhc2VcInRpdGxlXCI6dmFyIGU9bCgpLnZhbGlkUG9zaXRpb25zW2QtMV07YT0wPT09ZHx8ZSYmZS5pbnB1dD09PVN0cmluZy5mcm9tQ2hhckNvZGUoYi5rZXlDb2RlLlNQQUNFKT9hLnRvVXBwZXJDYXNlKCk6YS50b0xvd2VyQ2FzZSgpfXJldHVybiBhfWZ1bmN0aW9uIHkoYixjKXtmb3IodmFyIGQ9Zi5ncmVlZHk/YzpjLnNsaWNlKDAsMSksZT0hMSxnPTA7ZzxiLmxlbmd0aDtnKyspaWYoYS5pbkFycmF5KGJbZ10sZCkhPT0tMSl7ZT0hMDticmVha31yZXR1cm4gZX1mdW5jdGlvbiB6KGMsZCxlLGcsaCl7ZnVuY3Rpb24gaShhKXt2YXIgYj1XP2EuYmVnaW4tYS5lbmQ+MXx8YS5iZWdpbi1hLmVuZD09PTEmJmYuaW5zZXJ0TW9kZTphLmVuZC1hLmJlZ2luPjF8fGEuZW5kLWEuYmVnaW49PT0xJiZmLmluc2VydE1vZGU7cmV0dXJuIGImJjA9PT1hLmJlZ2luJiZhLmVuZD09PWwoKS5tYXNrTGVuZ3RoP1wiZnVsbFwiOmJ9ZnVuY3Rpb24gaihiLGQsZSl7dmFyIGg9ITE7cmV0dXJuIGEuZWFjaCh0KGIpLGZ1bmN0aW9uKGosayl7Zm9yKHZhciBwPWsubWF0Y2gscT1kPzE6MCxyPVwiXCIscz1wLmNhcmRpbmFsaXR5O3M+cTtzLS0pcis9RChiLShzLTEpKTtpZihkJiYocis9ZCksdighMCksaD1udWxsIT1wLmZuP3AuZm4udGVzdChyLGwoKSxiLGUsZixpKGMpKTooZD09PXAuZGVmfHxkPT09Zi5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSYmXCJcIiE9PXAuZGVmJiZ7YzpwLnBsYWNlaG9sZGVyfHxwLmRlZixwb3M6Yn0saCE9PSExKXt2YXIgdD12b2lkIDAhPT1oLmM/aC5jOmQ7dD10PT09Zi5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyJiZudWxsPT09cC5mbj9wLnBsYWNlaG9sZGVyfHxwLmRlZjp0O3ZhciB5PWIsQT12KCk7aWYodm9pZCAwIT09aC5yZW1vdmUmJihhLmlzQXJyYXkoaC5yZW1vdmUpfHwoaC5yZW1vdmU9W2gucmVtb3ZlXSksYS5lYWNoKGgucmVtb3ZlLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi1hfSksZnVuY3Rpb24oYSxiKXtvKGIsYisxLCEwKX0pKSx2b2lkIDAhPT1oLmluc2VydCYmKGEuaXNBcnJheShoLmluc2VydCl8fChoLmluc2VydD1baC5pbnNlcnRdKSxhLmVhY2goaC5pbnNlcnQuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhLWJ9KSxmdW5jdGlvbihhLGIpe3ooYi5wb3MsYi5jLCEwLGcpfSkpLGgucmVmcmVzaEZyb21CdWZmZXIpe3ZhciBCPWgucmVmcmVzaEZyb21CdWZmZXI7aWYoZT0hMCx3KEI9PT0hMD9COkIuc3RhcnQsQi5lbmQsQSksdm9pZCAwPT09aC5wb3MmJnZvaWQgMD09PWguYylyZXR1cm4gaC5wb3M9bigpLCExO2lmKHk9dm9pZCAwIT09aC5wb3M/aC5wb3M6Yix5IT09YilyZXR1cm4gaD1hLmV4dGVuZChoLHooeSx0LCEwLGcpKSwhMX1lbHNlIGlmKGghPT0hMCYmdm9pZCAwIT09aC5wb3MmJmgucG9zIT09YiYmKHk9aC5wb3MsdyhiLHksdigpLnNsaWNlKCkpLHkhPT1iKSlyZXR1cm4gaD1hLmV4dGVuZChoLHooeSx0LCEwKSksITE7cmV0dXJuKGg9PT0hMHx8dm9pZCAwIT09aC5wb3N8fHZvaWQgMCE9PWguYykmJihqPjAmJm0oITApLHUoeSxhLmV4dGVuZCh7fSxrLHtpbnB1dDp4KHQscCx5KX0pLGcsaShjKSl8fChoPSExKSwhMSl9fSksaH1mdW5jdGlvbiBrKGIsYyxkKXt2YXIgZSxoLGksaixrLG8scCxxLHI9YS5leHRlbmQoITAse30sbCgpLnZhbGlkUG9zaXRpb25zKSxzPSExLHU9bigpO2ZvcihqPWwoKS52YWxpZFBvc2l0aW9uc1t1XTt1Pj0wO3UtLSlpZihpPWwoKS52YWxpZFBvc2l0aW9uc1t1XSxpJiZ2b2lkIDAhPT1pLmFsdGVybmF0aW9uKXtpZihlPXUsaD1sKCkudmFsaWRQb3NpdGlvbnNbZV0uYWx0ZXJuYXRpb24sai5sb2NhdG9yW2kuYWx0ZXJuYXRpb25dIT09aS5sb2NhdG9yW2kuYWx0ZXJuYXRpb25dKWJyZWFrO2o9aX1pZih2b2lkIDAhPT1oKXtxPXBhcnNlSW50KGUpO3ZhciB2PXZvaWQgMCE9PWoubG9jYXRvcltqLmFsdGVybmF0aW9ufHxoXT9qLmxvY2F0b3Jbai5hbHRlcm5hdGlvbnx8aF06cFswXTt2Lmxlbmd0aD4wJiYodj12LnNwbGl0KFwiLFwiKVswXSk7dmFyIHc9bCgpLnZhbGlkUG9zaXRpb25zW3FdLHg9bCgpLnZhbGlkUG9zaXRpb25zW3EtMV07YS5lYWNoKHQocSx4P3gubG9jYXRvcjp2b2lkIDAscS0xKSxmdW5jdGlvbihlLGkpe3A9aS5sb2NhdG9yW2hdP2kubG9jYXRvcltoXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKTpbXTtmb3IodmFyIGo9MDtqPHAubGVuZ3RoO2orKyl7dmFyIHQ9W10sdT0wLHg9MCx5PSExO2lmKHY8cFtqXSYmKHZvaWQgMD09PWkubmF8fGEuaW5BcnJheShwW2pdLGkubmEuc3BsaXQoXCIsXCIpKT09PS0xKSl7bCgpLnZhbGlkUG9zaXRpb25zW3FdPWEuZXh0ZW5kKCEwLHt9LGkpO3ZhciBBPWwoKS52YWxpZFBvc2l0aW9uc1txXS5sb2NhdG9yO2ZvcihsKCkudmFsaWRQb3NpdGlvbnNbcV0ubG9jYXRvcltoXT1wYXJzZUludChwW2pdKSxudWxsPT1pLm1hdGNoLmZuPyh3LmlucHV0IT09aS5tYXRjaC5kZWYmJih5PSEwLHcuZ2VuZXJhdGVkSW5wdXQhPT0hMCYmdC5wdXNoKHcuaW5wdXQpKSx4KyssbCgpLnZhbGlkUG9zaXRpb25zW3FdLmdlbmVyYXRlZElucHV0PSEvWzAtOWEtYkEtWl0vLnRlc3QoaS5tYXRjaC5kZWYpLGwoKS52YWxpZFBvc2l0aW9uc1txXS5pbnB1dD1pLm1hdGNoLmRlZik6bCgpLnZhbGlkUG9zaXRpb25zW3FdLmlucHV0PXcuaW5wdXQsaz1xKzE7azxuKHZvaWQgMCwhMCkrMTtrKyspbz1sKCkudmFsaWRQb3NpdGlvbnNba10sbyYmby5nZW5lcmF0ZWRJbnB1dCE9PSEwJiYvWzAtOWEtYkEtWl0vLnRlc3Qoby5pbnB1dCk/dC5wdXNoKG8uaW5wdXQpOms8YiYmdSsrLGRlbGV0ZSBsKCkudmFsaWRQb3NpdGlvbnNba107Zm9yKHkmJnRbMF09PT1pLm1hdGNoLmRlZiYmdC5zaGlmdCgpLG0oITApLHM9ITA7dC5sZW5ndGg+MDspe3ZhciBCPXQuc2hpZnQoKTtpZihCIT09Zi5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyJiYhKHM9eihuKHZvaWQgMCwhMCkrMSxCLCExLGcsITApKSlicmVha31pZihzKXtsKCkudmFsaWRQb3NpdGlvbnNbcV0ubG9jYXRvcj1BO3ZhciBDPW4oYikrMTtmb3Ioaz1xKzE7azxuKCkrMTtrKyspbz1sKCkudmFsaWRQb3NpdGlvbnNba10sKHZvaWQgMD09PW98fG51bGw9PW8ubWF0Y2guZm4pJiZrPGIrKHgtdSkmJngrKztiKz14LXUscz16KGI+Qz9DOmIsYyxkLGcsITApfWlmKHMpcmV0dXJuITE7bSgpLGwoKS52YWxpZFBvc2l0aW9ucz1hLmV4dGVuZCghMCx7fSxyKX19fSl9cmV0dXJuIHN9ZnVuY3Rpb24gcihiLGMpe3ZhciBkPWwoKS52YWxpZFBvc2l0aW9uc1tjXTtpZihkKWZvcih2YXIgZT1kLmxvY2F0b3IsZj1lLmxlbmd0aCxnPWI7ZzxjO2crKylpZih2b2lkIDA9PT1sKCkudmFsaWRQb3NpdGlvbnNbZ10mJiFBKGcsITApKXt2YXIgaD10KGcpLGk9aFswXSxqPS0xO2EuZWFjaChoLGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7YzxmJiYodm9pZCAwIT09Yi5sb2NhdG9yW2NdJiZ5KGIubG9jYXRvcltjXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSxlW2NdLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpKSk7YysrKWo8YyYmKGo9YyxpPWIpfSksdShnLGEuZXh0ZW5kKHt9LGkse2lucHV0OmkubWF0Y2gucGxhY2Vob2xkZXJ8fGkubWF0Y2guZGVmfSksITApfX1mdW5jdGlvbiB1KGIsYyxkLGUpe2lmKGV8fGYuaW5zZXJ0TW9kZSYmdm9pZCAwIT09bCgpLnZhbGlkUG9zaXRpb25zW2JdJiZ2b2lkIDA9PT1kKXt2YXIgZyxoPWEuZXh0ZW5kKCEwLHt9LGwoKS52YWxpZFBvc2l0aW9ucyksaT1uKHZvaWQgMCwhMCk7Zm9yKGc9YjtnPD1pO2crKylkZWxldGUgbCgpLnZhbGlkUG9zaXRpb25zW2ddO2woKS52YWxpZFBvc2l0aW9uc1tiXT1hLmV4dGVuZCghMCx7fSxjKTt2YXIgaixrPSEwLG89bCgpLnZhbGlkUG9zaXRpb25zLHA9ITEscT1sKCkubWFza0xlbmd0aDtmb3IoZz1qPWI7Zzw9aTtnKyspe3ZhciByPWhbZ107aWYodm9pZCAwIT09cilmb3IodmFyIHQ9ajt0PGwoKS5tYXNrTGVuZ3RoJiYobnVsbD09PXIubWF0Y2guZm4mJm9bZ10mJihvW2ddLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcj09PSEwfHxvW2ddLm1hdGNoLm9wdGlvbmFsaXR5PT09ITApfHxudWxsIT1yLm1hdGNoLmZuKTspe2lmKHQrKyxwPT09ITEmJmhbdF0mJmhbdF0ubWF0Y2guZGVmPT09ci5tYXRjaC5kZWYpbCgpLnZhbGlkUG9zaXRpb25zW3RdPWEuZXh0ZW5kKCEwLHt9LGhbdF0pLGwoKS52YWxpZFBvc2l0aW9uc1t0XS5pbnB1dD1yLmlucHV0LEModCksaj10LGs9ITA7ZWxzZSBpZihzKHQsci5tYXRjaC5kZWYpKXt2YXIgdT16KHQsci5pbnB1dCwhMCwhMCk7az11IT09ITEsaj11LmNhcmV0fHx1Lmluc2VydD9uKCk6dCxwPSEwfWVsc2Ugaz1yLmdlbmVyYXRlZElucHV0PT09ITA7aWYobCgpLm1hc2tMZW5ndGg8cSYmKGwoKS5tYXNrTGVuZ3RoPXEpLGspYnJlYWt9aWYoIWspYnJlYWt9aWYoIWspcmV0dXJuIGwoKS52YWxpZFBvc2l0aW9ucz1hLmV4dGVuZCghMCx7fSxoKSxtKCEwKSwhMX1lbHNlIGwoKS52YWxpZFBvc2l0aW9uc1tiXT1hLmV4dGVuZCghMCx7fSxjKTtyZXR1cm4gbSghMCksITB9ZnVuY3Rpb24gQyhiKXtmb3IodmFyIGM9Yi0xO2M+LTEmJiFsKCkudmFsaWRQb3NpdGlvbnNbY107Yy0tKTt2YXIgZCxlO2ZvcihjKys7YzxiO2MrKyl2b2lkIDA9PT1sKCkudmFsaWRQb3NpdGlvbnNbY10mJihmLmppdE1hc2tpbmc9PT0hMXx8Zi5qaXRNYXNraW5nPmMpJiYoZT10KGMscShjLTEpLmxvY2F0b3IsYy0xKS5zbGljZSgpLFwiXCI9PT1lW2UubGVuZ3RoLTFdLm1hdGNoLmRlZiYmZS5wb3AoKSxkPXAoZSksZCYmKGQubWF0Y2guZGVmPT09Zi5yYWRpeFBvaW50RGVmaW5pdGlvblN5bWJvbHx8IUEoYywhMCl8fGEuaW5BcnJheShmLnJhZGl4UG9pbnQsdigpKTxjJiZkLm1hdGNoLmZuJiZkLm1hdGNoLmZuLnRlc3QoRihjKSxsKCksYywhMSxmKSkmJihHPWooYyxkLm1hdGNoLnBsYWNlaG9sZGVyfHwobnVsbD09ZC5tYXRjaC5mbj9kLm1hdGNoLmRlZjpcIlwiIT09RihjKT9GKGMpOnYoKVtjXSksITApLEchPT0hMSYmKGwoKS52YWxpZFBvc2l0aW9uc1tHLnBvc3x8Y10uZ2VuZXJhdGVkSW5wdXQ9ITApKSl9ZT1lPT09ITA7dmFyIEU9Yzt2b2lkIDAhPT1jLmJlZ2luJiYoRT1XJiYhaShjKT9jLmVuZDpjLmJlZ2luKTt2YXIgRz0hMSxIPWEuZXh0ZW5kKCEwLHt9LGwoKS52YWxpZFBvc2l0aW9ucyk7aWYoQyhFKSxpKGMpJiYoTSh2b2lkIDAsYi5rZXlDb2RlLkRFTEVURSxjKSxFPWwoKS5wKSxFPGwoKS5tYXNrTGVuZ3RoJiYoRz1qKEUsZCxlKSwoIWV8fGc9PT0hMCkmJkc9PT0hMSkpe3ZhciBJPWwoKS52YWxpZFBvc2l0aW9uc1tFXTtpZighSXx8bnVsbCE9PUkubWF0Y2guZm58fEkubWF0Y2guZGVmIT09ZCYmZCE9PWYuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcil7aWYoKGYuaW5zZXJ0TW9kZXx8dm9pZCAwPT09bCgpLnZhbGlkUG9zaXRpb25zW0IoRSldKSYmIUEoRSwhMCkpe3ZhciBKPXQoRSkuc2xpY2UoKTtcIlwiPT09SltKLmxlbmd0aC0xXS5tYXRjaC5kZWYmJkoucG9wKCk7dmFyIEs9cChKLCEwKTtLJiZudWxsPT09Sy5tYXRjaC5mbiYmKEs9Sy5tYXRjaC5wbGFjZWhvbGRlcnx8Sy5tYXRjaC5kZWYsaihFLEssZSksbCgpLnZhbGlkUG9zaXRpb25zW0VdLmdlbmVyYXRlZElucHV0PSEwKTtmb3IodmFyIEw9RSsxLE49QihFKTtMPD1OO0wrKylpZihHPWooTCxkLGUpLEchPT0hMSl7cihFLHZvaWQgMCE9PUcucG9zP0cucG9zOkwpLEU9TDticmVha319fWVsc2UgRz17Y2FyZXQ6QihFKX19cmV0dXJuIEc9PT0hMSYmZi5rZWVwU3RhdGljJiYhZSYmaCE9PSEwJiYoRz1rKEUsZCxlKSksRz09PSEwJiYoRz17cG9zOkV9KSxhLmlzRnVuY3Rpb24oZi5wb3N0VmFsaWRhdGlvbikmJkchPT0hMSYmIWUmJmchPT0hMCYmKEc9ISFmLnBvc3RWYWxpZGF0aW9uKHYoITApLEcsZikmJkcpLHZvaWQgMD09PUcucG9zJiYoRy5wb3M9RSksRz09PSExJiYobSghMCksbCgpLnZhbGlkUG9zaXRpb25zPWEuZXh0ZW5kKCEwLHt9LEgpKSxHfWZ1bmN0aW9uIEEoYSxiKXt2YXIgYztpZihiPyhjPXEoYSkubWF0Y2gsXCJcIj09PWMuZGVmJiYoYz1yKGEpLm1hdGNoKSk6Yz1yKGEpLm1hdGNoLG51bGwhPWMuZm4pcmV0dXJuIGMuZm47aWYoYiE9PSEwJiZhPi0xKXt2YXIgZD10KGEpO3JldHVybiBkLmxlbmd0aD4xKyhcIlwiPT09ZFtkLmxlbmd0aC0xXS5tYXRjaC5kZWY/MTowKX1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYil7dmFyIGM9bCgpLm1hc2tMZW5ndGg7aWYoYT49YylyZXR1cm4gYztmb3IodmFyIGQ9YTsrK2Q8YyYmKGI9PT0hMCYmKHIoZCkubWF0Y2gubmV3QmxvY2tNYXJrZXIhPT0hMHx8IUEoZCkpfHxiIT09ITAmJiFBKGQpKTspO3JldHVybiBkfWZ1bmN0aW9uIEMoYSxiKXt2YXIgYyxkPWE7aWYoZDw9MClyZXR1cm4gMDtmb3IoOy0tZD4wJiYoYj09PSEwJiZyKGQpLm1hdGNoLm5ld0Jsb2NrTWFya2VyIT09ITB8fGIhPT0hMCYmIUEoZCkmJihjPXQoZCksYy5sZW5ndGg8Mnx8Mj09PWMubGVuZ3RoJiZcIlwiPT09Y1sxXS5tYXRjaC5kZWYpKTspO3JldHVybiBkfWZ1bmN0aW9uIEQoYSl7cmV0dXJuIHZvaWQgMD09PWwoKS52YWxpZFBvc2l0aW9uc1thXT9GKGEpOmwoKS52YWxpZFBvc2l0aW9uc1thXS5pbnB1dH1mdW5jdGlvbiBFKGIsYyxkLGUsZyl7aWYoZSYmYS5pc0Z1bmN0aW9uKGYub25CZWZvcmVXcml0ZSkpe3ZhciBoPWYub25CZWZvcmVXcml0ZShlLGMsZCxmKTtpZihoKXtpZihoLnJlZnJlc2hGcm9tQnVmZmVyKXt2YXIgaT1oLnJlZnJlc2hGcm9tQnVmZmVyO3coaT09PSEwP2k6aS5zdGFydCxpLmVuZCxoLmJ1ZmZlcnx8YyksYz12KCEwKX12b2lkIDAhPT1kJiYoZD12b2lkIDAhPT1oLmNhcmV0P2guY2FyZXQ6ZCl9fWIuaW5wdXRtYXNrLl92YWx1ZVNldChjLmpvaW4oXCJcIikpLHZvaWQgMD09PWR8fHZvaWQgMCE9PWUmJlwiYmx1clwiPT09ZS50eXBlP08oYixjLGQpOkkoYixkKSxnPT09ITAmJihZPSEwLGEoYikudHJpZ2dlcihcImlucHV0XCIpKX1mdW5jdGlvbiBGKGEsYil7aWYoYj1ifHxyKGEpLm1hdGNoLHZvaWQgMCE9PWIucGxhY2Vob2xkZXIpcmV0dXJuIGIucGxhY2Vob2xkZXI7aWYobnVsbD09PWIuZm4pe2lmKGE+LTEmJnZvaWQgMD09PWwoKS52YWxpZFBvc2l0aW9uc1thXSl7dmFyIGMsZD10KGEpLGU9W107aWYoZC5sZW5ndGg+MSsoXCJcIj09PWRbZC5sZW5ndGgtMV0ubWF0Y2guZGVmPzE6MCkpZm9yKHZhciBnPTA7ZzxkLmxlbmd0aDtnKyspaWYoZFtnXS5tYXRjaC5vcHRpb25hbGl0eSE9PSEwJiZkW2ddLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciE9PSEwJiYobnVsbD09PWRbZ10ubWF0Y2guZm58fHZvaWQgMD09PWN8fGRbZ10ubWF0Y2guZm4udGVzdChjLm1hdGNoLmRlZixsKCksYSwhMCxmKSE9PSExKSYmKGUucHVzaChkW2ddKSxudWxsPT09ZFtnXS5tYXRjaC5mbiYmKGM9ZFtnXSksZS5sZW5ndGg+MSYmL1swLTlhLWJBLVpdLy50ZXN0KGVbMF0ubWF0Y2guZGVmKSkpcmV0dXJuIGYucGxhY2Vob2xkZXIuY2hhckF0KGElZi5wbGFjZWhvbGRlci5sZW5ndGgpfXJldHVybiBiLmRlZn1yZXR1cm4gZi5wbGFjZWhvbGRlci5jaGFyQXQoYSVmLnBsYWNlaG9sZGVyLmxlbmd0aCl9ZnVuY3Rpb24gRyhjLGQsZSxnLGgsaSl7ZnVuY3Rpb24gaigpe3ZhciBhPSExLGI9dSgpLnNsaWNlKHAsQihwKSkuam9pbihcIlwiKS5pbmRleE9mKG8pO2lmKGIhPT0tMSYmIUEocCkpe2E9ITA7Zm9yKHZhciBjPXUoKS5zbGljZShwLHArYiksZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKFwiIFwiIT09Y1tkXSl7YT0hMTticmVha319cmV0dXJuIGF9dmFyIGs9Zy5zbGljZSgpLG89XCJcIixwPTAscj12b2lkIDA7aWYobSgpLGwoKS5wPUIoLTEpLCFlKWlmKGYuYXV0b1VubWFzayE9PSEwKXt2YXIgcz11KCkuc2xpY2UoMCxCKC0xKSkuam9pbihcIlwiKSx0PWsuam9pbihcIlwiKS5tYXRjaChuZXcgUmVnRXhwKFwiXlwiK2IuZXNjYXBlUmVnZXgocyksXCJnXCIpKTt0JiZ0Lmxlbmd0aD4wJiYoay5zcGxpY2UoMCx0Lmxlbmd0aCpzLmxlbmd0aCkscD1CKHApKX1lbHNlIHA9QihwKTtpZihhLmVhY2goayxmdW5jdGlvbihiLGQpe2lmKHZvaWQgMCE9PWQpe3ZhciBnPW5ldyBhLkV2ZW50KFwia2V5cHJlc3NcIik7Zy53aGljaD1kLmNoYXJDb2RlQXQoMCksbys9ZDt2YXIgaD1uKHZvaWQgMCwhMCksaT1sKCkudmFsaWRQb3NpdGlvbnNbaF0saz1xKGgrMSxpP2kubG9jYXRvci5zbGljZSgpOnZvaWQgMCxoKTtpZighaigpfHxlfHxmLmF1dG9Vbm1hc2spe3ZhciBzPWU/YjpudWxsPT1rLm1hdGNoLmZuJiZrLm1hdGNoLm9wdGlvbmFsaXR5JiZoKzE8bCgpLnA/aCsxOmwoKS5wO3I9YWEua2V5cHJlc3NFdmVudC5jYWxsKGMsZywhMCwhMSxlLHMpLHA9cysxLG89XCJcIn1lbHNlIHI9YWEua2V5cHJlc3NFdmVudC5jYWxsKGMsZywhMCwhMSwhMCxoKzEpO2lmKCFlJiZhLmlzRnVuY3Rpb24oZi5vbkJlZm9yZVdyaXRlKSYmKHI9Zi5vbkJlZm9yZVdyaXRlKGcsdigpLHIuZm9yd2FyZFBvc2l0aW9uLGYpLHImJnIucmVmcmVzaEZyb21CdWZmZXIpKXt2YXIgdD1yLnJlZnJlc2hGcm9tQnVmZmVyO3codD09PSEwP3Q6dC5zdGFydCx0LmVuZCxyLmJ1ZmZlciksbSghMCksci5jYXJldCYmKGwoKS5wPXIuY2FyZXQpfX19KSxkKXt2YXIgeD12b2lkIDAseT1uKCk7ZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PWMmJihofHxyKSYmKHg9SShjKS5iZWdpbixoJiZyPT09ITEmJih4PUIobih4KSkpLHImJmkhPT0hMCYmKHg8eSsxfHx5PT09LTEpJiYoeD1mLm51bWVyaWNJbnB1dCYmdm9pZCAwPT09ci5jYXJldD9DKHIuZm9yd2FyZFBvc2l0aW9uKTpyLmZvcndhcmRQb3NpdGlvbikpLEUoYyx2KCkseCxofHxuZXcgYS5FdmVudChcImNoZWNrdmFsXCIpKX19ZnVuY3Rpb24gSChiKXtpZihiJiZ2b2lkIDA9PT1iLmlucHV0bWFzaylyZXR1cm4gYi52YWx1ZTt2YXIgYz1bXSxkPWwoKS52YWxpZFBvc2l0aW9ucztmb3IodmFyIGUgaW4gZClkW2VdLm1hdGNoJiZudWxsIT1kW2VdLm1hdGNoLmZuJiZjLnB1c2goZFtlXS5pbnB1dCk7dmFyIGc9MD09PWMubGVuZ3RoP1wiXCI6KFc/Yy5yZXZlcnNlKCk6Yykuam9pbihcIlwiKTtpZihhLmlzRnVuY3Rpb24oZi5vblVuTWFzaykpe3ZhciBoPShXP3YoKS5zbGljZSgpLnJldmVyc2UoKTp2KCkpLmpvaW4oXCJcIik7Zz1mLm9uVW5NYXNrKGgsZyxmKXx8Z31yZXR1cm4gZ31mdW5jdGlvbiBJKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSl7aWYoZCE9PSEwJiZXJiZcIm51bWJlclwiPT10eXBlb2YgYSYmKCFmLmdyZWVkeXx8XCJcIiE9PWYucGxhY2Vob2xkZXIpKXt2YXIgYj12KCkuam9pbihcIlwiKS5sZW5ndGg7YT1iLWF9cmV0dXJuIGF9dmFyIGg7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGIpcmV0dXJuIGEuc2V0U2VsZWN0aW9uUmFuZ2U/KGI9YS5zZWxlY3Rpb25TdGFydCxjPWEuc2VsZWN0aW9uRW5kKTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhoPXdpbmRvdy5nZXRTZWxlY3Rpb24oKS5nZXRSYW5nZUF0KDApLGguY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZSE9PWEmJmguY29tbW9uQW5jZXN0b3JDb250YWluZXIhPT1hfHwoYj1oLnN0YXJ0T2Zmc2V0LGM9aC5lbmRPZmZzZXQpKTpkb2N1bWVudC5zZWxlY3Rpb24mJmRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSYmKGg9ZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCksYj0wLWguZHVwbGljYXRlKCkubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsLWEuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksYz1iK2gudGV4dC5sZW5ndGgpLHtiZWdpbjplKGIpLGVuZDplKGMpfTtiPWUoYiksYz1lKGMpLGM9XCJudW1iZXJcIj09dHlwZW9mIGM/YzpiO3ZhciBpPXBhcnNlSW50KCgoYS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldENvbXB1dGVkU3R5bGU/KGEub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRDb21wdXRlZFN0eWxlKGEsbnVsbCk6YS5jdXJyZW50U3R5bGUpLmZvbnRTaXplKSpjO2lmKGEuc2Nyb2xsTGVmdD1pPmEuc2Nyb2xsV2lkdGg/aTowLGd8fGYuaW5zZXJ0TW9kZSE9PSExfHxiIT09Y3x8YysrLGEuc2V0U2VsZWN0aW9uUmFuZ2UpYS5zZWxlY3Rpb25TdGFydD1iLGEuc2VsZWN0aW9uRW5kPWM7ZWxzZSBpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXtpZihoPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksdm9pZCAwPT09YS5maXJzdENoaWxkfHxudWxsPT09YS5maXJzdENoaWxkKXt2YXIgaj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTthLmFwcGVuZENoaWxkKGopfWguc2V0U3RhcnQoYS5maXJzdENoaWxkLGI8YS5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoP2I6YS5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSxoLnNldEVuZChhLmZpcnN0Q2hpbGQsYzxhLmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGg/YzphLmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpLGguY29sbGFwc2UoITApO3ZhciBrPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTtrLnJlbW92ZUFsbFJhbmdlcygpLGsuYWRkUmFuZ2UoaCl9ZWxzZSBhLmNyZWF0ZVRleHRSYW5nZSYmKGg9YS5jcmVhdGVUZXh0UmFuZ2UoKSxoLmNvbGxhcHNlKCEwKSxoLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIixjKSxoLm1vdmVTdGFydChcImNoYXJhY3RlclwiLGIpLGguc2VsZWN0KCkpO08oYSx2b2lkIDAse2JlZ2luOmIsZW5kOmN9KX1mdW5jdGlvbiBKKGIpe3ZhciBjLGQsZT12KCksZj1lLmxlbmd0aCxnPW4oKSxoPXt9LGk9bCgpLnZhbGlkUG9zaXRpb25zW2ddLGo9dm9pZCAwIT09aT9pLmxvY2F0b3Iuc2xpY2UoKTp2b2lkIDA7Zm9yKGM9ZysxO2M8ZS5sZW5ndGg7YysrKWQ9cShjLGosYy0xKSxqPWQubG9jYXRvci5zbGljZSgpLGhbY109YS5leHRlbmQoITAse30sZCk7dmFyIGs9aSYmdm9pZCAwIT09aS5hbHRlcm5hdGlvbj9pLmxvY2F0b3JbaS5hbHRlcm5hdGlvbl06dm9pZCAwO2ZvcihjPWYtMTtjPmcmJihkPWhbY10sKGQubWF0Y2gub3B0aW9uYWxpdHl8fGQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyfHxrJiYoayE9PWhbY10ubG9jYXRvcltpLmFsdGVybmF0aW9uXSYmbnVsbCE9ZC5tYXRjaC5mbnx8bnVsbD09PWQubWF0Y2guZm4mJmQubG9jYXRvcltpLmFsdGVybmF0aW9uXSYmeShkLmxvY2F0b3JbaS5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksay50b1N0cmluZygpLnNwbGl0KFwiLFwiKSkmJlwiXCIhPT10KGMpWzBdLmRlZikpJiZlW2NdPT09RihjLGQubWF0Y2gpKTtjLS0pZi0tO3JldHVybiBiP3tsOmYsZGVmOmhbZl0/aFtmXS5tYXRjaDp2b2lkIDB9OmZ9ZnVuY3Rpb24gSyhhKXtmb3IodmFyIGI9SigpLGM9YS5sZW5ndGgtMTtjPmImJiFBKGMpO2MtLSk7cmV0dXJuIGEuc3BsaWNlKGIsYysxLWIpLGF9ZnVuY3Rpb24gTChiKXtpZihhLmlzRnVuY3Rpb24oZi5pc0NvbXBsZXRlKSlyZXR1cm4gZi5pc0NvbXBsZXRlKGIsZik7aWYoXCIqXCIhPT1mLnJlcGVhdCl7dmFyIGM9ITEsZD1KKCEwKSxlPUMoZC5sKTtpZih2b2lkIDA9PT1kLmRlZnx8ZC5kZWYubmV3QmxvY2tNYXJrZXJ8fGQuZGVmLm9wdGlvbmFsaXR5fHxkLmRlZi5vcHRpb25hbFF1YW50aWZpZXIpe2M9ITA7Zm9yKHZhciBnPTA7Zzw9ZTtnKyspe3ZhciBoPXEoZykubWF0Y2g7aWYobnVsbCE9PWguZm4mJnZvaWQgMD09PWwoKS52YWxpZFBvc2l0aW9uc1tnXSYmaC5vcHRpb25hbGl0eSE9PSEwJiZoLm9wdGlvbmFsUXVhbnRpZmllciE9PSEwfHxudWxsPT09aC5mbiYmYltnXSE9PUYoZyxoKSl7Yz0hMTticmVha319fXJldHVybiBjfX1mdW5jdGlvbiBNKGMsZCxlLGcpe2Z1bmN0aW9uIGgoKXtpZihmLmtlZXBTdGF0aWMpe2Zvcih2YXIgYj1bXSxkPW4oLTEsITApLGU9YS5leHRlbmQoITAse30sbCgpLnZhbGlkUG9zaXRpb25zKSxnPWwoKS52YWxpZFBvc2l0aW9uc1tkXTtkPj0wO2QtLSl7dmFyIGg9bCgpLnZhbGlkUG9zaXRpb25zW2RdO2lmKGgpe2lmKGguZ2VuZXJhdGVkSW5wdXQhPT0hMCYmL1swLTlhLWJBLVpdLy50ZXN0KGguaW5wdXQpJiZiLnB1c2goaC5pbnB1dCksZGVsZXRlIGwoKS52YWxpZFBvc2l0aW9uc1tkXSx2b2lkIDAhPT1oLmFsdGVybmF0aW9uJiZoLmxvY2F0b3JbaC5hbHRlcm5hdGlvbl0hPT1nLmxvY2F0b3JbaC5hbHRlcm5hdGlvbl0pYnJlYWs7Zz1ofX1pZihkPi0xKWZvcihsKCkucD1CKG4oLTEsITApKTtiLmxlbmd0aD4wOyl7dmFyIGk9bmV3IGEuRXZlbnQoXCJrZXlwcmVzc1wiKTtpLndoaWNoPWIucG9wKCkuY2hhckNvZGVBdCgwKSxhYS5rZXlwcmVzc0V2ZW50LmNhbGwoYyxpLCEwLCExLCExLGwoKS5wKX1lbHNlIGwoKS52YWxpZFBvc2l0aW9ucz1hLmV4dGVuZCghMCx7fSxlKX19aWYoKGYubnVtZXJpY0lucHV0fHxXKSYmKGQ9PT1iLmtleUNvZGUuQkFDS1NQQUNFP2Q9Yi5rZXlDb2RlLkRFTEVURTpkPT09Yi5rZXlDb2RlLkRFTEVURSYmKGQ9Yi5rZXlDb2RlLkJBQ0tTUEFDRSksVykpe3ZhciBpPWUuZW5kO2UuZW5kPWUuYmVnaW4sZS5iZWdpbj1pfWQ9PT1iLmtleUNvZGUuQkFDS1NQQUNFJiYoZS5lbmQtZS5iZWdpbjwxfHxmLmluc2VydE1vZGU9PT0hMSk/KGUuYmVnaW49QyhlLmJlZ2luKSx2b2lkIDA9PT1sKCkudmFsaWRQb3NpdGlvbnNbZS5iZWdpbl18fGwoKS52YWxpZFBvc2l0aW9uc1tlLmJlZ2luXS5pbnB1dCE9PWYuZ3JvdXBTZXBhcmF0b3ImJmwoKS52YWxpZFBvc2l0aW9uc1tlLmJlZ2luXS5pbnB1dCE9PWYucmFkaXhQb2ludHx8ZS5iZWdpbi0tKTpkPT09Yi5rZXlDb2RlLkRFTEVURSYmZS5iZWdpbj09PWUuZW5kJiYoZS5lbmQ9QShlLmVuZCwhMCk/ZS5lbmQrMTpCKGUuZW5kKSsxLHZvaWQgMD09PWwoKS52YWxpZFBvc2l0aW9uc1tlLmJlZ2luXXx8bCgpLnZhbGlkUG9zaXRpb25zW2UuYmVnaW5dLmlucHV0IT09Zi5ncm91cFNlcGFyYXRvciYmbCgpLnZhbGlkUG9zaXRpb25zW2UuYmVnaW5dLmlucHV0IT09Zi5yYWRpeFBvaW50fHxlLmVuZCsrKSxvKGUuYmVnaW4sZS5lbmQsITEsZyksZyE9PSEwJiZoKCk7dmFyIGo9bihlLmJlZ2luLCEwKTtqPGUuYmVnaW4/bCgpLnA9QihqKTpnIT09ITAmJihsKCkucD1lLmJlZ2luKX1mdW5jdGlvbiBOKGIpe2Z1bmN0aW9uIGMoYSl7dmFyIGMsZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtmb3IodmFyIGUgaW4gZylpc05hTihlKSYmZS5pbmRleE9mKFwiZm9udFwiKSE9PS0xJiYoZC5zdHlsZVtlXT1nW2VdKTtkLnN0eWxlLnRleHRUcmFuc2Zvcm09Zy50ZXh0VHJhbnNmb3JtLGQuc3R5bGUubGV0dGVyU3BhY2luZz1nLmxldHRlclNwYWNpbmcsZC5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsZC5zdHlsZS5oZWlnaHQ9XCJhdXRvXCIsZC5zdHlsZS53aWR0aD1cImF1dG9cIixkLnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIixkLnN0eWxlLndoaXRlU3BhY2U9XCJub3dyYXBcIixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGQpO3ZhciBmLGg9Yi5pbnB1dG1hc2suX3ZhbHVlR2V0KCksaT0wO2ZvcihjPTAsZj1oLmxlbmd0aDtjPD1mO2MrKyl7aWYoZC5pbm5lckhUTUwrPWguY2hhckF0KGMpfHxcIl9cIixkLm9mZnNldFdpZHRoPj1hKXt2YXIgaj1hLWksaz1kLm9mZnNldFdpZHRoLWE7ZC5pbm5lckhUTUw9aC5jaGFyQXQoYyksai09ZC5vZmZzZXRXaWR0aC8zLGM9ajxrP2MtMTpjO2JyZWFrfWk9ZC5vZmZzZXRXaWR0aH1yZXR1cm4gZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkKSxjfWZ1bmN0aW9uIGQoKXtULnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIixULnN0eWxlLnRvcD1lLnRvcCtcInB4XCIsVC5zdHlsZS5sZWZ0PWUubGVmdCtcInB4XCIsVC5zdHlsZS53aWR0aD1wYXJzZUludChiLm9mZnNldFdpZHRoKS1wYXJzZUludChnLnBhZGRpbmdMZWZ0KS1wYXJzZUludChnLnBhZGRpbmdSaWdodCktcGFyc2VJbnQoZy5ib3JkZXJMZWZ0V2lkdGgpLXBhcnNlSW50KGcuYm9yZGVyUmlnaHRXaWR0aCkrXCJweFwiLFQuc3R5bGUuaGVpZ2h0PXBhcnNlSW50KGIub2Zmc2V0SGVpZ2h0KS1wYXJzZUludChnLnBhZGRpbmdUb3ApLXBhcnNlSW50KGcucGFkZGluZ0JvdHRvbSktcGFyc2VJbnQoZy5ib3JkZXJUb3BXaWR0aCktcGFyc2VJbnQoZy5ib3JkZXJCb3R0b21XaWR0aCkrXCJweFwiLFQuc3R5bGUubGluZUhlaWdodD1ULnN0eWxlLmhlaWdodCxULnN0eWxlLnpJbmRleD1pc05hTihnLnpJbmRleCk/LTE6Zy56SW5kZXgtMSxULnN0eWxlLndlYmtpdEFwcGVhcmFuY2U9XCJ0ZXh0ZmllbGRcIixULnN0eWxlLm1vekFwcGVhcmFuY2U9XCJ0ZXh0ZmllbGRcIixULnN0eWxlLkFwcGVhcmFuY2U9XCJ0ZXh0ZmllbGRcIn12YXIgZT1hKGIpLnBvc2l0aW9uKCksZz0oYi5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoYixudWxsKTtiLnBhcmVudE5vZGU7VD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoVCk7Zm9yKHZhciBoIGluIGcpaXNOYU4oaCkmJlwiY3NzVGV4dFwiIT09aCYmaC5pbmRleE9mKFwid2Via2l0XCIpPT0tMSYmKFQuc3R5bGVbaF09Z1toXSk7Yi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJ0cmFuc3BhcmVudFwiLGIuc3R5bGUuY29sb3I9XCJ0cmFuc3BhcmVudFwiLGIuc3R5bGUud2Via2l0QXBwZWFyYW5jZT1cImNhcmV0XCIsYi5zdHlsZS5tb3pBcHBlYXJhbmNlPVwiY2FyZXRcIixiLnN0eWxlLkFwcGVhcmFuY2U9XCJjYXJldFwiLGQoKSxhKHdpbmRvdykub24oXCJyZXNpemVcIixmdW5jdGlvbihjKXtlPWEoYikucG9zaXRpb24oKSxnPShiLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpLGQoKX0pLGEoYikub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe3JldHVybiBJKGIsYyhhLmNsaWVudFgpKSxhYS5jbGlja0V2ZW50LmNhbGwodGhpcyxbYV0pfSksYShiKS5vbihcImtleWRvd25cIixmdW5jdGlvbihhKXthLnNoaWZ0S2V5fHxmLmluc2VydE1vZGU9PT0hMXx8c2V0VGltZW91dChmdW5jdGlvbigpe08oYil9LDApfSl9ZnVuY3Rpb24gTyhhLGIsYyl7ZnVuY3Rpb24gZCgpe2d8fG51bGwhPT1pLmZuJiZ2b2lkIDAhPT1qLmlucHV0P2cmJm51bGwhPT1pLmZuJiZ2b2lkIDAhPT1qLmlucHV0JiYoZz0hMSxlKz1cIjwvc3Bhbj5cIik6KGc9ITAsZSs9XCI8c3BhbiBjbGFzcz0naW0tc3RhdGljJyc+XCIpfWlmKHZvaWQgMCE9PVQpe2I9Ynx8digpLHZvaWQgMD09PWM/Yz1JKGEpOnZvaWQgMD09PWMuYmVnaW4mJihjPXtiZWdpbjpjLGVuZDpjfSk7dmFyIGU9XCJcIixnPSExO2lmKFwiXCIhPWIpe3ZhciBoLGksaixrPTAsbT1uKCk7ZG8gaz09PWMuYmVnaW4mJmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ9PT1hJiYoZSs9XCI8c3BhbiBjbGFzcz0naW0tY2FyZXQnIHN0eWxlPSdib3JkZXItcmlnaHQtd2lkdGg6IDFweDtib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkOyc+PC9zcGFuPlwiKSxsKCkudmFsaWRQb3NpdGlvbnNba10/KGo9bCgpLnZhbGlkUG9zaXRpb25zW2tdLGk9ai5tYXRjaCxoPWoubG9jYXRvci5zbGljZSgpLGQoKSxlKz1qLmlucHV0KTooaj1xKGssaCxrLTEpLGk9ai5tYXRjaCxoPWoubG9jYXRvci5zbGljZSgpLChmLmppdE1hc2tpbmc9PT0hMXx8azxtfHxcIm51bWJlclwiPT10eXBlb2YgZi5qaXRNYXNraW5nJiZpc0Zpbml0ZShmLmppdE1hc2tpbmcpJiZmLmppdE1hc2tpbmc+aykmJihkKCksZSs9RihrLGkpKSksaysrO3doaWxlKCh2b2lkIDA9PT1TfHxrPFMpJiYobnVsbCE9PWkuZm58fFwiXCIhPT1pLmRlZil8fG0+ayl9VC5pbm5lckhUTUw9ZX19ZnVuY3Rpb24gUChiKXtmdW5jdGlvbiBjKGIsYyl7ZnVuY3Rpb24gZChiKXtmdW5jdGlvbiBkKGIpe2lmKGEudmFsSG9va3MmJih2b2lkIDA9PT1hLnZhbEhvb2tzW2JdfHxhLnZhbEhvb2tzW2JdLmlucHV0bWFza3BhdGNoIT09ITApKXt2YXIgZD1hLnZhbEhvb2tzW2JdJiZhLnZhbEhvb2tzW2JdLmdldD9hLnZhbEhvb2tzW2JdLmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZX0sZT1hLnZhbEhvb2tzW2JdJiZhLnZhbEhvb2tzW2JdLnNldD9hLnZhbEhvb2tzW2JdLnNldDpmdW5jdGlvbihhLGIpe3JldHVybiBhLnZhbHVlPWIsYX07YS52YWxIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEpe2lmKGEuaW5wdXRtYXNrKXtpZihhLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2spcmV0dXJuIGEuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKTt2YXIgYj1kKGEpO3JldHVybiBuKHZvaWQgMCx2b2lkIDAsYS5pbnB1dG1hc2subWFza3NldC52YWxpZFBvc2l0aW9ucykhPT0tMXx8Yy5udWxsYWJsZSE9PSEwP2I6XCJcIn1yZXR1cm4gZChhKX0sc2V0OmZ1bmN0aW9uKGIsYyl7dmFyIGQsZj1hKGIpO3JldHVybiBkPWUoYixjKSxiLmlucHV0bWFzayYmZi50cmlnZ2VyKFwic2V0dmFsdWVcIiksZH0saW5wdXRtYXNrcGF0Y2g6ITB9fX1mdW5jdGlvbiBlKCl7cmV0dXJuIHRoaXMuaW5wdXRtYXNrP3RoaXMuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaz90aGlzLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCk6bigpIT09LTF8fGMubnVsbGFibGUhPT0hMD9kb2N1bWVudC5hY3RpdmVFbGVtZW50PT09dGhpcyYmYy5jbGVhck1hc2tPbkxvc3RGb2N1cz8oVz9LKHYoKS5zbGljZSgpKS5yZXZlcnNlKCk6Syh2KCkuc2xpY2UoKSkpLmpvaW4oXCJcIik6aC5jYWxsKHRoaXMpOlwiXCI6aC5jYWxsKHRoaXMpfWZ1bmN0aW9uIGYoYil7aS5jYWxsKHRoaXMsYiksdGhpcy5pbnB1dG1hc2smJmEodGhpcykudHJpZ2dlcihcInNldHZhbHVlXCIpfWZ1bmN0aW9uIGcoYil7Xy5vbihiLFwibW91c2VlbnRlclwiLGZ1bmN0aW9uKGIpe3ZhciBjPWEodGhpcyksZD10aGlzLGU9ZC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7ZSE9PXYoKS5qb2luKFwiXCIpJiZjLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKX0pfXZhciBoLGk7aWYoIWIuaW5wdXRtYXNrLl9fdmFsdWVHZXQpe2lmKGMubm9WYWx1ZVBhdGNoaW5nIT09ITApe2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ipe1wiZnVuY3Rpb25cIiE9dHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZiYmKE9iamVjdC5nZXRQcm90b3R5cGVPZj1cIm9iamVjdFwiPT10eXBlb2ZcInRlc3RcIi5fX3Byb3RvX18/ZnVuY3Rpb24oYSl7cmV0dXJuIGEuX19wcm90b19ffTpmdW5jdGlvbihhKXtyZXR1cm4gYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGV9KTt2YXIgaj1PYmplY3QuZ2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoYiksXCJ2YWx1ZVwiKTp2b2lkIDA7aiYmai5nZXQmJmouc2V0PyhoPWouZ2V0LGk9ai5zZXQsT2JqZWN0LmRlZmluZVByb3BlcnR5KGIsXCJ2YWx1ZVwiLHtnZXQ6ZSxzZXQ6Zixjb25maWd1cmFibGU6ITB9KSk6XCJJTlBVVFwiIT09Yi50YWdOYW1lJiYoaD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRleHRDb250ZW50fSxpPWZ1bmN0aW9uKGEpe3RoaXMudGV4dENvbnRlbnQ9YX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIsXCJ2YWx1ZVwiLHtnZXQ6ZSxzZXQ6Zixjb25maWd1cmFibGU6ITB9KSl9ZWxzZSBkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fJiZiLl9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSYmKGg9Yi5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIiksaT1iLl9fbG9va3VwU2V0dGVyX18oXCJ2YWx1ZVwiKSxiLl9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLGUpLGIuX19kZWZpbmVTZXR0ZXJfXyhcInZhbHVlXCIsZikpO2IuaW5wdXRtYXNrLl9fdmFsdWVHZXQ9aCxiLmlucHV0bWFzay5fX3ZhbHVlU2V0PWl9Yi5pbnB1dG1hc2suX3ZhbHVlR2V0PWZ1bmN0aW9uKGEpe3JldHVybiBXJiZhIT09ITA/aC5jYWxsKHRoaXMuZWwpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpOmguY2FsbCh0aGlzLmVsKX0sYi5pbnB1dG1hc2suX3ZhbHVlU2V0PWZ1bmN0aW9uKGEsYil7aS5jYWxsKHRoaXMuZWwsbnVsbD09PWF8fHZvaWQgMD09PWE/XCJcIjpiIT09ITAmJlc/YS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTphKX0sdm9pZCAwPT09aCYmKGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZX0saT1mdW5jdGlvbihhKXt0aGlzLnZhbHVlPWF9LGQoYi50eXBlKSxnKGIpKX19dmFyIGU9Yi5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpLGY9XCJJTlBVVFwiPT09Yi50YWdOYW1lJiZhLmluQXJyYXkoZSxjLnN1cHBvcnRzSW5wdXRUeXBlKSE9PS0xfHxiLmlzQ29udGVudEVkaXRhYmxlfHxcIlRFWFRBUkVBXCI9PT1iLnRhZ05hbWU7aWYoIWYpaWYoXCJJTlBVVFwiPT09Yi50YWdOYW1lKXt2YXIgZz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Zy5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsZSksZj1cInRleHRcIj09PWcudHlwZSxnPW51bGx9ZWxzZSBmPVwicGFydGlhbFwiO3JldHVybiBmIT09ITEmJmQoYiksZn12YXIgZD1jKGIsZik7aWYoZCE9PSExJiYoVj1iLFI9YShWKSwoXCJydGxcIj09PVYuZGlyfHxmLnJpZ2h0QWxpZ24pJiYoVi5zdHlsZS50ZXh0QWxpZ249XCJyaWdodFwiKSwoXCJydGxcIj09PVYuZGlyfHxmLm51bWVyaWNJbnB1dCkmJihWLmRpcj1cImx0clwiLFYucmVtb3ZlQXR0cmlidXRlKFwiZGlyXCIpLFYuaW5wdXRtYXNrLmlzUlRMPSEwLFc9ITApLGYuY29sb3JNYXNrPT09ITAmJk4oViksaiYmKFYuaGFzT3duUHJvcGVydHkoXCJpbnB1dG1vZGVcIikmJihWLmlucHV0bW9kZT1mLmlucHV0bW9kZSxWLnNldEF0dHJpYnV0ZShcImlucHV0bW9kZVwiLGYuaW5wdXRtb2RlKSksXCJydGZtXCI9PT1mLmFuZHJvaWRIYWNrJiYoZi5jb2xvck1hc2shPT0hMCYmTihWKSxWLnR5cGU9XCJwYXNzd29yZFwiKSksXy5vZmYoViksZD09PSEwJiYoXy5vbihWLFwic3VibWl0XCIsYWEuc3VibWl0RXZlbnQpLF8ub24oVixcInJlc2V0XCIsYWEucmVzZXRFdmVudCksXy5vbihWLFwibW91c2VlbnRlclwiLGFhLm1vdXNlZW50ZXJFdmVudCksXy5vbihWLFwiYmx1clwiLGFhLmJsdXJFdmVudCksXy5vbihWLFwiZm9jdXNcIixhYS5mb2N1c0V2ZW50KSxfLm9uKFYsXCJtb3VzZWxlYXZlXCIsYWEubW91c2VsZWF2ZUV2ZW50KSxmLmNvbG9yTWFzayE9PSEwJiZfLm9uKFYsXCJjbGlja1wiLGFhLmNsaWNrRXZlbnQpLF8ub24oVixcImRibGNsaWNrXCIsYWEuZGJsY2xpY2tFdmVudCksXy5vbihWLFwicGFzdGVcIixhYS5wYXN0ZUV2ZW50KSxfLm9uKFYsXCJkcmFnZHJvcFwiLGFhLnBhc3RlRXZlbnQpLF8ub24oVixcImRyb3BcIixhYS5wYXN0ZUV2ZW50KSxfLm9uKFYsXCJjdXRcIixhYS5jdXRFdmVudCksXy5vbihWLFwiY29tcGxldGVcIixmLm9uY29tcGxldGUpLF8ub24oVixcImluY29tcGxldGVcIixmLm9uaW5jb21wbGV0ZSksXy5vbihWLFwiY2xlYXJlZFwiLGYub25jbGVhcmVkKSxmLmlucHV0RXZlbnRPbmx5IT09ITAmJihfLm9uKFYsXCJrZXlkb3duXCIsYWEua2V5ZG93bkV2ZW50KSxfLm9uKFYsXCJrZXlwcmVzc1wiLGFhLmtleXByZXNzRXZlbnQpKSxfLm9uKFYsXCJjb21wb3NpdGlvbnN0YXJ0XCIsYS5ub29wKSxfLm9uKFYsXCJjb21wb3NpdGlvbnVwZGF0ZVwiLGEubm9vcCksXy5vbihWLFwiY29tcG9zaXRpb25lbmRcIixhLm5vb3ApLF8ub24oVixcImtleXVwXCIsYS5ub29wKSxfLm9uKFYsXCJpbnB1dFwiLGFhLmlucHV0RmFsbEJhY2tFdmVudCkpLF8ub24oVixcInNldHZhbHVlXCIsYWEuc2V0VmFsdWVFdmVudCksdSgpLFwiXCIhPT1WLmlucHV0bWFzay5fdmFsdWVHZXQoKXx8Zi5jbGVhck1hc2tPbkxvc3RGb2N1cz09PSExfHxkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09Vikpe3ZhciBlPWEuaXNGdW5jdGlvbihmLm9uQmVmb3JlTWFzayk/Zi5vbkJlZm9yZU1hc2soVi5pbnB1dG1hc2suX3ZhbHVlR2V0KCksZil8fFYuaW5wdXRtYXNrLl92YWx1ZUdldCgpOlYuaW5wdXRtYXNrLl92YWx1ZUdldCgpO0coViwhMCwhMSxlLnNwbGl0KFwiXCIpKTt2YXIgZz12KCkuc2xpY2UoKTtRPWcuam9pbihcIlwiKSxMKGcpPT09ITEmJmYuY2xlYXJJbmNvbXBsZXRlJiZtKCksZi5jbGVhck1hc2tPbkxvc3RGb2N1cyYmZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PVYmJihuKCk9PT0tMT9nPVtdOksoZykpLEUoVixnKSxkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09ViYmSShWLEIobigpKSl9fWQ9ZHx8dGhpcy5tYXNrc2V0LGY9Znx8dGhpcy5vcHRzO3ZhciBRLFIsUyxULFUsVj10aGlzLmVsLFc9dGhpcy5pc1JUTCxYPSExLFk9ITEsWj0hMSwkPSExLF89e29uOmZ1bmN0aW9uKGMsZCxlKXt2YXIgZz1mdW5jdGlvbihjKXtpZih2b2lkIDA9PT10aGlzLmlucHV0bWFzayYmXCJGT1JNXCIhPT10aGlzLm5vZGVOYW1lKXt2YXIgZD1hLmRhdGEodGhpcyxcIl9pbnB1dG1hc2tfb3B0c1wiKTtkP25ldyBiKGQpLm1hc2sodGhpcyk6Xy5vZmYodGhpcyl9ZWxzZXtpZihcInNldHZhbHVlXCI9PT1jLnR5cGV8fCEodGhpcy5kaXNhYmxlZHx8dGhpcy5yZWFkT25seSYmIShcImtleWRvd25cIj09PWMudHlwZSYmYy5jdHJsS2V5JiY2Nz09PWMua2V5Q29kZXx8Zi50YWJUaHJvdWdoPT09ITEmJmMua2V5Q29kZT09PWIua2V5Q29kZS5UQUIpKSl7c3dpdGNoKGMudHlwZSl7Y2FzZVwiaW5wdXRcIjppZihZPT09ITApcmV0dXJuIFk9ITEsYy5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrO2Nhc2VcImtleWRvd25cIjpYPSExLFk9ITE7YnJlYWs7Y2FzZVwia2V5cHJlc3NcIjppZihYPT09ITApcmV0dXJuIGMucHJldmVudERlZmF1bHQoKTtYPSEwO2JyZWFrO2Nhc2VcImNsaWNrXCI6aWYoaHx8aSl7dmFyIGc9dGhpcyxqPWFyZ3VtZW50cztyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2UuYXBwbHkoZyxqKX0sMCksITF9fXZhciBrPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBrPT09ITEmJihjLnByZXZlbnREZWZhdWx0KCksYy5zdG9wUHJvcGFnYXRpb24oKSksa31jLnByZXZlbnREZWZhdWx0KCl9fTtjLmlucHV0bWFzay5ldmVudHNbZF09Yy5pbnB1dG1hc2suZXZlbnRzW2RdfHxbXSxjLmlucHV0bWFzay5ldmVudHNbZF0ucHVzaChnKSxhLmluQXJyYXkoZCxbXCJzdWJtaXRcIixcInJlc2V0XCJdKSE9PS0xP251bGwhPWMuZm9ybSYmYShjLmZvcm0pLm9uKGQsZyk6YShjKS5vbihkLGcpfSxvZmY6ZnVuY3Rpb24oYixjKXtpZihiLmlucHV0bWFzayYmYi5pbnB1dG1hc2suZXZlbnRzKXt2YXIgZDtjPyhkPVtdLGRbY109Yi5pbnB1dG1hc2suZXZlbnRzW2NdKTpkPWIuaW5wdXRtYXNrLmV2ZW50cyxhLmVhY2goZCxmdW5jdGlvbihjLGQpe2Zvcig7ZC5sZW5ndGg+MDspe3ZhciBlPWQucG9wKCk7YS5pbkFycmF5KGMsW1wic3VibWl0XCIsXCJyZXNldFwiXSkhPT0tMT9udWxsIT1iLmZvcm0mJmEoYi5mb3JtKS5vZmYoYyxlKTphKGIpLm9mZihjLGUpfWRlbGV0ZSBiLmlucHV0bWFzay5ldmVudHNbY119KX19fSxhYT17a2V5ZG93bkV2ZW50OmZ1bmN0aW9uKGMpe2Z1bmN0aW9uIGQoYSl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGM9XCJvblwiK2EsZD1jIGluIGI7cmV0dXJuIGR8fChiLnNldEF0dHJpYnV0ZShjLFwicmV0dXJuO1wiKSxkPVwiZnVuY3Rpb25cIj09dHlwZW9mIGJbY10pLGI9bnVsbCxkfXZhciBlPXRoaXMsZz1hKGUpLGg9Yy5rZXlDb2RlLGo9SShlKTtpZihoPT09Yi5rZXlDb2RlLkJBQ0tTUEFDRXx8aD09PWIua2V5Q29kZS5ERUxFVEV8fGkmJmg9PT1iLmtleUNvZGUuQkFDS1NQQUNFX1NBRkFSSXx8Yy5jdHJsS2V5JiZoPT09Yi5rZXlDb2RlLlgmJiFkKFwiY3V0XCIpKWMucHJldmVudERlZmF1bHQoKSxNKGUsaCxqKSxFKGUsdighMCksbCgpLnAsYyxlLmlucHV0bWFzay5fdmFsdWVHZXQoKSE9PXYoKS5qb2luKFwiXCIpKSxlLmlucHV0bWFzay5fdmFsdWVHZXQoKT09PXUoKS5qb2luKFwiXCIpP2cudHJpZ2dlcihcImNsZWFyZWRcIik6TCh2KCkpPT09ITAmJmcudHJpZ2dlcihcImNvbXBsZXRlXCIpO2Vsc2UgaWYoaD09PWIua2V5Q29kZS5FTkR8fGg9PT1iLmtleUNvZGUuUEFHRV9ET1dOKXtjLnByZXZlbnREZWZhdWx0KCk7dmFyIGs9QihuKCkpO2YuaW5zZXJ0TW9kZXx8ayE9PWwoKS5tYXNrTGVuZ3RofHxjLnNoaWZ0S2V5fHxrLS0sSShlLGMuc2hpZnRLZXk/ai5iZWdpbjprLGssITApfWVsc2UgaD09PWIua2V5Q29kZS5IT01FJiYhYy5zaGlmdEtleXx8aD09PWIua2V5Q29kZS5QQUdFX1VQPyhjLnByZXZlbnREZWZhdWx0KCksSShlLDAsYy5zaGlmdEtleT9qLmJlZ2luOjAsITApKTooZi51bmRvT25Fc2NhcGUmJmg9PT1iLmtleUNvZGUuRVNDQVBFfHw5MD09PWgmJmMuY3RybEtleSkmJmMuYWx0S2V5IT09ITA/KEcoZSwhMCwhMSxRLnNwbGl0KFwiXCIpKSxnLnRyaWdnZXIoXCJjbGlja1wiKSk6aCE9PWIua2V5Q29kZS5JTlNFUlR8fGMuc2hpZnRLZXl8fGMuY3RybEtleT9mLnRhYlRocm91Z2g9PT0hMCYmaD09PWIua2V5Q29kZS5UQUI/KGMuc2hpZnRLZXk9PT0hMD8obnVsbD09PXIoai5iZWdpbikubWF0Y2guZm4mJihqLmJlZ2luPUIoai5iZWdpbikpLGouZW5kPUMoai5iZWdpbiwhMCksai5iZWdpbj1DKGouZW5kLCEwKSk6KGouYmVnaW49QihqLmJlZ2luLCEwKSxqLmVuZD1CKGouYmVnaW4sITApLGouZW5kPGwoKS5tYXNrTGVuZ3RoJiZqLmVuZC0tKSxqLmJlZ2luPGwoKS5tYXNrTGVuZ3RoJiYoYy5wcmV2ZW50RGVmYXVsdCgpLEkoZSxqLmJlZ2luLGouZW5kKSkpOmMuc2hpZnRLZXl8fGYuaW5zZXJ0TW9kZT09PSExJiYoaD09PWIua2V5Q29kZS5SSUdIVD9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGE9SShlKTtJKGUsYS5iZWdpbil9LDApOmg9PT1iLmtleUNvZGUuTEVGVCYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBhPUkoZSk7SShlLFc/YS5iZWdpbisxOmEuYmVnaW4tMSl9LDApKTooZi5pbnNlcnRNb2RlPSFmLmluc2VydE1vZGUsSShlLGYuaW5zZXJ0TW9kZXx8ai5iZWdpbiE9PWwoKS5tYXNrTGVuZ3RoP2ouYmVnaW46ai5iZWdpbi0xKSk7Zi5vbktleURvd24uY2FsbCh0aGlzLGMsdigpLEkoZSkuYmVnaW4sZiksWj1hLmluQXJyYXkoaCxmLmlnbm9yYWJsZXMpIT09LTF9LGtleXByZXNzRXZlbnQ6ZnVuY3Rpb24oYyxkLGUsZyxoKXt2YXIgaT10aGlzLGo9YShpKSxrPWMud2hpY2h8fGMuY2hhckNvZGV8fGMua2V5Q29kZTtpZighKGQ9PT0hMHx8Yy5jdHJsS2V5JiZjLmFsdEtleSkmJihjLmN0cmxLZXl8fGMubWV0YUtleXx8WikpcmV0dXJuIGs9PT1iLmtleUNvZGUuRU5URVImJlEhPT12KCkuam9pbihcIlwiKSYmKFE9digpLmpvaW4oXCJcIiksXG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ai50cmlnZ2VyKFwiY2hhbmdlXCIpfSwwKSksITA7aWYoayl7NDY9PT1rJiZjLnNoaWZ0S2V5PT09ITEmJlwiLFwiPT09Zi5yYWRpeFBvaW50JiYoaz00NCk7dmFyIG4sbz1kP3tiZWdpbjpoLGVuZDpofTpJKGkpLHA9U3RyaW5nLmZyb21DaGFyQ29kZShrKTtsKCkud3JpdGVPdXRCdWZmZXI9ITA7dmFyIHE9eihvLHAsZyk7aWYocSE9PSExJiYobSghMCksbj12b2lkIDAhPT1xLmNhcmV0P3EuY2FyZXQ6ZD9xLnBvcysxOkIocS5wb3MpLGwoKS5wPW4pLGUhPT0hMSl7dmFyIHI9dGhpcztpZihzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zi5vbktleVZhbGlkYXRpb24uY2FsbChyLGsscSxmKX0sMCksbCgpLndyaXRlT3V0QnVmZmVyJiZxIT09ITEpe3ZhciBzPXYoKTtFKGkscyxmLm51bWVyaWNJbnB1dCYmdm9pZCAwPT09cS5jYXJldD9DKG4pOm4sYyxkIT09ITApLGQhPT0hMCYmc2V0VGltZW91dChmdW5jdGlvbigpe0wocyk9PT0hMCYmai50cmlnZ2VyKFwiY29tcGxldGVcIil9LDApfX1pZihjLnByZXZlbnREZWZhdWx0KCksZClyZXR1cm4gcS5mb3J3YXJkUG9zaXRpb249bixxfX0scGFzdGVFdmVudDpmdW5jdGlvbihiKXt2YXIgYyxkPXRoaXMsZT1iLm9yaWdpbmFsRXZlbnR8fGIsZz1hKGQpLGg9ZC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSxpPUkoZCk7VyYmKGM9aS5lbmQsaS5lbmQ9aS5iZWdpbixpLmJlZ2luPWMpO3ZhciBqPWguc3Vic3RyKDAsaS5iZWdpbiksaz1oLnN1YnN0cihpLmVuZCxoLmxlbmd0aCk7aWYoaj09PShXP3UoKS5yZXZlcnNlKCk6dSgpKS5zbGljZSgwLGkuYmVnaW4pLmpvaW4oXCJcIikmJihqPVwiXCIpLGs9PT0oVz91KCkucmV2ZXJzZSgpOnUoKSkuc2xpY2UoaS5lbmQpLmpvaW4oXCJcIikmJihrPVwiXCIpLFcmJihjPWosaj1rLGs9Yyksd2luZG93LmNsaXBib2FyZERhdGEmJndpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEpaD1qK3dpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpK2s7ZWxzZXtpZighZS5jbGlwYm9hcmREYXRhfHwhZS5jbGlwYm9hcmREYXRhLmdldERhdGEpcmV0dXJuITA7aD1qK2UuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKStrfXZhciBsPWg7aWYoYS5pc0Z1bmN0aW9uKGYub25CZWZvcmVQYXN0ZSkpe2lmKGw9Zi5vbkJlZm9yZVBhc3RlKGgsZiksbD09PSExKXJldHVybiBiLnByZXZlbnREZWZhdWx0KCk7bHx8KGw9aCl9cmV0dXJuIEcoZCwhMSwhMSxXP2wuc3BsaXQoXCJcIikucmV2ZXJzZSgpOmwudG9TdHJpbmcoKS5zcGxpdChcIlwiKSksRShkLHYoKSxCKG4oKSksYixRIT09digpLmpvaW4oXCJcIikpLEwodigpKT09PSEwJiZnLnRyaWdnZXIoXCJjb21wbGV0ZVwiKSxiLnByZXZlbnREZWZhdWx0KCl9LGlucHV0RmFsbEJhY2tFdmVudDpmdW5jdGlvbihjKXt2YXIgZD10aGlzLGU9ZC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7aWYodigpLmpvaW4oXCJcIikhPT1lKXt2YXIgZj1JKGQpO2lmKGU9ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXCIrYi5lc2NhcGVSZWdleCh1KCkuam9pbihcIlwiKSkrXCIpKlwiKSxcIlwiKSxoKXt2YXIgZz1lLnJlcGxhY2UodigpLmpvaW4oXCJcIiksXCJcIik7aWYoMT09PWcubGVuZ3RoKXt2YXIgaT1uZXcgYS5FdmVudChcImtleXByZXNzXCIpO3JldHVybiBpLndoaWNoPWcuY2hhckNvZGVBdCgwKSxhYS5rZXlwcmVzc0V2ZW50LmNhbGwoZCxpLCEwLCEwLCExLGwoKS52YWxpZFBvc2l0aW9uc1tmLmJlZ2luLTFdP2YuYmVnaW46Zi5iZWdpbi0xKSwhMX19aWYoZi5iZWdpbj5lLmxlbmd0aCYmKEkoZCxlLmxlbmd0aCksZj1JKGQpKSx2KCkubGVuZ3RoLWUubGVuZ3RoIT09MXx8ZS5jaGFyQXQoZi5iZWdpbik9PT12KClbZi5iZWdpbl18fGUuY2hhckF0KGYuYmVnaW4rMSk9PT12KClbZi5iZWdpbl18fEEoZi5iZWdpbikpe2Zvcih2YXIgaj1uKCkrMSxrPXUoKS5qb2luKFwiXCIpO251bGw9PT1lLm1hdGNoKGIuZXNjYXBlUmVnZXgoaykrXCIkXCIpOylrPWsuc2xpY2UoMSk7ZT1lLnJlcGxhY2UoayxcIlwiKSxlPWUuc3BsaXQoXCJcIiksRyhkLCEwLCExLGUsYyxmLmJlZ2luPGopLEwodigpKT09PSEwJiZhKGQpLnRyaWdnZXIoXCJjb21wbGV0ZVwiKX1lbHNlIGMua2V5Q29kZT1iLmtleUNvZGUuQkFDS1NQQUNFLGFhLmtleWRvd25FdmVudC5jYWxsKGQsYyk7Yy5wcmV2ZW50RGVmYXVsdCgpfX0sc2V0VmFsdWVFdmVudDpmdW5jdGlvbihiKXt2YXIgYz10aGlzLGQ9Yy5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7RyhjLCEwLCExLChhLmlzRnVuY3Rpb24oZi5vbkJlZm9yZU1hc2spP2Yub25CZWZvcmVNYXNrKGQsZil8fGQ6ZCkuc3BsaXQoXCJcIikpLFE9digpLmpvaW4oXCJcIiksKGYuY2xlYXJNYXNrT25Mb3N0Rm9jdXN8fGYuY2xlYXJJbmNvbXBsZXRlKSYmYy5pbnB1dG1hc2suX3ZhbHVlR2V0KCk9PT11KCkuam9pbihcIlwiKSYmYy5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpfSxmb2N1c0V2ZW50OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1iLmlucHV0bWFzay5fdmFsdWVHZXQoKTtmLnNob3dNYXNrT25Gb2N1cyYmKCFmLnNob3dNYXNrT25Ib3Zlcnx8Zi5zaG93TWFza09uSG92ZXImJlwiXCI9PT1jKSYmKGIuaW5wdXRtYXNrLl92YWx1ZUdldCgpIT09digpLmpvaW4oXCJcIik/RShiLHYoKSxCKG4oKSkpOiQ9PT0hMSYmSShiLEIobigpKSkpLGYucG9zaXRpb25DYXJldE9uVGFiPT09ITAmJmFhLmNsaWNrRXZlbnQuYXBwbHkoYixbYSwhMF0pLFE9digpLmpvaW4oXCJcIil9LG1vdXNlbGVhdmVFdmVudDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2lmKCQ9ITEsZi5jbGVhck1hc2tPbkxvc3RGb2N1cyYmZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWIpe3ZhciBjPXYoKS5zbGljZSgpLGQ9Yi5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7ZCE9PWIuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikmJlwiXCIhPT1kJiYobigpPT09LTEmJmQ9PT11KCkuam9pbihcIlwiKT9jPVtdOksoYyksRShiLGMpKX19LGNsaWNrRXZlbnQ6ZnVuY3Rpb24oYixjKXtmdW5jdGlvbiBkKGIpe2lmKFwiXCIhPT1mLnJhZGl4UG9pbnQpe3ZhciBjPWwoKS52YWxpZFBvc2l0aW9ucztpZih2b2lkIDA9PT1jW2JdfHxjW2JdLmlucHV0PT09RihiKSl7aWYoYjxCKC0xKSlyZXR1cm4hMDt2YXIgZD1hLmluQXJyYXkoZi5yYWRpeFBvaW50LHYoKSk7aWYoZCE9PS0xKXtmb3IodmFyIGUgaW4gYylpZihkPGUmJmNbZV0uaW5wdXQhPT1GKGUpKXJldHVybiExO3JldHVybiEwfX19cmV0dXJuITF9dmFyIGU9dGhpcztzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PWUpe3ZhciBiPUkoZSk7aWYoYyYmKGIuYmVnaW49Yi5lbmQpLGIuYmVnaW49PT1iLmVuZClzd2l0Y2goZi5wb3NpdGlvbkNhcmV0T25DbGljayl7Y2FzZVwibm9uZVwiOmJyZWFrO2Nhc2VcInJhZGl4Rm9jdXNcIjppZihkKGIuYmVnaW4pKXt2YXIgZz1hLmluQXJyYXkoZi5yYWRpeFBvaW50LHYoKS5qb2luKFwiXCIpKTtJKGUsZi5udW1lcmljSW5wdXQ/QihnKTpnKTticmVha31kZWZhdWx0OnZhciBoPWIuYmVnaW4saT1uKGgsITApLGo9QihpKTtpZihoPGopSShlLEEoaCl8fEEoaC0xKT9oOkIoaCkpO2Vsc2V7dmFyIGs9RihqKTsoXCJcIiE9PWsmJnYoKVtqXSE9PWsmJnIoaikubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyIT09ITB8fCFBKGopJiZyKGopLm1hdGNoLmRlZj09PWspJiYoaj1CKGopKSxJKGUsail9fX19LDApfSxkYmxjbGlja0V2ZW50OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe0koYiwwLEIobigpKSl9LDApfSxjdXRFdmVudDpmdW5jdGlvbihjKXt2YXIgZD10aGlzLGU9YShkKSxmPUkoZCksZz1jLm9yaWdpbmFsRXZlbnR8fGMsaD13aW5kb3cuY2xpcGJvYXJkRGF0YXx8Zy5jbGlwYm9hcmREYXRhLGk9Vz92KCkuc2xpY2UoZi5lbmQsZi5iZWdpbik6digpLnNsaWNlKGYuYmVnaW4sZi5lbmQpO2guc2V0RGF0YShcInRleHRcIixXP2kucmV2ZXJzZSgpLmpvaW4oXCJcIik6aS5qb2luKFwiXCIpKSxkb2N1bWVudC5leGVjQ29tbWFuZCYmZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpLE0oZCxiLmtleUNvZGUuREVMRVRFLGYpLEUoZCx2KCksbCgpLnAsYyxRIT09digpLmpvaW4oXCJcIikpLGQuaW5wdXRtYXNrLl92YWx1ZUdldCgpPT09dSgpLmpvaW4oXCJcIikmJmUudHJpZ2dlcihcImNsZWFyZWRcIil9LGJsdXJFdmVudDpmdW5jdGlvbihiKXt2YXIgYz1hKHRoaXMpLGQ9dGhpcztpZihkLmlucHV0bWFzayl7dmFyIGU9ZC5pbnB1dG1hc2suX3ZhbHVlR2V0KCksZz12KCkuc2xpY2UoKTtRIT09Zy5qb2luKFwiXCIpJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yy50cmlnZ2VyKFwiY2hhbmdlXCIpLFE9Zy5qb2luKFwiXCIpfSwwKSxcIlwiIT09ZSYmKGYuY2xlYXJNYXNrT25Mb3N0Rm9jdXMmJihuKCk9PT0tMSYmZT09PXUoKS5qb2luKFwiXCIpP2c9W106SyhnKSksTChnKT09PSExJiYoc2V0VGltZW91dChmdW5jdGlvbigpe2MudHJpZ2dlcihcImluY29tcGxldGVcIil9LDApLGYuY2xlYXJJbmNvbXBsZXRlJiYobSgpLGc9Zi5jbGVhck1hc2tPbkxvc3RGb2N1cz9bXTp1KCkuc2xpY2UoKSkpLEUoZCxnLHZvaWQgMCxiKSl9fSxtb3VzZWVudGVyRXZlbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczskPSEwLGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1iJiZmLnNob3dNYXNrT25Ib3ZlciYmYi5pbnB1dG1hc2suX3ZhbHVlR2V0KCkhPT12KCkuam9pbihcIlwiKSYmRShiLHYoKSl9LHN1Ym1pdEV2ZW50OmZ1bmN0aW9uKGEpe1EhPT12KCkuam9pbihcIlwiKSYmUi50cmlnZ2VyKFwiY2hhbmdlXCIpLGYuY2xlYXJNYXNrT25Mb3N0Rm9jdXMmJm4oKT09PS0xJiZWLmlucHV0bWFzay5fdmFsdWVHZXQmJlYuaW5wdXRtYXNrLl92YWx1ZUdldCgpPT09dSgpLmpvaW4oXCJcIikmJlYuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKSxmLnJlbW92ZU1hc2tPblN1Ym1pdCYmKFYuaW5wdXRtYXNrLl92YWx1ZVNldChWLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCksITApLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtFKFYsdigpKX0sMCkpfSxyZXNldEV2ZW50OmZ1bmN0aW9uKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtSLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKX0sMCl9fTtpZih2b2lkIDAhPT1jKXN3aXRjaChjLmFjdGlvbil7Y2FzZVwiaXNDb21wbGV0ZVwiOnJldHVybiBWPWMuZWwsTCh2KCkpO2Nhc2VcInVubWFza2VkdmFsdWVcIjpyZXR1cm4gdm9pZCAwIT09ViYmdm9pZCAwPT09Yy52YWx1ZXx8KFU9Yy52YWx1ZSxVPShhLmlzRnVuY3Rpb24oZi5vbkJlZm9yZU1hc2spP2Yub25CZWZvcmVNYXNrKFUsZil8fFU6VSkuc3BsaXQoXCJcIiksRyh2b2lkIDAsITEsITEsVz9VLnJldmVyc2UoKTpVKSxhLmlzRnVuY3Rpb24oZi5vbkJlZm9yZVdyaXRlKSYmZi5vbkJlZm9yZVdyaXRlKHZvaWQgMCx2KCksMCxmKSksSChWKTtjYXNlXCJtYXNrXCI6UChWKTticmVhaztjYXNlXCJmb3JtYXRcIjpyZXR1cm4gVT0oYS5pc0Z1bmN0aW9uKGYub25CZWZvcmVNYXNrKT9mLm9uQmVmb3JlTWFzayhjLnZhbHVlLGYpfHxjLnZhbHVlOmMudmFsdWUpLnNwbGl0KFwiXCIpLEcodm9pZCAwLCExLCExLFc/VS5yZXZlcnNlKCk6VSksYS5pc0Z1bmN0aW9uKGYub25CZWZvcmVXcml0ZSkmJmYub25CZWZvcmVXcml0ZSh2b2lkIDAsdigpLDAsZiksYy5tZXRhZGF0YT97dmFsdWU6Vz92KCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKTp2KCkuam9pbihcIlwiKSxtZXRhZGF0YTplLmNhbGwodGhpcyx7YWN0aW9uOlwiZ2V0bWV0YWRhdGFcIn0sZCxmKX06Vz92KCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKTp2KCkuam9pbihcIlwiKTtjYXNlXCJpc1ZhbGlkXCI6Yy52YWx1ZT8oVT1jLnZhbHVlLnNwbGl0KFwiXCIpLEcodm9pZCAwLCExLCEwLFc/VS5yZXZlcnNlKCk6VSkpOmMudmFsdWU9digpLmpvaW4oXCJcIik7Zm9yKHZhciBiYT12KCksY2E9SigpLGRhPWJhLmxlbmd0aC0xO2RhPmNhJiYhQShkYSk7ZGEtLSk7cmV0dXJuIGJhLnNwbGljZShjYSxkYSsxLWNhKSxMKGJhKSYmYy52YWx1ZT09PXYoKS5qb2luKFwiXCIpO2Nhc2VcImdldGVtcHR5bWFza1wiOnJldHVybiB1KCkuam9pbihcIlwiKTtjYXNlXCJyZW1vdmVcIjppZihWKXtSPWEoViksVi5pbnB1dG1hc2suX3ZhbHVlU2V0KEgoVikpLF8ub2ZmKFYpO3ZhciBlYTtPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJiZPYmplY3QuZ2V0UHJvdG90eXBlT2Y/KGVhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKFYpLFwidmFsdWVcIiksZWEmJlYuaW5wdXRtYXNrLl9fdmFsdWVHZXQmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWLFwidmFsdWVcIix7Z2V0OlYuaW5wdXRtYXNrLl9fdmFsdWVHZXQsc2V0OlYuaW5wdXRtYXNrLl9fdmFsdWVTZXQsY29uZmlndXJhYmxlOiEwfSkpOmRvY3VtZW50Ll9fbG9va3VwR2V0dGVyX18mJlYuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpJiZWLmlucHV0bWFzay5fX3ZhbHVlR2V0JiYoVi5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIixWLmlucHV0bWFzay5fX3ZhbHVlR2V0KSxWLl9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLFYuaW5wdXRtYXNrLl9fdmFsdWVTZXQpKSxWLmlucHV0bWFzaz12b2lkIDB9cmV0dXJuIFY7Y2FzZVwiZ2V0bWV0YWRhdGFcIjppZihhLmlzQXJyYXkoZC5tZXRhZGF0YSkpe3ZhciBmYT1rKCEwLDAsITEpLmpvaW4oXCJcIik7cmV0dXJuIGEuZWFjaChkLm1ldGFkYXRhLGZ1bmN0aW9uKGEsYil7aWYoYi5tYXNrPT09ZmEpcmV0dXJuIGZhPWIsITF9KSxmYX1yZXR1cm4gZC5tZXRhZGF0YX19dmFyIGY9bmF2aWdhdG9yLnVzZXJBZ2VudCxnPS9tb2JpbGUvaS50ZXN0KGYpLGg9L2llbW9iaWxlL2kudGVzdChmKSxpPS9pcGhvbmUvaS50ZXN0KGYpJiYhaCxqPS9hbmRyb2lkL2kudGVzdChmKSYmIWg7cmV0dXJuIGIucHJvdG90eXBlPXtkZWZhdWx0czp7cGxhY2Vob2xkZXI6XCJfXCIsb3B0aW9uYWxtYXJrZXI6e3N0YXJ0OlwiW1wiLGVuZDpcIl1cIn0scXVhbnRpZmllcm1hcmtlcjp7c3RhcnQ6XCJ7XCIsZW5kOlwifVwifSxncm91cG1hcmtlcjp7c3RhcnQ6XCIoXCIsZW5kOlwiKVwifSxhbHRlcm5hdG9ybWFya2VyOlwifFwiLGVzY2FwZUNoYXI6XCJcXFxcXCIsbWFzazpudWxsLG9uY29tcGxldGU6YS5ub29wLG9uaW5jb21wbGV0ZTphLm5vb3Asb25jbGVhcmVkOmEubm9vcCxyZXBlYXQ6MCxncmVlZHk6ITAsYXV0b1VubWFzazohMSxyZW1vdmVNYXNrT25TdWJtaXQ6ITEsY2xlYXJNYXNrT25Mb3N0Rm9jdXM6ITAsaW5zZXJ0TW9kZTohMCxjbGVhckluY29tcGxldGU6ITEsYWxpYXNlczp7fSxhbGlhczpudWxsLG9uS2V5RG93bjphLm5vb3Asb25CZWZvcmVNYXNrOm51bGwsb25CZWZvcmVQYXN0ZTpmdW5jdGlvbihiLGMpe3JldHVybiBhLmlzRnVuY3Rpb24oYy5vbkJlZm9yZU1hc2spP2Mub25CZWZvcmVNYXNrKGIsYyk6Yn0sb25CZWZvcmVXcml0ZTpudWxsLG9uVW5NYXNrOm51bGwsc2hvd01hc2tPbkZvY3VzOiEwLHNob3dNYXNrT25Ib3ZlcjohMCxvbktleVZhbGlkYXRpb246YS5ub29wLHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6XCIgXCIsbnVtZXJpY0lucHV0OiExLHJpZ2h0QWxpZ246ITEsdW5kb09uRXNjYXBlOiEwLHJhZGl4UG9pbnQ6XCJcIixyYWRpeFBvaW50RGVmaW5pdGlvblN5bWJvbDp2b2lkIDAsZ3JvdXBTZXBhcmF0b3I6XCJcIixrZWVwU3RhdGljOm51bGwscG9zaXRpb25DYXJldE9uVGFiOiEwLHRhYlRocm91Z2g6ITEsc3VwcG9ydHNJbnB1dFR5cGU6W1widGV4dFwiLFwidGVsXCIsXCJwYXNzd29yZFwiXSxkZWZpbml0aW9uczp7OTp7dmFsaWRhdG9yOlwiWzAtOV1cIixjYXJkaW5hbGl0eToxLGRlZmluaXRpb25TeW1ib2w6XCIqXCJ9LGE6e3ZhbGlkYXRvcjpcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsY2FyZGluYWxpdHk6MSxkZWZpbml0aW9uU3ltYm9sOlwiKlwifSxcIipcIjp7dmFsaWRhdG9yOlwiWzAtOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixjYXJkaW5hbGl0eToxfX0saWdub3JhYmxlczpbOCw5LDEzLDE5LDI3LDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQ1LDQ2LDkzLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzXSxpc0NvbXBsZXRlOm51bGwsY2FuQ2xlYXJQb3NpdGlvbjphLm5vb3AscG9zdFZhbGlkYXRpb246bnVsbCxzdGF0aWNEZWZpbml0aW9uU3ltYm9sOnZvaWQgMCxqaXRNYXNraW5nOiExLG51bGxhYmxlOiEwLGlucHV0RXZlbnRPbmx5OiExLG5vVmFsdWVQYXRjaGluZzohMSxwb3NpdGlvbkNhcmV0T25DbGljazpcImx2cFwiLGNhc2luZzpudWxsLGlucHV0bW9kZTpcInZlcmJhdGltXCIsY29sb3JNYXNrOiExLGFuZHJvaWRIYWNrOiExfSxtYXNrc0NhY2hlOnt9LG1hc2s6ZnVuY3Rpb24oZil7ZnVuY3Rpb24gZyhiLGQsZSxmKXtmdW5jdGlvbiBnKGEsYyl7Yz12b2lkIDAhPT1jP2M6Yi5nZXRBdHRyaWJ1dGUoZitcIi1cIithKSxudWxsIT09YyYmKFwic3RyaW5nXCI9PXR5cGVvZiBjJiYoMD09PWEuaW5kZXhPZihcIm9uXCIpP2M9d2luZG93W2NdOlwiZmFsc2VcIj09PWM/Yz0hMTpcInRydWVcIj09PWMmJihjPSEwKSksZVthXT1jKX12YXIgaCxpLGosayxsPWIuZ2V0QXR0cmlidXRlKGYpO2lmKGwmJlwiXCIhPT1sJiYobD1sLnJlcGxhY2UobmV3IFJlZ0V4cChcIidcIixcImdcIiksJ1wiJyksaT1KU09OLnBhcnNlKFwie1wiK2wrXCJ9XCIpKSxpKXtqPXZvaWQgMDtmb3IoayBpbiBpKWlmKFwiYWxpYXNcIj09PWsudG9Mb3dlckNhc2UoKSl7aj1pW2tdO2JyZWFrfX1nKFwiYWxpYXNcIixqKSxlLmFsaWFzJiZjKGUuYWxpYXMsZSxkKTtmb3IoaCBpbiBkKXtpZihpKXtqPXZvaWQgMDtmb3IoayBpbiBpKWlmKGsudG9Mb3dlckNhc2UoKT09PWgudG9Mb3dlckNhc2UoKSl7aj1pW2tdO2JyZWFrfX1nKGgsail9cmV0dXJuIGEuZXh0ZW5kKCEwLGQsZSksZH12YXIgaD10aGlzO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBmJiYoZj1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChmKXx8ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChmKSksZj1mLm5vZGVOYW1lP1tmXTpmLGEuZWFjaChmLGZ1bmN0aW9uKGMsZil7dmFyIGk9YS5leHRlbmQoITAse30saC5vcHRzKTtnKGYsaSxhLmV4dGVuZCghMCx7fSxoLnVzZXJPcHRpb25zKSxoLmRhdGFBdHRyaWJ1dGUpO3ZhciBqPWQoaSxoLm5vTWFza3NDYWNoZSk7dm9pZCAwIT09aiYmKHZvaWQgMCE9PWYuaW5wdXRtYXNrJiZmLmlucHV0bWFzay5yZW1vdmUoKSxmLmlucHV0bWFzaz1uZXcgYixmLmlucHV0bWFzay5vcHRzPWksZi5pbnB1dG1hc2subm9NYXNrc0NhY2hlPWgubm9NYXNrc0NhY2hlLGYuaW5wdXRtYXNrLnVzZXJPcHRpb25zPWEuZXh0ZW5kKCEwLHt9LGgudXNlck9wdGlvbnMpLGYuaW5wdXRtYXNrLmVsPWYsZi5pbnB1dG1hc2subWFza3NldD1qLGEuZGF0YShmLFwiX2lucHV0bWFza19vcHRzXCIsaSksZS5jYWxsKGYuaW5wdXRtYXNrLHthY3Rpb246XCJtYXNrXCJ9KSl9KSxmJiZmWzBdP2ZbMF0uaW5wdXRtYXNrfHx0aGlzOnRoaXN9LG9wdGlvbjpmdW5jdGlvbihiLGMpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBiP3RoaXMub3B0c1tiXTpcIm9iamVjdFwiPT10eXBlb2YgYj8oYS5leHRlbmQodGhpcy51c2VyT3B0aW9ucyxiKSx0aGlzLmVsJiZjIT09ITAmJnRoaXMubWFzayh0aGlzLmVsKSx0aGlzKTp2b2lkIDB9LHVubWFza2VkdmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubWFza3NldD10aGlzLm1hc2tzZXR8fGQodGhpcy5vcHRzLHRoaXMubm9NYXNrc0NhY2hlKSxlLmNhbGwodGhpcyx7YWN0aW9uOlwidW5tYXNrZWR2YWx1ZVwiLHZhbHVlOmF9KX0scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzLHthY3Rpb246XCJyZW1vdmVcIn0pfSxnZXRlbXB0eW1hc2s6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8ZCh0aGlzLm9wdHMsdGhpcy5ub01hc2tzQ2FjaGUpLGUuY2FsbCh0aGlzLHthY3Rpb246XCJnZXRlbXB0eW1hc2tcIn0pfSxoYXNNYXNrZWRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLm9wdHMuYXV0b1VubWFza30saXNDb21wbGV0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hc2tzZXQ9dGhpcy5tYXNrc2V0fHxkKHRoaXMub3B0cyx0aGlzLm5vTWFza3NDYWNoZSksZS5jYWxsKHRoaXMse2FjdGlvbjpcImlzQ29tcGxldGVcIn0pfSxnZXRtZXRhZGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hc2tzZXQ9dGhpcy5tYXNrc2V0fHxkKHRoaXMub3B0cyx0aGlzLm5vTWFza3NDYWNoZSksZS5jYWxsKHRoaXMse2FjdGlvbjpcImdldG1ldGFkYXRhXCJ9KX0saXNWYWxpZDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8ZCh0aGlzLm9wdHMsdGhpcy5ub01hc2tzQ2FjaGUpLGUuY2FsbCh0aGlzLHthY3Rpb246XCJpc1ZhbGlkXCIsdmFsdWU6YX0pfSxmb3JtYXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8ZCh0aGlzLm9wdHMsdGhpcy5ub01hc2tzQ2FjaGUpLGUuY2FsbCh0aGlzLHthY3Rpb246XCJmb3JtYXRcIix2YWx1ZTphLG1ldGFkYXRhOmJ9KX0sYW5hbHlzZU1hc2s6ZnVuY3Rpb24oYixjKXtmdW5jdGlvbiBkKGEsYixjLGQpe3RoaXMubWF0Y2hlcz1bXSx0aGlzLm9wZW5Hcm91cD1hfHwhMSx0aGlzLmlzR3JvdXA9YXx8ITEsdGhpcy5pc09wdGlvbmFsPWJ8fCExLHRoaXMuaXNRdWFudGlmaWVyPWN8fCExLHRoaXMuaXNBbHRlcm5hdG9yPWR8fCExLHRoaXMucXVhbnRpZmllcj17bWluOjEsbWF4OjF9fWZ1bmN0aW9uIGUoYixkLGUpe3ZhciBmPWMuZGVmaW5pdGlvbnNbZF07ZT12b2lkIDAhPT1lP2U6Yi5tYXRjaGVzLmxlbmd0aDt2YXIgZz1iLm1hdGNoZXNbZS0xXTtpZihmJiYhcSl7Zi5wbGFjZWhvbGRlcj1hLmlzRnVuY3Rpb24oZi5wbGFjZWhvbGRlcik/Zi5wbGFjZWhvbGRlcihjKTpmLnBsYWNlaG9sZGVyO2Zvcih2YXIgaD1mLnByZXZhbGlkYXRvcixpPWg/aC5sZW5ndGg6MCxqPTE7ajxmLmNhcmRpbmFsaXR5O2orKyl7dmFyIGs9aT49aj9oW2otMV06W10sbD1rLnZhbGlkYXRvcixtPWsuY2FyZGluYWxpdHk7Yi5tYXRjaGVzLnNwbGljZShlKyssMCx7Zm46bD9cInN0cmluZ1wiPT10eXBlb2YgbD9uZXcgUmVnRXhwKGwpOm5ldyBmdW5jdGlvbigpe3RoaXMudGVzdD1sfTpuZXcgUmVnRXhwKFwiLlwiKSxjYXJkaW5hbGl0eTptP206MSxvcHRpb25hbGl0eTpiLmlzT3B0aW9uYWwsbmV3QmxvY2tNYXJrZXI6dm9pZCAwPT09Z3x8Zy5kZWYhPT0oZi5kZWZpbml0aW9uU3ltYm9sfHxkKSxjYXNpbmc6Zi5jYXNpbmcsZGVmOmYuZGVmaW5pdGlvblN5bWJvbHx8ZCxwbGFjZWhvbGRlcjpmLnBsYWNlaG9sZGVyLG5hdGl2ZURlZjpkfSksZz1iLm1hdGNoZXNbZS0xXX1iLm1hdGNoZXMuc3BsaWNlKGUrKywwLHtmbjpmLnZhbGlkYXRvcj9cInN0cmluZ1wiPT10eXBlb2YgZi52YWxpZGF0b3I/bmV3IFJlZ0V4cChmLnZhbGlkYXRvcik6bmV3IGZ1bmN0aW9uKCl7dGhpcy50ZXN0PWYudmFsaWRhdG9yfTpuZXcgUmVnRXhwKFwiLlwiKSxjYXJkaW5hbGl0eTpmLmNhcmRpbmFsaXR5LG9wdGlvbmFsaXR5OmIuaXNPcHRpb25hbCxuZXdCbG9ja01hcmtlcjp2b2lkIDA9PT1nfHxnLmRlZiE9PShmLmRlZmluaXRpb25TeW1ib2x8fGQpLGNhc2luZzpmLmNhc2luZyxkZWY6Zi5kZWZpbml0aW9uU3ltYm9sfHxkLHBsYWNlaG9sZGVyOmYucGxhY2Vob2xkZXIsbmF0aXZlRGVmOmR9KX1lbHNlIGIubWF0Y2hlcy5zcGxpY2UoZSsrLDAse2ZuOm51bGwsY2FyZGluYWxpdHk6MCxvcHRpb25hbGl0eTpiLmlzT3B0aW9uYWwsbmV3QmxvY2tNYXJrZXI6dm9pZCAwPT09Z3x8Zy5kZWYhPT1kLGNhc2luZzpudWxsLGRlZjpjLnN0YXRpY0RlZmluaXRpb25TeW1ib2x8fGQscGxhY2Vob2xkZXI6dm9pZCAwIT09Yy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sP2Q6dm9pZCAwLG5hdGl2ZURlZjpkfSkscT0hMX1mdW5jdGlvbiBmKGIpe2ImJmIubWF0Y2hlcyYmYS5lYWNoKGIubWF0Y2hlcyxmdW5jdGlvbihhLGQpe3ZhciBnPWIubWF0Y2hlc1thKzFdOyh2b2lkIDA9PT1nfHx2b2lkIDA9PT1nLm1hdGNoZXN8fGcuaXNRdWFudGlmaWVyPT09ITEpJiZkJiZkLmlzR3JvdXAmJihkLmlzR3JvdXA9ITEsZShkLGMuZ3JvdXBtYXJrZXIuc3RhcnQsMCksZC5vcGVuR3JvdXAhPT0hMCYmZShkLGMuZ3JvdXBtYXJrZXIuZW5kKSksZihkKX0pfWZ1bmN0aW9uIGcoKXtpZihzLmxlbmd0aD4wKXtpZihsPXNbcy5sZW5ndGgtMV0sZShsLGopLGwuaXNBbHRlcm5hdG9yKXttPXMucG9wKCk7Zm9yKHZhciBhPTA7YTxtLm1hdGNoZXMubGVuZ3RoO2ErKyltLm1hdGNoZXNbYV0uaXNHcm91cD0hMTtzLmxlbmd0aD4wPyhsPXNbcy5sZW5ndGgtMV0sbC5tYXRjaGVzLnB1c2gobSkpOnIubWF0Y2hlcy5wdXNoKG0pfX1lbHNlIGUocixqKX1mdW5jdGlvbiBoKGEpe2Z1bmN0aW9uIGIoYSl7cmV0dXJuIGE9PT1jLm9wdGlvbmFsbWFya2VyLnN0YXJ0P2E9Yy5vcHRpb25hbG1hcmtlci5lbmQ6YT09PWMub3B0aW9uYWxtYXJrZXIuZW5kP2E9Yy5vcHRpb25hbG1hcmtlci5zdGFydDphPT09Yy5ncm91cG1hcmtlci5zdGFydD9hPWMuZ3JvdXBtYXJrZXIuZW5kOmE9PT1jLmdyb3VwbWFya2VyLmVuZCYmKGE9Yy5ncm91cG1hcmtlci5zdGFydCksYX1hLm1hdGNoZXM9YS5tYXRjaGVzLnJldmVyc2UoKTtmb3IodmFyIGQgaW4gYS5tYXRjaGVzKXt2YXIgZT1wYXJzZUludChkKTtpZihhLm1hdGNoZXNbZF0uaXNRdWFudGlmaWVyJiZhLm1hdGNoZXNbZSsxXSYmYS5tYXRjaGVzW2UrMV0uaXNHcm91cCl7dmFyIGY9YS5tYXRjaGVzW2RdO2EubWF0Y2hlcy5zcGxpY2UoZCwxKSxhLm1hdGNoZXMuc3BsaWNlKGUrMSwwLGYpfXZvaWQgMCE9PWEubWF0Y2hlc1tkXS5tYXRjaGVzP2EubWF0Y2hlc1tkXT1oKGEubWF0Y2hlc1tkXSk6YS5tYXRjaGVzW2RdPWIoYS5tYXRjaGVzW2RdKX1yZXR1cm4gYX1mb3IodmFyIGksaixrLGwsbSxuLG8scD0vKD86Wz8qK118XFx7WzAtOVxcK1xcKl0rKD86LFswLTlcXCtcXCpdKik/XFx9KXxbXi4/KiteJHtbXSgpfFxcXFxdK3wuL2cscT0hMSxyPW5ldyBkLHM9W10sdD1bXTtpPXAuZXhlYyhiKTspaWYoaj1pWzBdLHEpZygpO2Vsc2Ugc3dpdGNoKGouY2hhckF0KDApKXtjYXNlIGMuZXNjYXBlQ2hhcjpxPSEwO2JyZWFrO2Nhc2UgYy5vcHRpb25hbG1hcmtlci5lbmQ6Y2FzZSBjLmdyb3VwbWFya2VyLmVuZDppZihrPXMucG9wKCksay5vcGVuR3JvdXA9ITEsdm9pZCAwIT09aylpZihzLmxlbmd0aD4wKXtpZihsPXNbcy5sZW5ndGgtMV0sbC5tYXRjaGVzLnB1c2goayksbC5pc0FsdGVybmF0b3Ipe209cy5wb3AoKTtmb3IodmFyIHU9MDt1PG0ubWF0Y2hlcy5sZW5ndGg7dSsrKW0ubWF0Y2hlc1t1XS5pc0dyb3VwPSExO3MubGVuZ3RoPjA/KGw9c1tzLmxlbmd0aC0xXSxsLm1hdGNoZXMucHVzaChtKSk6ci5tYXRjaGVzLnB1c2gobSl9fWVsc2Ugci5tYXRjaGVzLnB1c2goayk7ZWxzZSBnKCk7YnJlYWs7Y2FzZSBjLm9wdGlvbmFsbWFya2VyLnN0YXJ0OnMucHVzaChuZXcgZCgoITEpLCghMCkpKTticmVhaztjYXNlIGMuZ3JvdXBtYXJrZXIuc3RhcnQ6cy5wdXNoKG5ldyBkKCghMCkpKTticmVhaztjYXNlIGMucXVhbnRpZmllcm1hcmtlci5zdGFydDp2YXIgdj1uZXcgZCgoITEpLCghMSksKCEwKSk7aj1qLnJlcGxhY2UoL1t7fV0vZyxcIlwiKTt2YXIgdz1qLnNwbGl0KFwiLFwiKSx4PWlzTmFOKHdbMF0pP3dbMF06cGFyc2VJbnQod1swXSkseT0xPT09dy5sZW5ndGg/eDppc05hTih3WzFdKT93WzFdOnBhcnNlSW50KHdbMV0pO2lmKFwiKlwiIT09eSYmXCIrXCIhPT15fHwoeD1cIipcIj09PXk/MDoxKSx2LnF1YW50aWZpZXI9e21pbjp4LG1heDp5fSxzLmxlbmd0aD4wKXt2YXIgej1zW3MubGVuZ3RoLTFdLm1hdGNoZXM7aT16LnBvcCgpLGkuaXNHcm91cHx8KG89bmV3IGQoKCEwKSksby5tYXRjaGVzLnB1c2goaSksaT1vKSx6LnB1c2goaSksei5wdXNoKHYpfWVsc2UgaT1yLm1hdGNoZXMucG9wKCksaS5pc0dyb3VwfHwobz1uZXcgZCgoITApKSxvLm1hdGNoZXMucHVzaChpKSxpPW8pLHIubWF0Y2hlcy5wdXNoKGkpLHIubWF0Y2hlcy5wdXNoKHYpO2JyZWFrO2Nhc2UgYy5hbHRlcm5hdG9ybWFya2VyOnMubGVuZ3RoPjA/KGw9c1tzLmxlbmd0aC0xXSxuPWwubWF0Y2hlcy5wb3AoKSk6bj1yLm1hdGNoZXMucG9wKCksbi5pc0FsdGVybmF0b3I/cy5wdXNoKG4pOihtPW5ldyBkKCghMSksKCExKSwoITEpLCghMCkpLG0ubWF0Y2hlcy5wdXNoKG4pLHMucHVzaChtKSk7YnJlYWs7ZGVmYXVsdDpnKCl9Zm9yKDtzLmxlbmd0aD4wOylrPXMucG9wKCksci5tYXRjaGVzLnB1c2goayk7cmV0dXJuIHIubWF0Y2hlcy5sZW5ndGg+MCYmKGYociksdC5wdXNoKHIpKSxjLm51bWVyaWNJbnB1dCYmaCh0WzBdKSx0fX0sYi5leHRlbmREZWZhdWx0cz1mdW5jdGlvbihjKXthLmV4dGVuZCghMCxiLnByb3RvdHlwZS5kZWZhdWx0cyxjKX0sYi5leHRlbmREZWZpbml0aW9ucz1mdW5jdGlvbihjKXthLmV4dGVuZCghMCxiLnByb3RvdHlwZS5kZWZhdWx0cy5kZWZpbml0aW9ucyxjKX0sYi5leHRlbmRBbGlhc2VzPWZ1bmN0aW9uKGMpe2EuZXh0ZW5kKCEwLGIucHJvdG90eXBlLmRlZmF1bHRzLmFsaWFzZXMsYyl9LGIuZm9ybWF0PWZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gYihjKS5mb3JtYXQoYSxkKX0sYi51bm1hc2s9ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYihjKS51bm1hc2tlZHZhbHVlKGEpfSxiLmlzVmFsaWQ9ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYihjKS5pc1ZhbGlkKGEpfSxiLnJlbW92ZT1mdW5jdGlvbihiKXthLmVhY2goYixmdW5jdGlvbihhLGIpe2IuaW5wdXRtYXNrJiZiLmlucHV0bWFzay5yZW1vdmUoKX0pfSxiLmVzY2FwZVJlZ2V4PWZ1bmN0aW9uKGEpe3ZhciBiPVtcIi9cIixcIi5cIixcIipcIixcIitcIixcIj9cIixcInxcIixcIihcIixcIilcIixcIltcIixcIl1cIixcIntcIixcIn1cIixcIlxcXFxcIixcIiRcIixcIl5cIl07cmV0dXJuIGEucmVwbGFjZShuZXcgUmVnRXhwKFwiKFxcXFxcIitiLmpvaW4oXCJ8XFxcXFwiKStcIilcIixcImdpbVwiKSxcIlxcXFwkMVwiKX0sYi5rZXlDb2RlPXtBTFQ6MTgsQkFDS1NQQUNFOjgsQkFDS1NQQUNFX1NBRkFSSToxMjcsQ0FQU19MT0NLOjIwLENPTU1BOjE4OCxDT01NQU5EOjkxLENPTU1BTkRfTEVGVDo5MSxDT01NQU5EX1JJR0hUOjkzLENPTlRST0w6MTcsREVMRVRFOjQ2LERPV046NDAsRU5EOjM1LEVOVEVSOjEzLEVTQ0FQRToyNyxIT01FOjM2LElOU0VSVDo0NSxMRUZUOjM3LE1FTlU6OTMsTlVNUEFEX0FERDoxMDcsTlVNUEFEX0RFQ0lNQUw6MTEwLE5VTVBBRF9ESVZJREU6MTExLE5VTVBBRF9FTlRFUjoxMDgsTlVNUEFEX01VTFRJUExZOjEwNixOVU1QQURfU1VCVFJBQ1Q6MTA5LFBBR0VfRE9XTjozNCxQQUdFX1VQOjMzLFBFUklPRDoxOTAsUklHSFQ6MzksU0hJRlQ6MTYsU1BBQ0U6MzIsVEFCOjksVVA6MzgsV0lORE9XUzo5MSxYOjg4fSx3aW5kb3cuSW5wdXRtYXNrPWIsYn0oalF1ZXJ5KSxmdW5jdGlvbihhLGIpe3JldHVybiB2b2lkIDA9PT1hLmZuLmlucHV0bWFzayYmKGEuZm4uaW5wdXRtYXNrPWZ1bmN0aW9uKGMsZCl7dmFyIGUsZj10aGlzWzBdO2lmKHZvaWQgMD09PWQmJihkPXt9KSxcInN0cmluZ1wiPT10eXBlb2YgYylzd2l0Y2goYyl7Y2FzZVwidW5tYXNrZWR2YWx1ZVwiOnJldHVybiBmJiZmLmlucHV0bWFzaz9mLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCk6YShmKS52YWwoKTtjYXNlXCJyZW1vdmVcIjpyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5pbnB1dG1hc2smJnRoaXMuaW5wdXRtYXNrLnJlbW92ZSgpfSk7Y2FzZVwiZ2V0ZW1wdHltYXNrXCI6cmV0dXJuIGYmJmYuaW5wdXRtYXNrP2YuaW5wdXRtYXNrLmdldGVtcHR5bWFzaygpOlwiXCI7Y2FzZVwiaGFzTWFza2VkVmFsdWVcIjpyZXR1cm4hKCFmfHwhZi5pbnB1dG1hc2spJiZmLmlucHV0bWFzay5oYXNNYXNrZWRWYWx1ZSgpO2Nhc2VcImlzQ29tcGxldGVcIjpyZXR1cm4hZnx8IWYuaW5wdXRtYXNrfHxmLmlucHV0bWFzay5pc0NvbXBsZXRlKCk7Y2FzZVwiZ2V0bWV0YWRhdGFcIjpyZXR1cm4gZiYmZi5pbnB1dG1hc2s/Zi5pbnB1dG1hc2suZ2V0bWV0YWRhdGEoKTp2b2lkIDA7Y2FzZVwic2V0dmFsdWVcIjphKGYpLnZhbChkKSxmJiZ2b2lkIDA9PT1mLmlucHV0bWFzayYmYShmKS50cmlnZ2VySGFuZGxlcihcInNldHZhbHVlXCIpO2JyZWFrO2Nhc2VcIm9wdGlvblwiOmlmKFwic3RyaW5nXCIhPXR5cGVvZiBkKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtpZih2b2lkIDAhPT10aGlzLmlucHV0bWFzaylyZXR1cm4gdGhpcy5pbnB1dG1hc2sub3B0aW9uKGQpfSk7aWYoZiYmdm9pZCAwIT09Zi5pbnB1dG1hc2spcmV0dXJuIGYuaW5wdXRtYXNrLm9wdGlvbihkKTticmVhaztkZWZhdWx0OnJldHVybiBkLmFsaWFzPWMsZT1uZXcgYihkKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtlLm1hc2sodGhpcyl9KX1lbHNle2lmKFwib2JqZWN0XCI9PXR5cGVvZiBjKXJldHVybiBlPW5ldyBiKGMpLHZvaWQgMD09PWMubWFzayYmdm9pZCAwPT09Yy5hbGlhcz90aGlzLmVhY2goZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5pbnB1dG1hc2s/dGhpcy5pbnB1dG1hc2sub3B0aW9uKGMpOnZvaWQgZS5tYXNrKHRoaXMpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZS5tYXNrKHRoaXMpfSk7aWYodm9pZCAwPT09YylyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZT1uZXcgYihkKSxlLm1hc2sodGhpcyl9KX19KSxhLmZuLmlucHV0bWFza30oalF1ZXJ5LElucHV0bWFzayksZnVuY3Rpb24oYSxiKXt9KGpRdWVyeSxJbnB1dG1hc2spLGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtyZXR1cm4gaXNOYU4oYSl8fDI5PT09bmV3IERhdGUoYSwyLDApLmdldERhdGUoKX1yZXR1cm4gYi5leHRlbmRBbGlhc2VzKHtcImRkL21tL3l5eXlcIjp7bWFzazpcIjEvMi95XCIscGxhY2Vob2xkZXI6XCJkZC9tbS95eXl5XCIscmVnZXg6e3ZhbDFwcmU6bmV3IFJlZ0V4cChcIlswLTNdXCIpLHZhbDE6bmV3IFJlZ0V4cChcIjBbMS05XXxbMTJdWzAtOV18M1swMV1cIiksdmFsMnByZTpmdW5jdGlvbihhKXt2YXIgYz1iLmVzY2FwZVJlZ2V4LmNhbGwodGhpcyxhKTtyZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfFsxMl1bMC05XXwzWzAxXSlcIitjK1wiWzAxXSlcIil9LHZhbDI6ZnVuY3Rpb24oYSl7dmFyIGM9Yi5lc2NhcGVSZWdleC5jYWxsKHRoaXMsYSk7cmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXxbMTJdWzAtOV0pXCIrYytcIigwWzEtOV18MVswMTJdKSl8KDMwXCIrYytcIigwWzEzLTldfDFbMDEyXSkpfCgzMVwiK2MrXCIoMFsxMzU3OF18MVswMl0pKVwiKX19LGxlYXBkYXk6XCIyOS8wMi9cIixzZXBhcmF0b3I6XCIvXCIseWVhcnJhbmdlOnttaW55ZWFyOjE5MDAsbWF4eWVhcjoyMDk5fSxpc0luWWVhclJhbmdlOmZ1bmN0aW9uKGEsYixjKXtpZihpc05hTihhKSlyZXR1cm4hMTt2YXIgZD1wYXJzZUludChhLmNvbmNhdChiLnRvU3RyaW5nKCkuc2xpY2UoYS5sZW5ndGgpKSksZT1wYXJzZUludChhLmNvbmNhdChjLnRvU3RyaW5nKCkuc2xpY2UoYS5sZW5ndGgpKSk7cmV0dXJuIWlzTmFOKGQpJiYoYjw9ZCYmZDw9Yyl8fCFpc05hTihlKSYmKGI8PWUmJmU8PWMpfSxkZXRlcm1pbmViYXNleWVhcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpO2lmKGE+ZClyZXR1cm4gYTtpZihiPGQpe2Zvcih2YXIgZT1iLnRvU3RyaW5nKCkuc2xpY2UoMCwyKSxmPWIudG9TdHJpbmcoKS5zbGljZSgyLDQpO2I8ZStjOyllLS07dmFyIGc9ZStmO3JldHVybiBhPmc/YTpnfWlmKGE8PWQmJmQ8PWIpe2Zvcih2YXIgaD1kLnRvU3RyaW5nKCkuc2xpY2UoMCwyKTtiPGgrYzspaC0tO3ZhciBpPWgrYztyZXR1cm4gaTxhP2E6aX1yZXR1cm4gZH0sb25LZXlEb3duOmZ1bmN0aW9uKGMsZCxlLGYpe3ZhciBnPWEodGhpcyk7aWYoYy5jdHJsS2V5JiZjLmtleUNvZGU9PT1iLmtleUNvZGUuUklHSFQpe3ZhciBoPW5ldyBEYXRlO2cudmFsKGguZ2V0RGF0ZSgpLnRvU3RyaW5nKCkrKGguZ2V0TW9udGgoKSsxKS50b1N0cmluZygpK2guZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKSxnLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKX19LGdldEZyb250VmFsdWU6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wLGU9MCxmPTA7ZjxhLmxlbmd0aCYmXCIyXCIhPT1hLmNoYXJBdChmKTtmKyspe3ZhciBnPWMuZGVmaW5pdGlvbnNbYS5jaGFyQXQoZildO2c/KGQrPWUsZT1nLmNhcmRpbmFsaXR5KTplKyt9cmV0dXJuIGIuam9pbihcIlwiKS5zdWJzdHIoZCxlKX0scG9zdFZhbGlkYXRpb246ZnVuY3Rpb24oYSxiLGQpe3ZhciBlLGYsZz1hLmpvaW4oXCJcIik7cmV0dXJuIDA9PT1kLm1hc2suaW5kZXhPZihcInlcIik/KGY9Zy5zdWJzdHIoMCw0KSxlPWcuc3Vic3RyKDQsMTEpKTooZj1nLnN1YnN0cig2LDExKSxlPWcuc3Vic3RyKDAsNikpLGImJihlIT09ZC5sZWFwZGF5fHxjKGYpKX0sZGVmaW5pdGlvbnM6ezE6e3ZhbGlkYXRvcjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWUucmVnZXgudmFsMS50ZXN0KGEpO3JldHVybiBkfHxmfHxhLmNoYXJBdCgxKSE9PWUuc2VwYXJhdG9yJiZcIi0uL1wiLmluZGV4T2YoYS5jaGFyQXQoMSkpPT09LTF8fCEoZj1lLnJlZ2V4LnZhbDEudGVzdChcIjBcIithLmNoYXJBdCgwKSkpP2Y6KGIuYnVmZmVyW2MtMV09XCIwXCIse3JlZnJlc2hGcm9tQnVmZmVyOntzdGFydDpjLTEsZW5kOmN9LHBvczpjLGM6YS5jaGFyQXQoMCl9KX0sY2FyZGluYWxpdHk6MixwcmV2YWxpZGF0b3I6W3t2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hO2lzTmFOKGIuYnVmZmVyW2MrMV0pfHwoZis9Yi5idWZmZXJbYysxXSk7dmFyIGc9MT09PWYubGVuZ3RoP2UucmVnZXgudmFsMXByZS50ZXN0KGYpOmUucmVnZXgudmFsMS50ZXN0KGYpO2lmKCFkJiYhZyl7aWYoZz1lLnJlZ2V4LnZhbDEudGVzdChhK1wiMFwiKSlyZXR1cm4gYi5idWZmZXJbY109YSxiLmJ1ZmZlclsrK2NdPVwiMFwiLHtwb3M6YyxjOlwiMFwifTtpZihnPWUucmVnZXgudmFsMS50ZXN0KFwiMFwiK2EpKXJldHVybiBiLmJ1ZmZlcltjXT1cIjBcIixjKysse3BvczpjfX1yZXR1cm4gZ30sY2FyZGluYWxpdHk6MX1dfSwyOnt2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1lLmdldEZyb250VmFsdWUoYi5tYXNrLGIuYnVmZmVyLGUpO2YuaW5kZXhPZihlLnBsYWNlaG9sZGVyWzBdKSE9PS0xJiYoZj1cIjAxXCIrZS5zZXBhcmF0b3IpO3ZhciBnPWUucmVnZXgudmFsMihlLnNlcGFyYXRvcikudGVzdChmK2EpO3JldHVybiBkfHxnfHxhLmNoYXJBdCgxKSE9PWUuc2VwYXJhdG9yJiZcIi0uL1wiLmluZGV4T2YoYS5jaGFyQXQoMSkpPT09LTF8fCEoZz1lLnJlZ2V4LnZhbDIoZS5zZXBhcmF0b3IpLnRlc3QoZitcIjBcIithLmNoYXJBdCgwKSkpP2c6KGIuYnVmZmVyW2MtMV09XCIwXCIse3JlZnJlc2hGcm9tQnVmZmVyOntzdGFydDpjLTEsZW5kOmN9LHBvczpjLGM6YS5jaGFyQXQoMCl9KX0sY2FyZGluYWxpdHk6MixwcmV2YWxpZGF0b3I6W3t2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXtpc05hTihiLmJ1ZmZlcltjKzFdKXx8KGErPWIuYnVmZmVyW2MrMV0pO3ZhciBmPWUuZ2V0RnJvbnRWYWx1ZShiLm1hc2ssYi5idWZmZXIsZSk7Zi5pbmRleE9mKGUucGxhY2Vob2xkZXJbMF0pIT09LTEmJihmPVwiMDFcIitlLnNlcGFyYXRvcik7dmFyIGc9MT09PWEubGVuZ3RoP2UucmVnZXgudmFsMnByZShlLnNlcGFyYXRvcikudGVzdChmK2EpOmUucmVnZXgudmFsMihlLnNlcGFyYXRvcikudGVzdChmK2EpO3JldHVybiBkfHxnfHwhKGc9ZS5yZWdleC52YWwyKGUuc2VwYXJhdG9yKS50ZXN0KGYrXCIwXCIrYSkpP2c6KGIuYnVmZmVyW2NdPVwiMFwiLGMrKyx7cG9zOmN9KX0sY2FyZGluYWxpdHk6MX1dfSx5Ont2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZS5pc0luWWVhclJhbmdlKGEsZS55ZWFycmFuZ2UubWlueWVhcixlLnllYXJyYW5nZS5tYXh5ZWFyKX0sY2FyZGluYWxpdHk6NCxwcmV2YWxpZGF0b3I6W3t2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1lLmlzSW5ZZWFyUmFuZ2UoYSxlLnllYXJyYW5nZS5taW55ZWFyLGUueWVhcnJhbmdlLm1heHllYXIpO2lmKCFkJiYhZil7dmFyIGc9ZS5kZXRlcm1pbmViYXNleWVhcihlLnllYXJyYW5nZS5taW55ZWFyLGUueWVhcnJhbmdlLm1heHllYXIsYStcIjBcIikudG9TdHJpbmcoKS5zbGljZSgwLDEpO2lmKGY9ZS5pc0luWWVhclJhbmdlKGcrYSxlLnllYXJyYW5nZS5taW55ZWFyLGUueWVhcnJhbmdlLm1heHllYXIpKXJldHVybiBiLmJ1ZmZlcltjKytdPWcuY2hhckF0KDApLHtwb3M6Y307aWYoZz1lLmRldGVybWluZWJhc2V5ZWFyKGUueWVhcnJhbmdlLm1pbnllYXIsZS55ZWFycmFuZ2UubWF4eWVhcixhK1wiMFwiKS50b1N0cmluZygpLnNsaWNlKDAsMiksZj1lLmlzSW5ZZWFyUmFuZ2UoZythLGUueWVhcnJhbmdlLm1pbnllYXIsZS55ZWFycmFuZ2UubWF4eWVhcikpcmV0dXJuIGIuYnVmZmVyW2MrK109Zy5jaGFyQXQoMCksYi5idWZmZXJbYysrXT1nLmNoYXJBdCgxKSx7cG9zOmN9fXJldHVybiBmfSxjYXJkaW5hbGl0eToxfSx7dmFsaWRhdG9yOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9ZS5pc0luWWVhclJhbmdlKGEsZS55ZWFycmFuZ2UubWlueWVhcixlLnllYXJyYW5nZS5tYXh5ZWFyKTtpZighZCYmIWYpe3ZhciBnPWUuZGV0ZXJtaW5lYmFzZXllYXIoZS55ZWFycmFuZ2UubWlueWVhcixlLnllYXJyYW5nZS5tYXh5ZWFyLGEpLnRvU3RyaW5nKCkuc2xpY2UoMCwyKTtpZihmPWUuaXNJblllYXJSYW5nZShhWzBdK2dbMV0rYVsxXSxlLnllYXJyYW5nZS5taW55ZWFyLGUueWVhcnJhbmdlLm1heHllYXIpKXJldHVybiBiLmJ1ZmZlcltjKytdPWcuY2hhckF0KDEpLHtwb3M6Y307aWYoZz1lLmRldGVybWluZWJhc2V5ZWFyKGUueWVhcnJhbmdlLm1pbnllYXIsZS55ZWFycmFuZ2UubWF4eWVhcixhKS50b1N0cmluZygpLnNsaWNlKDAsMiksZj1lLmlzSW5ZZWFyUmFuZ2UoZythLGUueWVhcnJhbmdlLm1pbnllYXIsZS55ZWFycmFuZ2UubWF4eWVhcikpcmV0dXJuIGIuYnVmZmVyW2MtMV09Zy5jaGFyQXQoMCksYi5idWZmZXJbYysrXT1nLmNoYXJBdCgxKSxiLmJ1ZmZlcltjKytdPWEuY2hhckF0KDApLHtyZWZyZXNoRnJvbUJ1ZmZlcjp7c3RhcnQ6Yy0zLGVuZDpjfSxwb3M6Y319cmV0dXJuIGZ9LGNhcmRpbmFsaXR5OjJ9LHt2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZS5pc0luWWVhclJhbmdlKGEsZS55ZWFycmFuZ2UubWlueWVhcixlLnllYXJyYW5nZS5tYXh5ZWFyKX0sY2FyZGluYWxpdHk6M31dfX0saW5zZXJ0TW9kZTohMSxhdXRvVW5tYXNrOiExfSxcIm1tL2RkL3l5eXlcIjp7cGxhY2Vob2xkZXI6XCJtbS9kZC95eXl5XCIsYWxpYXM6XCJkZC9tbS95eXl5XCIscmVnZXg6e3ZhbDJwcmU6ZnVuY3Rpb24oYSl7dmFyIGM9Yi5lc2NhcGVSZWdleC5jYWxsKHRoaXMsYSk7cmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMTMtOV18MVswMTJdKVwiK2MrXCJbMC0zXSl8KDAyXCIrYytcIlswLTJdKVwiKX0sdmFsMjpmdW5jdGlvbihhKXt2YXIgYz1iLmVzY2FwZVJlZ2V4LmNhbGwodGhpcyxhKTtyZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfDFbMDEyXSlcIitjK1wiKDBbMS05XXxbMTJdWzAtOV0pKXwoKDBbMTMtOV18MVswMTJdKVwiK2MrXCIzMCl8KCgwWzEzNTc4XXwxWzAyXSlcIitjK1wiMzEpXCIpfSx2YWwxcHJlOm5ldyBSZWdFeHAoXCJbMDFdXCIpLHZhbDE6bmV3IFJlZ0V4cChcIjBbMS05XXwxWzAxMl1cIil9LGxlYXBkYXk6XCIwMi8yOS9cIixvbktleURvd246ZnVuY3Rpb24oYyxkLGUsZil7dmFyIGc9YSh0aGlzKTtpZihjLmN0cmxLZXkmJmMua2V5Q29kZT09PWIua2V5Q29kZS5SSUdIVCl7dmFyIGg9bmV3IERhdGU7Zy52YWwoKGguZ2V0TW9udGgoKSsxKS50b1N0cmluZygpK2guZ2V0RGF0ZSgpLnRvU3RyaW5nKCkraC5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpLGcudHJpZ2dlcihcInNldHZhbHVlXCIpfX19LFwieXl5eS9tbS9kZFwiOnttYXNrOlwieS8xLzJcIixwbGFjZWhvbGRlcjpcInl5eXkvbW0vZGRcIixhbGlhczpcIm1tL2RkL3l5eXlcIixsZWFwZGF5OlwiLzAyLzI5XCIsb25LZXlEb3duOmZ1bmN0aW9uKGMsZCxlLGYpe3ZhciBnPWEodGhpcyk7aWYoYy5jdHJsS2V5JiZjLmtleUNvZGU9PT1iLmtleUNvZGUuUklHSFQpe3ZhciBoPW5ldyBEYXRlO2cudmFsKGguZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKyhoLmdldE1vbnRoKCkrMSkudG9TdHJpbmcoKStoLmdldERhdGUoKS50b1N0cmluZygpKSxnLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKX19fSxcImRkLm1tLnl5eXlcIjp7bWFzazpcIjEuMi55XCIscGxhY2Vob2xkZXI6XCJkZC5tbS55eXl5XCIsbGVhcGRheTpcIjI5LjAyLlwiLHNlcGFyYXRvcjpcIi5cIixhbGlhczpcImRkL21tL3l5eXlcIn0sXCJkZC1tbS15eXl5XCI6e21hc2s6XCIxLTIteVwiLHBsYWNlaG9sZGVyOlwiZGQtbW0teXl5eVwiLGxlYXBkYXk6XCIyOS0wMi1cIixzZXBhcmF0b3I6XCItXCIsYWxpYXM6XCJkZC9tbS95eXl5XCJ9LFwibW0uZGQueXl5eVwiOnttYXNrOlwiMS4yLnlcIixwbGFjZWhvbGRlcjpcIm1tLmRkLnl5eXlcIixsZWFwZGF5OlwiMDIuMjkuXCIsc2VwYXJhdG9yOlwiLlwiLGFsaWFzOlwibW0vZGQveXl5eVwifSxcIm1tLWRkLXl5eXlcIjp7bWFzazpcIjEtMi15XCIscGxhY2Vob2xkZXI6XCJtbS1kZC15eXl5XCIsbGVhcGRheTpcIjAyLTI5LVwiLHNlcGFyYXRvcjpcIi1cIixhbGlhczpcIm1tL2RkL3l5eXlcIn0sXCJ5eXl5Lm1tLmRkXCI6e21hc2s6XCJ5LjEuMlwiLHBsYWNlaG9sZGVyOlwieXl5eS5tbS5kZFwiLGxlYXBkYXk6XCIuMDIuMjlcIixzZXBhcmF0b3I6XCIuXCIsYWxpYXM6XCJ5eXl5L21tL2RkXCJ9LFwieXl5eS1tbS1kZFwiOnttYXNrOlwieS0xLTJcIixwbGFjZWhvbGRlcjpcInl5eXktbW0tZGRcIixsZWFwZGF5OlwiLTAyLTI5XCIsc2VwYXJhdG9yOlwiLVwiLGFsaWFzOlwieXl5eS9tbS9kZFwifSxkYXRldGltZTp7bWFzazpcIjEvMi95IGg6c1wiLHBsYWNlaG9sZGVyOlwiZGQvbW0veXl5eSBoaDptbVwiLGFsaWFzOlwiZGQvbW0veXl5eVwiLHJlZ2V4OntocnNwcmU6bmV3IFJlZ0V4cChcIlswMTJdXCIpLGhyczI0Om5ldyBSZWdFeHAoXCIyWzAtNF18MVszLTldXCIpLGhyczpuZXcgUmVnRXhwKFwiWzAxXVswLTldfDJbMC00XVwiKSxhbXBtOm5ldyBSZWdFeHAoXCJeW2F8cHxBfFBdW218TV1cIiksbXNwcmU6bmV3IFJlZ0V4cChcIlswLTVdXCIpLG1zOm5ldyBSZWdFeHAoXCJbMC01XVswLTldXCIpfSx0aW1lc2VwYXJhdG9yOlwiOlwiLGhvdXJGb3JtYXQ6XCIyNFwiLGRlZmluaXRpb25zOntoOnt2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXtpZihcIjI0XCI9PT1lLmhvdXJGb3JtYXQmJjI0PT09cGFyc2VJbnQoYSwxMCkpcmV0dXJuIGIuYnVmZmVyW2MtMV09XCIwXCIsYi5idWZmZXJbY109XCIwXCIse3JlZnJlc2hGcm9tQnVmZmVyOntzdGFydDpjLTEsZW5kOmN9LGM6XCIwXCJ9O3ZhciBmPWUucmVnZXguaHJzLnRlc3QoYSk7aWYoIWQmJiFmJiYoYS5jaGFyQXQoMSk9PT1lLnRpbWVzZXBhcmF0b3J8fFwiLS46XCIuaW5kZXhPZihhLmNoYXJBdCgxKSkhPT0tMSkmJihmPWUucmVnZXguaHJzLnRlc3QoXCIwXCIrYS5jaGFyQXQoMCkpKSlyZXR1cm4gYi5idWZmZXJbYy0xXT1cIjBcIixiLmJ1ZmZlcltjXT1hLmNoYXJBdCgwKSxjKysse3JlZnJlc2hGcm9tQnVmZmVyOntzdGFydDpjLTIsZW5kOmN9LHBvczpjLGM6ZS50aW1lc2VwYXJhdG9yfTtpZihmJiZcIjI0XCIhPT1lLmhvdXJGb3JtYXQmJmUucmVnZXguaHJzMjQudGVzdChhKSl7dmFyIGc9cGFyc2VJbnQoYSwxMCk7cmV0dXJuIDI0PT09Zz8oYi5idWZmZXJbYys1XT1cImFcIixiLmJ1ZmZlcltjKzZdPVwibVwiKTooYi5idWZmZXJbYys1XT1cInBcIixiLmJ1ZmZlcltjKzZdPVwibVwiKSxnLT0xMixnPDEwPyhiLmJ1ZmZlcltjXT1nLnRvU3RyaW5nKCksYi5idWZmZXJbYy0xXT1cIjBcIik6KGIuYnVmZmVyW2NdPWcudG9TdHJpbmcoKS5jaGFyQXQoMSksYi5idWZmZXJbYy0xXT1nLnRvU3RyaW5nKCkuY2hhckF0KDApKSx7cmVmcmVzaEZyb21CdWZmZXI6e3N0YXJ0OmMtMSxlbmQ6Yys2fSxjOmIuYnVmZmVyW2NdfX1yZXR1cm4gZn0sY2FyZGluYWxpdHk6MixwcmV2YWxpZGF0b3I6W3t2YWxpZGF0b3I6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1lLnJlZ2V4Lmhyc3ByZS50ZXN0KGEpO3JldHVybiBkfHxmfHwhKGY9ZS5yZWdleC5ocnMudGVzdChcIjBcIithKSk/ZjooYi5idWZmZXJbY109XCIwXCIsYysrLHtwb3M6Y30pfSxjYXJkaW5hbGl0eToxfV19LHM6e3ZhbGlkYXRvcjpcIlswLTVdWzAtOV1cIixjYXJkaW5hbGl0eToyLHByZXZhbGlkYXRvcjpbe3ZhbGlkYXRvcjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWUucmVnZXgubXNwcmUudGVzdChhKTtyZXR1cm4gZHx8Znx8IShmPWUucmVnZXgubXMudGVzdChcIjBcIithKSk/ZjooYi5idWZmZXJbY109XCIwXCIsYysrLHtwb3M6Y30pfSxjYXJkaW5hbGl0eToxfV19LHQ6e3ZhbGlkYXRvcjpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBlLnJlZ2V4LmFtcG0udGVzdChhK1wibVwiKX0sY2FzaW5nOlwibG93ZXJcIixjYXJkaW5hbGl0eToxfX0saW5zZXJ0TW9kZTohMSxhdXRvVW5tYXNrOiExfSxkYXRldGltZTEyOnttYXNrOlwiMS8yL3kgaDpzIHRcXFxcbVwiLHBsYWNlaG9sZGVyOlwiZGQvbW0veXl5eSBoaDptbSB4bVwiLGFsaWFzOlwiZGF0ZXRpbWVcIixob3VyRm9ybWF0OlwiMTJcIn0sXCJtbS9kZC95eXl5IGhoOm1tIHhtXCI6e21hc2s6XCIxLzIveSBoOnMgdFxcXFxtXCIscGxhY2Vob2xkZXI6XCJtbS9kZC95eXl5IGhoOm1tIHhtXCIsYWxpYXM6XCJkYXRldGltZTEyXCIscmVnZXg6e3ZhbDJwcmU6ZnVuY3Rpb24oYSl7dmFyIGM9Yi5lc2NhcGVSZWdleC5jYWxsKHRoaXMsYSk7cmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMTMtOV18MVswMTJdKVwiK2MrXCJbMC0zXSl8KDAyXCIrYytcIlswLTJdKVwiKX0sdmFsMjpmdW5jdGlvbihhKXt2YXIgYz1iLmVzY2FwZVJlZ2V4LmNhbGwodGhpcyxhKTtyZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfDFbMDEyXSlcIitjK1wiKDBbMS05XXxbMTJdWzAtOV0pKXwoKDBbMTMtOV18MVswMTJdKVwiK2MrXCIzMCl8KCgwWzEzNTc4XXwxWzAyXSlcIitjK1wiMzEpXCIpfSx2YWwxcHJlOm5ldyBSZWdFeHAoXCJbMDFdXCIpLHZhbDE6bmV3IFJlZ0V4cChcIjBbMS05XXwxWzAxMl1cIil9LGxlYXBkYXk6XCIwMi8yOS9cIixvbktleURvd246ZnVuY3Rpb24oYyxkLGUsZil7dmFyIGc9YSh0aGlzKTtpZihjLmN0cmxLZXkmJmMua2V5Q29kZT09PWIua2V5Q29kZS5SSUdIVCl7dmFyIGg9bmV3IERhdGU7Zy52YWwoKGguZ2V0TW9udGgoKSsxKS50b1N0cmluZygpK2guZ2V0RGF0ZSgpLnRvU3RyaW5nKCkraC5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpLGcudHJpZ2dlcihcInNldHZhbHVlXCIpfX19LFwiaGg6bW0gdFwiOnttYXNrOlwiaDpzIHRcXFxcbVwiLHBsYWNlaG9sZGVyOlwiaGg6bW0geG1cIixhbGlhczpcImRhdGV0aW1lXCIsaG91ckZvcm1hdDpcIjEyXCJ9LFwiaDpzIHRcIjp7bWFzazpcImg6cyB0XFxcXG1cIixwbGFjZWhvbGRlcjpcImhoOm1tIHhtXCIsYWxpYXM6XCJkYXRldGltZVwiLGhvdXJGb3JtYXQ6XCIxMlwifSxcImhoOm1tOnNzXCI6e21hc2s6XCJoOnM6c1wiLHBsYWNlaG9sZGVyOlwiaGg6bW06c3NcIixhbGlhczpcImRhdGV0aW1lXCIsYXV0b1VubWFzazohMX0sXCJoaDptbVwiOnttYXNrOlwiaDpzXCIscGxhY2Vob2xkZXI6XCJoaDptbVwiLGFsaWFzOlwiZGF0ZXRpbWVcIixhdXRvVW5tYXNrOiExfSxkYXRlOnthbGlhczpcImRkL21tL3l5eXlcIn0sXCJtbS95eXl5XCI6e21hc2s6XCIxL3lcIixwbGFjZWhvbGRlcjpcIm1tL3l5eXlcIixsZWFwZGF5OlwiZG9ub3R1c2VcIixzZXBhcmF0b3I6XCIvXCIsYWxpYXM6XCJtbS9kZC95eXl5XCJ9LHNoYW1zaTp7cmVnZXg6e3ZhbDJwcmU6ZnVuY3Rpb24oYSl7dmFyIGM9Yi5lc2NhcGVSZWdleC5jYWxsKHRoaXMsYSk7cmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIrYytcIlswLTNdKVwiKX0sdmFsMjpmdW5jdGlvbihhKXt2YXIgYz1iLmVzY2FwZVJlZ2V4LmNhbGwodGhpcyxhKTtyZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfDFbMDEyXSlcIitjK1wiKDBbMS05XXxbMTJdWzAtOV0pKXwoKDBbMS05XXwxWzAxMl0pXCIrYytcIjMwKXwoKDBbMS02XSlcIitjK1wiMzEpXCIpfSx2YWwxcHJlOm5ldyBSZWdFeHAoXCJbMDFdXCIpLHZhbDE6bmV3IFJlZ0V4cChcIjBbMS05XXwxWzAxMl1cIil9LHllYXJyYW5nZTp7bWlueWVhcjoxMzAwLG1heHllYXI6MTQ5OX0sbWFzazpcInkvMS8yXCIsbGVhcGRheTpcIi8xMi8zMFwiLHBsYWNlaG9sZGVyOlwieXl5eS9tbS9kZFwiLGFsaWFzOlwibW0vZGQveXl5eVwiLGNsZWFySW5jb21wbGV0ZTohMH19KSxifShqUXVlcnksSW5wdXRtYXNrKSxmdW5jdGlvbihhLGIpe3JldHVybiBiLmV4dGVuZERlZmluaXRpb25zKHtBOnt2YWxpZGF0b3I6XCJbQS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLGNhcmRpbmFsaXR5OjEsY2FzaW5nOlwidXBwZXJcIn0sXCImXCI6e3ZhbGlkYXRvcjpcIlswLTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsY2FyZGluYWxpdHk6MSxjYXNpbmc6XCJ1cHBlclwifSxcIiNcIjp7dmFsaWRhdG9yOlwiWzAtOUEtRmEtZl1cIixjYXJkaW5hbGl0eToxLGNhc2luZzpcInVwcGVyXCJ9fSksYi5leHRlbmRBbGlhc2VzKHt1cmw6e2RlZmluaXRpb25zOntpOnt2YWxpZGF0b3I6XCIuXCIsY2FyZGluYWxpdHk6MX19LG1hc2s6XCIoXFxcXGh0dHA6Ly8pfChcXFxcaHR0cFxcXFxzOi8vKXwoZnRwOi8vKXwoZnRwXFxcXHM6Ly8paXsrfVwiLGluc2VydE1vZGU6ITEsYXV0b1VubWFzazohMSxpbnB1dG1vZGU6XCJ1cmxcIn0saXA6e21hc2s6XCJpW2lbaV1dLmlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dXCIsZGVmaW5pdGlvbnM6e2k6e3ZhbGlkYXRvcjpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBjLTE+LTEmJlwiLlwiIT09Yi5idWZmZXJbYy0xXT8oYT1iLmJ1ZmZlcltjLTFdK2EsYT1jLTI+LTEmJlwiLlwiIT09Yi5idWZmZXJbYy0yXT9iLmJ1ZmZlcltjLTJdK2E6XCIwXCIrYSk6YT1cIjAwXCIrYSxuZXcgUmVnRXhwKFwiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XVwiKS50ZXN0KGEpfSxjYXJkaW5hbGl0eToxfX0sb25Vbk1hc2s6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhfSxpbnB1dG1vZGU6XCJudW1lcmljXCJ9LGVtYWlsOnttYXNrOlwiKnsxLDY0fVsuKnsxLDY0fV1bLip7MSw2NH1dWy4qezEsNjN9XUAtezEsNjN9Li17MSw2M31bLi17MSw2M31dWy4tezEsNjN9XVwiLGdyZWVkeTohMSxvbkJlZm9yZVBhc3RlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9YS50b0xvd2VyQ2FzZSgpLGEucmVwbGFjZShcIm1haWx0bzpcIixcIlwiKX0sZGVmaW5pdGlvbnM6e1wiKlwiOnt2YWxpZGF0b3I6XCJbMC05QS1aYS16ISMkJSYnKisvPT9eX2B7fH1+LV1cIixjYXJkaW5hbGl0eToxLGNhc2luZzpcImxvd2VyXCJ9LFwiLVwiOnt2YWxpZGF0b3I6XCJbMC05QS1aYS16LV1cIixjYXJkaW5hbGl0eToxLGNhc2luZzpcImxvd2VyXCJ9fSxvblVuTWFzazpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGF9LGlucHV0bW9kZTpcImVtYWlsXCJ9LG1hYzp7bWFzazpcIiMjOiMjOiMjOiMjOiMjOiMjXCJ9LHZpbjp7bWFzazpcIlZ7MTN9OXs0fVwiLGRlZmluaXRpb25zOntWOnt2YWxpZGF0b3I6XCJbQS1ISi1OUFItWmEtaGotbnByLXpcXFxcZF1cIixjYXJkaW5hbGl0eToxLGNhc2luZzpcInVwcGVyXCJ9fSxjbGVhckluY29tcGxldGU6ITAsYXV0b1VubWFzazohMH19KSxifShqUXVlcnksSW5wdXRtYXNrKSxmdW5jdGlvbihhLGIpe3JldHVybiBiLmV4dGVuZEFsaWFzZXMoe251bWVyaWM6e21hc2s6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYyhiKXtmb3IodmFyIGM9XCJcIixkPTA7ZDxiLmxlbmd0aDtkKyspYys9YS5kZWZpbml0aW9uc1tiLmNoYXJBdChkKV18fGEub3B0aW9uYWxtYXJrZXIuc3RhcnQ9PT1iLmNoYXJBdChkKXx8YS5vcHRpb25hbG1hcmtlci5lbmQ9PT1iLmNoYXJBdChkKXx8YS5xdWFudGlmaWVybWFya2VyLnN0YXJ0PT09Yi5jaGFyQXQoZCl8fGEucXVhbnRpZmllcm1hcmtlci5lbmQ9PT1iLmNoYXJBdChkKXx8YS5ncm91cG1hcmtlci5zdGFydD09PWIuY2hhckF0KGQpfHxhLmdyb3VwbWFya2VyLmVuZD09PWIuY2hhckF0KGQpfHxhLmFsdGVybmF0b3JtYXJrZXI9PT1iLmNoYXJBdChkKT9cIlxcXFxcIitiLmNoYXJBdChkKTpiLmNoYXJBdChkKTtyZXR1cm4gY31pZigwIT09YS5yZXBlYXQmJmlzTmFOKGEuaW50ZWdlckRpZ2l0cykmJihhLmludGVnZXJEaWdpdHM9YS5yZXBlYXQpLGEucmVwZWF0PTAsYS5ncm91cFNlcGFyYXRvcj09PWEucmFkaXhQb2ludCYmKFwiLlwiPT09YS5yYWRpeFBvaW50P2EuZ3JvdXBTZXBhcmF0b3I9XCIsXCI6XCIsXCI9PT1hLnJhZGl4UG9pbnQ/YS5ncm91cFNlcGFyYXRvcj1cIi5cIjphLmdyb3VwU2VwYXJhdG9yPVwiXCIpLFwiIFwiPT09YS5ncm91cFNlcGFyYXRvciYmKGEuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcj12b2lkIDApLGEuYXV0b0dyb3VwPWEuYXV0b0dyb3VwJiZcIlwiIT09YS5ncm91cFNlcGFyYXRvcixhLmF1dG9Hcm91cCYmKFwic3RyaW5nXCI9PXR5cGVvZiBhLmdyb3VwU2l6ZSYmaXNGaW5pdGUoYS5ncm91cFNpemUpJiYoYS5ncm91cFNpemU9cGFyc2VJbnQoYS5ncm91cFNpemUpKSxpc0Zpbml0ZShhLmludGVnZXJEaWdpdHMpKSl7dmFyIGQ9TWF0aC5mbG9vcihhLmludGVnZXJEaWdpdHMvYS5ncm91cFNpemUpLGU9YS5pbnRlZ2VyRGlnaXRzJWEuZ3JvdXBTaXplO2EuaW50ZWdlckRpZ2l0cz1wYXJzZUludChhLmludGVnZXJEaWdpdHMpKygwPT09ZT9kLTE6ZCksYS5pbnRlZ2VyRGlnaXRzPDEmJihhLmludGVnZXJEaWdpdHM9XCIqXCIpfWEucGxhY2Vob2xkZXIubGVuZ3RoPjEmJihhLnBsYWNlaG9sZGVyPWEucGxhY2Vob2xkZXIuY2hhckF0KDApKSxcInJhZGl4Rm9jdXNcIj09PWEucG9zaXRpb25DYXJldE9uQ2xpY2smJlwiXCI9PT1hLnBsYWNlaG9sZGVyJiZhLmludGVnZXJPcHRpb25hbD09PSExJiYoYS5wb3NpdGlvbkNhcmV0T25DbGljaz1cImx2cFwiKSxhLmRlZmluaXRpb25zW1wiO1wiXT1hLmRlZmluaXRpb25zW1wiflwiXSxhLmRlZmluaXRpb25zW1wiO1wiXS5kZWZpbml0aW9uU3ltYm9sPVwiflwiLGEubnVtZXJpY0lucHV0PT09ITAmJihhLnBvc2l0aW9uQ2FyZXRPbkNsaWNrPVwicmFkaXhGb2N1c1wiPT09YS5wb3NpdGlvbkNhcmV0T25DbGljaz9cImx2cFwiOmEucG9zaXRpb25DYXJldE9uQ2xpY2ssYS5kaWdpdHNPcHRpb25hbD0hMSxpc05hTihhLmRpZ2l0cykmJihhLmRpZ2l0cz0yKSxhLmRlY2ltYWxQcm90ZWN0PSExKTt2YXIgZj1cIlsrXVwiO2lmKGYrPWMoYS5wcmVmaXgpLGYrPWEuaW50ZWdlck9wdGlvbmFsPT09ITA/XCJ+ezEsXCIrYS5pbnRlZ2VyRGlnaXRzK1wifVwiOlwifntcIithLmludGVnZXJEaWdpdHMrXCJ9XCIsdm9pZCAwIT09YS5kaWdpdHMpe2EuZGVjaW1hbFByb3RlY3QmJihhLnJhZGl4UG9pbnREZWZpbml0aW9uU3ltYm9sPVwiOlwiKTt2YXIgZz1hLmRpZ2l0cy50b1N0cmluZygpLnNwbGl0KFwiLFwiKTtpc0Zpbml0ZShnWzBdJiZnWzFdJiZpc0Zpbml0ZShnWzFdKSk/Zis9KGEuZGVjaW1hbFByb3RlY3Q/XCI6XCI6YS5yYWRpeFBvaW50KStcIjt7XCIrYS5kaWdpdHMrXCJ9XCI6KGlzTmFOKGEuZGlnaXRzKXx8cGFyc2VJbnQoYS5kaWdpdHMpPjApJiYoZis9YS5kaWdpdHNPcHRpb25hbD9cIltcIisoYS5kZWNpbWFsUHJvdGVjdD9cIjpcIjphLnJhZGl4UG9pbnQpK1wiO3sxLFwiK2EuZGlnaXRzK1wifV1cIjooYS5kZWNpbWFsUHJvdGVjdD9cIjpcIjphLnJhZGl4UG9pbnQpK1wiO3tcIithLmRpZ2l0cytcIn1cIil9cmV0dXJuIGYrPWMoYS5zdWZmaXgpLGYrPVwiWy1dXCIsYS5ncmVlZHk9ITEsbnVsbCE9PWEubWluJiYoYS5taW49YS5taW4udG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoYi5lc2NhcGVSZWdleChhLmdyb3VwU2VwYXJhdG9yKSxcImdcIiksXCJcIiksXCIsXCI9PT1hLnJhZGl4UG9pbnQmJihhLm1pbj1hLm1pbi5yZXBsYWNlKGEucmFkaXhQb2ludCxcIi5cIikpKSxudWxsIT09YS5tYXgmJihhLm1heD1hLm1heC50b1N0cmluZygpLnJlcGxhY2UobmV3IFJlZ0V4cChiLmVzY2FwZVJlZ2V4KGEuZ3JvdXBTZXBhcmF0b3IpLFwiZ1wiKSxcIlwiKSxcIixcIj09PWEucmFkaXhQb2ludCYmKGEubWF4PWEubWF4LnJlcGxhY2UoYS5yYWRpeFBvaW50LFwiLlwiKSkpLGZ9LHBsYWNlaG9sZGVyOlwiXCIsZ3JlZWR5OiExLGRpZ2l0czpcIipcIixkaWdpdHNPcHRpb25hbDohMCxyYWRpeFBvaW50OlwiLlwiLHBvc2l0aW9uQ2FyZXRPbkNsaWNrOlwicmFkaXhGb2N1c1wiLGdyb3VwU2l6ZTozLGdyb3VwU2VwYXJhdG9yOlwiXCIsYXV0b0dyb3VwOiExLGFsbG93UGx1czohMCxhbGxvd01pbnVzOiEwLG5lZ2F0aW9uU3ltYm9sOntmcm9udDpcIi1cIixiYWNrOlwiXCJ9LGludGVnZXJEaWdpdHM6XCIrXCIsaW50ZWdlck9wdGlvbmFsOiEwLHByZWZpeDpcIlwiLHN1ZmZpeDpcIlwiLHJpZ2h0QWxpZ246ITAsZGVjaW1hbFByb3RlY3Q6ITAsbWluOm51bGwsbWF4Om51bGwsc3RlcDoxLGluc2VydE1vZGU6ITAsYXV0b1VubWFzazohMSx1bm1hc2tBc051bWJlcjohMSxpbnB1dG1vZGU6XCJudW1lcmljXCIscG9zdEZvcm1hdDpmdW5jdGlvbihjLGQsZSl7ZS5udW1lcmljSW5wdXQ9PT0hMCYmKGM9Yy5yZXZlcnNlKCksaXNGaW5pdGUoZCkmJihkPWMuam9pbihcIlwiKS5sZW5ndGgtZC0xKSk7dmFyIGYsZztkPWQ+PWMubGVuZ3RoP2MubGVuZ3RoLTE6ZDwwPzA6ZDt2YXIgaD1jW2RdLGk9Yy5zbGljZSgpO2g9PT1lLmdyb3VwU2VwYXJhdG9yJiYoaS5zcGxpY2UoZC0tLDEpLGg9aVtkXSk7dmFyIGo9aS5qb2luKFwiXCIpLm1hdGNoKG5ldyBSZWdFeHAoXCJeXCIrYi5lc2NhcGVSZWdleChlLm5lZ2F0aW9uU3ltYm9sLmZyb250KSkpO2o9bnVsbCE9PWomJjE9PT1qLmxlbmd0aCxkPihqP2UubmVnYXRpb25TeW1ib2wuZnJvbnQubGVuZ3RoOjApK2UucHJlZml4Lmxlbmd0aCYmZDxpLmxlbmd0aC1lLnN1ZmZpeC5sZW5ndGgmJihpW2RdPVwiIVwiKTt2YXIgaz1pLmpvaW4oXCJcIiksbD1pLmpvaW4oKTtpZihqJiYoaz1rLnJlcGxhY2UobmV3IFJlZ0V4cChcIl5cIitiLmVzY2FwZVJlZ2V4KGUubmVnYXRpb25TeW1ib2wuZnJvbnQpKSxcIlwiKSxrPWsucmVwbGFjZShuZXcgUmVnRXhwKGIuZXNjYXBlUmVnZXgoZS5uZWdhdGlvblN5bWJvbC5iYWNrKStcIiRcIiksXCJcIikpLGs9ay5yZXBsYWNlKG5ldyBSZWdFeHAoYi5lc2NhcGVSZWdleChlLnN1ZmZpeCkrXCIkXCIpLFwiXCIpLGs9ay5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIrYi5lc2NhcGVSZWdleChlLnByZWZpeCkpLFwiXCIpLGsubGVuZ3RoPjAmJmUuYXV0b0dyb3VwfHxrLmluZGV4T2YoZS5ncm91cFNlcGFyYXRvcikhPT0tMSl7dmFyIG09Yi5lc2NhcGVSZWdleChlLmdyb3VwU2VwYXJhdG9yKTtrPWsucmVwbGFjZShuZXcgUmVnRXhwKG0sXCJnXCIpLFwiXCIpO3ZhciBuPWsuc3BsaXQoaD09PWUucmFkaXhQb2ludD9cIiFcIjplLnJhZGl4UG9pbnQpO2lmKGs9XCJcIj09PWUucmFkaXhQb2ludD9rOm5bMF0saCE9PWUubmVnYXRpb25TeW1ib2wuZnJvbnQmJihrPWsucmVwbGFjZShcIiFcIixcIj9cIikpLGsubGVuZ3RoPmUuZ3JvdXBTaXplKWZvcih2YXIgbz1uZXcgUmVnRXhwKFwiKFstK10/W1xcXFxkP10rKShbXFxcXGQ/XXtcIitlLmdyb3VwU2l6ZStcIn0pXCIpO28udGVzdChrKSYmXCJcIiE9PWUuZ3JvdXBTZXBhcmF0b3I7KWs9ay5yZXBsYWNlKG8sXCIkMVwiK2UuZ3JvdXBTZXBhcmF0b3IrXCIkMlwiKSxrPWsucmVwbGFjZShlLmdyb3VwU2VwYXJhdG9yK2UuZ3JvdXBTZXBhcmF0b3IsZS5ncm91cFNlcGFyYXRvcik7az1rLnJlcGxhY2UoXCI/XCIsXCIhXCIpLFwiXCIhPT1lLnJhZGl4UG9pbnQmJm4ubGVuZ3RoPjEmJihrKz0oaD09PWUucmFkaXhQb2ludD9cIiFcIjplLnJhZGl4UG9pbnQpK25bMV0pfWs9ZS5wcmVmaXgraytlLnN1ZmZpeCxqJiYoaz1lLm5lZ2F0aW9uU3ltYm9sLmZyb250K2srZS5uZWdhdGlvblN5bWJvbC5iYWNrKTt2YXIgcD1sIT09ay5zcGxpdChcIlwiKS5qb2luKCkscT1hLmluQXJyYXkoXCIhXCIsayk7aWYocT09PS0xJiYocT1kKSxwKXtmb3IoYy5sZW5ndGg9ay5sZW5ndGgsZj0wLGc9ay5sZW5ndGg7ZjxnO2YrKyljW2ZdPWsuY2hhckF0KGYpO2NbcV09aH1yZXR1cm4gcT1lLm51bWVyaWNJbnB1dCYmaXNGaW5pdGUoZCk/Yy5qb2luKFwiXCIpLmxlbmd0aC1xLTE6cSxlLm51bWVyaWNJbnB1dCYmKGM9Yy5yZXZlcnNlKCksYS5pbkFycmF5KGUucmFkaXhQb2ludCxjKTxxJiZjLmpvaW4oXCJcIikubGVuZ3RoLWUuc3VmZml4Lmxlbmd0aCE9PXEmJihxLT0xKSkse3BvczpxLHJlZnJlc2hGcm9tQnVmZmVyOnAsYnVmZmVyOmMsaXNOZWdhdGl2ZTpqfX0sb25CZWZvcmVXcml0ZTpmdW5jdGlvbihjLGQsZSxmKXt2YXIgZztpZihjJiYoXCJibHVyXCI9PT1jLnR5cGV8fFwiY2hlY2t2YWxcIj09PWMudHlwZXx8XCJrZXlkb3duXCI9PT1jLnR5cGUpKXt2YXIgaD1mLm51bWVyaWNJbnB1dD9kLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIik6ZC5qb2luKFwiXCIpLGk9aC5yZXBsYWNlKGYucHJlZml4LFwiXCIpO2k9aS5yZXBsYWNlKGYuc3VmZml4LFwiXCIpLGk9aS5yZXBsYWNlKG5ldyBSZWdFeHAoYi5lc2NhcGVSZWdleChmLmdyb3VwU2VwYXJhdG9yKSxcImdcIiksXCJcIiksXCIsXCI9PT1mLnJhZGl4UG9pbnQmJihpPWkucmVwbGFjZShmLnJhZGl4UG9pbnQsXCIuXCIpKTtcbnZhciBqPWkubWF0Y2gobmV3IFJlZ0V4cChcIlstXCIrYi5lc2NhcGVSZWdleChmLm5lZ2F0aW9uU3ltYm9sLmZyb250KStcIl1cIixcImdcIikpO2lmKGo9bnVsbCE9PWomJjE9PT1qLmxlbmd0aCxpPWkucmVwbGFjZShuZXcgUmVnRXhwKFwiWy1cIitiLmVzY2FwZVJlZ2V4KGYubmVnYXRpb25TeW1ib2wuZnJvbnQpK1wiXVwiLFwiZ1wiKSxcIlwiKSxpPWkucmVwbGFjZShuZXcgUmVnRXhwKGIuZXNjYXBlUmVnZXgoZi5uZWdhdGlvblN5bWJvbC5iYWNrKStcIiRcIiksXCJcIiksaXNOYU4oZi5wbGFjZWhvbGRlcikmJihpPWkucmVwbGFjZShuZXcgUmVnRXhwKGIuZXNjYXBlUmVnZXgoZi5wbGFjZWhvbGRlciksXCJnXCIpLFwiXCIpKSxpPWk9PT1mLm5lZ2F0aW9uU3ltYm9sLmZyb250P2krXCIwXCI6aSxcIlwiIT09aSYmaXNGaW5pdGUoaSkpe3ZhciBrPXBhcnNlRmxvYXQoaSksbD1qP2sqLTE6aztpZihudWxsIT09Zi5taW4mJmlzRmluaXRlKGYubWluKSYmbDxwYXJzZUZsb2F0KGYubWluKT8oaz1NYXRoLmFicyhmLm1pbiksaj1mLm1pbjwwLGg9dm9pZCAwKTpudWxsIT09Zi5tYXgmJmlzRmluaXRlKGYubWF4KSYmbD5wYXJzZUZsb2F0KGYubWF4KSYmKGs9TWF0aC5hYnMoZi5tYXgpLGo9Zi5tYXg8MCxoPXZvaWQgMCksaT1rLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIixmLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLGlzRmluaXRlKGYuZGlnaXRzKSl7dmFyIG09YS5pbkFycmF5KGYucmFkaXhQb2ludCxpKSxuPWEuaW5BcnJheShmLnJhZGl4UG9pbnQsaCk7bT09PS0xJiYoaS5wdXNoKGYucmFkaXhQb2ludCksbT1pLmxlbmd0aC0xKTtmb3IodmFyIG89MTtvPD1mLmRpZ2l0cztvKyspZi5kaWdpdHNPcHRpb25hbHx8dm9pZCAwIT09aVttK29dJiZpW20rb10hPT1mLnBsYWNlaG9sZGVyLmNoYXJBdCgwKT9uIT09LTEmJnZvaWQgMCE9PWhbbitvXSYmKGlbbStvXT1pW20rb118fGhbbitvXSk6aVttK29dPVwiMFwiO2lbaS5sZW5ndGgtMV09PT1mLnJhZGl4UG9pbnQmJmRlbGV0ZSBpW2kubGVuZ3RoLTFdfWlmKGsudG9TdHJpbmcoKSE9PWkmJmsudG9TdHJpbmcoKStcIi5cIiE9PWl8fGopcmV0dXJuIGk9KGYucHJlZml4K2kuam9pbihcIlwiKSkuc3BsaXQoXCJcIiksIWp8fDA9PT1rJiZcImJsdXJcIj09PWMudHlwZXx8KGkudW5zaGlmdChmLm5lZ2F0aW9uU3ltYm9sLmZyb250KSxpLnB1c2goZi5uZWdhdGlvblN5bWJvbC5iYWNrKSksZi5udW1lcmljSW5wdXQmJihpPWkucmV2ZXJzZSgpKSxnPWYucG9zdEZvcm1hdChpLGYubnVtZXJpY0lucHV0P2U6ZS0xLGYpLGcuYnVmZmVyJiYoZy5yZWZyZXNoRnJvbUJ1ZmZlcj1nLmJ1ZmZlci5qb2luKFwiXCIpIT09ZC5qb2luKFwiXCIpKSxnfX1pZihmLmF1dG9Hcm91cClyZXR1cm4gZz1mLnBvc3RGb3JtYXQoZCxmLm51bWVyaWNJbnB1dD9lOmUtMSxmKSxnLmNhcmV0PWU8KGcuaXNOZWdhdGl2ZT9mLm5lZ2F0aW9uU3ltYm9sLmZyb250Lmxlbmd0aDowKStmLnByZWZpeC5sZW5ndGh8fGU+Zy5idWZmZXIubGVuZ3RoLShnLmlzTmVnYXRpdmU/Zi5uZWdhdGlvblN5bWJvbC5iYWNrLmxlbmd0aDowKT9nLnBvczpnLnBvcysxLGd9LHJlZ2V4OntpbnRlZ2VyUGFydDpmdW5jdGlvbihhKXtyZXR1cm4gbmV3IFJlZ0V4cChcIltcIitiLmVzY2FwZVJlZ2V4KGEubmVnYXRpb25TeW1ib2wuZnJvbnQpK1wiK10/XFxcXGQrXCIpfSxpbnRlZ2VyTlBhcnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBSZWdFeHAoXCJbXFxcXGRcIitiLmVzY2FwZVJlZ2V4KGEuZ3JvdXBTZXBhcmF0b3IpK2IuZXNjYXBlUmVnZXgoYS5wbGFjZWhvbGRlci5jaGFyQXQoMCkpK1wiXStcIil9fSxzaWduSGFuZGxlcjpmdW5jdGlvbihhLGIsYyxkLGUpe2lmKCFkJiZlLmFsbG93TWludXMmJlwiLVwiPT09YXx8ZS5hbGxvd1BsdXMmJlwiK1wiPT09YSl7dmFyIGY9Yi5idWZmZXIuam9pbihcIlwiKS5tYXRjaChlLnJlZ2V4LmludGVnZXJQYXJ0KGUpKTtpZihmJiZmWzBdLmxlbmd0aD4wKXJldHVybiBiLmJ1ZmZlcltmLmluZGV4XT09PShcIi1cIj09PWE/XCIrXCI6ZS5uZWdhdGlvblN5bWJvbC5mcm9udCk/XCItXCI9PT1hP1wiXCIhPT1lLm5lZ2F0aW9uU3ltYm9sLmJhY2s/e3BvczowLGM6ZS5uZWdhdGlvblN5bWJvbC5mcm9udCxyZW1vdmU6MCxjYXJldDpjLGluc2VydDp7cG9zOmIuYnVmZmVyLmxlbmd0aC0xLGM6ZS5uZWdhdGlvblN5bWJvbC5iYWNrfX06e3BvczowLGM6ZS5uZWdhdGlvblN5bWJvbC5mcm9udCxyZW1vdmU6MCxjYXJldDpjfTpcIlwiIT09ZS5uZWdhdGlvblN5bWJvbC5iYWNrP3twb3M6MCxjOlwiK1wiLHJlbW92ZTpbMCxiLmJ1ZmZlci5sZW5ndGgtMV0sY2FyZXQ6Y306e3BvczowLGM6XCIrXCIscmVtb3ZlOjAsY2FyZXQ6Y306Yi5idWZmZXJbMF09PT0oXCItXCI9PT1hP2UubmVnYXRpb25TeW1ib2wuZnJvbnQ6XCIrXCIpP1wiLVwiPT09YSYmXCJcIiE9PWUubmVnYXRpb25TeW1ib2wuYmFjaz97cmVtb3ZlOlswLGIuYnVmZmVyLmxlbmd0aC0xXSxjYXJldDpjLTF9OntyZW1vdmU6MCxjYXJldDpjLTF9OlwiLVwiPT09YT9cIlwiIT09ZS5uZWdhdGlvblN5bWJvbC5iYWNrP3twb3M6MCxjOmUubmVnYXRpb25TeW1ib2wuZnJvbnQsY2FyZXQ6YysxLGluc2VydDp7cG9zOmIuYnVmZmVyLmxlbmd0aCxjOmUubmVnYXRpb25TeW1ib2wuYmFja319Ontwb3M6MCxjOmUubmVnYXRpb25TeW1ib2wuZnJvbnQsY2FyZXQ6YysxfTp7cG9zOjAsYzphLGNhcmV0OmMrMX19cmV0dXJuITF9LHJhZGl4SGFuZGxlcjpmdW5jdGlvbihiLGMsZCxlLGYpe2lmKCFlJiZmLm51bWVyaWNJbnB1dCE9PSEwJiZiPT09Zi5yYWRpeFBvaW50JiZ2b2lkIDAhPT1mLmRpZ2l0cyYmKGlzTmFOKGYuZGlnaXRzKXx8cGFyc2VJbnQoZi5kaWdpdHMpPjApKXt2YXIgZz1hLmluQXJyYXkoZi5yYWRpeFBvaW50LGMuYnVmZmVyKSxoPWMuYnVmZmVyLmpvaW4oXCJcIikubWF0Y2goZi5yZWdleC5pbnRlZ2VyUGFydChmKSk7aWYoZyE9PS0xJiZjLnZhbGlkUG9zaXRpb25zW2ddKXJldHVybiBjLnZhbGlkUG9zaXRpb25zW2ctMV0/e2NhcmV0OmcrMX06e3BvczpoLmluZGV4LGM6aFswXSxjYXJldDpnKzF9O2lmKCFofHxcIjBcIj09PWhbMF0mJmguaW5kZXgrMSE9PWQpcmV0dXJuIGMuYnVmZmVyW2g/aC5pbmRleDpkXT1cIjBcIix7cG9zOihoP2guaW5kZXg6ZCkrMSxjOmYucmFkaXhQb2ludH19cmV0dXJuITF9LGxlYWRpbmdaZXJvSGFuZGxlcjpmdW5jdGlvbihiLGMsZCxlLGYsZyl7aWYoIWUpe3ZhciBoPWMuYnVmZmVyLnNsaWNlKFwiXCIpO2lmKGguc3BsaWNlKDAsZi5wcmVmaXgubGVuZ3RoKSxoLnNwbGljZShoLmxlbmd0aC1mLnN1ZmZpeC5sZW5ndGgsZi5zdWZmaXgubGVuZ3RoKSxmLm51bWVyaWNJbnB1dD09PSEwKXt2YXIgaD1oLnJldmVyc2UoKSxpPWhbMF07aWYoXCIwXCI9PT1pJiZ2b2lkIDA9PT1jLnZhbGlkUG9zaXRpb25zW2QtMV0pcmV0dXJue3BvczpkLHJlbW92ZTpoLmxlbmd0aC0xfX1lbHNle2QtPWYucHJlZml4Lmxlbmd0aDt2YXIgaj1hLmluQXJyYXkoZi5yYWRpeFBvaW50LGgpLGs9aC5zbGljZSgwLGohPT0tMT9qOnZvaWQgMCkuam9pbihcIlwiKS5tYXRjaChmLnJlZ2V4LmludGVnZXJOUGFydChmKSk7aWYoayYmKGo9PT0tMXx8ZDw9aikpe3ZhciBsPWo9PT0tMT8wOnBhcnNlSW50KGguc2xpY2UoaisxKS5qb2luKFwiXCIpKTtpZigwPT09a1swXS5pbmRleE9mKFwiXCIhPT1mLnBsYWNlaG9sZGVyP2YucGxhY2Vob2xkZXIuY2hhckF0KDApOlwiMFwiKSYmKGsuaW5kZXgrMT09PWR8fGchPT0hMCYmMD09PWwpKXJldHVybiBjLmJ1ZmZlci5zcGxpY2Uoay5pbmRleCtmLnByZWZpeC5sZW5ndGgsMSkse3BvczprLmluZGV4K2YucHJlZml4Lmxlbmd0aCxyZW1vdmU6ay5pbmRleCtmLnByZWZpeC5sZW5ndGh9O2lmKFwiMFwiPT09YiYmZDw9ay5pbmRleCYma1swXSE9PWYuZ3JvdXBTZXBhcmF0b3IpcmV0dXJuITF9fX1yZXR1cm4hMH0sZGVmaW5pdGlvbnM6e1wiflwiOnt2YWxpZGF0b3I6ZnVuY3Rpb24oYyxkLGUsZixnLGgpe3ZhciBpPWcuc2lnbkhhbmRsZXIoYyxkLGUsZixnKTtpZighaSYmKGk9Zy5yYWRpeEhhbmRsZXIoYyxkLGUsZixnKSwhaSYmKGk9Zj9uZXcgUmVnRXhwKFwiWzAtOVwiK2IuZXNjYXBlUmVnZXgoZy5ncm91cFNlcGFyYXRvcikrXCJdXCIpLnRlc3QoYyk6bmV3IFJlZ0V4cChcIlswLTldXCIpLnRlc3QoYyksaT09PSEwJiYoaT1nLmxlYWRpbmdaZXJvSGFuZGxlcihjLGQsZSxmLGcsaCksaT09PSEwKSkpKXt2YXIgaj1hLmluQXJyYXkoZy5yYWRpeFBvaW50LGQuYnVmZmVyKTtpPWohPT0tMSYmKGcuZGlnaXRzT3B0aW9uYWw9PT0hMXx8ZC52YWxpZFBvc2l0aW9uc1tlXSkmJmcubnVtZXJpY0lucHV0IT09ITAmJmU+aiYmIWY/e3BvczplLHJlbW92ZTplfTp7cG9zOmV9fXJldHVybiBpfSxjYXJkaW5hbGl0eToxfSxcIitcIjp7dmFsaWRhdG9yOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9ZS5zaWduSGFuZGxlcihhLGIsYyxkLGUpO3JldHVybiFmJiYoZCYmZS5hbGxvd01pbnVzJiZhPT09ZS5uZWdhdGlvblN5bWJvbC5mcm9udHx8ZS5hbGxvd01pbnVzJiZcIi1cIj09PWF8fGUuYWxsb3dQbHVzJiZcIitcIj09PWEpJiYoZj0hKCFkJiZcIi1cIj09PWEpfHwoXCJcIiE9PWUubmVnYXRpb25TeW1ib2wuYmFjaz97cG9zOmMsYzpcIi1cIj09PWE/ZS5uZWdhdGlvblN5bWJvbC5mcm9udDpcIitcIixjYXJldDpjKzEsaW5zZXJ0Ontwb3M6Yi5idWZmZXIubGVuZ3RoLGM6ZS5uZWdhdGlvblN5bWJvbC5iYWNrfX06e3BvczpjLGM6XCItXCI9PT1hP2UubmVnYXRpb25TeW1ib2wuZnJvbnQ6XCIrXCIsY2FyZXQ6YysxfSkpLGZ9LGNhcmRpbmFsaXR5OjEscGxhY2Vob2xkZXI6XCJcIn0sXCItXCI6e3ZhbGlkYXRvcjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWUuc2lnbkhhbmRsZXIoYSxiLGMsZCxlKTtyZXR1cm4hZiYmZCYmZS5hbGxvd01pbnVzJiZhPT09ZS5uZWdhdGlvblN5bWJvbC5iYWNrJiYoZj0hMCksZn0sY2FyZGluYWxpdHk6MSxwbGFjZWhvbGRlcjpcIlwifSxcIjpcIjp7dmFsaWRhdG9yOmZ1bmN0aW9uKGEsYyxkLGUsZil7dmFyIGc9Zi5zaWduSGFuZGxlcihhLGMsZCxlLGYpO2lmKCFnKXt2YXIgaD1cIltcIitiLmVzY2FwZVJlZ2V4KGYucmFkaXhQb2ludCkrXCJdXCI7Zz1uZXcgUmVnRXhwKGgpLnRlc3QoYSksZyYmYy52YWxpZFBvc2l0aW9uc1tkXSYmYy52YWxpZFBvc2l0aW9uc1tkXS5tYXRjaC5wbGFjZWhvbGRlcj09PWYucmFkaXhQb2ludCYmKGc9e2NhcmV0OmQrMX0pfXJldHVybiBnfSxjYXJkaW5hbGl0eToxLHBsYWNlaG9sZGVyOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJhZGl4UG9pbnR9fX0sb25Vbk1hc2s6ZnVuY3Rpb24oYSxjLGQpe2lmKFwiXCI9PT1jJiZkLm51bGxhYmxlPT09ITApcmV0dXJuIGM7dmFyIGU9YS5yZXBsYWNlKGQucHJlZml4LFwiXCIpO3JldHVybiBlPWUucmVwbGFjZShkLnN1ZmZpeCxcIlwiKSxlPWUucmVwbGFjZShuZXcgUmVnRXhwKGIuZXNjYXBlUmVnZXgoZC5ncm91cFNlcGFyYXRvciksXCJnXCIpLFwiXCIpLGQudW5tYXNrQXNOdW1iZXI/KFwiXCIhPT1kLnJhZGl4UG9pbnQmJmUuaW5kZXhPZihkLnJhZGl4UG9pbnQpIT09LTEmJihlPWUucmVwbGFjZShiLmVzY2FwZVJlZ2V4LmNhbGwodGhpcyxkLnJhZGl4UG9pbnQpLFwiLlwiKSksTnVtYmVyKGUpKTplfSxpc0NvbXBsZXRlOmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS5qb2luKFwiXCIpLGU9YS5zbGljZSgpO2lmKGMucG9zdEZvcm1hdChlLDAsYyksZS5qb2luKFwiXCIpIT09ZClyZXR1cm4hMTt2YXIgZj1kLnJlcGxhY2UoYy5wcmVmaXgsXCJcIik7cmV0dXJuIGY9Zi5yZXBsYWNlKGMuc3VmZml4LFwiXCIpLGY9Zi5yZXBsYWNlKG5ldyBSZWdFeHAoYi5lc2NhcGVSZWdleChjLmdyb3VwU2VwYXJhdG9yKSxcImdcIiksXCJcIiksXCIsXCI9PT1jLnJhZGl4UG9pbnQmJihmPWYucmVwbGFjZShiLmVzY2FwZVJlZ2V4KGMucmFkaXhQb2ludCksXCIuXCIpKSxpc0Zpbml0ZShmKX0sb25CZWZvcmVNYXNrOmZ1bmN0aW9uKGEsYyl7aWYoYy5udW1lcmljSW5wdXQ9PT0hMCYmKGE9YS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSksXCJcIiE9PWMucmFkaXhQb2ludCYmaXNGaW5pdGUoYSkpe3ZhciBkPWEuc3BsaXQoXCIuXCIpLGU9XCJcIiE9PWMuZ3JvdXBTZXBhcmF0b3I/cGFyc2VJbnQoYy5ncm91cFNpemUpOjA7Mj09PWQubGVuZ3RoJiYoZFswXS5sZW5ndGg+ZXx8ZFsxXS5sZW5ndGg+ZSkmJihhPWEudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLGMucmFkaXhQb2ludCkpfXZhciBmPWEubWF0Y2goLywvZyksZz1hLm1hdGNoKC9cXC4vZyk7aWYoZyYmZj9nLmxlbmd0aD5mLmxlbmd0aD8oYT1hLnJlcGxhY2UoL1xcLi9nLFwiXCIpLGE9YS5yZXBsYWNlKFwiLFwiLGMucmFkaXhQb2ludCkpOmYubGVuZ3RoPmcubGVuZ3RoPyhhPWEucmVwbGFjZSgvLC9nLFwiXCIpLGE9YS5yZXBsYWNlKFwiLlwiLGMucmFkaXhQb2ludCkpOmE9YS5pbmRleE9mKFwiLlwiKTxhLmluZGV4T2YoXCIsXCIpP2EucmVwbGFjZSgvXFwuL2csXCJcIik6YT1hLnJlcGxhY2UoLywvZyxcIlwiKTphPWEucmVwbGFjZShuZXcgUmVnRXhwKGIuZXNjYXBlUmVnZXgoYy5ncm91cFNlcGFyYXRvciksXCJnXCIpLFwiXCIpLDA9PT1jLmRpZ2l0cyYmKGEuaW5kZXhPZihcIi5cIikhPT0tMT9hPWEuc3Vic3RyaW5nKDAsYS5pbmRleE9mKFwiLlwiKSk6YS5pbmRleE9mKFwiLFwiKSE9PS0xJiYoYT1hLnN1YnN0cmluZygwLGEuaW5kZXhPZihcIixcIikpKSksXCJcIiE9PWMucmFkaXhQb2ludCYmaXNGaW5pdGUoYy5kaWdpdHMpJiZhLmluZGV4T2YoYy5yYWRpeFBvaW50KSE9PS0xKXt2YXIgaD1hLnNwbGl0KGMucmFkaXhQb2ludCksaT1oWzFdLm1hdGNoKG5ldyBSZWdFeHAoXCJcXFxcZCpcIikpWzBdO2lmKHBhcnNlSW50KGMuZGlnaXRzKTxpLnRvU3RyaW5nKCkubGVuZ3RoKXt2YXIgaj1NYXRoLnBvdygxMCxwYXJzZUludChjLmRpZ2l0cykpO2E9YS5yZXBsYWNlKGIuZXNjYXBlUmVnZXgoYy5yYWRpeFBvaW50KSxcIi5cIiksYT1NYXRoLnJvdW5kKHBhcnNlRmxvYXQoYSkqaikvaixhPWEudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLGMucmFkaXhQb2ludCl9fXJldHVybiBjLm51bWVyaWNJbnB1dD09PSEwJiYoYT1hLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpKSxhLnRvU3RyaW5nKCl9LGNhbkNsZWFyUG9zaXRpb246ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLnZhbGlkUG9zaXRpb25zW2JdLmlucHV0LGc9ZiE9PWUucmFkaXhQb2ludHx8bnVsbCE9PWEudmFsaWRQb3NpdGlvbnNbYl0ubWF0Y2guZm4mJmUuZGVjaW1hbFByb3RlY3Q9PT0hMXx8aXNGaW5pdGUoZil8fGI9PT1jfHxmPT09ZS5ncm91cFNlcGFyYXRvcnx8Zj09PWUubmVnYXRpb25TeW1ib2wuZnJvbnR8fGY9PT1lLm5lZ2F0aW9uU3ltYm9sLmJhY2s7cmV0dXJuIGd9LG9uS2V5RG93bjpmdW5jdGlvbihjLGQsZSxmKXt2YXIgZz1hKHRoaXMpO2lmKGMuY3RybEtleSlzd2l0Y2goYy5rZXlDb2RlKXtjYXNlIGIua2V5Q29kZS5VUDpnLnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkrcGFyc2VJbnQoZi5zdGVwKSksZy50cmlnZ2VyKFwic2V0dmFsdWVcIik7YnJlYWs7Y2FzZSBiLmtleUNvZGUuRE9XTjpnLnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSktcGFyc2VJbnQoZi5zdGVwKSksZy50cmlnZ2VyKFwic2V0dmFsdWVcIil9fX0sY3VycmVuY3k6e3ByZWZpeDpcIiQgXCIsZ3JvdXBTZXBhcmF0b3I6XCIsXCIsYWxpYXM6XCJudW1lcmljXCIscGxhY2Vob2xkZXI6XCIwXCIsYXV0b0dyb3VwOiEwLGRpZ2l0czoyLGRpZ2l0c09wdGlvbmFsOiExLGNsZWFyTWFza09uTG9zdEZvY3VzOiExfSxkZWNpbWFsOnthbGlhczpcIm51bWVyaWNcIn0saW50ZWdlcjp7YWxpYXM6XCJudW1lcmljXCIsZGlnaXRzOjAscmFkaXhQb2ludDpcIlwifSxwZXJjZW50YWdlOnthbGlhczpcIm51bWVyaWNcIixkaWdpdHM6MixyYWRpeFBvaW50OlwiLlwiLHBsYWNlaG9sZGVyOlwiMFwiLGF1dG9Hcm91cDohMSxtaW46MCxtYXg6MTAwLHN1ZmZpeDpcIiAlXCIsYWxsb3dQbHVzOiExLGFsbG93TWludXM6ITF9fSksYn0oalF1ZXJ5LElucHV0bWFzayksZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7dmFyIGM9KGEubWFza3x8YSkucmVwbGFjZSgvIy9nLFwiOVwiKS5yZXBsYWNlKC9cXCkvLFwiOVwiKS5yZXBsYWNlKC9bKygpIy1dL2csXCJcIiksZD0oYi5tYXNrfHxiKS5yZXBsYWNlKC8jL2csXCI5XCIpLnJlcGxhY2UoL1xcKS8sXCI5XCIpLnJlcGxhY2UoL1srKCkjLV0vZyxcIlwiKSxlPShhLm1hc2t8fGEpLnNwbGl0KFwiI1wiKVswXSxmPShiLm1hc2t8fGIpLnNwbGl0KFwiI1wiKVswXTtyZXR1cm4gMD09PWYuaW5kZXhPZihlKT8tMTowPT09ZS5pbmRleE9mKGYpPzE6Yy5sb2NhbGVDb21wYXJlKGQpfXZhciBkPWIucHJvdG90eXBlLmFuYWx5c2VNYXNrO3JldHVybiBiLnByb3RvdHlwZS5hbmFseXNlTWFzaz1mdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGUoYSxjLGQpe2M9Y3x8XCJcIixkPWR8fGcsXCJcIiE9PWMmJihkW2NdPXt9KTtmb3IodmFyIGY9XCJcIixoPWRbY118fGQsaT1hLmxlbmd0aC0xO2k+PTA7aS0tKWI9YVtpXS5tYXNrfHxhW2ldLGY9Yi5zdWJzdHIoMCwxKSxoW2ZdPWhbZl18fFtdLGhbZl0udW5zaGlmdChiLnN1YnN0cigxKSksYS5zcGxpY2UoaSwxKTtmb3IodmFyIGogaW4gaCloW2pdLmxlbmd0aD41MDAmJmUoaFtqXS5zbGljZSgpLGosaCl9ZnVuY3Rpb24gZihiKXt2YXIgZD1cIlwiLGU9W107Zm9yKHZhciBnIGluIGIpYS5pc0FycmF5KGJbZ10pPzE9PT1iW2ddLmxlbmd0aD9lLnB1c2goZytiW2ddKTplLnB1c2goZytjLmdyb3VwbWFya2VyLnN0YXJ0K2JbZ10uam9pbihjLmdyb3VwbWFya2VyLmVuZCtjLmFsdGVybmF0b3JtYXJrZXIrYy5ncm91cG1hcmtlci5zdGFydCkrYy5ncm91cG1hcmtlci5lbmQpOmUucHVzaChnK2YoYltnXSkpO3JldHVybiBkKz0xPT09ZS5sZW5ndGg/ZVswXTpjLmdyb3VwbWFya2VyLnN0YXJ0K2Uuam9pbihjLmdyb3VwbWFya2VyLmVuZCtjLmFsdGVybmF0b3JtYXJrZXIrYy5ncm91cG1hcmtlci5zdGFydCkrYy5ncm91cG1hcmtlci5lbmR9dmFyIGc9e307Yy5waG9uZUNvZGVzJiZjLnBob25lQ29kZXMubGVuZ3RoPjFlMyYmKGI9Yi5zdWJzdHIoMSxiLmxlbmd0aC0yKSxlKGIuc3BsaXQoYy5ncm91cG1hcmtlci5lbmQrYy5hbHRlcm5hdG9ybWFya2VyK2MuZ3JvdXBtYXJrZXIuc3RhcnQpKSxiPWYoZykpO3ZhciBoPWQuY2FsbCh0aGlzLGIsYyk7cmV0dXJuIGh9LGIuZXh0ZW5kQWxpYXNlcyh7YWJzdHJhY3RwaG9uZTp7Z3JvdXBtYXJrZXI6e3N0YXJ0OlwiPFwiLGVuZDpcIj5cIn0sY291bnRyeWNvZGU6XCJcIixwaG9uZUNvZGVzOltdLG1hc2s6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGVmaW5pdGlvbnM9e1wiI1wiOmEuZGVmaW5pdGlvbnNbOV19LGEucGhvbmVDb2Rlcy5zb3J0KGMpfSxrZWVwU3RhdGljOiEwLG9uQmVmb3JlTWFzazpmdW5jdGlvbihhLGIpe3ZhciBjPWEucmVwbGFjZSgvXjB7MSwyfS8sXCJcIikucmVwbGFjZSgvW1xcc10vZyxcIlwiKTtyZXR1cm4oYy5pbmRleE9mKGIuY291bnRyeWNvZGUpPjF8fGMuaW5kZXhPZihiLmNvdW50cnljb2RlKT09PS0xKSYmKGM9XCIrXCIrYi5jb3VudHJ5Y29kZStjKSxjfSxvblVuTWFzazpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGJ9LGlucHV0bW9kZTpcInRlbFwifX0pLGJ9KGpRdWVyeSxJbnB1dG1hc2spLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGIuZXh0ZW5kQWxpYXNlcyh7UmVnZXg6e21hc2s6XCJyXCIsZ3JlZWR5OiExLHJlcGVhdDpcIipcIixyZWdleDpudWxsLHJlZ2V4VG9rZW5zOm51bGwsdG9rZW5pemVyOi9cXFtcXF4/XT8oPzpbXlxcXFxcXF1dK3xcXFxcW1xcU1xcc10/KSpdP3xcXFxcKD86MCg/OlswLTNdWzAtN117MCwyfXxbNC03XVswLTddPyk/fFsxLTldWzAtOV0qfHhbMC05QS1GYS1mXXsyfXx1WzAtOUEtRmEtZl17NH18Y1tBLVphLXpdfFtcXFNcXHNdPyl8XFwoKD86XFw/Wzo9IV0/KT98KD86Wz8qK118XFx7WzAtOV0rKD86LFswLTldKik/XFx9KVxcPz98W14uPyorXiR7WygpfFxcXFxdK3wuL2cscXVhbnRpZmllckZpbHRlcjovWzAtOV0rW14sXS8saXNDb21wbGV0ZTpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgUmVnRXhwKGIucmVnZXgpLnRlc3QoYS5qb2luKFwiXCIpKX0sZGVmaW5pdGlvbnM6e3I6e3ZhbGlkYXRvcjpmdW5jdGlvbihiLGMsZCxlLGYpe2Z1bmN0aW9uIGcoYSxiKXt0aGlzLm1hdGNoZXM9W10sdGhpcy5pc0dyb3VwPWF8fCExLHRoaXMuaXNRdWFudGlmaWVyPWJ8fCExLHRoaXMucXVhbnRpZmllcj17bWluOjEsbWF4OjF9LHRoaXMucmVwZWF0ZXJQYXJ0PXZvaWQgMH1mdW5jdGlvbiBoKCl7dmFyIGEsYixjPW5ldyBnLGQ9W107Zm9yKGYucmVnZXhUb2tlbnM9W107YT1mLnRva2VuaXplci5leGVjKGYucmVnZXgpOylzd2l0Y2goYj1hWzBdLGIuY2hhckF0KDApKXtjYXNlXCIoXCI6ZC5wdXNoKG5ldyBnKCghMCkpKTticmVhaztjYXNlXCIpXCI6az1kLnBvcCgpLGQubGVuZ3RoPjA/ZFtkLmxlbmd0aC0xXS5tYXRjaGVzLnB1c2goayk6Yy5tYXRjaGVzLnB1c2goayk7YnJlYWs7Y2FzZVwie1wiOmNhc2VcIitcIjpjYXNlXCIqXCI6dmFyIGU9bmV3IGcoKCExKSwoITApKTtiPWIucmVwbGFjZSgvW3t9XS9nLFwiXCIpO3ZhciBoPWIuc3BsaXQoXCIsXCIpLGk9aXNOYU4oaFswXSk/aFswXTpwYXJzZUludChoWzBdKSxqPTE9PT1oLmxlbmd0aD9pOmlzTmFOKGhbMV0pP2hbMV06cGFyc2VJbnQoaFsxXSk7aWYoZS5xdWFudGlmaWVyPXttaW46aSxtYXg6an0sZC5sZW5ndGg+MCl7dmFyIGw9ZFtkLmxlbmd0aC0xXS5tYXRjaGVzO2E9bC5wb3AoKSxhLmlzR3JvdXB8fChrPW5ldyBnKCghMCkpLGsubWF0Y2hlcy5wdXNoKGEpLGE9ayksbC5wdXNoKGEpLGwucHVzaChlKX1lbHNlIGE9Yy5tYXRjaGVzLnBvcCgpLGEuaXNHcm91cHx8KGs9bmV3IGcoKCEwKSksay5tYXRjaGVzLnB1c2goYSksYT1rKSxjLm1hdGNoZXMucHVzaChhKSxjLm1hdGNoZXMucHVzaChlKTticmVhaztkZWZhdWx0OmQubGVuZ3RoPjA/ZFtkLmxlbmd0aC0xXS5tYXRjaGVzLnB1c2goYik6Yy5tYXRjaGVzLnB1c2goYil9Yy5tYXRjaGVzLmxlbmd0aD4wJiZmLnJlZ2V4VG9rZW5zLnB1c2goYyl9ZnVuY3Rpb24gaShiLGMpe3ZhciBkPSExO2MmJihtKz1cIihcIixvKyspO2Zvcih2YXIgZT0wO2U8Yi5tYXRjaGVzLmxlbmd0aDtlKyspe3ZhciBmPWIubWF0Y2hlc1tlXTtpZihmLmlzR3JvdXA9PT0hMClkPWkoZiwhMCk7ZWxzZSBpZihmLmlzUXVhbnRpZmllcj09PSEwKXt2YXIgZz1hLmluQXJyYXkoZixiLm1hdGNoZXMpLGg9Yi5tYXRjaGVzW2ctMV0saz1tO2lmKGlzTmFOKGYucXVhbnRpZmllci5tYXgpKXtmb3IoO2YucmVwZWF0ZXJQYXJ0JiZmLnJlcGVhdGVyUGFydCE9PW0mJmYucmVwZWF0ZXJQYXJ0Lmxlbmd0aD5tLmxlbmd0aCYmIShkPWkoaCwhMCkpOyk7ZD1kfHxpKGgsITApLGQmJihmLnJlcGVhdGVyUGFydD1tKSxtPWsrZi5xdWFudGlmaWVyLm1heH1lbHNle2Zvcih2YXIgbD0wLG49Zi5xdWFudGlmaWVyLm1heC0xO2w8biYmIShkPWkoaCwhMCkpO2wrKyk7bT1rK1wie1wiK2YucXVhbnRpZmllci5taW4rXCIsXCIrZi5xdWFudGlmaWVyLm1heCtcIn1cIn19ZWxzZSBpZih2b2lkIDAhPT1mLm1hdGNoZXMpZm9yKHZhciBwPTA7cDxmLmxlbmd0aCYmIShkPWkoZltwXSxjKSk7cCsrKTtlbHNle3ZhciBxO2lmKFwiW1wiPT1mLmNoYXJBdCgwKSl7cT1tLHErPWY7Zm9yKHZhciByPTA7cjxvO3IrKylxKz1cIilcIjt2YXIgcz1uZXcgUmVnRXhwKFwiXihcIitxK1wiKSRcIik7ZD1zLnRlc3Qoail9ZWxzZSBmb3IodmFyIHQ9MCx1PWYubGVuZ3RoO3Q8dTt0KyspaWYoXCJcXFxcXCIhPT1mLmNoYXJBdCh0KSl7cT1tLHErPWYuc3Vic3RyKDAsdCsxKSxxPXEucmVwbGFjZSgvXFx8JC8sXCJcIik7Zm9yKHZhciByPTA7cjxvO3IrKylxKz1cIilcIjt2YXIgcz1uZXcgUmVnRXhwKFwiXihcIitxK1wiKSRcIik7aWYoZD1zLnRlc3QoaikpYnJlYWt9bSs9Zn1pZihkKWJyZWFrfXJldHVybiBjJiYobSs9XCIpXCIsby0tKSxkfXZhciBqLGssbD1jLmJ1ZmZlci5zbGljZSgpLG09XCJcIixuPSExLG89MDtudWxsPT09Zi5yZWdleFRva2VucyYmaCgpLGwuc3BsaWNlKGQsMCxiKSxqPWwuam9pbihcIlwiKTtmb3IodmFyIHA9MDtwPGYucmVnZXhUb2tlbnMubGVuZ3RoO3ArKyl7dmFyIHE9Zi5yZWdleFRva2Vuc1twXTtpZihuPWkocSxxLmlzR3JvdXApKWJyZWFrfXJldHVybiBufSxjYXJkaW5hbGl0eToxfX19fSksYn0oalF1ZXJ5LElucHV0bWFzayk7IiwiLyogUnVzc2lhbiBsb2NhbHMgZm9yIGZsYXRwaWNrciAqL1xudmFyIEZsYXRwaWNrciA9IEZsYXRwaWNrciB8fCB7IGwxMG5zOiB7fSB9O1xuRmxhdHBpY2tyLmwxMG5zLnJ1ID0ge307XG5cbkZsYXRwaWNrci5sMTBucy5ydS5maXJzdERheU9mV2VlayA9IDE7IC8vIE1vbmRheVxuXG5GbGF0cGlja3IubDEwbnMucnUud2Vla2RheXMgPSB7XG5cdHNob3J0aGFuZDogWyfQktGBJywgJ9Cf0L0nLCAn0JLRgicsICfQodGAJywgJ9Cn0YInLCAn0J/RgicsICfQodCxJ10sXG5cdGxvbmdoYW5kOiBbJ9CS0L7RgdC60YDQtdGB0LXQvdGM0LUnLCAn0J/QvtC90LXQtNC10LvRjNC90LjQuicsICfQktGC0L7RgNC90LjQuicsICfQodGA0LXQtNCwJywgJ9Cn0LXRgtCy0LXRgNCzJywgJ9Cf0Y/RgtC90LjRhtCwJywgJ9Ch0YPQsdCx0L7RgtCwJ11cbn07XG5cbkZsYXRwaWNrci5sMTBucy5ydS5tb250aHMgPSB7XG5cdHNob3J0aGFuZDogWyfQr9C90LInLCAn0KTQtdCyJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCzJywgJ9Ch0LXQvScsICfQntC60YInLCAn0J3QvtGPJywgJ9CU0LXQuiddLFxuXHRsb25naGFuZDogWyfQr9C90LLQsNGA0YwnLCAn0KTQtdCy0YDQsNC70YwnLCAn0JzQsNGA0YInLCAn0JDQv9GA0LXQu9GMJywgJ9Cc0LDQuScsICfQmNGO0L3RjCcsICfQmNGO0LvRjCcsICfQkNCy0LPRg9GB0YInLCAn0KHQtdC90YLRj9Cx0YDRjCcsICfQntC60YLRj9Cx0YDRjCcsICfQndC+0Y/QsdGA0YwnLCAn0JTQtdC60LDQsdGA0YwnXVxufTtcbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gRmxhdHBpY2tyLmwxMG5zO1xufSIsInZhciBtZXNzYWdlc1J1ID0ge1xuICAgIGFscGhhX2Rhc2g6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC80L7QttC10YIg0YHQvtC00LXRgNC20LDRgtGMINGC0L7Qu9GM0LrQviDQsdGD0LrQstGLLCDRhtC40YTRgNGLINC4INC00LXRhNC40YEuXCIpOyB9LFxuICAgIGFscGhhX251bTogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LzQvtC20LXRgiDRgdC+0LTQtdGA0LbQsNGC0Ywg0YLQvtC70YzQutC+INCx0YPQutCy0Ysg0Lgg0YbQuNGE0YDRiy5cIik7IH0sXG4gICAgYWxwaGFfc3BhY2VzOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcItCf0L7Qu9C1IFwiICsgZmllbGQgKyBcIiDQvNC+0LbQtdGCINGB0L7QtNC10YDQttCw0YLRjCDRgtC+0LvRjNC60L4g0LHRg9C60LLRiyDQuCDQv9GA0L7QsdC10LvRiy5cIik7IH0sXG4gICAgYWxwaGE6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC80L7QttC10YIg0YHQvtC00LXRgNC20LDRgtGMINGC0L7Qu9GM0LrQviDQsdGD0LrQstC10L3QvdGL0LUg0LfQvdCw0LrQuC5cIik7IH0sXG4gICAgYmV0d2VlbjogZnVuY3Rpb24gKGZpZWxkLCByZWYpIHtcbiAgICAgICAgdmFyIG1pbiA9IHJlZlswXTtcbiAgICAgICAgdmFyIG1heCA9IHJlZlsxXTtcblxuICAgICAgICByZXR1cm4gKFwi0JfQvdCw0YfQtdC90LjQtSDQv9C+0LvRjyBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMINC80LXQttC00YMgXCIgKyBtaW4gKyBcIiDQuCBcIiArIG1heCArIFwiLlwiKTtcbiAgICB9LFxuICAgIGNvbmZpcm1lZDogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0L3QtSDRgdC+0LLQv9Cw0LTQsNC10YIuXCIpOyB9LFxuICAgIGNyZWRpdF9jYXJkOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcItCf0L7Qu9C1IFwiICsgZmllbGQgKyBcIiDQvdC1INCy0LDQu9C40LTQvdC+LlwiKTsgfSxcbiAgICBkZWNpbWFsOiBmdW5jdGlvbiAoZmllbGQsIHJlZikge1xuICAgICAgICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0gWycqJ107XG4gICAgICAgIHZhciBkZWNpbWFscyA9IHJlZlswXTtcblxuICAgICAgICByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC00L7Qu9C20L3QviDQsdGL0YLRjCDRh9C40YHQu9C+0LLRi9C8INC4INC80L7QttC10YIg0YHQvtC00LXRgNC20LDRgtGMIFwiICsgKGRlY2ltYWxzID09PSAnKicgPyAnJyA6IGRlY2ltYWxzKSArIFwiINC00LXRgdGP0YLQuNGH0L3Ri9GFINGH0LjRgdC70LAuXCIpO1xuICAgIH0sXG4gICAgZGlnaXRzOiBmdW5jdGlvbiAoZmllbGQsIHJlZikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gcmVmWzBdO1xuXG4gICAgICAgIHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMINGH0LjRgdC70L7QstGL0Lwg0Lgg0YLQvtGH0L3QviDRgdC+0LTQtdGA0LbQsNGC0YwgXCIgKyBsZW5ndGggKyBcIiDRhtC40YTRgNGLLlwiKTtcbiAgICB9LFxuICAgIGRpbWVuc2lvbnM6IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IHJlZlswXTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJlZlsxXTtcblxuICAgICAgICByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC00L7Qu9C20L3QviDQsdGL0YLRjCBcIiArIHdpZHRoICsgXCIg0L/QuNC60YHQtdC70LXQuSDQvdCwIFwiICsgaGVpZ2h0ICsgXCIg0L/QuNC60YHQtdC70LXQuS5cIik7XG4gICAgfSxcbiAgICBlbWFpbDogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMINC00LXQudGB0YLQstC40YLQtdC70YzQvdGL0Lwg0Y3Qu9C10LrRgtGA0L7QvdC90YvQvCDQsNC00YDQtdGB0L7QvC5cIik7IH0sXG4gICAgZXh0OiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcItCf0L7Qu9C1IFwiICsgZmllbGQgKyBcIiDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0LTQtdC50YHRgtCy0LjRgtC10LvRjNC90YvQvCDRhNCw0LnQu9C+0LwuXCIpOyB9LFxuICAgIGltYWdlOiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcItCf0L7Qu9C1IFwiICsgZmllbGQgKyBcIiDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0LjQt9C+0LHRgNCw0LbQtdC90LjQtdC8LlwiKTsgfSxcbiAgICBpbjogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMINC00L7Qv9GD0YHRgtC40LzRi9C8INC30L3QsNGH0LXQvdC40LXQvC5cIik7IH0sXG4gICAgaXA6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC00L7Qu9C20L3QviDQsdGL0YLRjCDQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3Ri9C8IElQLdCw0LTRgNC10YHQvtC8LlwiKTsgfSxcbiAgICBtYXg6IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSByZWZbMF07XG5cbiAgICAgICAgcmV0dXJuIChcItCf0L7Qu9C1IFwiICsgZmllbGQgKyBcIiDQvdC1INC80L7QttC10YIg0LHRi9GC0Ywg0LHQvtC70LXQtSBcIiArIGxlbmd0aCArIFwiINGB0LjQvNCy0L7Qu9C+0LIuXCIpO1xuICAgIH0sXG4gICAgbWF4X3ZhbHVlOiBmdW5jdGlvbiAoZmllbGQsIHJlZikge1xuICAgICAgICB2YXIgbWF4ID0gcmVmWzBdO1xuXG4gICAgICAgIHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMIFwiICsgbWF4ICsgXCIg0LjQu9C4INC80LXQvdGM0YjQtS5cIik7XG4gICAgfSxcbiAgICBtaW1lczogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INC40LzQtdGC0Ywg0LTQtdC50YHRgtCy0LjRgtC10LvRjNC90YvQuSDRgtC40L8g0YTQsNC50LvQsC5cIik7IH0sXG4gICAgbWluOiBmdW5jdGlvbiAoZmllbGQsIHJlZikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gcmVmWzBdO1xuXG4gICAgICAgIHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMINC90LUg0LzQtdC90LXQtSBcIiArIGxlbmd0aCArIFwiINGB0LjQvNCy0L7Qu9C+0LIuXCIpO1xuICAgIH0sXG4gICAgbWluX3ZhbHVlOiBmdW5jdGlvbiAoZmllbGQsIHJlZikge1xuICAgICAgICB2YXIgbWluID0gcmVmWzBdO1xuXG4gICAgICAgIHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMIFwiICsgbWluICsgXCIg0LjQu9C4INCx0L7Qu9GM0YjQtS5cIik7XG4gICAgfSxcbiAgICBub3RfaW46IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC00L7Qu9C20L3QviDQsdGL0YLRjCDQtNC+0L/Rg9GB0YLQuNC80YvQvCDQt9C90LDRh9C10L3QuNC10LwuXCIpOyB9LFxuICAgIG51bWVyaWM6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC00L7Qu9C20L3QviDQsdGL0YLRjCDRh9C40YHQu9C+0LwuXCIpOyB9LFxuICAgIHJlZ2V4OiBmdW5jdGlvbiAoZmllbGQpIHsgcmV0dXJuIChcItCk0L7RgNC80LDRgiDQv9C+0LvRjyBcIiArIGZpZWxkICsgXCIg0L3QtdCy0LXRgNC90YvQuS5cIik7IH0sXG4gICAgcmVxdWlyZWQ6IGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gKFwi0J/QvtC70LUgXCIgKyBmaWVsZCArIFwiINC00L7Qu9C20L3QviDQsdGL0YLRjCDQt9Cw0L/QvtC70L3QtdC90L4uXCIpOyB9LFxuICAgIHNpemU6IGZ1bmN0aW9uIChmaWVsZCwgcmVmKSB7XG4gICAgICAgIHZhciBzaXplID0gcmVmWzBdO1xuXG4gICAgICAgIHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0LTQvtC70LbQvdC+INCx0YvRgtGMINC80LXQvdGM0YjQtSwg0YfQtdC8IFwiICsgc2l6ZSArIFwiIEtCLlwiKTtcbiAgICB9LFxuICAgIHVybDogZnVuY3Rpb24gKGZpZWxkKSB7IHJldHVybiAoXCLQn9C+0LvQtSBcIiArIGZpZWxkICsgXCIg0L3QtSDRj9Cy0LvRj9C10YLRgdGPINCy0LDQu9C40LTQvdGL0LwgVVJMLlwiKTsgfVxufTsiLCJ2YXIgdmFsaWRhdGVDb25maWcgPSB7XG4gICAgbG9jYWxlOiAncnUnLFxuICAgIGRpY3Rpb25hcnk6IHtcbiAgICAgICAgcnU6IHtcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc1J1XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGVycm9yQmFnTmFtZTogJ2Zvcm1FcnJvcnMnLFxuICAgIGZpZWxkc0JhZ05hbWU6ICdmb3JtRmllbGRzJ1xufTtcblxuVnVlLnVzZShWZWVWYWxpZGF0ZSwgdmFsaWRhdGVDb25maWcpO1xuXG5WdWUuY29uZmlnLmRlYnVnID0gdHJ1ZTtcblxuVnVlLmNvbXBvbmVudCgnTW9kYWwnLCB7XG4gICAgdGVtcGxhdGU6ICcjbW9kYWwtdGVtcGxhdGUnLFxuICAgIHByb3BzOiBbJ3Nob3cnLCAnb25DbG9zZSddLFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG93ICYmIGUua2V5Q29kZSA9PSAyNykge1xuICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuVnVlLmNvbXBvbmVudCgnTG9naW5Nb2RhbCcsIHtcbiAgICB0ZW1wbGF0ZTogJyNsb2dpbi1tb2RhbC10ZW1wbGF0ZScsXG4gICAgcHJvcHM6IFsnc2hvdyddLFxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRwYXJlbnQuc2hvd0xvZ2luTW9kYWwgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgbG9naW5Qb3N0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL1RPRE86IEFqYXggbG9naW4sIHZhbGlkYXRpb25cbiAgICAgICAgICAgIGFsZXJ0KCdMb2dpbiBjb21wbGV0ZScpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbnZhciB2dWVBcHAgPSBuZXcgVnVlKHtcbiAgICBlbDogJyN2dWUtYXBwJyxcbiAgICBkYXRhOiB7XG4gICAgICAgIGZvcm1BY3RpdmU6IGZhbHNlLFxuICAgICAgICBjdXJyZW50U3RlcDogMSxcbiAgICAgICAgc2hvd0xvZ2luTW9kYWw6IGZhbHNlLFxuICAgICAgICB0aW1lcjogMCxcbiAgICAgICAgYmlydGhkYXlNb250aDogMSxcbiAgICAgICAgYmlydGhkYXlZZWFyOiAxLFxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICAgIFwi0K/QvdCy0LDRgNGMXCIsIFwi0KTQtdCy0YDQsNC70YxcIiwgXCLQnNCw0YDRglwiLCBcItCQ0L/RgNC10LvRjFwiLCBcItCc0LDQuVwiLCBcItCY0Y7QvdGMXCIsIFwi0JjRjtC70YxcIiwgXCLQkNCy0LPRg9GB0YJcIiwgXCLQodC10L3RgtGP0LHRgNGMXCIsIFwi0J7QutGC0Y/QsdGA0YxcIiwgXCLQndC+0Y/QsdGA0YxcIiwgXCLQlNC10LrQsNCx0YDRjFwiXG4gICAgICAgIF0sXG4gICAgICAgIHZvbHVudGVlcjogMFxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgeWVhcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB5ZWFycyA9IFtdLFxuICAgICAgICAgICAgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGk9Y3VycmVudFllYXItNTA7IGk8Y3VycmVudFllYXI7IGkrKykge1xuICAgICAgICAgICAgICAgIHllYXJzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB5ZWFycztcbiAgICAgICAgfSxcbiAgICAgICAgZGF5c0luTW9udGg6IGZ1bmN0aW9uKG1vbnRoLHllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmJpcnRoZGF5WWVhciwgdGhpcy5iaXJ0aGRheU1vbnRoLCAwKS5nZXREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWN0aXZhdGVGb3JtOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgX3RoaXMuZm9ybUFjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgJChlLnRhcmdldCkucmVtb3ZlQ2xhc3MoJ2J1dHRvbi1ibHVlLWhvbGxvdycpLmFkZENsYXNzKCdidXR0b24tYmx1ZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICQoX3RoaXMuJGVsKS5maW5kKCdbZGF0YS1yZW1haW5pbmddJykubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRpbWVyID0gJChfdGhpcy4kZWwpLmZpbmQoJ1tkYXRhLXJlbWFpbmluZ10nKS5kYXRhKCdyZW1haW5pbmcnKTtcblxuICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRpbWVyID4gMCA/IF90aGlzLnRpbWVyICs9IC0gMSA6IGNsZWFySW50ZXJ2YWwodGltZW91dEludGVydmFsKTtcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZG93bmxvYWRBbmRBY3RpdmF0ZUZvcm06IGZ1bmN0aW9uICh1cmwsIGJsb2NrKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBzY3JvbGxUb3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoJy5xdWVzdGlvbi1mb3JtJykub2Zmc2V0KCkudG9wIC0gMzBcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9LFxuICAgICAgICBjaGFuZ2VTdGVwOiBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2NvcGUgPSAnZm9ybS0nICsgX3RoaXMuY3VycmVudFN0ZXA7XG5cbiAgICAgICAgICAgIF90aGlzLiR2YWxpZGF0b3IudmFsaWRhdGVBbGwoY3VycmVudFNjb3BlKS50aGVuKGZ1bmN0aW9uIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRTdGVwID0gc3RlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBhbGVydCgn0J/QvtC20LDQu9GD0LnRgdGC0LAsINC/0YDQvtCy0LXRgNGM0YLQtSDQstGB0LUg0L/QvtC70Y8g0L3QsCDQv9GA0LDQstC40LvRjNC90L7RgdGC0Ywg0LfQsNC/0L7Qu9C90LXQvdC40Y8nKTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNjb3BlRXJyb3JzID0gX3RoaXMuZm9ybUVycm9ycy5lcnJvcnMubWFwKGZ1bmN0aW9uKGZpZWxkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkRXJyb3Iuc2NvcGUgPT0gY3VycmVudFNjb3BlID8gZmllbGRFcnJvciA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL1Njcm9sbCB0byBmaXJzdCBlcnJvciBmaWVsZFxuICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKCdpbnB1dFtuYW1lPVwiJyArIGN1cnJlbnRTY29wZUVycm9yc1swXS5maWVsZCAgKyAnXCJdJykub2Zmc2V0KCkudG9wIC0gMzVcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzdGVwQmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXAtLTtcbiAgICAgICAgfSxcbiAgICAgICAgc3VibWl0Rm9ybTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY3VycmVudFNjb3BlID0gJ2Zvcm0tJyArIF90aGlzLmN1cnJlbnRTdGVwO1xuXG4gICAgICAgICAgICB2YXIgZm9ybVVybCA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpLFxuICAgICAgICAgICAgICAgIGZvcm1NZXRob2QgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdtZXRob2QnKSB8fCAncG9zdCcsXG4gICAgICAgICAgICAgICAgZm9ybURhdGEgPSAkKGV2ZW50LnRhcmdldCkuc2VyaWFsaXplKCk7XG5cbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIEFsbCByZXR1cm5zIGEgcHJvbWlzZSBhbmQgcHJvdmlkZXMgdGhlIHZhbGlkYXRpb24gcmVzdWx0LlxuICAgICAgICAgICAgdGhpcy4kdmFsaWRhdG9yLnZhbGlkYXRlQWxsKGN1cnJlbnRTY29wZSkudGhlbihmdW5jdGlvbiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGZvcm1VcmwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiggbXNnICkge1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE86IGNoZWNrIG1zZyFcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ9CU0LDQvdC90YvQtSDQsdGL0LvQuCDRg9GB0L/QtdGI0L3QviDQvtGC0L/RgNCw0LLQu9C10L3RiyEnKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCfQktC+0LfQvdC40LrQu9CwINC+0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4INC00LDQvdC90YvRhSEg0J/QvtC20LDQu9GD0LnRgdGC0LAsINC/0L7Qv9GA0L7QsdGD0LnRgtC1INC+0YLQv9GA0LDQstC40YLRjCDRhNC+0YDQvNGDINC10YnQtSDRgNCw0LcsINC70LjQsdC+INGB0LLRj9C20LjRgtC10YHRjCDRgSDQvdCw0LzQuC4nKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanFYSFIsIHRleHRTdGF0dXMsIGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBhbGVydCgn0J/QvtC20LDQu9GD0LnRgdGC0LAsINC/0YDQvtCy0LXRgNGM0YLQtSDQstGB0LUg0L/QvtC70Y8g0L3QsCDQv9GA0LDQstC40LvRjNC90L7RgdGC0Ywg0LfQsNC/0L7Qu9C90LXQvdC40Y8nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJy5qcy1kYXRlLXBpY2tlcicpLmZsYXRwaWNrcih7XG4gICAgICAgICAgICBkYXRlRm9ybWF0OiAnZC5tLlknLFxuICAgICAgICAgICAgbG9jYWxlOiAncnUnLFxuICAgICAgICAgICAgbWF4RGF0ZTogbmV3IERhdGUoKVxuICAgICAgICB9KTtcblxuICAgICAgICAkKFwiOmlucHV0XCIpLmlucHV0bWFzaygpO1xuICAgIH1cbn0pO1xuXG4iXX0=
